Last modified:

2022-02-19 15:17:55

Adapted to the situation where:
1) the machine already has Python >= 3.9.7 installed.

2) 3rd party libraries are provided system-wide by the distribution
(boost, Qt5, PyQt5, pytables)

3) source trees for what needs built are now located OUTSIDE the virtual
environment

4) Focussing on Python 3.10 where possible

================================================================================
PREAMBLE
================================================================================
This file describes how to install scipyen and its dependencies in a virtual
environment (python3), independent of the system or local (i.e. "user") python
site packages.

Applies to: GNU/Linux platforms

The advantage of a virtual environment include the possibility of installing and
building software directly in this environment, without the need for administrator
(superuser) privileges, and without interfering with system-wide or account-wide 
software.

This means the software can be uninstalled re-built, etc, without worrying about
the local account or system-wide interference.

Disk space requirements: ~ 5 GiB (including sources and build binary dependencies
in the virtual python environment)

Dependency tree:
---------------
Python >= 3.9

    virtualenv

    packages in pip_requirements.txt

    WARNING: if migrating to a more recent Python version, and there are packages 
    installed via pip as --user, then it is highly likely to have executable python
    scripts in $HOME/.local/bin

    In particular, the script "virtualenv" in $HOME/.local/bin WILL overshadow any
    "virtualenv" script installed in the system-wide site-packages of your desired
    Python version.

    If that is the case then you may forcefully use the latter by launching it 
    with a specific verison of he Python interpreter
    e.g., python3.10 -m virtualenv
    fully qualified path at the command line, OR temporarily rename the 
    $HOME/.local/virtualenv file to something else



VIGRA and its python bindings (vigranumpy) <-   jpeg
                                                tiff   
                                                png
                                                openexr
                                                hdf5
                                                fftw3
                                                doxygen
                                                Python, including:
                                                    boost_python <- boost libraries (python, optionally graph, threads)
                                                    numpy
                                                    sphinx
                                                    nose
         
NOTE: Some distributions MAY offer VIGRA and its devel package. I have yet to
find out if there is any distribution that also includes vigranumpy. Until then,
VIGRA and vigranumpy have to be built inside the virtul environment.


NEURON (optional) <-    libXcomposite
                        bison
                        flex
                        CMake
                        cython
                        mpi
                        ncurses
            
          

The only exception is building Python directly from sources which may require
admin privileges (unless installed in a place in the user's home).

NOTE: Some of these dependencies may already be available from your Linux 
distribution. In that case, it is a matter of choice whether to build these or 
not.

NOTE: Unlike the situation on Windows platform, the 3rd party software (a.k.a
'scipyen_sdk') is installed directly inside the virtual environment. This is
because all the dependencies (libraries, header files, pkgconfig files, etc) are
placed inside a directory tree that follows the directory system structure
of the /usr or /usr/local directory on UNIX (e.g., /usr/lib, /usr/lib64, /usr/man,
etc.).

In theory, the sdk COULD be built in a separate directory tree, but this would
require further changes to environment variables such as PATH, LD_LIBRARY_PATH
and might mess up the installation of 3rd party python modules (vigranumpy, NEURON).

The only benefit might be to create a software bundle with the binaries (as for
done Windows) but this would only be portable among machines with the same
versions for the dependent software libraries, hence not worth the effort.

By comparison, building the 'sdk' is generally well streamlined on Linux.

See also the file 'c_cpp_requirements_unix.txt'

Steps:
================================================================================
0. Clone the Scipyen git repo somewhere convenient (e.g. in $HOME)
================================================================================

    REQUIRES:
        git software (system-wide installation) including gitk and git-gui
            NOTE: get this using your OS distribution's software management - it
            is basic enough to be able to install it in this way; otherwise you
            may have to build & install it from sources
            
        Optional:    
        github cli (for Linux, also for Windows; other platforms may use github 
                    desktop app, you mileage mau vary)
(for various distributions see https://github.com/cli/cli/blob/trunk/docs/install_linux.md)
    
        openSUSE/SUSE Linux (zypper)
            Install:

            sudo zypper addrepo https://cli.github.com/packages/rpm/gh-cli.repo
            sudo zypper ref
            sudo zypper install gh
            
        To use gh you need to authenticate with github (if not already done)
        gh auth login ==> select GitHub.com, then when prompted enter username
            and password (you will have to create a free github account )
            
    Clone scipyen
            gh repo clone ctigaret/scipyen
        
        OR:
        
            git clone https://github.com/ctigaret/scipyen.git
        
        Then cd into scipyen and verify local repo is uptodate with the relevant
        branches:
            
            git checkout master
            git pull
            git checkout work
            git pull
            git checkout dev
            git pull

From now on, ALWAYS make sure you are on the dev branch (this also contains the 
doc/installation directory with pip requirements, etc). You may wish to run at
regular intervals:
    
            git checkout dev
            git pull
            
In the following we assume that scipyen has been cloned in $HOME/scipyen and all
relative paths in this document are RELATIVE to $HOME/scipyen/

================================================================================
1. INSTALL THE FOLLOWING PACKAGES AS PER YOUR OS DISTRIBUTION:
================================================================================
These will be installed system-wide hence will be available regardless of 
whether you are in an activate python virtual environment or not.

Unless specified, these MUST be installed together with their corresponding 
devel packages.

Where appropriate, a MINIMAL version is specified. If the current distribution 
does NOT provide these, then they should be built. Examples on how to do this are
given further below, for Python 3.9.7, boost 1.77.0

        Software                            Required for/by:
        packages
================================================================================
1.1)    Python >=3.9.7                      Running Scipyen
        
        This is necessary to satisfy dependencies of newer version of packages 
        used by Scipyen, such as:
        neo
        
    If not available from your distribution, you may want to build Python from 
    source, and 'make altinstall' (see below, and Python/Unix/README for details)
    
1.2)    boost 1.77 including:               Build VIGRA
        Boost.Python (py3), 
        Boost.Python.NumPy, 
        Boost.MPI,
        Boost.MPI Python 3 serialization, 
        Boost.Thread, 
        Boost.Atomic, 
        Boost.Chrono, 
        Boost.Graph, 
        Boost.Graph parallel
    
    
1.3)    Qt5                                 Scipyen GUI

1.4)    cmake3, cmake3-full                 Build VIGRA and NEURON
    Devel packages NOT necessary.
    

1.5)    zlib                                Build VIGRA
1.6)    hdf5                                Build VIGRA
1.7)    openexr                             Build VIGRA
1.8)    openssl >= 1.11                     Build VIGRA
1.9)    fftw3                               Build VIGRA
        (optionally, but recomended
        with MPI bindings)
1.10)   mpich                               Build NEURON
1.11)   tiff                                Build VIGRA
1.12)   jpeg                                Build VIGRA
1.13)   png                                 Build VIGRA
1.14)   sqlite3                             Build VIGRA
1.15)   libXcomposite  (for NEURON)         Build VIGRA
valgrind (optional)
--------------------
NOTES:
 you also need to install their corresponding devel packages

================================================================================
2. BUILD PYTHON (OPTIONAL, see above)
================================================================================

NOTE: This is RECOMMENDED if the distribution is behind the latest Python by 
(quite) a few minor versions.

For example, OpenSuSE Leap 15.3 installs Python-3.6.12; here, we use Python 
3.9.7 where there have been some significant changes, and because the latest neo 
package doesn't support python < 3.7

NOTE: 2022-01-20 22:02:56 Scipyen code is now essentially using Python3.9!

NOTE: If you choose to build Python then the following Python packages must also
be built locally (from inside the activated virtual python environment, see below):
    sip
    PyQt5
    PyQt5_sip
    tables
        

To build Python from sources (e.g. 3.9.7) see the file:

    $HOME/scipyen/doc/install/Python/Unix/README
    
ATTENTION: To avoid overshadowing/overwriting your system's python3 executable,
ALWAYS run 'make altinstall' AND NOT 'make install' after 'make'-ing the Python
software.

'make altinstall' needs to be followed by running 'ldconfig' (both as superuser)

From here on we assume Python-3.9.7 was built then installed in /usr/local.

================================================================================
3. CREATE A PYTHON VIRTUAL ENVIRONMENT
================================================================================

(see $HOME/scipyen/doc/install/Python/Unix/README for details about creating it
 and then activating it)

From here on we assume the environment directory is $HOME/scipyenv39 (the name
reflects the use of Python-3.9)

================================================================================
3.a IF YOU HAVE BUILT YOUR OWN PYTHON STACK
================================================================================

If using a locally built Python stack AND this is the first time of setting up a 
virtual environment, then run the following bash script ONCE:
    $HOME/scipyen/make_script_links.sh 
    
    this will create a symbolic link from 
    $HOME/scipyen/doc/install/Python/Unix/pyenv to $HOME/pyenv
(see $HOME/scipyen/doc/install/Python/Unix/README for details)

NOTE: If you relocate the 'scipyen' directory you have to recreate these links.
Have a look inside make_script_links.sh bash script to see what it does.

If you plan to use pytables AND you are using your own built Pyton stack, then
you MUST build pytables yourself - see 4.6b, below.

================================================================================
3.b ALIAS THE ACTIVATION SCRIPT IN $HOME/.bashrc
================================================================================
IF YOU HAVE BUILT YOUR OWN PYTHON STACK:
    Insert the following lines in .bashrc:
    alias usepy='source $HOME/bin/pyenv'
    alias scipyact='source $HOME/scipyenv3.10/bin/activate && usepy 3.10'
ELSE:    
    Insert the following line in .bashrc:
    alias scipyact='source $HOME/scipyenv3.10/bin/activate'
    
=================================================================
4. ACTIVATE THE PYTHON VIRTUAL ENVIRONMENT; BUILD DEPENDENCIES(*)
=================================================================
(*) If not installed system-wide. NOTE: You may want to build PyQt5 (see 
    4.1, below) as pip only installs a pre-build wheel containing only the 
    default Qt5 widget style (fusion) and no access to the system's widget 
    styles.
    
    In addition, I recommend building PyQt5 (see c_cpp_requirements_unix.txt,
    and below)

Once the virtual environment has been activated, a new environment variable 
VIRTUAL_ENV becomes available, pointing to the location of the environment's
directory (e.g., $HOME/scipyenv39) so we will use VIRTUAL_ENV through to the
end of this document, when referring to the environment's directory.

NOTE: For convenience, the source trees will be placed in a directory 'src'
inside the virtual environment's directory, i.e., $HOME/scipyenv39/src 
(assuming the virtual environment is in $HOME/scipyenv39, see above).

NOTE that this is NOT necessary - you can have the src located somewhere else, 
e.g. on a larger 'data' partition, but AVOID networked partitions.

NOTE: From here on we assume all source trees are in $VIRTUAL_ENV/src  and
we operate from an activated virtual environment, in the $VIRTUAL_ENV/src directory

--------------------------------------------------------------------------------
4.1 BUILD AND INSTALL sip-5.51, PyQt5-5.15.3, PyQt5_sip-12.8.1 IN THIS ORDER
--------------------------------------------------------------------------------
NOTE: These can also be installed via pip. However, the binary wheel installed
has its own copy of Qt which comes only with a default style ("Fusion", on Linux)
To use the host platform look and feel of Qt widgets you have to build PyQt5 and 
PyQt5.sip as below.

If you are not bothered by this, then skip to (4.2) below after enabling the
instalaltion of PyQt5 (via pip) in pip_requirements_Linux.txt.

For each of these, cd into their source tree and run:

..............
4.1.1 sip:
..............
    Extract sip-5.5.1.dev2011271026.tar.gz from scipyen-dependencies/Unix
    to $VIRTUAL_ENV/src

    cd into the source directory tree,
    activate the virtual environment, then run:
    
    python setup.py build
    python setup.py install
    
..............
4.1.2 PyQt5:
..............
    REQUIRES: Qt5 and Qt5-devel packages installed on the host machine.
    
    Use downloaded PyQt5-5.15.3.dev2012141313.tar.gz from scipyen-dependencies/Unix
    
    PyQt5-5.15.7.dev2202011035.tar.gz from here:

    extract to $VIRTUAL_ENV/src, cd into the source directory tree,
    activate the virtual environment, then run:
    
    python configure.py --confirm-license --qmake=`which qmake-qt5` --designer-plugindir=$VIRTUAL_ENV/lib/qt5/plugins/designer --qml-plugindir=$VIRTUAL_ENV/lib/qt5/plugins/PyQt5 --qsci-api-destdir=$VIRTUAL_ENV/share/qt5 --no-python-dbus --sip=$VIRTUAL_ENV/bin/sip5 > config_output 2>&1
    
    NOTE: configuration output will be redirected to the file config_output
    NOTE: if in trouble at this stage, alsp pass --verbose option to configure.py
    
    make 
    make install
    
    pip list (should indicate PyQt5, sip)
................................
4.1.3 PyQt5.sip extension module:
................................
    Use PyQt5_sip-12.9.1
    python setup.py build
    python setup.py install

    pip show PyQt5-sip <-- verifies that PyQt5 sip module is installed
    
After installing pip requirements below, test that PyQt5  was installed OK
by launching 'jupyter qtconsole' - Qt widgets should have the style used by your
desktop.
    
--------------------------------------------------------------------------------
4.2 INSTALL PIP REQUIREMENTS
--------------------------------------------------------------------------------
call pip install -r $HOME/scipyen/doc/installation/pip_requirements_Linux.txt

WARNING: The installation of PyQt5 wheel using pip is, by default, disabled in
pip_requirements_Linux.txt (the line is simply commented-out) for the reasons
pointed out in (4.1) above.

HOWEVER, PyQt5 IS REQUIRED to run Jupyter qtconsole and Scipyen's GUI. If you
decided NOT to build PyQt5 but to rely on the installation of a binary PyQt5
wheel, then enable the installation of PyQt5 in pip_requirements_Linux.txt first,
by "un-commenting" the line (remove the "#" and any spaces at the beginning of 
the line containing PyQt5).

--------------------------------------------------------------------------------
4.3 BUILD AND INSTALL BOOST LIBRARIES boost_1_77_0.tar.b2
--------------------------------------------------------------------------------

NOTE: Optional, if the system-wide boost libraries are not available for the
version of Python used to build vigranumpy, below. This may include the situation
where some symbols are not found when linking against system-wide boost libs.


On Linux :
    ./bootstrap.sh --prefix=$VIRTUAL_ENV --with-python=/usr/local/bin/python3.9 --with-python-root=/usr/local
    ./b2 --prefix=$VIRTUAL_ENV install

    ATTENTION: make sure you point to the correct Python directories; when using
    a distribution-supplied Python stack, this is usually installed in /usr, e.g.:
    
    --with-python=/usr/bin/python3.10 --with-python-root=/usr

--------------------------------------------------------------------------------
4.4 BUILD AND INSTALL NODEJS node-v15.6.0.tar.gz
--------------------------------------------------------------------------------
  (required to use bokeh with NEURON and jupyterlab)
  
  cd into the extracted source tree then run:
      
      ./configure --prefix=$VIRTUAL_ENV
      make -j4
      make doc
      make install

--------------------------------------------------------------------------------
4.5 BUILD AND INSTALL VIGRA
--------------------------------------------------------------------------------
git clone https://github.com/ukoethe/vigra.git

....................................
4.5.1 create out-of-source build tree
....................................

mkdir vigra-build && cd vigra-build

....................................
4.5.2 If needed, patch vigra sources
....................................

See scipyen/doc/install/vigra_patches/README for details

....................................
4.5.3 configure the build
....................................

cmake-gui ../vigra

        At first run click "configure" then as cmake variables are set or edited
        as below, press "configure" again
        
        In cmake-gui:
            * search for configuration variables containing the string 'INSTALL'
            (without quotes) and adjust them to point to the real path of your
            $VIRTUAL_ENV e.g., set the following variables as follows:
            CMAKE_INSTALL_PREFIX (-DCMAKE_INSTALL_PREFIX=) /home/user/scipyenv
            
            * set LIB_SUFFIX (-DLIB_SUFFIX=) 64 (optional; both lib and lib64 are added to LD_LIBRARY_PATH by the pyenv script)
                    
            * in the "WITH" group, make sure the following are checked (i.e. True): 
            boost-thread, boost-graph, vigranumpy, openexr, valgrind
            
            NOTE:
                1. openexr is optional only of you plan to use openEXR images
                2. valgrind is optional, only is planning to debug software at
                C++ level
            
            WARNING: if you have built boost inside the virtual environment then
            make sure to point to those libraries inside cmake-gui.
            
            NOTE: the various boost*_DIR variables refer to the boost cmake directory
            (for a locally built boost this is in 'lib' directory)
    
            * press configure until all options are satisfied (i.e. nothing is
            highlighted in red anymore) - NOTE: this is a recursive process
            
            * finally, press "Generate" and quit cmake-gui
                
....................................
4.5.4 make & install
....................................
    make
    
    !!! NOTE !!!
    patch vigra-build/vigranumpy/docsrc/conf.py on line 25: 
        (or , better, vigra/vigranumpy/docsrc/conf.py.in on line 25)
        change from:
                except TypeError, e:
        to:
                except TypeError as e:
        (NOTE: this corrects deprecated syntax)
    NOTE: 2022-02-20 22:26:47 the above issue did not come up on Tumbleweed and
        Python 3.10
        
    make doc 
    make install (--> installs in $VIRTUAL_ENV/doc/vigra and $VIRTUAL_ENV/doc/vigranumpy)
    

-------------------------------------------------------------------------------
4.6. BUILD AND INSTALL PyTables (tables)
-------------------------------------------------------------------------------
This is REQUIRED if you are using a built Python stack (see above), but also
helpful when using a virtual environment created with a system-wide python stack.

NOTE: PyTables are available as 'tables'; to use you must 'import tables'
gh repo clone PyTables/PyTables
(or: git clone https://github.com/PyTables/PyTables.git)
cd PyTables
python setup.py build
python setup.py install

Check that importing tables doesn't crash the interpreter:
    
    python
    
    >>> import tables
    >>>
    
-------------------------------------------------------------------------------
4.7 BUILD AND INSTALL NEURON
-------------------------------------------------------------------------------
git clone https://github.com/neuronsimulator/nrn
mkdir nrn-build && cd nrn-build
cmake-gui ../nrn
"Configure" will also pull iv, coreneuron

Example (as of 2022-02-16 12:25:17 on Tumbleweed 20220213) 
    NOTE: SOME OF THESE MAY NOT BE AVAILABLE IN RECENT NEURON git snapshots!!!
        LIBEXECINSTALLDIR=$VIRTUAL_ENV/libexec
        PKGCONFIG_FILES_DIR=$VIRTUAL_ENV/lib64/pkgconfig
        PLUGIN_INSTALL_DIR=$VIRUTAL_ENV/lib64/mod2c
    CMAKE
        CMAKE_INSTALL_PREFIX (-DCMAKE_INSTALL_PREFIX=) $VIRTUAL_ENV
        CMAKE_INSTALL_LIBDIR=lib64
        CMAKE_INSTALL_LIBEXECDIR=libexec
    NRN
        NRN_AVOID_ABSOLUTE_PATHS=true
        NRN_ENABLE_CORENEURON=true
        NRN_ENABLE_INTERVIEWS=true
        NRN_ENABLE_MECH_DLL_STYLE=true
        NRN_ENABLE_MODULE_INSTALL=true
        NRN_ENABLE_INTERNAL_READLINE=false
        NRN_MODULE_INSTALL_OPTIONS --prefix= --home=$VIRTUAL_ENV
        NRN_ENABLE_MPI=true
        NRN_ENABLE_MPI_DYNAMIC=false
        NRN_ENABLE_PYTHON=true (default python3 fallback to python2)
        NRN_ENABLE_PYTHON_DYNAMIC=true
        NRN_ENABLE_REL_RPATH=true
        NRN_ENABLE_RX3D=true
        NRN_ENABLE_SHARED=true
        NRN_ENABLE_TESTS=false
        NRN_ENABLE_THREADS=true
        LIB_INSTALL_DIR=$VIRTUAL_ENV/lib64
        LIB_SUFFIX=64
        IV_ENABLE_SHARED=true
        IV_ENABLE_X11_DYNAMIC=false # NOTE: 2022-02-16 12:50:18 setting to True prevents the GUI from showing!
        MOD2C_ENABLE_LEGACY_UNITS=false
        
make 
make install

    NOTE: Run the following in order to properly install neuron python modules 
    inside the site-packages corresponding  to the environment's python version
    
cd $VIRTUAL_ENV/src/nrn-build/src/nrnpython
    
python setup.py install 
    (to install nrnpython in site-packages)
    
    NOTE: This is IMPORTANT, especially when rebuiling NEURON following a machine
    migration (either to a new distribution or distribution version)
    
    NOTE: Optional: Build neuron documentation locally and install locally 
        (see $VIRTUAL_ENV/src/nrn/docs/README.md)
    
pip3 install -r $VIRTUAL_ENV/src/nrn/docs/docs_requirements.txt
    
    (installs required python packages (e.g.commonmark, sphinx-rtd-theme, 
        recommonmark, plotly, etc) inside the virtual environment)
    
cd $VIRTUAL_ENV/src/nrn-build
make docs (NOTE conversion of some jupyter notebooks this may fail --> no problems;
           until this is solved, use the online documentation)
    
    Optionally, copy/move (or, better make a symbolic link) 
    $VIRTUAL_ENV/src/nrn/docs/_build to $VIRTUAL_ENV/doc/neuron
    

-------------------------------------------------------------------------------
4.8 INSTALL LAST PIP REQUIREMENTS
-------------------------------------------------------------------------------
pip install -r $HOME/scipyen/doc/installation/pip_requirements_3.txt


================================================================================
5. Make final script links while still in the active python virtual environment
================================================================================

cd $HOME/scipyen/
./make_script_links.sh

6. You may optionally create a symbolic link of $HOME/scipyen into $VIRTUAL_ENV.
ln -s $HOME/scipyenv $VIRTUAL_ENV/scipyen

With this final procedure, the $VIRTUAL_ENV directory tree should look like this:
    
  $HOME
        |
        -- scipyenv
                    |
                    -- bin
                    |
                    -- include
                    |
                    -- lib
                    |
                    -- lib64                            
                    |
                    -- nrnipython
                    |
                    -- scipyen
                    |
                    -- src
                        |
                        -- node-xxxx
                        |
                        -- nrn (github clone, done by git )
                        |
                        -- nrn-build   
                        |
                        -- vigra (github clone, done by git)
                        |
                        -- vigra-build
                        |
                        -- sip-xxx
                        |
                        -- PyQt5-xxx
                        |
                        -- PyQt5_sipxxx
        
NOTE: lib64 is typically a symbolic link to lib

================================================================================
7.Optional: Install h5pyViewer
NOTE: This does not seem to be maintained anymore: pip install h5pyViewer fails
================================================================================

Grab the git repo:
    git clone https://github.com/ganymede42/h5pyViewer.git
    
Get your fingers dirty...

================================================================================
                                
                                !!! DONE !!!
                                
================================================================================
