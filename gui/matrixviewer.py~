# -*- coding: utf-8 -*-
"""
Qt5-based viewer window for two dimensional ndarrays

"""
#### BEGIN 3rd party modules
import numpy as np
import vigra
from PyQt5 import QtCore, QtWidgets, QtGui
#### END 3rd party modules

#### BEGIN pict.iolib modules
from iolib import pictio as pio

#### END pict.iolib modules

#### BEGIN pict.gui modules
from .scipyenviewer import ScipyenViewer #, ScipyenFrameViewer
from . import quickdialog
from . import resources_rc
#### END pict.gui modules

class MatrixViewer(ScipyenViewer):
    supported_types = (vigra.filters.Kernel1D, vigra.filters.Kernel2D, vigra.VigraArray, np.ndarray)
    view_action_name = "Matrix"
    
    def __init__(self, data=None, win_title=None, doc_title = None, parent=None, pWin=None, asGUIClient=False):
        super(MatrixViewer, self).__init__(parent)
        
        self.settings         = QtCore.QSettings()
        
        self.__gui_client__         = asGUIClient
        
        self._ID = None
        self._scipyenWindow_ = pWin
        
        #self._defaultCursor = QtGui.QCursor(QtCore.Qt.ArrowCursor)
        
        if isinstance(doc_title, str) and len(doc_title.strip()):
            self._docTitle_ = doc_title
        else:
            self._docTitle_ = None
            
        
        if isinstance(doc_title, str) and len(doc_title.strip()):
            self._docTitle_ = doc_title
        else:
            self._docTitle_ = None
            
        if isinstance(win_title, str) and len(win_title.strip()):
            userWinTitle = win_title
            
        else:
            if self.__scipyenWindow___ is not None:
                viewerVarName = [k for k in self.__scipyenWindow___.workspace.keys() if \
                                type(self.__scipyenWindow___.workspace[k]).__name__ == "SignalViewer" and \
                                self.__scipyenWindow___.workspace[k].ID == self.__scipyenWindow___.currentSignalViewerWindowID]
                
                #print("SignalViewer.__init__ viewerVarName: ", viewerVarName)
                
                if len(viewerVarName):
                    userWinTitle = viewerVarName[-1]
                    
                else:
                    userWinTitle = "%s%d" % (type(self).__name__, self._ID)
                    
            else:
                userWinTitle = "%s%d" % (type(self).__name__, self._ID)
                
        self.__winTitle__ = userWinTitle
        
        if self._docTitle_ is None:
            super().setWindowTitle(self.__winTitle__)
        else:
            super().setWindowTitle(self._docTitle_ + " - " + self.__winTitle__)
        
        if data is not None:
            if isinstance(data, np.ndarray) and data.ndim in (1,2):
                self._array = data
            else:
                raise ValueError("When given, data must be a 1D or 2D numpy array")
            
        else:
            self._array = data
        
        self.fileMenu = self.menuBar().addMenu("&File")
        self.fileMenu.addAction("&Save As...", self.saveAsFile, "Ctrl+Sift+S")
        
        self._tableWidget = QtWidgets.QTableWidget(self)
        #self._tableWidget.setSortingEnabled(False) # this IS the default!
        
        self.setCentralWidget(self._tableWidget)
            
        if not self.__gui_client__:
            windowSize = self.settings.value("/".join([self.__class__.__name__, "WindowSize"]), None)
            if windowSize is not None:
                self.resize(windowSize)
                
            windowPos = self.settings.value("/".join([self.__class__.__name__, "WindowPos"]), None)
            if windowPos is not None:
                self.move(windowPos)
                
            windowState = self.settings.value("/".join([self.__class__.__name__, "WindowState"]), None)
            if windowState is not None:
                self.restoreState(windowState)
                
        self._setupView()
        self.show()
        
    def closeEvent(self, evt):
        if not self.__gui_client__:
            self.settings.setValue("/".join([self.__class__.__name__, "WindowSize"]), self.size())
                
            self.settings.setValue("/".join([self.__class__.__name__, "WindowPos"]), self.pos())
                
            self.settings.setValue("/".join([self.__class__.__name__, "WindowState"]), self.saveState())
            
        evt.accept()
        self.close()

        
    def _setupView(self): # this can be expensive!
        if self._array is None:
            return
        
        if self._array.ndim == 2:
            self._tableWidget.setRowCount(self._array.shape[0])
            self._tableWidget.setVerticalHeaderLabels(["%d" % r for r in range(self._array.shape[0])])
            
            self._tableWidget.setColumnCount(self._array.shape[1])
            self._tableWidget.setHorizontalHeaderLabels(["%d" % c for c in range(self._array.shape[1])])
            
            for c in range(self._array.shape[1]):
                for r in range(self._array.shape[0]):
                    self._tableWidget.setItem(r, c, QtWidgets.QTableWidgetItem("%f" % self._array[r,c]))
            
        elif self._array.ndim == 1:
            self._tableWidget.setRowCount(self._array.size)
            self._tableWidget.setVerticalHeaderLabels(["%d" % r for r in range(self._array.size)])
            
            self._tableWidget.setColumnCount(1)
            self._tableWidget.setHorizontalHeaderLabels(["0"])
            
            for r in range(self._array.size):
                self._tableWidget.setItem(r,0, QtWidgets.QTableWidgetItem("%f" % self._array[r]))
            
        
            
    def setData(self, data, doc_title=None, varname=None):
        if isinstance(data, np.ndarray) and data.ndim in (1,2):
            self._array = data
            
        
        else:
            raise ValueError("Array data must be a 1D or 2D numpy array")
        
        if isinstance(doc_title, str) and len(doc_title.strip()):
            self._docTitle_ = doc_title
            
        if isinstance(varname, str) and len(varname.strip()):
            self._data_var_name_ = varname
        
        self._setupView()
        self.show()
        
    def view(self, data, doc_title=None, varname=None):
        self.setData(data, doc_title=doc_title, varname=varname)
        
    def setTitlePrefix(self, value):
        if isinstance(value, str) and len(value.strip()):
            self.__winTitle__ = value
        
    def setTitle(self, value, prefix=None):
        """Sets the document-specific part (suffix) of the window title"""
        
        if isinstance(prefix, str) and len(prefix.strip()):
            self.__winTitle__ = prefix
        
        if isinstance(value, str) and len(value.strip()):
            self._docTitle_ = value
            self.setWindowTitle("%s - %s" % (self.__winTitle__, self._docTitle_))
        else:
            self._docTitle_ = ""
            self.setWindowTitle(self.__winTitle__)
    
        
    def saveAsFile(self):
        if self._array is None:
            return
        
        filePath, _ = QtWidgets.QFileDialog.getSaveFileName(self, "Save CSV Document", filter="CSV files (*.csv)")
        
        #print("filePath: ", filePath)
        #print("filePath is None: ", filePath is None)
        #if filePath is not None:
            #print("filePath is empty: ", len(filePath) == 0)
            
        if len(filePath) > 0:
            pio.writeCsv(self._array, filePath)
            #outputXmlFile = QtCore.QFile(filePath)
            #if outputXmlFile.open(QtCore.QFile.WriteOnly | QtCore.QFile.Truncate):
                #out = QtCore.QTextStream(outputXmlFile)
                #self.model.domDocument.save(out,4, QtXml.QDomNode.EncodingFromDocument)
                
    @property
    def ID(self):
        return self._ID
    
    @ID.setter
    def ID(self, val):
        self._ID = val
        
        
