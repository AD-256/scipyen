<?xml version="1.0" encoding="UTF-8"?>
<XMI verified="false" timestamp="2019-11-08T22:32:53" xmi.version="1.2" xmlns:UML="http://schema.omg.org/spec/UML/1.4">
 <XMI.header>
  <XMI.documentation>
   <XMI.exporter>umbrello uml modeller http://umbrello.kde.org</XMI.exporter>
   <XMI.exporterVersion>1.6.16</XMI.exporterVersion>
   <XMI.exporterEncoding>UnicodeUTF8</XMI.exporterEncoding>
  </XMI.documentation>
  <XMI.metamodel xmi.name="UML" xmi.version="1.4" href="UML.xml"/>
 </XMI.header>
 <XMI.content>
  <UML:Model isLeaf="false" isAbstract="false" xmi.id="m1" isSpecification="false" name="UML Model" isRoot="false">
   <UML:Namespace.ownedElement>
    <UML:Stereotype namespace="m1" isLeaf="false" isAbstract="false" xmi.id="folder" visibility="public" isSpecification="false" name="folder" isRoot="false"/>
    <UML:Stereotype namespace="m1" isLeaf="false" isAbstract="false" xmi.id="uolUi76kq6Ema" visibility="public" isSpecification="false" name="QtWidgets.QMainWindow" isRoot="false"/>
    <UML:Stereotype namespace="m1" isLeaf="false" isAbstract="false" xmi.id="class-or-package" visibility="public" isSpecification="false" name="class-or-package" isRoot="false"/>
    <UML:Model namespace="m1" isLeaf="false" isAbstract="false" xmi.id="Logical_View" visibility="public" isSpecification="false" name="Logical View" isRoot="false">
     <UML:Namespace.ownedElement>
      <UML:Package namespace="Logical_View" stereotype="folder" isLeaf="false" isAbstract="false" xmi.id="Datatypes" visibility="public" isSpecification="false" name="Datatypes" isRoot="false">
       <UML:Namespace.ownedElement>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uSNaOW8HFZzdu" visibility="public" isSpecification="false" name="char" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uJe3bI2rF2OQt" visibility="public" isSpecification="false" name="int" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uJZgFUD5i7eOm" visibility="public" isSpecification="false" name="float" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="ulXNWyw4KujZ2" visibility="public" isSpecification="false" name="double" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="ugalu2i3owagh" visibility="public" isSpecification="false" name="bool" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="u6qsmeTRUEKLt" visibility="public" isSpecification="false" name="string" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="u88FoidZoqJ58" visibility="public" isSpecification="false" name="unsigned char" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uXkZ9A0Ot8Zk6" visibility="public" isSpecification="false" name="signed char" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="ukEyMTirtQYJQ" visibility="public" isSpecification="false" name="unsigned int" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="utJIIOVTI8ztT" visibility="public" isSpecification="false" name="signed int" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uw4nEK5xlYxxu" visibility="public" isSpecification="false" name="short int" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uvdpWpy3hTYDR" visibility="public" isSpecification="false" name="unsigned short int" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uG24QBVhLDst3" visibility="public" isSpecification="false" name="signed short int" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="u4JoSFN6Sng7d" visibility="public" isSpecification="false" name="long int" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="ukfUvb6HKMeub" visibility="public" isSpecification="false" name="signed long int" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uP94CJ1Vi02IT" visibility="public" isSpecification="false" name="unsigned long int" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uMsLPQ1yxeQ82" visibility="public" isSpecification="false" name="long double" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uvB2s7WZuddpv" visibility="public" isSpecification="false" name="wchar_t" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="u1Dzzw6ECLWtW" visibility="public" elementReference="u3U6lbQZ91x1m" isSpecification="false" name="str, NoneType" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="ulTVPKBaMKh5F" visibility="public" isSpecification="false" name="array" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uMWkFJsxOSCuy" visibility="public" isSpecification="false" name="list" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uOvkRwXmVcdvj" visibility="public" isSpecification="false" name="long" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="uKH3gjU5YkBVm" visibility="public" isSpecification="false" name="dict" isRoot="false"/>
        <UML:DataType namespace="Datatypes" isLeaf="false" isAbstract="false" xmi.id="udEba0vVLcmGd" visibility="public" isSpecification="false" name="set" isRoot="false"/>
       </UML:Namespace.ownedElement>
      </UML:Package>
      <UML:Class namespace="Logical_View" stereotype="uolUi76kq6Ema" isLeaf="false" isAbstract="true" xmi.id="uatorjw59LS9K" comment="from  mainwindow import ScipyenWindow" visibility="public" isSpecification="false" name="ScipyenViewer" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ub2h9yqTH9cwW"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uPoF0l9I3N7Nf" ownerScope="classifier" visibility="public" initialValue="tuple" type="uGTuNDzJmSqEf" isSpecification="false" name="supported_types"/>
        <UML:Attribute xmi.id="ufG2NzwkGb7Wy" ownerScope="classifier" visibility="public" initialValue="None" type="u1Dzzw6ECLWtW" isSpecification="false" name="view_action_name"/>
        <UML:Attribute xmi.id="ukXlwKABbYhoB" ownerScope="classifier" comment="Base type for all Scipyen viewers.&#xa;CAUTION: This is NOT an ABC, although it defines a set of abstract methods&#xa;which must be implemented in derived classes.&#xa;&#xa;The other (concrete) methods may be overridden in the derived classes.&#xa;" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_activated"/>
        <UML:Attribute xmi.id="uiWS8i4EjfY9L" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_closeMe"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5o4pMVem52ji" ownerScope="classifier" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="sig_activated" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uYpRfocaJaSA9" value="" visibility="private" type="uJe3bI2rF2OQt" isSpecification="false" name="windowId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uVquFOtDXWrZ3" ownerScope="classifier" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="sig_closeMe" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uyHZAbNWOc5YF" value="" visibility="private" type="uJe3bI2rF2OQt" isSpecification="false" name="windowId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uzNu1Keo6fhQf" ownerScope="classifier" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="__init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="umiLUqMspOuW6" value="None" visibility="private" type="ubge0kexwrzQa" isSpecification="false" name="data"/>
          <UML:Parameter xmi.id="uNvb5d6XCTVjS" value="None" visibility="private" type="uXsdnaKA3zdwu" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="u2asvMQh7KnSg" value="None" visibility="private" type="uXsdnaKA3zdwu" isSpecification="false" name="pWin"/>
          <UML:Parameter xmi.id="u5B7tsMv51vxj" value="False" visibility="private" type="ugalu2i3owagh" isSpecification="false" name="asGUIClient"/>
          <UML:Parameter xmi.id="ursTQdVuFuc0b" value="None" comment="User-defined window title (overrides default window title derived from the viewer class name)" visibility="private" type="u3U6lbQZ91x1m" isSpecification="false" name="win_title"/>
          <UML:Parameter xmi.id="uSYdqCGzVpfjo" value="None" comment="Document title; if not None and not empty, is appended to the window title." visibility="private" type="u3U6lbQZ91x1m" isSpecification="false" name="doc_title"/>
          <UML:Parameter xmi.id="utxNkzLjAd2Sw" value="None" comment="Name to which data is bound in the user namespace; when present, the viewer can refresh its contents whenever the data has changed (either automatically, or when user clicks a &quot;refresh view &quot; button, or another GUI widget if provided). This behaviour may not be implememented in all subclasses." visibility="private" type="u3U6lbQZ91x1m" isSpecification="false" name="varname"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufK3KCFMWWaEl" isOverride="false" comment="Constructor.&#xa;        Sets up attributes that are common to all Scipyen's viewers.&#xa; should be set to True when the viewer is managed by another GUI inside Scipyen" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIci0IdYiCP8c" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="un7bKhtrqdIav" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uzpBB3QlysINO" isOverride="false" comment="Custom GUI initialization.&#xa;        Abstract method, it must be implemented in the derived :class:.&#xa;        &#xa;        Required when specifc GUI elements are introduced to the viewer's&#xa;        instance.&#xa;        &#xa;        CAUTION: If any of the viewer's GUI elements are defined in an ui (Qt &#xa;        Designer) file, this function should be invoked AFTER calling &#xa;        self.setupUi(), OR it should call self.setupUi() early on (ideally,&#xa;        before anything else)&#xa;" visibility="protected" isInline="false" isSpecification="false" name="configureGUI_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ueN3umwzKkPHR" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ut06BMRmOsMtV" isOverride="false" comment="Save viewer's settings in a Qt configuration file.&#xa;        Abstract method, it must be implemented in the derived :class:.&#xa;        &#xa;        The configuration file is determined at application (Scipyen) level.&#xa;        See also QtCore.QSettings()&#xa;" visibility="protected" isInline="true" isSpecification="false" name="save_settings_" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1lFQ61TbVZNs" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1zD7aVXjKvkH" isOverride="false" comment="Restore viewer's settings from tha Qt configuration file.&#xa;        NOTE: Must be defined (overridden) in the derived :class:.&#xa;        The configuration file is determined at application (Scipyen) level.&#xa;        See also QtCore.QSettings()&#xa;" visibility="protected" isInline="false" isSpecification="false" name="load_settings_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uyLpcLGIx8iaN" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uPmC5gsNAxnPd" isOverride="false" comment="Set the data to be displayed by this viewer.&#xa;        NOTE: Must be defined (overridden) in the derived :class:.&#xa;        In the derived class, the function binds the data to the actual data&#xa;        model used by the concrete viewer :class:.&#xa;        In addition, the implementation may choose to set the doc title and other&#xa;        properties of the viewer based on the data passed to this function.&#xa;" visibility="public" isInline="false" isSpecification="false" name="view" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ud6XtJuQbt3Fs" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uV8PeAM4CHEui" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uOHxgFdwhwdGP" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setData" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uqte09ru5dJ8V" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uBrjI68tXrJhj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uxLzM7BYY4B3m" isOverride="false" comment="An unique ID for this viewer.&#xa;        The ID is typically the winId() of this viewer's QMainWindow instance&#xa;        and should NOT be confused with the python id &#xa;" visibility="public" isInline="false" isSpecification="false" name="ID" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ucmp35BMX7r7b" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uPUKaJUTnLryL" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="ID" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uKOLPXZATuRYB" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u9J9W0FKz9wfo" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uECiOUNCiFE0o" isOverride="false" comment="The application main window.&#xa;        This is a rference to the  Scipyen Main Window, unless explicitly given&#xa;        as something else at the viewer's initiation.&#xa;        &#xa;        appWindow gives access to Scipyen main window API (e.g. the workspace)&#xa;        and is used regardless of the value of guiClient property.&#xa;" visibility="public" isInline="false" isSpecification="false" name="appWindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uU5RpUmib7VPm" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uPW1gXy8it8FU" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="appWindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uFx98B4Uy1YXd" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uLiUnEcfgzSKq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2BZPqBlxbJeK" isOverride="false" comment="Boolean (default False) indicating whether this window manages its own settings.&#xa;        &#xa;        When the viewer subclass instance is used as a standalone window, this &#xa;        property should be set to False (its default value).&#xa;        &#xa;        When the viewer subclass instance is subordinated to another GUI main window&#xa;        which has control over, and manages the settings of this instance,&#xa;        then guiClient property should be set to True, to avoid race conditions&#xa;        and recurrences (infinite loops).&#xa;        &#xa;        guiClient is also useful for a managing Main Window instance to &#xa;        control other aspects of the viewer's functionality, e.g. management of&#xa;        PlanarGraphics objects in an ImageViewer.&#xa;        &#xa;        This property also has a setter.&#xa;        &#xa;        ATTENTION: When guiClient is True, appWindow must be a reference to the&#xa;        Scipyen's MainWindow instance.&#xa;" visibility="public" isInline="false" isSpecification="false" name="guiClient" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uEe2DVmTzrISe" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uykxoNBvxPOdd" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="guiClient" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uUoxtzXWmzdrH" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u719zgtVTyjUP" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u8NAkT3tUAVnk" isOverride="false" comment="The prefix of the window title.&#xa;        This is the initial string in the window title, used in common regardless&#xa;        of the document's own name (typically, this is the name of the viewer's &#xa;        type).&#xa;        This property also has a setter.&#xa;" visibility="public" isInline="false" isSpecification="false" name="winTitle" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5wSazLxU3pA3" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uoi46LlCOcgDy" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="winTitle" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uXJeJHU0E0ftn" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ueYrTKQfe49n1" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRdTxWLGrHT8n" isOverride="false" comment="The document-specific part of the window title.&#xa;        This is typically, but not necessarily, the variable name of the data &#xa;        displayed in the viewer (i.e., the identifier that the data is bound to,&#xa;        in Scipyen's workspace).&#xa;        &#xa;        This property also has a setter.&#xa;" visibility="public" isInline="false" isSpecification="false" name="docTitle" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIQmRkbx4EjZK" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6xJj770bhbK6" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="docTitle" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uTfw6Kf03STyK" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uukfafybwrFnS" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="udwnuTenKjX9f" isOverride="false" comment="Reset window title.&#xa;" visibility="public" isInline="false" isSpecification="false" name="resetTitle" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u0LLOq0snT6tL" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufAL7Xz1zsvlm" isOverride="false" comment="All viewers in Scipyen should behave consistently.&#xa;        Can by overridden in derived classes.&#xa;" visibility="public" isInline="false" isSpecification="false" name="closeEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uoGbXZyX0FhOf" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u30sYyAWOV8X6" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2uBNtXHQ71PC" isOverride="false" comment="Generic event handler&#xa;        NOTE: This can be overriden in the derived :class:&#xa;" visibility="public" isInline="false" isSpecification="false" name="event" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="urX37t87Y78nP" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ucf8eVUGCVVKQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZfBPHzpOoauO" isOverride="false" comment="Triggeres a refresh of the displayed information.&#xa;        Typical usage is to connect it to a signal emitted after data has been&#xa;        modified, and implies two things:&#xa;        &#xa;        1. appWindow is a reference to Scipyen MainWindow instance&#xa;        2. the data displayed in the viewer is defined in Scipyen's workspace&#xa;           (a.k.a. the user's workspace)&#xa;           &#xa;        e.g.:&#xa;        &#xa;        from core.workspacefunctions import getvarsbytype&#xa;        &#xa;        if isinstance(self._data_var_name_, str):&#xa;            data_vars = getvarsbytype(self.supported_types, ws = self._scipyenWindow_.workspace)&#xa;            &#xa;            if len(data_vars) == 0:&#xa;                return&#xa;            &#xa;            if self._data_var_name_ not in data_vars.keys():&#xa;                return&#xa;            &#xa;            data = data_vars[self._data_var_name_]&#xa;            &#xa;            self.setData(data)&#xa;" visibility="public" isInline="false" isSpecification="false" name="slot_refreshDataDisplay" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uv5Y0mZRejrju" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uGTuNDzJmSqEf" visibility="public" isSpecification="false" name="tuple" isRoot="false"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u3U6lbQZ91x1m" visibility="public" isSpecification="false" name="str" isRoot="false"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uXsdnaKA3zdwu" visibility="public" isSpecification="false" name="QtWidgets.QMainWindow" isRoot="false"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="ubge0kexwrzQa" visibility="public" isSpecification="false" name="object" isRoot="false"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="urcCZk2SPclwo" comment="### END pict.gui modules" visibility="public" isSpecification="false" name="InteractiveTreeWidget" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ui79uVaIYC8Cy"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZHhxpTaQh8jy" isOverride="false" comment="Adds support for custom context menu to pyqtgraph.DataTreeWidget.&#xa;" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u810lhSo31FmG" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uX2vE1yH7DNhF" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="ue8LMHOYPMs4l" visibility="public" isSpecification="false" name="DataTreeWidget" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="ue8LMHOYPMs4l" xmi.id="ui79uVaIYC8Cy" visibility="public" isSpecification="false" name="" discriminator="" child="urcCZk2SPclwo"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="ucL5DFO15wqiH" visibility="public" isSpecification="false" name="DataViewer" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="usrVTwROiGrZy"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uzoYXke227xUV" ownerScope="classifier" comment="Viewer for hierarchical collection types: (nested) dictionaries, lists, arrays&#xa;Uses InteractiveTreeWidget which inherits from pyqtgraph DataTreeWidget &#xa;and in turn inherits from QTreeWidget.&#xa;" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_activated"/>
        <UML:Attribute xmi.id="uoxAQbdyQw0zM" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="closeMe"/>
        <UML:Attribute xmi.id="uUdJzhIr3kWzQ" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_window_will_close"/>
        <UML:Attribute xmi.id="uAhThDwSaQhXU" ownerScope="classifier" comment="for the generic case, )" visibility="public" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="supported_types"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZFYexDVjy4d2" isOverride="false" comment="self._gui_client_         = asGUIClientself._scipyenWindow_         = pWinself._winTitle_           = &quot;&quot;self._docTitle_           = &quot;&quot;self._defaultCursor = QtGui.QCursor(QtCore.Qt.ArrowCursor)self.treeWidget = DataTreeWidget(parent = self) TODO implement dragging from here to the workspace" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="unJwb9w741Hl7" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u2Irap5H5WhJe" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uMhtz0ZS0V2eq" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="save_settings_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHAwtFaviIjCj" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKyqlTM4yHfHt" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="load_settings_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u8Ia301bnbEHX" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufywipW04Q0Ph" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="closeEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHBOSLwiOl3r5" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uf42mfHx3uvOt" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uolsgilrYEvC8" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_refreshDataDisplay" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uYS5G2GhRYfUH" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uhiICRznNRpns" isOverride="false" comment=" because 1st item is the insivible root nameobjname = strutils.string_to_valid_identifier(item_path[-1])" visibility="public" isInline="false" isSpecification="false" name="slot_itemDoubleClicked" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uRRSSErIh15Pm" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="usCVjtUvZEZSf" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item"/>
          <UML:Parameter xmi.id="untzuSA2VuFEa" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="column"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="udpPb6R7uE5SK" isOverride="false" comment=" FIXME/TODO copy to system clipboard? - what mime type? JSON data?" visibility="public" isInline="false" isSpecification="false" name="slot_customContextMenuRequested" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uGl3mKFMkF6KQ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u65NSpbs1iVjH" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="point"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uIUPyS0kKRjMu" isOverride="false" comment="path_element_strings.append(&quot;'&quot;)" visibility="public" isInline="false" isSpecification="false" name="getSelectedPaths" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHZyRtlzzcYUk" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKfFm8hhyDqMP" isOverride="false" comment="self._scipyenWindow_.console.paste()self._scipyenWindow_.console.writeText(&quot;, &quot;.join(item_paths))self._scipyenWindow_.console.paste()self._scipyenWindow_.console.writeText(item_paths[0])" visibility="public" isInline="false" isSpecification="false" name="exportPathsToClipboard" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u4sQ8m0b8zZG0" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u0qwxCkt8Uhq7" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item_paths"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="updVcZ1oGSsMt" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_copyPaths" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uaM5qwv7j25Py" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2alT3HsEIpdf" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_exportItemPathToConsole" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uaY0gAgBSVtXP" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uV3gWu5B0l6vT" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_exportItemDataToWorkspace" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ubuUtJO5Xyyws" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uOdXQ5FI1mCL7" isOverride="false" comment=" because 1st item is the insivible root name object namesobjname = strutils.string_to_valid_identifier(item_paths[-1])print(&quot;DataViewer.slot_viewItemDataInNewWindow objname&quot;, objname) NOTE: 2019-09-09 22:15:45 cannot use the ScipyenWindow logic to fallback to showing the variable in console using &quot;execute()&quot; because the variable (or object) is NOT visible in user's workspace FIXME how to do this? WORKAROUND: for now, copy the variable to workspace and  go from thereobjname = strutils.string_to_valid_identifier(name)" visibility="public" isInline="false" isSpecification="false" name="slot_viewItemDataInNewWindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1CL3ncYYhBCo" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRCY0uLQWEgsO" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="get_path_for_item_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="udJ3lau0VoFTQ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u9QSrLHn222dA" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5KekChfeUUrz" isOverride="false" comment=" because 1st item is the insivible root name" visibility="protected" isInline="false" isSpecification="false" name="export_data_items_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uosgqQWMXshoh" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uWmQ3EkHO6w5L" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="items"/>
          <UML:Parameter xmi.id="ueA0wdwjKtfW9" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="fullPathAsName"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="urqTsnWZqvh2V" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="collapseRecursive" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uetsdIiC8xyO2" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u7dYLquSWLDzy" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item"/>
          <UML:Parameter xmi.id="u7MtruMH415bq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="collapseCurrent"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ui3gBGLIzPGkd" isOverride="false" comment="        Display new data&#xa;        # TODO 2019-09-14 10:16:03:&#xa;        # expand this to other hierarchical containers including those in&#xa;        # the neo package (neo.Block, neo.Segment, neo.Unit, etc) and in the&#xa;        # datatypes module (ScanData)&#xa;        # FIXME you may want to override some of the pyqtgraph's DataTreeWidget&#xa;        # to treat other data types as well.&#xa;        # Solutions to be implemented in the InteractiveTreeWidget in this module&#xa; quick and dirty workaround for TODO 2019-09-14 10:16:03raise TypeError(&quot;Expecting a dict, tuple, or list; got %s instead&quot; % type(data).__name__)if not self.isVisible():" visibility="public" isInline="false" isSpecification="false" name="setData" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="urp6Yy39W046v" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uviFDOxYcGy2c" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
          <UML:Parameter xmi.id="uTOCv9ZG9p7Ui" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="docTitle"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uuMZR0RONLbEo" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="event" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ua9gJEFdu9ge7" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uFuEpDm3WQsDE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uhUJELiz03iRx" isOverride="false" comment="def setTitlePrefix(self, value):&quot;&quot;&quot;Sets the window-specific prefix of the window title&quot;&quot;&quot;if isinstance(value, str) and len(value.strip()) > 0:self._winTitle_ = valueif isinstance(self._docTitle_, str) and len(self._docTitle_.strip()) > 0:self.setWindowTitle(&quot;%s - %s&quot; % (self._winTitle_, self._docTitle_))else:self.setWindowTitle(self._winTitle_)def setTitle(self, value, prefix=None):&quot;&quot;&quot;Sets the document-specific part (suffix) of the window title&quot;&quot;&quot;if isinstance(prefix, str) and len(prefix.strip()):self._winTitle_ = prefixif isinstance(value, str) and len(value.strip()):self._docTitle_ = valueself.setWindowTitle(&quot;%s - %s&quot; % (self._winTitle_, self._docTitle_))else:self._docTitle_ = &quot;&quot;self.setWindowTitle(self._winTitle_)@propertydef ID(self):return self._ID_@ID.setterdef ID(self, val):self._ID_ = val" visibility="public" isInline="false" isSpecification="false" name="view" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uEyQdLTpYwY2F" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uDSnh9xV0Yly2" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="doc"/>
          <UML:Parameter xmi.id="uc4DU393C0wEm" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="title"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uatorjw59LS9K" xmi.id="usrVTwROiGrZy" visibility="public" isSpecification="false" name="" discriminator="" child="ucL5DFO15wqiH"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="utaHfES8DRatE" comment="###mechanism from Python side" visibility="public" isSpecification="false" name="ColorMapEditor" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uXxzeSZIjOW78"/>
        <UML:Generalization xmi.idref="u5rKn6i1q4g4A"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZlzR0OYlp6Hq" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="utLT4WuwB7qB0" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="up6eCb9ShFZoR" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u0jsR8jy67Rfo" visibility="public" isSpecification="false" name="QWidget" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="u0jsR8jy67Rfo" xmi.id="uXxzeSZIjOW78" visibility="public" isSpecification="false" name="" discriminator="" child="utaHfES8DRatE"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uThKo9lcolh9F" visibility="public" isSpecification="false" name="Ui_EditColorMapWidget" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="uThKo9lcolh9F" xmi.id="u5rKn6i1q4g4A" visibility="public" isSpecification="false" name="" discriminator="" child="utaHfES8DRatE"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="us1ioEFSsFijU" visibility="public" isSpecification="false" name="ComplexDisplay" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ucp2X0h6hEssq"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="utR0fZaFsYcQz" ownerScope="classifier" visibility="public" initialValue="1" type="uJe3bI2rF2OQt" isSpecification="false" name="real"/>
        <UML:Attribute xmi.id="uyMzSsZe6VVgT" ownerScope="classifier" visibility="public" initialValue="2" type="uJe3bI2rF2OQt" isSpecification="false" name="imag"/>
        <UML:Attribute xmi.id="ua8dB2kZIjdMW" ownerScope="classifier" visibility="public" initialValue="3" type="uJe3bI2rF2OQt" isSpecification="false" name="dual"/>
        <UML:Attribute xmi.id="uWUwe3CL9phrm" ownerScope="classifier" visibility="public" initialValue="4" type="uJe3bI2rF2OQt" isSpecification="false" name="abs"/>
        <UML:Attribute xmi.id="uzQrP9chRvbnx" ownerScope="classifier" visibility="public" initialValue="4" type="uJe3bI2rF2OQt" isSpecification="false" name="mod"/>
        <UML:Attribute xmi.id="u5UIdbXxtlfrd" ownerScope="classifier" visibility="public" initialValue="5" type="uJe3bI2rF2OQt" isSpecification="false" name="phase"/>
        <UML:Attribute xmi.id="ukOXqHx3YveKx" ownerScope="classifier" visibility="public" initialValue="5" type="uJe3bI2rF2OQt" isSpecification="false" name="arg"/>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u1bPnOfI1336n" visibility="public" isSpecification="false" name="Enum" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="u1bPnOfI1336n" xmi.id="ucp2X0h6hEssq" visibility="public" isSpecification="false" name="" discriminator="" child="us1ioEFSsFijU"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uQr2x6tTmAqZh" visibility="public" isSpecification="false" name="IntensityCalibrationLegend" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uQgaX9WaYYneP"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="unGeoHFqk7Iew" isOverride="false" comment="if " visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIqkXdSWBIoOv" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u7LoI3vSRBnQB" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="image"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" stereotype="class-or-package" isLeaf="false" isAbstract="false" xmi.id="u2KTZQ9kGWsS6" visibility="public" isSpecification="false" name="pgraph" isRoot="false">
       <UML:Namespace.ownedElement>
        <UML:Class namespace="u2KTZQ9kGWsS6" stereotype="class-or-package" isLeaf="false" isAbstract="false" xmi.id="um1QMOC8j1dP2" visibility="public" isSpecification="false" name="graphicsItems" isRoot="false">
         <UML:Namespace.ownedElement>
          <UML:Class namespace="um1QMOC8j1dP2" stereotype="class-or-package" isLeaf="false" isAbstract="false" xmi.id="uJwotBFXkT4TA" visibility="public" isSpecification="false" name="GraphicsWidget" isRoot="false"/>
         </UML:Namespace.ownedElement>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uJwotBFXkT4TA" xmi.id="uQgaX9WaYYneP" visibility="public" isSpecification="false" name="" discriminator="" child="uQr2x6tTmAqZh"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uUHmzyXFhbBCo" visibility="public" isSpecification="false" name="ImageBrightnessDialog" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="u8yjJp5Sma4aT"/>
        <UML:Generalization xmi.idref="uHi0XldqMfFIx"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uaemriwVze5X7" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalAutoRange"/>
        <UML:Attribute xmi.id="uywHq6cGrGfRn" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalDefaultRange"/>
        <UML:Attribute xmi.id="u6xD6cJaKOOwe" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalApply"/>
        <UML:Attribute xmi.id="ud1ftsn7ERJwj" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalFactorValueChanged"/>
        <UML:Attribute xmi.id="u66CzQoHjYQik" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalMinRangeValueChanged"/>
        <UML:Attribute xmi.id="u1ATPlnyuM64D" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalMaxRangeValueChanged"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uV24KPlbVbgAR" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uD1sR9IdWK2zw" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uCF84wtm3hh3C" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ucQg76aHA83Nd" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_requestAutoRange" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5ULewpKIDDdB" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRvGu3DdBdAYr" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_requestDefaultRange" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ubqN3B1InEYVO" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uxio5LagHMu3v" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_requestApplyToData" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzld5kVZKVB18" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uFO9LhvCmo5OO" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_sendNewFactorValue" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVE2FgIHiY3Up" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uZePvD63KsxUt" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uW9PB5tcqMApc" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_sendNewRangeMinValue" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uWVjouNWVrSBJ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uLxa2vEE6LyHw" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKATWmjJN7pp0" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_sendNewRangeMaxValue" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLgUAOPhMWXsm" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uLeFaqXuMPkJl" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="udml2ODm17zhl" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_newFactorValueReceived" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="urjwJZZahZrpt" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u4R8kMSDdj40n" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uG3FVMa8IE4fz" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_newMinRangeValueReceived" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uiW9LSm9QBEWc" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uMvw72Wz0rxiz" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRrn6nggNQbGN" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_newMaxRangeValueReceived" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uV4iGs5jj6ovi" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uzaLfCXmXEaRQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="ud3yEVK8vtvhN" visibility="public" isSpecification="false" name="QDialog" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="ud3yEVK8vtvhN" xmi.id="u8yjJp5Sma4aT" visibility="public" isSpecification="false" name="" discriminator="" child="uUHmzyXFhbBCo"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="upT7msOGGtCQ9" visibility="public" isSpecification="false" name="Ui_TransformImageValueDialog" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="upT7msOGGtCQ9" xmi.id="uHi0XldqMfFIx" visibility="public" isSpecification="false" name="" discriminator="" child="uUHmzyXFhbBCo"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uLMfT3rQjyLfj" visibility="public" isSpecification="false" name="AxesCalibrationDialog" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uVjc7h9hkkYL4"/>
        <UML:Generalization xmi.idref="uwhT6KwqMrkfx"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufEdGw2bMWOuI" isOverride="false" comment="self._data_ = image" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u2kXSmXlOWy8V" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uMUwZCdxazGJ9" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="image"/>
          <UML:Parameter xmi.id="u4m5T5PjPG4Sf" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pWin"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2epDB3dzd1nt" isOverride="false" comment="self.unitsLineEdit.setValidator(dt.UnitsStringValidator())self.unitsLineEdit.returnPressed.connect(self.slot_unitsChanged)self.axisDescriptionEdit.setUndoRedoEnabled(True)" visibility="protected" isInline="false" isSpecification="false" name="configureGUI_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uF7R5w3j7Dcpv" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6oOCjwbFyYA9" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="updateFieldsFromAxis" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uABUlsyI059me" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJiqXaGJlIkyL" isOverride="false" comment="self.slot_generateCalibration()" visibility="public" isInline="false" isSpecification="false" name="slot_axisIndexChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uyl3egaHXg3ka" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u3c4aEjn7r3QJ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="umm21kNJFzaB7" isOverride="false" comment="print(&quot;%s --> %s&quot; % (self.unitsLineEdit.text(),self.units))print(&quot;Try again!&quot;)" visibility="public" isInline="false" isSpecification="false" name="slot_unitsChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHmxAu5L944p1" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ukGuCHAFP44mR" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_resolutionChecked" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPpVd3FzyM4SA" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="utdNsHUjcAZ9w" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uWuVCLpMS2bXe" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_pixelsDistanceChecked" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uAOkek2iwn4FN" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uYxgJDf2szuAH" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKOGhJ954fjbq" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_calibratedDistanceChecked" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u76pOjIFAF48C" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u9F4WFlB33PF5" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3AIS8ZF6LnOk" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_generateCalibration" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uUoxvyh8Twf9H" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="unBWSQOby1yBv" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_originChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uEj8a3xAVJu91" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uD6zpdfOZiBII" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0dpmjjjVh9Zd" isOverride="false" comment=" calculate distance in pixels calculate calibrated distance" visibility="public" isInline="false" isSpecification="false" name="slot_resolutionChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u8aZr6Oe3OTmv" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u2GhA37l2RAMh" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uxbL1cqZQJGx7" isOverride="false" comment=" calculate resolution calculate calibrated distance" visibility="public" isInline="false" isSpecification="false" name="slot_pixelDistanceChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uRATTPNnw2hdD" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uYjmHpucoTPOJ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uHkOxuqMJmSqM" isOverride="false" comment=" calculate resolution calculate pixels distance" visibility="public" isInline="false" isSpecification="false" name="slot_calibratedDistanceChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uUZvVDCmNTvd6" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ujObuiyzWUD6y" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uEH2o6YEHqDk1" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_descriptionChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uJ5VDmIw8mkgt" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujSZMY1n8EBvh" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="calculateResolution" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVlit8ddbSU3j" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u0dPd7KX8e8bG" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pixels"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="ud3yEVK8vtvhN" xmi.id="uVjc7h9hkkYL4" visibility="public" isSpecification="false" name="" discriminator="" child="uLMfT3rQjyLfj"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="umiCcfpr3ScaM" visibility="public" isSpecification="false" name="Ui_AxisCalibrationDialog" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="umiCcfpr3ScaM" xmi.id="uwhT6KwqMrkfx" visibility="public" isSpecification="false" name="" discriminator="" child="uLMfT3rQjyLfj"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uJyktRpLyea2G" comment="signalDeselectGraphics = pyqtSignal()" visibility="public" isSpecification="false" name="GraphicsImageViewerScene" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uktg3sIRpBZVU"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="u1GZesj7WJqEQ" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalMouseAt"/>
        <UML:Attribute xmi.id="uiikCU3zn9WEd" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalMouseLeave"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1T2RHTxIsMid" isOverride="false" comment="self._contextMenu = QtWidgets.QMenu(&quot;Scene Menu&quot;, super())self._addCursorAction = self._contextMenu.addAction(&quot;Add cursor&quot;)self._addCursorAction.triggered.connect(self._slotAddCursor)### public methods###" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ukHRq4w5drFEj" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u9MBaWBBDC98n" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="gpix"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uGRSBeOVABmUO" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="rootImage" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ugObWKABL3qZ6" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="usPtAR3nedkTy" isOverride="false" comment="self.__gpixitem__.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))" visibility="public" isInline="false" isSpecification="false" name="rootImage" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uWtbypdqmQeIE" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u1TG6U4PRS5ZA" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="gpix"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5ET7ivulOCh1" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="clear" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ufMgPCff3vXmO" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uiz5YoL8S9bym" isOverride="false" comment="print(&quot;scene setRootImage: %s&quot; % gpix)" visibility="public" isInline="false" isSpecification="false" name="setRootImage" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u46IinNXWBOFO" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uqh02Jf52qOK7" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="gpix"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1oc3YLIZZBBm" isOverride="false" comment="print(&quot;scene addItem %s&quot; % item)" visibility="public" isInline="false" isSpecification="false" name="addItem" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ukVOFvPENnkXR" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u0F388sCPJTtE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item"/>
          <UML:Parameter xmi.id="uU87eULD2I1X7" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="picAsRoot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u50pH3d2kq12u" isOverride="false" comment="Emits signalMouseAt(x,y) if event position is inside the scene.&#xa;" visibility="public" isInline="false" isSpecification="false" name="mouseMoveEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ugybTTOTKEAcu" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uICHki7BqnD5U" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uYFY2KlYItClv" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="mousePressEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="udEAdF1CIJ6TH" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uDaI1noxEYY2Q" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3LWxL8aRceJM" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="mouseReleaseEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uD49l84h9okLH" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="unJzz4mtkSxhI" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uYiXhg7dVWLuO" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="hoverMoveEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uszSbg1KnOQud" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ugGnWQpZQSYYg" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u7A84nlPWd4E7" isOverride="false" comment="&quot;class&quot; ImageGraphicsView(QtWidgets.QGraphicsView):&quot;&quot;&quot;TODO contemplate this to customize the graphicsivew in the GraphicsImageViewerWidget(_imageGraphicsView member)&quot;&quot;&quot;&quot;def&quot; __init__(*args, **kwargs):super(ImageGraphicsView, self).__init__(*args, **kwargs)" visibility="public" isInline="false" isSpecification="false" name="wheelEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uKGsesd5xgsi1" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uRFwuo9O2pvrH" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" stereotype="class-or-package" isLeaf="false" isAbstract="false" xmi.id="uT4IjZUUKCyF3" visibility="public" isSpecification="false" name="QtWidgets" isRoot="false">
       <UML:Namespace.ownedElement>
        <UML:Class namespace="uT4IjZUUKCyF3" isLeaf="false" isAbstract="false" xmi.id="uhcNwtwE0S19l" visibility="public" isSpecification="false" name="QGraphicsScene" isRoot="false"/>
        <UML:Class namespace="uT4IjZUUKCyF3" isLeaf="false" isAbstract="false" xmi.id="ugVIFdQmdEuKU" visibility="public" isSpecification="false" name="QFileSystemModel" isRoot="false"/>
        <UML:Class namespace="uT4IjZUUKCyF3" isLeaf="false" isAbstract="false" xmi.id="utD0IyH1dg8ml" visibility="public" isSpecification="false" name="QTableView" isRoot="false"/>
        <UML:Class namespace="uT4IjZUUKCyF3" isLeaf="false" isAbstract="false" xmi.id="uU2mj5qTdb8Ho" visibility="public" isSpecification="false" name="QGraphicsObject" isRoot="false"/>
        <UML:Class namespace="uT4IjZUUKCyF3" isLeaf="false" isAbstract="false" xmi.id="ut4ge5Dgls3YX" visibility="public" isSpecification="false" name="QListWidget" isRoot="false"/>
        <UML:Class namespace="uT4IjZUUKCyF3" isLeaf="false" isAbstract="false" xmi.id="uMKlw12GXcn3O" visibility="public" isSpecification="false" name="QCheckBox" isRoot="false"/>
        <UML:Class namespace="uT4IjZUUKCyF3" isLeaf="false" isAbstract="false" xmi.id="usbTh2Q76qi5B" visibility="public" isSpecification="false" name="QHeaderView" isRoot="false"/>
        <UML:Class namespace="uT4IjZUUKCyF3" isLeaf="false" isAbstract="false" xmi.id="udUqjDFHYGnpC" visibility="public" isSpecification="false" name="QItemDelegate" isRoot="false"/>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uhcNwtwE0S19l" xmi.id="uktg3sIRpBZVU" visibility="public" isSpecification="false" name="" discriminator="" child="uJyktRpLyea2G"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uVHfv95dFAu0I" comment="###" visibility="public" isSpecification="false" name="GraphicsImageViewerWidget" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="u52zFqNnImdVx"/>
        <UML:Generalization xmi.idref="uJNmxTUbHtV2D"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uW2TCFTpbjm5g" ownerScope="classifier" comment="###" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalMouseAt"/>
        <UML:Attribute xmi.id="uzOQ9SNJaeCEm" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalCursorAt"/>
        <UML:Attribute xmi.id="u93iKB5weaxnx" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalZoomChanged"/>
        <UML:Attribute xmi.id="uwojC9kHx17Er" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalCursorPosChanged"/>
        <UML:Attribute xmi.id="ubgOFMdLSMGit" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalCursorLinkRequest"/>
        <UML:Attribute xmi.id="uCcMo6IYLLYpu" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalCursorUnlinkRequest"/>
        <UML:Attribute xmi.id="uugfUyI1iVQP1" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalCursorAdded"/>
        <UML:Attribute xmi.id="uGUFG2QiYo2t6" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalCursorChanged"/>
        <UML:Attribute xmi.id="uEfS3pxXp6cdX" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalCursorRemoved"/>
        <UML:Attribute xmi.id="u0YyoTmRJs3iR" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalCursorSelected"/>
        <UML:Attribute xmi.id="ueHig5neWISlv" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalRoiAdded"/>
        <UML:Attribute xmi.id="unG5CIwHsqbgG" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalRoiChanged"/>
        <UML:Attribute xmi.id="uN3NyxvL239gI" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalRoiRemoved"/>
        <UML:Attribute xmi.id="u25Yf2JFJpjhw" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalRoiSelected"/>
        <UML:Attribute xmi.id="uU0LbXgxf4Zcl" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalGraphicsDeselected"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uG5YJASU7tA7Y" isOverride="false" comment=" NOTE: 2017-08-10 13:45:17 make separate dictionaries for each roi type -- NOT a chainmap! grab dictionaries for cursor types in a chain map almost empty ChainMap make sure it is empty now chain up the cursor dictionaries do the same for roi types NOTE: 2017-11-28 22:25:33 maps attribute is a list !!! would ChainMap.new_child() be more appropriate, below?### NOTE: 2017-11-26 22:53:12###### not needed anymore: coordinate linking between instances of ### GraphicsObject of the same type is now handled by the instances### themselvesself._linkedCrosshairCursors = []self._linkedHorizontalCursors = []self._linkedVerticalCursors = []self._linkedRois = []self.__rois__ = dict() NOTE: 2017-06-27 23:10:05 hack to get context menu working for non-selected cursorsNOTE: 2017-03-25 22:31:12 this is unnecessary: just connect the signal from the scene to the  container of this widget direcly (we get access to the scene by calling self.scene())self.__scene__.signalMouseAt[int,int].connect(self._reportPixelValueAtMousePosInWidget)### private methods###" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="upYSQh1iOAo8F" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="urO4zSkl3AKqT" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="img"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uvSbCy4Kc8QEM" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="configureGUI_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uz5bVCtwgK20F" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uAsJnbz6KvaEy" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="zoomView" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uRg9nViJFzuam" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uhJRVcg5iSL7G" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uuq0MgchZyQtJ" isOverride="false" comment="d = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Edit cursor %s&quot; % cursor.name)namePrompt = vigra.pyqt.quickdialog.StringInput(d, &quot;New label:&quot;)showsPositionCheckBox = vigra.pyqt.quickdialog.CheckBox(d, &quot;Label shows position&quot;)showsOpaqueLabel = vigra.pyqt.quickdialog.CheckBox(d, &quot;Opaque label&quot;)promptX = vigra.pyqt.quickdialog.FloatInput(d, &quot;X coordinate (pixels):&quot;)promptXWindow = vigra.pyqt.quickdialog.FloatInput(d, &quot;Horizontal window size (pixels):&quot;)promptY = vigra.pyqt.quickdialog.FloatInput(d, &quot;Y coordinate (pixels):&quot;)promptYWindow = vigra.pyqt.quickdialog.FloatInput(d, &quot;Vertical window size (pixels):&quot;)promptX = vigra.pyqt.quickdialog.FloatInput(d, &quot;X coordinate:&quot;)promptXWindow = vigra.pyqt.quickdialog.FloatInput(d, &quot;Horizontal window size:&quot;)promptY = vigra.pyqt.quickdialog.FloatInput(d, &quot;Y coordinate:&quot;)promptYWindow = vigra.pyqt.quickdialog.FloatInput(d, &quot;Vertical window size:&quot;)framesWhereVisible = vigra.pyqt.quickdialog.StringInput(d, &quot;Visible frames:&quot;)linkToFramesCheckBox = vigra.pyqt.quickdialog.CheckBox(d, &quot;Link position to frame number&quot;)linkToFramesCheckBox.setChecked( not cursor.backend.hasCommonState)if not isinstance(w, vigra.pyqt.quickdialog.CheckBox):print(&quot;txt&quot;, txt)print(&quot;GraphicsImageViewerWidget._cursorEditor imageViewer:&quot;, self.__image_viewer__)print(&quot;GraphicsImageViewerWidget._cursorEditor imageViewer.nFrames:&quot;, self.__image_viewer__.nFrames)print(newFrames)print(linkToFrames) no frame linking required" visibility="protected" isInline="false" isSpecification="false" name="cursorEditor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwpimAWuG1x6B" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uM99oV4JpOn6Y" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="crsId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uUeW6VlA3qELB" isOverride="false" comment="Interactively builds a new ROI.&#xa;print(&quot;buildROI&quot;)" visibility="public" isInline="false" isSpecification="false" name="buildROI" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uNJN4ZaPHy4NL" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u9Yh7xMhQmRsa" isOverride="false" comment="print(&quot;GraphicsImageViewerWidget.createNewRoi params %s&quot; % params)print(&quot;GraphicsImageViewerWidget.createNewRoi frameVisibility %s&quot; % frameVisibility)" visibility="public" isInline="false" isSpecification="false" name="createNewRoi" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u4ZwQV6QkZMXd" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uEJnUKzYSCbEj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="params"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uiprie9pnPdYW" isOverride="false" comment="        &#xa;        cType: int or one of the pictgui.GraphicsObjectType cursor type enum values, &#xa;            or a pictgui.Cursor object&#xa;        &#xa;        When cType is an int or GraphicsObjecType enum value, then the keyword&#xa;            parameters are used for constructing a pictgui.GraphicsObject &#xa;            representation of a pictgui.Cursor&#xa;        When cType is a pictgui.Cursor object, keyword parameters given may&#xa;            override the Cursor's own values.&#xa;        &#xa;            NOTE: pictgui.Cursor objects can have both width and height None. &#xa;            When this happens, the width/height will be taken from the scene &#xa;            geometry.&#xa;        &#xa;            The Cursor window (in x or y direction) can be None for vertical or &#xa;            horizontal cursors, respectively. It can be overridden by the &quot;window&quot; &#xa;            keyword parameter here (default is the default _cursorWindow value &#xa;            in GraphicsImageViewerWidget).&#xa;        &#xa;            By design, neither xwindow nor ywindow can be None in crosshair and &#xa;            point cursors.&#xa;            &#xa;            NOTE: special attention should be given to the &quot;name&quot; attribute of&#xa;            the cursor object, which is also used to assign the ID of the &#xa;            graphics object. &#xa;            &#xa;        &#xa;        &#xa; construct from a pgui.Cursor builds a GUI cursor for a backend PlanarGraphics object (a pictgui.Cursor) this comes with its own coordinates, but we allow these to be overridden here by this constructor's optional &quot;pos&quot; parameter no pos specified -- unlikely but anyhow... just in case the PlanarGraphics object x or y are not set find a suitable position so we don't land on previous objectsprint(&quot;ImageViewer.createNewCursor cursor.backend&quot;, cursor.__backend__) parametric c'tor : NOTE: 2018-09-28 10:20:29 cType is a GraphicsObjecType enum value NOTE: 2018-09-28 10:21:32 because it can be an enum value or an int resulted from logical OR between several enum values,  see NOTE: 2018-09-28 10:20:29print(pos) no pos specified NOTE: 2018-09-28 11:20:32 cursor() is reimplemented as access method for a pictgui.Cursor! must use the superclass instance methodcurrentCursor = super(GraphicsImageViewerWidget, self).cursor()print(&quot;currentCursor shape:&quot;, currentCursor.shape())self.setCursor(QtCore.Qt.CrossCursor) install mouse event filter for all other cursors find a suitable position so we don't land on previous objectsif len(cursor.frameVisibility)==0 or cursor.currentFrame in cursor.frameVisibility:cursor.show()" visibility="public" isInline="false" isSpecification="false" name="createNewCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uWUjw0RcWeyCu" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uM6RQ5Gu4S79k" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="cType"/>
          <UML:Parameter xmi.id="ubA85gHm71SZi" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="window"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ulEFT2H2k76Gq" isOverride="false" comment="Clears the contents of the viewer.&#xa;        &#xa;        Removes all cursors, rois and image data and clears the &#xa;        underlying scene.&#xa;        &#xa;### slots###" visibility="public" isInline="false" isSpecification="false" name="clear" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5LeAS0XVSOzo" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ulspURS86nomb" isOverride="false" comment=" see NOTE: 2018-09-25 23:06:55sigBlock = QtCore.QSignalBlocker(sender)" visibility="public" isInline="false" isSpecification="false" name="slot_newROIConstructed" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uUuJyGEMHHmXD" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ugrravWEkf1Zm" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="roiType"/>
          <UML:Parameter xmi.id="ux7bDqeTObrOv" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="roiName"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJ7heWE4ba0cM" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_cursorChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIfoMQr13so6T" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uDfa84VB4R8al" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="obj"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u7AClX0D36zJg" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_roiChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1XRj7zW5pxYu" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u6ZTJWAUmuJrz" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="obj"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNTyMfxY1X1n1" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_zoom" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uittcJ9MLvTgp" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="umZfmH6DM3tJO" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u23Nrta20LSmE" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_relativeZoom" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uSfkhrmr135gx" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="utx2G08LOfkFv" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="udcfxwArxFpAR" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_editAnyCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uEhoTnk1YR1mX" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBmtbNYPDMxW0" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_editSelectedCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uMwdCIR5ncNjI" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujcRVWKTkKelr" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_editCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="udE03R16z9lEe" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ub2mNR8BxjZIb" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="propagateCursorState" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uBUhLt3rEjRMP" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5qh0pksh2vCE" isOverride="false" comment=" TODO: select a roi fromt the list then bring up a ROI edit dialog" visibility="public" isInline="false" isSpecification="false" name="slot_editRoi" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLQhc7Muy0hNA" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u7BsUjxCXMIAm" isOverride="false" comment="to always work on selected ROI" visibility="public" isInline="false" isSpecification="false" name="slot_editRoiProperties" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u8KG1xO2rDrl4" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uwDKaZZxVkWaB" isOverride="false" comment="to always work on selected ROI!" visibility="public" isInline="false" isSpecification="false" name="slot_editRoiShape" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ureNmZFdboeEH" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufptkmkjue9BC" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_graphicsObjectMenuRequested" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uYAM6kv7t36wv" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uX3w7Wo6Xu0mj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="crsId"/>
          <UML:Parameter xmi.id="ug320e6x0KrIq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pos"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0CKdtcAArCiR" isOverride="false" comment="To keep track of what cursor is selected,&#xa;        independently of the underlying graphics view fw.&#xa;" visibility="public" isInline="false" isSpecification="false" name="slot_setSelectedCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u0NRmMIdWZcx4" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uK8QMCmE8fxrn" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="cId"/>
          <UML:Parameter xmi.id="uUAxv6ztiDHNs" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="sel"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1B2iXaGxUEii" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_setSelectedRoi" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uc2OLWtZob3Zr" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="udat6NetBqOju" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="rId"/>
          <UML:Parameter xmi.id="uTCgtT8ITEv2u" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="sel"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uj674BWPFZdiY" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_newHorizontalCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6GCQ5usq7XrY" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uhwoobIf2Gdnp" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_newPointCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uvm1aRU6N3Cun" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uL9JTg2U5elLg" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_newVerticalCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOOLW8YBG4o1i" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uiqk30Z4Qrrho" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_newCrosshairCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ujhDSGmScAOmR" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uPXivOt48JUYd" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_selectCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uS6X655zPYAas" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uq16fRYIxq4b4" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="crsId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u77oNDJmhM8nv" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_receiveCursorUnlinkRequest" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uSWpR5XzIlgjA" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u335DgTACeRGX" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_receiveCursorLinkRequest" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uKMjkUl0cqilC" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0GiOA4jHWrAL" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_reportCursorPos" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uvy2tFCV4C8cM" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u7LkenRycoelQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="cType"/>
          <UML:Parameter xmi.id="uPEVVE0SNYlVR" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="crsId"/>
          <UML:Parameter xmi.id="ubZSn77MCLy5I" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pos"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uoHK4nKzWcqxC" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeCursors" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uMWDsuovUArC2" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uoZxo3VRNNWTO" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeSelectedCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ulQCHAXmpzIN0" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uHwLeCRIO0jx6" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeCursor" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwYEHI04CSttb" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uwpbIopVKDUDL" isOverride="false" comment="if isinstance(self.__image_viewer__, ImageViewer):print(&quot;GraphicsImageViewerWidget of %s slot_removeCursorByName %s&quot; % (self.__image_viewer__.windowTitle(), crsId))else:print(&quot;GraphicsImageViewerWidget slot_removeCursorByName %s&quot; % crsId)removed_cursor = self.__graphicsObjects__[cType].pop(crsId, None)del cursordel removed_cursor" visibility="public" isInline="false" isSpecification="false" name="slot_removeCursorByName" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u4ERgD41lkQ0f" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u2k3inx9mRszU" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="crsId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uxJIw4zwuduyo" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeRois" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uK1HOYxgHArdh" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uxuh5KtDuJamR" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeSelectedRoi" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uoSpzdAaWDrYi" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="udtZ5HQ0VcZhj" isOverride="false" comment="print(&quot;GraphicsImageViewerWidget slot_removeRoiByName %s&quot; % roiId)removed_roi = self.__graphicsObjects__[rType].pop(roiId, None)del roidel removed_roi" visibility="public" isInline="false" isSpecification="false" name="slot_removeRoiByName" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uotDAw0y1StYK" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uNFNujI598KVZ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="roiId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u408s8Di8AJur" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeRoi" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uCJaPSHy4rdZd" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ut4WOV70YlCCn" isOverride="false" comment="Tests for existence of a GraphicsObject roi with given id or name (label).&#xa;        &#xa;        Parameters:&#xa;        ===========&#xa;        roiId: str: the roi Id or roi Name (label)&#xa;### properties###" visibility="public" isInline="true" isSpecification="false" name="hasRoi" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u4tJmWwyGmpTQ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uRmZcoRxmUibH" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="roiId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uFTh1tby5st5f" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="minZoom" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLKSRvdXOl2wT" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBnhbGVtR11yG" isOverride="false" comment="@pyqtProperty(float)" visibility="public" isInline="false" isSpecification="false" name="minZoom" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uvxOdLAHlq1Xi" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uxO9LitaIPVzh" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="usi1f2A0v1DMr" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="maxZoom" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uH886mnACUCxi" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uhItUWUuL2DXe" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="maxZoom" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="upDcG52N2iCqM" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uQd2yoYFD0mK3" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uq9uukR4RGIHT" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="scene" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ulkTh1UdpUWbN" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRhMjZ2Axsrvb" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="graphicsview" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uaHcRQBZd5z6s" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLAe20GIgOfeT" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="cursors" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ugPqdFY5wTTaj" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="urxNTaAr5kxf7" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="imageViewer" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="upob9T1vIUN0q" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJa3fV8J4TBMY" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="rois" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uxyuWFier5G1p" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ugBNuQK1nueBc" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="graphicsObjects" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHwJe8Gfzfuyx" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uQViKiEgI0sGb" isOverride="false" comment="Returns the GraphicsObject with specified ID or name (label) or None if this does not exist.&#xa;        &#xa;        Parameters:&#xa;        ===========&#xa;        roiId: str: the roi Id or Name (label)&#xa;print(&quot;current rois: &quot;, self.__rois__)print(&quot;roi&quot;,  roi_id_Label[0])print(&quot;roi id %s&quot; % rid)print(&quot;roi label &quot; , roi_id_Label[0].label)### public methods###def showImageLabel(self, val):self._imageNameLabel.setVisible(val)" visibility="public" isInline="false" isSpecification="false" name="roi" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uQAde9Dy6qyRQ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uq1LS3U6ug274" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZiTRn5YmC4k0" isOverride="false" comment="Returns the GraphicsObject cursor with specified ID or name (label) or None if this does not exist.&#xa;        &#xa;        Parameters:&#xa;        ===========&#xa;        value: str: the cursor Id or Name (label)&#xa;else:crsId_Label = [(c, cid, c.name) for (cid, c) in self.__cursors__.items() if c.label == value]if len(crsId_Label):return [c[0] for c in crsId_Label]" visibility="public" isInline="false" isSpecification="false" name="cursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6RFbGDoafe8B" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uCAY8mj2OWoi5" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4skh5Qp53VpQ" isOverride="false" comment="Tests for existence of a GraphicsObject cursor with given id or label.&#xa;        &#xa;        Parameters:&#xa;        ===========&#xa;        roiId: str: the roi Id or roi Name (label)&#xa;" visibility="public" isInline="true" isSpecification="false" name="hasCursor" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZ6s3oKC73iOP" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uQB0peNVaZSIG" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="crsid"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6M2wllWPu3Iy" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setMessage" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uxe2RU8SJoXeS" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uEpRlfdjiwHzb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="s"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBM5pZ68moclf" isOverride="false" comment="if evt.modifiers() and QtCore.Qt.ControlModifier and QtCore.Qt.ShiftModifier:step = 10print(&quot;wheel event angle delta x: &quot;, evt.angleDelta().x(), &quot; y: &quot;, evt.angleDelta().y())else:" visibility="public" isInline="false" isSpecification="false" name="wheelEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uITdrVPwgPlvT" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u3ZWiL1EHTyqM" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uCu6wpjW0ikD6" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="timerEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uBt5i7NLrqp1P" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uAY0zQoIKzzTB" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u23w4BYWbzZGM" isOverride="false" comment="print(&quot;keyPresEvent in GraphicsImageViewerWidget: &quot;, evt)else:self.__escape_pressed___ = Falseevt.ignore()" visibility="public" isInline="false" isSpecification="false" name="keyPressEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uFugJwTJHVa9I" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uAZZ2BMOwgozJ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4DLvunRyciLR" isOverride="false" comment="print(&quot;mousePressEvent in GraphicsImageViewerWidget: &quot;, evt)self.__escape_pressed___ = Trueself.__escape_pressed___ = True" visibility="public" isInline="false" isSpecification="false" name="mousePressEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u7ywobXewGmJw" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u31ungnTxSwnl" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3lP5DAe87bmT" isOverride="false" comment="print(&quot;mouseReleaseEvent in GraphicsImageViewerWidget: &quot;, evt)self.__escape_pressed___ = Trueself.__escape_pressed___ = True" visibility="public" isInline="false" isSpecification="false" name="mouseReleaseEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uf4Z94Fb8Yeug" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uUCh1UtwA2TrN" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZT1VEW9l7LCA" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setImage" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uh5J7CZ4h6Fp2" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uxRFQztmfThjK" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="img"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uSSf9oqZNCzDt" isOverride="false" comment="self.__scene__.setRootImage(QtWidgets.QGraphicsPixmapItem(a))self.__scene__.setRootImage(QtWidgets.QGraphicsPixmapItem(QtGui.QPixmap.fromImage(a)))print(a)self._imageGraphicsView.ensureVisible(self.__scene__.getRootImage().boundingRect(),0,0)print(&quot;scene Rect: &quot;, self.__scene__.sceneRect())print(&quot;image bounding rect: &quot;, self.__scene__.getRootImage().boundingRect())if self.parentWidget() is None:#self.adjustSize()self.resize(self.__scene__.sceneRect().width(), self.__scene__.sceneRect().height())#self.setVisible(True)#else:#self.parentWidget().resize(self.__scene__.sceneRect().width(), self.__scene__.sceneRect().height())self._imageGraphicsView.setGeometry(self.__scene__.sceneRect().toAlignedRect())self._imageGraphicsView.centerOn(QtCore.QPointF(self.__scene__.rootImage.boundingRect().left() ,self.__scene__.rootImage.boundingRect().top()))" visibility="public" isInline="false" isSpecification="false" name="view" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5dPfOt8VF3g3" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ulXTI2Yhk3SWh" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="a"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ucGfMbfKW3KEq" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="interactiveZoom" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u2GcFn1OqLMyR" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5yzDNZnIjN0S" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setBackground" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="umwPRBpzQFe7Y" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uiOg3mPYqb1nX" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="brush"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ueqv1lBMwqZSq" isOverride="false" comment="def setBottomLabelText(self, value):self._bottomLabel.setText(value)" visibility="public" isInline="false" isSpecification="false" name="setTopLabelText" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="udEXmldeBOHo0" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u9iPpuzVwMzS0" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uD3EmK58EFqbn" isOverride="false" comment="def clearBottomLabel(self):self._bottomLabel.clear()" visibility="public" isInline="false" isSpecification="false" name="clearTopLabel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uSUdNyEyWpE8N" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujxt47PgxHw8m" isOverride="false" comment="self.clearBottomLabel()" visibility="public" isInline="false" isSpecification="false" name="clearLabels" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ucMc5XRTLVmPG" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u0jsR8jy67Rfo" xmi.id="u52zFqNnImdVx" visibility="public" isSpecification="false" name="" discriminator="" child="uVHfv95dFAu0I"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="udWnkWaKWhRI0" visibility="public" isSpecification="false" name="Ui_GraphicsImageViewerWidget" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="udWnkWaKWhRI0" xmi.id="uJNmxTUbHtV2D" visibility="public" isSpecification="false" name="" discriminator="" child="uVHfv95dFAu0I"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uuOVuuTtIHR7o" visibility="public" isSpecification="false" name="ImageViewer" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uMk5uqNJIaJrH"/>
        <UML:Generalization xmi.idref="uW87V1s8oibs4"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uPK1Fu1yNCbao" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="closeMe"/>
        <UML:Attribute xmi.id="urcXIRHiuEjkJ" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_graphicsObjectAdded"/>
        <UML:Attribute xmi.id="uaNe1o7FIglrB" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_graphicsObjectChanged"/>
        <UML:Attribute xmi.id="uS5ckgJJGTl9A" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_graphicsObjectRemoved"/>
        <UML:Attribute xmi.id="uxLdhOimxhfHf" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_graphicsObjectSelected"/>
        <UML:Attribute xmi.id="u2KpODy1VXi0j" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_graphicsObjectDeselected"/>
        <UML:Attribute xmi.id="uZvY27x7oeu7o" ownerScope="classifier" comment="list and tuple of 2D VigraArray 2D, Kernel2D, 2D numpy.ndarray, QImage, QPixmap" visibility="public" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="supported_types"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ut9JSHIont3gG" isOverride="false" comment="self._data_         = Noneself.frameTypes     = dict() # holds the axistag key for the slice we're viewing' holds the grid positions of display widgets (to display more than one image in the same window) maps the (x,y) grid coordinates (tuples) to integral keys (0...)self.viewPositions  = dict() self._separateChannels           = Falseself._defaultCursor = QtGui.QCursor(QtCore.Qt.ArrowCursor)self.fallbackCursorsColor       = pgui.GraphicsObject.defaultColorself.fallbackRoisColor          = pgui.GraphicsObject.defaultColorself.isComplex                 = Falseself.nChannels                 = 1self._current_frame_index_      = 0self._number_of_frames_         = 1 this is &quot;visual&quot; width which may not be on a spatial axis &quot;x&quot; this is &quot;visual&quot; height which may not be on a spatial axis &quot;y&quot;self.frameIterator              = None # ??? FIXME what's this for ???self.complexDisplay            = ComplexDisplay.real # one of &quot;real&quot;, &quot;imag&quot;, &quot;dual&quot; &quot;abs&quot;, &quot;phase&quot; (cmath.phase), &quot;arg&quot; QGraphicsLineItems -- outside the roi/cursor GraphicsObject framework! NOTE 2019-03-18 12:54:14 TODOself._cursors_color_self._rois_color_### properties###@propertydef dataFrames(self):&quot;&quot;&quot;The number of data frames&quot;&quot;&quot;return self._number_of_frames_" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHmFF8cPVN5Vz" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uS15xG7yqfiOI" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRJdPMzgiFKTa" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="currentFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uBzj9rL28XRzA" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubPPHRKlXQHNe" isOverride="false" comment="        Emits self.frameChanged signal when not a guiClient&#xa; NOTE: 2018-09-25 23:06:55 recipe to block re-entrant signals in the code below cleaner than manually docinenctign and re-connecting and also exception-safeself.framesQSpinBox.valueChanged[int].disconnect()self.framesQSlider.valueChanged[int].disconnect()print(&quot;ImageViewer %s currentFrame: &quot; % self.windowTitle(), self._current_frame_index_) updates the graphics items positions from their backend store ONLY is this is an independent window (ie. it is not a client to some other app e.g. LSCaT) when a client to such app, it falls to that app to manage the  graphics items' backends (i.e., to set the index of their current  frame) followed by the backends' responsibility to update their frontends check to avoid race conditions and recurrenceself.framesQSpinBox.valueChanged.connect(self.slot_setFrameNumber)self.framesQSlider.valueChanged.connect(self.slot_setFrameNumber) NOTE: 2018-05-21 20:59:18" visibility="public" isInline="false" isSpecification="false" name="currentFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uhQbpLil9uZOL" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uiAAajy502z2L" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubElKUyN2QxXz" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="cursors" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ueZZS6g1TYNIq" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uFVRAVjNWfVyo" isOverride="false" comment="Returns a GraphicsObject cursor with specified ID or name (label).&#xa;        &#xa;        Parameters:&#xa;        ===========&#xa;        value: str: the cursor Id or roi Name (label)&#xa;" visibility="public" isInline="true" isSpecification="false" name="cursor" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uqbosZPeKGhiF" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uXJPs40JU7BKm" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1ckNPdsYAQDr" isOverride="false" comment="Tests for existence of a GraphicsObject cursor with specified ID or name (label).&#xa;        &#xa;        Parameters:&#xa;        ===========&#xa;        value: str: the cursor Id or roi Name (label)&#xa;" visibility="public" isInline="false" isSpecification="false" name="hasCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ua3Vh3FGrWOYg" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="usmn8h8zhVwpn" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uqkiyKwH9Pukg" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="rois" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uxFigv4sYMDyO" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utXKf21SBWSBO" isOverride="false" comment="Returns a GraphicsObject roi with specified ID or name (label).&#xa;        &#xa;        Parameters:&#xa;        ===========&#xa;        roiId: str: the roi Id or roi Name (label)&#xa;" visibility="public" isInline="false" isSpecification="false" name="roi" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ugum3VKpVNB6h" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u946Pcpk0bl2X" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="roiId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4xBFglqhYQGR" isOverride="false" comment="Tests for existence of a GraphicsObject roi with specified ID or name (label).&#xa;        &#xa;        Parameters:&#xa;        ===========&#xa;        roiId: str: the roi Id or roi Name (label)&#xa;" visibility="public" isInline="false" isSpecification="false" name="hasRoi" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="utnUCyJEDJdzC" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uhVbo5whxajQC" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="roiId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubeZaX7KggzIV" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="colorBarWidth" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uU3HqTN4Aybn5" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJJdOYAStppmb" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="colorBarWidth" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uqAiO8fp8f9Ps" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uernM3Dodoera" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uuYovm57lbZAA" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="viewer" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uv2hW6bIcJh19" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uXCdnlhaPpYPw" isOverride="false" comment="A reference to viewerWidget's QGraphicsScene.&#xa;" visibility="public" isInline="false" isSpecification="false" name="scene" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uE4fhOnhjyfjg" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRxd13hnWECHR" isOverride="false" comment="A reference to the selected ROI&#xa;" visibility="public" isInline="false" isSpecification="false" name="selectedRoi" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uaDiGb9Y3HsqI" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uHmrh8JlCAUnx" isOverride="false" comment="A reference to the selected cursor&#xa;### slots### helper for export slots" visibility="public" isInline="false" isSpecification="false" name="selectedCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwtKWw4zgcvuC" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6FMF34zNhte0" isOverride="false" comment="font = QtGui.QFont(&quot;sans-serif&quot;, pointSize = 4)" visibility="protected" isInline="false" isSpecification="false" name="export_scene_helper_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ustSn68eghW6G" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uNKaMCoi8IE4z" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="file_format"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6kNdXKyXVuTS" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_exportSceneAsPNG" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPNiv0U43IW46" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uq35iuNa1OvZ8" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_exportSceneAsSVG" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="unP6dUex3M3U9" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u8RJ5mEMzOVXF" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_exportSceneAsTIFF" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="urjdPgVoDdcbm" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ualgrgKByGPi4" isOverride="false" comment="if image" visibility="public" isInline="false" isSpecification="false" name="slot_saveTIFF" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwPS82XEPcSgN" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubgphQgmKSyij" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_editCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uMGuAhMLWIXit" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0r4vpZ9YRMqj" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_editSelectedCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwic9Qz8VLxKy" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uSVLubZotyboU" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeCursors" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uTEwzpLl2FfU0" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uIi518qdmXtFi" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeSelectedCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uFb25aCOOVTvu" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ugLeUHuQ71e06" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeRois" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uloZ7M94vGnZT" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5P5NacRJG8dJ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeRoi" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwmMilyYtYvTz" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u8KWnCGNTYeKW" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="roiId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKOgh8E9yXWQw" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeSelectedRoi" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uNgwJUjwOMdSo" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uq3YxWKfCE6l9" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_zoomIn" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ureZlRnOllkPS" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4sBwl1QumwgQ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_zoomOriginal" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVgbPSLC6KUwE" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufCpus5UbDPyO" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_refreshDataDisplay" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uEPacxDYNpxYP" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uhRaOWhFXL8Zt" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_zoomOut" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHiXEkf9k9zzg" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uDrCVl45tbDrO" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_selectZoom" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uyziSanJOig5y" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubDll0hTTvDRg" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_displayColorBar" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6gFg9xDG938l" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u0jlFZ3naJBlI" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uFQGAOzmVNvu2" isOverride="false" comment="try:import qimage2ndarray as q2aexcept:traceback.print_exc()return 1) prepare a gradient image:self.colorbar.setPos(bar_x, 0)self.colorbar.setPos(bar_x, 0) 2) draw a rect around the gradient image 3) calculate ticks (thanks to Luke Campagnola, author of pyqtgraph) 3.a) tick spacingprint(&quot;optTickSpc&quot;, optTickSpc)print(&quot;max_p10_spacing&quot;, max_p10_spacing)print(&quot;intervals&quot;, intervals)print(&quot;minorIndex&quot;, minorIndex) each element is a tuple (spacing, offset)print(&quot;levels&quot;, levels)print(&quot;minSpc&quot;, minSpc)print(&quot;maxNTicks&quot;, maxNTicks)print(&quot;levels&quot;, levels) will have tuple of (spacing, sequence of tick values)print(ticks)print(&quot;tick_strings&quot;, tick_strings)print(&quot;tick_y_positions&quot;, tick_y_positions)#print(&quot;fRect&quot;, fRect)tick_labels_width.append(fRect.width()) * 1.1)back_rect.setZValue(-1) TODO/FIXME figure out how to get the image min and max from a QImage!if isinstance(self._data_, QtGui.QImage):if image.depth() == 24:passbar_height = self._data_.height()bar_x = self._data_.width()" visibility="protected" isInline="false" isSpecification="false" name="setup_color_bar_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uhMBdoV301gy4" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uY3EYOb3ajhP4" isOverride="false" comment=" shouldn't really get here in pixels!print(&quot;def_x&quot;, def_x)print(&quot;def_x_len&quot;, def_x_len) in pixels!print(&quot;def_y&quot;, def_y)print(&quot;def_y_len&quot;, def_y_len)dlg = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Display scale bars&quot;)display_group = vigra.pyqt.quickdialog.HDialogGroup(dlg)show_x = vigra.pyqt.quickdialog.CheckBox(display_group, &quot;Horizontal&quot;)show_y = vigra.pyqt.quickdialog.CheckBox(display_group, &quot;Vertical&quot;)x_prompt = vigra.pyqt.quickdialog.FloatInput(dlg, &quot;X coordinate (in %s)&quot; % x_units)y_prompt = vigra.pyqt.quickdialog.FloatInput(dlg, &quot;Y coordinate (in %s)&quot; % y_units)x_len_prompt = vigra.pyqt.quickdialog.FloatInput(dlg, &quot;Length on X axis (in %s)&quot; % x_units)y_len_prompt = vigra.pyqt.quickdialog.FloatInput(dlg, &quot;Length on Y axis (in %s)&quot; % y_units)print(&quot;x&quot;, x)print(&quot;x_len&quot;, x_len)print(&quot;y&quot;, y)print(&quot;y_len&quot;, y_len)" visibility="public" isInline="false" isSpecification="false" name="slot_displayScaleBar" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ucHZRNKIra8dr" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uo4rdPwBSeNqe" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uoDc5PQhlL0iw" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="setup_channels_display_actions_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u12NCWFrrpaXd" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3x4WzrtA6xLt" isOverride="false" comment="@pyqtSlot()def slot_refreshDisplayedWorkspaceImage(self):&quot;&quot;&quot;Refreshes the data display.Requires that self._scipyenWindow_ is of the appropriate typeand that self._data_var_name_ is a valid identifier for the datain self._scipyenWindow_.workspace namespace&quot;&quot;&quot;from workspacefunctions import getvarsbytypeif self._scipyenWindow_ is None:returnif isinstance(self._data_var_name_, str):img_vars = dict(getvarsbytype(vigra.VigraArray, ws = self._scipyenWindow_.workspace))if self._data_var_name_ not in img_vars.keys():returnimage = img_vars[self._data_var_name_]if isinstance(self._displayedChannel_, int):if self._displayedChannel_ >= image.channels:self._displayedChannel_ = &quot;all&quot;self.view(image, title = self._data_var_name_, displayChannel = self._displayedChannel_)" visibility="public" isInline="false" isSpecification="false" name="slot_displayChannel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ugB6M62bQyFPq" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2H06hDvg4AMh" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_loadImageFromWorkspace" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uxYwmRyDLURRH" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uwvWe1mrrLsPB" isOverride="false" comment=" NOTE: 2017-07-25 22:07:49 TODO: generate calibrated coordinates here as well as done for slot_displayMousePos; TODO: factor out code for coordinate string generation  (started in _displayValueAtCoordinates) be aware that here the coordinates are a list which may contain cursor window size as well" visibility="public" isInline="false" isSpecification="false" name="slot_displayAllChannels" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uxbfIW1OVWzJr" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uCmIWaNzBc7O5" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJQZtCnveisG5" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_displayCursorPos" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uTN1FjBVTbQra" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u5V64Dh7KkGXY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
          <UML:Parameter xmi.id="uXcn97MXa2Fk6" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="coords"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ungLP0wS7YHHZ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_displayMousePos" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOOkvgWxHzIVO" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uFs2tP2qCDTOI" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="x"/>
          <UML:Parameter xmi.id="uP6AeJjMdqadi" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="y"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ud5Coe73p0chL" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_graphicsObjectAdded" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZGvsy7IC5zrS" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uMmtgJI4s27Fp" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="obj"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uhIBX8btU1cFh" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_graphicsObjectChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usxvwV6H6W4FV" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u8yX75RtNT95A" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="obj"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ueWJNweyaF82Z" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_graphicsObjectRemoved" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u34c5VqGC4xZS" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uKFMM78djU1cQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="obj"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="urAaFGRl5u4o6" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_graphicsObjectSelected" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u3Yk4RfOjlYAv" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u59u5iF1qFIQs" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="obj"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujSGIZoxaOj5K" isOverride="false" comment="### private methods###" visibility="public" isInline="false" isSpecification="false" name="slot_graphicsObjectDeselected" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ue0wWouzvUNI8" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1zsgWg45bJH4" isOverride="false" comment="Extract information about image axes to figure out how to display it.&#xa;        &#xa;        For now ImageViewer only accepts images with up to three dimensions.&#xa;        &#xa;        NOTE:&#xa;        1) a 3D image MAY be represented as a 4D vigra array with a channel axis&#xa;        &#xa;        2) a 2D image MAY be prepresented as a 3D vigra array with a channel axis&#xa;        &#xa;        img is a vigra.VigraArray object&#xa;        &#xa;msgbox.setWindowTitle(sei[0].__class__.__name__)QtWidgets.QMessageBox.critical(self, &quot;Error&quot;, &quot;Data must have at least two non-channel axes; instead it has %d&quot; % (img.axistags.axisTypeCount(vigra.AxisType.NonChannel)))raise ValueError(&quot;Cannot display complex-valued data&quot;) there may be a previous image stored here parse width/height of previos image if any, to check against existing cursorsif self._data_.width != img.width or self._data_.height != img.height:" visibility="protected" isInline="false" isSpecification="false" name="parseVigraArrayData_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ufKtvzGnz5bzO" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uXHSNl4FqlCMR" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="img"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="upBiyypHkSzBn" isOverride="false" comment="print(&quot;self.colorMap is a &quot;, type(self.colorMap))print(type(sMap))cFrame = vigra.colors.applyColortable(image.astype('uint32'), cTable) TODO FIXME NOTE 2017-10-05 14:17:00 do NOT apply colormap to multi-band imagecFrame = lrMapImage.copy() FIXME/TODO figur out how to apply color table to a QImage!if isinstance(image, QtGui.QPixmap):qimg = image.toImage()else:qimg = imageif qimg.isGrayScale():q" visibility="protected" isInline="false" isSpecification="false" name="applyColorTable_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uoIBC8paC37jd" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u9vCVcMg48HLl" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="image"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZtk3DDfYuT2G" isOverride="false" comment="Returns a slice (frame) of self._data_ along the self.frameAxis&#xa;        &#xa;        If the slice contains np.nan returns a copy of the image slice.&#xa;        &#xa;        Otherwise, returns a REFERENCE of the image slice.&#xa;        &#xa; up to now, img_view is a reference (a view of a slice) if there are nans make a copy replace nans with 0" visibility="protected" isInline="false" isSpecification="false" name="generate_frame_view_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uu1uTaGFub1xR" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uF8s0MX9k6Kwj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="channel"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKcXCRda4Ibqm" isOverride="false" comment="print(&quot;viewing frame along the %s axis &quot; % self.frameAxisInfo) this is an array view !if isinstance(channel_index, int) and &quot;c&quot; in self._currentFrameData_.axistags and channel_index in range(self._currentFrameData_.channels):self._currentFrameData_ = self._currentFrameData_.bindAxis(self.frameAxisInfo.key, self._current_frame_index_).bindAxis(&quot;c&quot;, channel_index) NOTE: 2019-04-04 21:45:44 treatment of nans dealt with by self._generate_frame_view_()if np.isnan(self._currentFrameData_).any():# make a clean copy of the view , replace nans with zerosself._currentFrameData_ = self._currentFrameData_.copy()self._currentFrameData_[np.isnan(self._currentFrameData_)] = 0.0 don't apply color map to a multi-band frame datawarnings.warn(&quot;Cannot apply color map to a multi-band image&quot;) TODO FIXME: what if we view a transposed array ???? (e.g. viewing it on Y or X axis instead of the Z or T axis?) this is not neccessarily space! this is not neccessarily space! NOTE: 2017-07-24 09:03:38 w and h are a convention here NOTE: 2017-07-26 22:18:14 get calibrates axes sizes NOTE 2018-09-14 11:45:13 TODO/FIXME adapt code to select channels from a Qimage is not allGray() or not isGrayscale()print(&quot;nothing to do ?&quot;) shouldn't really get here" visibility="public" isInline="false" isSpecification="false" name="displayFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uYRV66U6ECMjF" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u5l6PWtRjCaaO" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="channel_index"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0a4O1i9Wvztu" isOverride="false" comment=" NOTE: 2017-12-18 09:37:07 this relates to mouse cursor position!!!self.viewerWidget.scene.signalMouseLeave.connect(self._sceneMouseLeave)self.viewerWidget.signalCursorDeselected[object].connect(self.slot_graphicsObjectDeselected)self.viewerWidget.signalRoiDeselected[object].connect(self.slot_graphicsObjectDeselected)self.actionRefresh.triggered.connect(self.slot_refreshDisplayedWorkspaceImage)self.actionOpen.triggered.connect(self._openImageFile) NOTE: 2017-08-10 10:23:52 TODO: add Point, Line, Rectangle, Ellipse, Polygon, Path, Text for each of the above, give option to use the Mouse, or a dialogue for coordinates to be able to generate several cursors and/or ROIs without clicking via too many menus, TODO toolbar buttons (toggable) to create these TODO in addition, give the option to create pies and chords (secants), closed/open NOTE: all signals must be connected to appropriate viewerWidget slots!self.zoomToolBar.widgetForAction(self.zoomAction).setCheckable(True)" visibility="protected" isInline="false" isSpecification="false" name="configureGUI_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uFgDUlDo63j1g" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKHN0Sx5fSVER" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="editColorMap" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usFOy4T0MJ7Gb" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uj8WjKbqRLjNh" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_testColorMap" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u797bqdjGLbDQ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uXF7v63Ew1qHe" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uUoduB565viSY" isOverride="false" comment=" cache the current colorMap this will SET self.colorMap to the selected one" visibility="public" isInline="false" isSpecification="false" name="slot_chooseColorMap" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ugcpKKYeOhJzJ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u3I4pZmeEerg3" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="usLmJzqz7IKKo" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="editImageBrightness" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uGSWE6d38Wd23" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uN1bDwRu9O3Tn" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="editImageGamma" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uGeNrVqhcVKmN" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZzR5SrJfHr4d" isOverride="false" comment="        coords: a list or tuple with 2 -- 4 elements:&#xa;                (x,y), (x,y,wx), (x,y,wx,wy) where any can be None&#xa;                x,y = coordinates in the displayed frame&#xa;                wx, wy = range along the horizontal (wx) and vertical (wy) axis &#xa;                         centered around x and y coordinate, respectively&#xa;                         &#xa;        crsId: string with cursor ID or None&#xa;if self._currentFrameData_ is None:return this can also be a PictArray! NOTE: 2017-07-24 09:03:38 w and h are a convention herew = self._data_.shape[0]h = self._data_.shape[1] below, img is a view NOT a copy !print(&quot;w: %f, x: %f, h: %f, y: %f&quot; % (w, x, h, y)) there may be a channel axisdt.defaultAxisTypeSymbol(self._currentFrameData_.axistags[0])dt.defaultAxisTypeSymbol(self._currentFrameData_.axistags[1]) this is possible only when there is a channel axis! self.frameAxisInfo is a tuple shouldn't realy get here, should we ?!?dt.defaultAxisTypeSymbol(self.frameAxisInfo)val = self._data_.pixel(x,y) shouldn't really get here### public methods###" visibility="protected" isInline="false" isSpecification="false" name="displayValueAtCoordinates" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uDNZk6xZ5sbQm" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uH5MS7u1mRgns" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="coords"/>
          <UML:Parameter xmi.id="ubyfaz5lSZkXX" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="crsId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uqYNKnsjTujMg" isOverride="false" comment="Delegation in order to keep code using ImageViewer small.&#xa;        &#xa;        rois: boolean or None (default)&#xa;        &#xa;            When None: returns a dict where keys are all registered graphics objects&#xa;                        and values are dicts&#xa;                        &#xa;            NOTE:  this is NOT a ChainMap&#xa;            &#xa;            When True: returns the dictionary of rois (a ChainMap)&#xa;            &#xa;            When False: returns the dictionary of cursors (a ChainMap)&#xa;            &#xa;        &#xa;" visibility="public" isInline="false" isSpecification="false" name="graphicsObjects" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u0fJQl4W6zQta" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="udFCCcCQBu9he" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="rois"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uu5nAhlb29JcL" isOverride="false" comment="Delegation in order to keep code using ImageViewer small.&#xa;        &#xa;        Delegates to self.roi(value) if roi, or self.cursor(value) otherwise&#xa;" visibility="public" isInline="false" isSpecification="false" name="graphicsObject" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u0UY0J963oznE" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uC7Ywz5Y0w0fW" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="name"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uUejwlXwgyL6g" isOverride="false" comment="Delegation in order to keep code using ImageViewer small.&#xa;        &#xa;        Delegates to self.hasRoi(value) if roi, or self.hasCursor(value) otherwise&#xa;" visibility="public" isInline="false" isSpecification="false" name="hasGraphicsObject" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u2erCDNDjV5Up" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ugUOi1heFmaSq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="name"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uff5UvHBeJ94O" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeCursorByName" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLcsfeD3YWYle" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uJ0mSV4dWiJGP" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="crsId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uSX7dUEoO2YYY" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_removeRoiByName" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uTjPoETlq9qdY" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u5KVGdmW9L7di" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="crsId"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uvQ4BXGii1gXd" isOverride="false" comment="print(&quot;ImageViewer %s removeGraphicsObject %s&quot; % (self.windowTitle(), name))" visibility="public" isInline="false" isSpecification="false" name="removeGraphicsObject" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uMOup2GP1lJY1" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u3O4pXjVPGGiW" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="name"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uxQSrdQcB3CYx" isOverride="false" comment="if not self._gui_client_:if not self.guiClient:windowSize = self.settings.value(&quot;ImageViewer/WindowSize&quot;, None)windowPos = self.settings.value(&quot;ImageViewer/WindowPos&quot;, None)windowState = self.settings.value(&quot;ImageViewer/WindowState&quot;, None)colorMapName = self.settings.value(&quot;ImageViewer/ColorMap&quot;, None)color = self.settings.value(&quot;ImageViewer/CursorsColor&quot;, None)color = self.settings.value(&quot;ImageViewer/RoisColor&quot;, None)color = self.settings.value(&quot;ImageViewer/SharedCursorsColor&quot;, None)color = self.settings.value(&quot;ImageViewer/SharedRoisColor&quot;, None)" visibility="protected" isInline="false" isSpecification="false" name="load_settings_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uQzq4VldB1hvo" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uOpaR10BDUU4F" isOverride="false" comment="if not self._gui_client_:if not self.guiClient:print(self.colorMap.name)def closeEvent(self, evt):self._save_settings_()evt.accept()self.close()def event(self, evt):evt.accept()if evt.type() in (QtCore.QEvent.FocusIn, QtCore.QEvent.WindowActivate):self.sig_activated.emit(self.ID)return Truereturn super(ImageViewer, self).event(evt)" visibility="protected" isInline="false" isSpecification="false" name="save_settings_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ufKhFDrFOjo3u" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ugZ3sBGeZrKAm" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setImage" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLqmfMsRzKFID" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uYmpnoTjtwoCg" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="image"/>
          <UML:Parameter xmi.id="uddY5K8h6F3iC" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="x"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6y1EUGcC3iH8" isOverride="false" comment=" see NOTE: 2018-09-25 23:06:55self.showAllChannelsAction.toggled[bool].disconnect(self.slot_displayAllChannels)self.showAllChannelsAction.toggled[bool].connect(self.slot_displayAllChannels)#" visibility="public" isInline="false" isSpecification="false" name="displayChannel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5HN08CqRD2hf" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uc5kOTzP5u2zk" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="channel_index"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uAasQ6oPtxwvG" isOverride="false" comment=" see NOTE: 2018-09-25 23:06:55action.triggered.disconnect(self.slot_displayChannel)action.triggered.connect(self.slot_displayChannel)" visibility="public" isInline="false" isSpecification="false" name="displayAllChannels" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOOy0u9WUtABz" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJKdDwlO3ytwv" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="view" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u4K2YBHsWghDm" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uf7ItY1JIjwgJ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="image"/>
          <UML:Parameter xmi.id="u7MNHcwT7prVz" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="doc_title"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5oPx5V6iSFfA" isOverride="false" comment="self._separateChannels  = separateChannelsClears all image data cursors and rois from this window&#xa;self.imageNormalize             = Noneself.imageGamma                 = Noneself.colorMap                   = Noneself.prevColorMap               = Noneself.colorTable                 = Noneself.setWindowTitle(&quot;Image Viewer&quot;) this is &quot;visual&quot; width which may not be on a spatial axis &quot;x&quot; this is &quot;visual&quot; height which may not be on a spatial axis &quot;y&quot; see NOTE: 2018-09-25 23:06:55self.displayScaleBarAction.toggled[bool].disconnect(self.slot_displayScaleBar)self.displayScaleBarAction.toggled[bool].connect(self.slot_displayScaleBar)Shows a scale bar for both axes in the display&#xa;        origin: tuple or list with (x,y) coordinates of scale bars origin&#xa;        length: tuple or list with the length of the respective scale bars (x and y)&#xa;        &#xa;        NOTE: both values are in pixels (i.e. ints)&#xa;        &#xa; shouldn't really get hereself._xScaleBar_.setAcceptedMouseButtons(QtCore.Qt.NoButton)self._yScaleBar_.setAcceptedMouseButtons(QtCore.Qt.NoButton)Manually add a roi or a cursor to the underlying scene.&#xa;        &#xa;        Parameters:&#xa;        ===========&#xa;        &#xa;        item: either:&#xa;        &#xa;            a) pictgui.Cursor, a cursor GraphicsObjectType enum value (or int, &#xa;                    resolving to a cursor GraphicsObjectType enum), &#xa;                    &#xa;            or:&#xa;                    &#xa;            b) pictgui.Path, pctgui.Rect, pictgui.Ellipse, or a non-cursor &#xa;               GraphicsObjectType enum (or int resolving to a non-cursor&#xa;               GraphicsObjectType enum) &#xa;               &#xa;        Keyword parameters:&#xa;        ==================&#xa;        Passed to GraphicsObject constructor via GraphicsImageViewerWidget &#xa;        createNewRoi() or createnewCursor() methods.&#xa;        &#xa;print(&quot;window %s adds cursor %s in frame %s\n&quot; % (self.__repr__(), item.type, framesVisible))print(&quot;ImageViewer.setCursorsColor&quot;, color)print(&quot;ImageViewer.setRoisColor&quot;, color)print(&quot;ImageViewer.setSharedCursorsColor&quot;, color.name())print(&quot;ImageViewer.setRoisColor&quot;, color)" visibility="public" isInline="false" isSpecification="false" name="setData" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uepgD3VPOzMdj" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uI2WSCtn6aMdN" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="image"/>
          <UML:Parameter xmi.id="umjxlG1mClL5Z" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="doc_title"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uQdQqyD0urQhR" visibility="public" isSpecification="false" name="ScipyenFrameViewer" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uUsQUf7v81Fda"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uYu5m9i5FZd1R" ownerScope="classifier" comment="Base type for Scipyen viewers that handle data &quot;frames&quot;.&#xa;&#xa;This should be inherited by viewers for data that is organized, or can be &#xa;sliced, in &quot;frames&quot;,&quot;sweeps&quot; or &quot;segments&quot;, and display one frame (sweep or &#xa;segment) at a time.&#xa;&#xa;At the moment, only ImageViewer and SignalViewer inherit from this.&#xa;&#xa;ScipyenFrameViewer inherits from ScipyenViewer and supplements it with code&#xa;(attributes and abstract methods) for managing data frames.&#xa;&#xa;The abstract methods defined in ScipyenViewer must still be implemented in&#xa;the derived types&#xa;&#xa;ScipyenFrameViewer also defines the Qt signal frameChanged, which should be&#xa;emitted by the implementation of currentFrame setter method.&#xa;&#xa;Examples:&#xa;&#xa;Use ImageViewer to display a 2D array view (slice) of a 3D array (e.g., vigra.VigraArray);&#xa;the slice view is taken the array axis designated as &quot;frame axis&quot;.&#xa;&#xa;Use SignalViewer to display:&#xa;one neo.Segment out of a sequence of neo.Segments, possibly contained in a neo.Block&#xa;&#xa;one neo.BaseSignal (or its derivative) out of a stand-alone collection of signals&#xa;&#xa;one 1D array view (slice) of a 2D array (e.g. numpy ndarray or vigra.VigraArray)&#xa;&#xa;ATTENTION: Synchronizing frame navigation across instances of ScipyenFrameViewer.&#xa;&#xa;1) Subclasses of ScipyenFrameViewer should define at least one of two QWidgets &#xa;(a QSlider and a QSpinBox) used for frame navigation.&#xa;&#xa;In the implementation of _configureGUI_() these widgets should then be &#xa;aliased to self._frames_slider_ and self._frames_spinner_, respectively, to &#xa;allow for synchronization of frame navigation, e.g.:&#xa;&#xa;self._frame_slider_ = self.myQSliderQWidget&#xa;&#xa;2) To enable or disable synchronized frame navigation, use linkToViewers() or&#xa;unlinkViewer() / unlinkFromViewers(), respectively.&#xa;&#xa;Synchronized viewers display the data frame with the same index (provided&#xa;that the frame index is valid for their individually displayed data). &#xa;Navigating across frames inn one viewer is propagated to all viewers that&#xa;are synchronized with it.&#xa;" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="frameChanged"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uUsUWZSzt7qCk" isOverride="false" comment="self._linkedViewers_            = list() These two should hold a reference to the actual QSlider and QSpinBox defined in the subclass, or in *.ui file used by the subclassself._gui_client_             = asGUIClientself._data_var_name_         = None" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIH6gjCIMJFnn" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uwcF9biXP9ydD" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uQitjQOZAdUo2" isOverride="false" comment="Display the data frame with _current_frame_index_.&#xa;        Must be implemented in the derived class.&#xa;        The implementation may rely on an internal &quot;curent_frame&quot;:int, or&#xa;        expect the index of the frame to be passed as function parameter.&#xa;" visibility="public" isInline="false" isSpecification="false" name="displayFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ukzJ3RxSfgKiB" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uEPLWr78xS1NX" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u7z8ZEHHnu63N" isOverride="false" comment="The number of data &quot;frames&quot; this viewer knows of.&#xa;" visibility="public" isInline="false" isSpecification="false" name="dataFrames" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uujs42nOr2syW" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ukjt1wxWpujxS" isOverride="false" comment="The number of data &quot;frames&quot; this viewer knows of.&#xa;        Alias for dataFrames&#xa;" visibility="public" isInline="false" isSpecification="false" name="nFrames" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVihmuhYbkhQE" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="urDimXiBwlYHr" isOverride="false" comment="The index of the current data &quot;frame&quot;.&#xa;        Abstract method: it must be implemented in the derived class.&#xa;        This property also has a setter (also an abstract method that must be&#xa;        implemented in the derived class)&#xa;" visibility="public" isInline="false" isSpecification="false" name="currentFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uMvSx6NzpsDl0" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="urEPF9ujlU08n" isOverride="false" comment="Sets value of the current frame (to be displayed).&#xa;        Does not emit frameChanged signal.&#xa;        NOTE: Subclasses can override this function.&#xa;" visibility="public" isInline="false" isSpecification="false" name="currentFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uh1l2fS9h3SGc" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uy9MODgRp20xJ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="usT1FNE3geT2I" isOverride="false" comment="A list with linked viewers.&#xa;        All viewers must be ScipyenFrameViewer objects, and the &quot;link&quot; refers to&#xa;        the synchronization of frame navigation across several viewers.&#xa;        &#xa;        Data in each viewer should be structured with the same number of frames.&#xa;        &#xa;" visibility="public" isInline="false" isSpecification="false" name="linkedViewers" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ui1hllX7lqg4M" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="udQqmx5i2hxJ9" isOverride="false" comment="Read-only access to the frames QSlider.&#xa;        &#xa;        This is either None, or the actual QSlider used by the derived class&#xa;        for frame navigation (if defined). &#xa;" visibility="public" isInline="false" isSpecification="false" name="framesSlider" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uEfMtKRJ5l8Jq" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uXn7pLXQzknq4" isOverride="false" comment="Read-only access to the frames QSpinBox.&#xa;" visibility="public" isInline="false" isSpecification="false" name="framesSpinner" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uNpoUu2h1ztsU" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uETZYAhXnw1t7" isOverride="false" comment="Synchronizes frame navigation with the specified viewer(s).&#xa;        &#xa;        Named parameters:&#xa;        ----------------&#xa;        broadcast: bool (default True). If True, also synchronizes frame&#xa;            navigation among the viewers.&#xa;        &#xa;        Var-positional parameters:&#xa;        -------------------------&#xa;        viewers: Instances of ScipyenFrameViewer&#xa;        &#xa; avoid synchronizing to itself" visibility="public" isInline="false" isSpecification="false" name="linkToViewers" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ucIkuDtJBD53f" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ukgmlnixQAzvy" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="broadcast"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufGB9nXNnlrgK" isOverride="false" comment="Removes the bidirectional link with the other viewer.&#xa;" visibility="public" isInline="false" isSpecification="false" name="unlinkViewer" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6WRwpNHOGXrB" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="umXgDlrUQZgNc" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uzYjcvcTD271H" isOverride="false" comment="Removes frame navigation synchronization with other viewers.&#xa;        &#xa;        Var-positional parmeters:&#xa;        =========================&#xa;        &quot;others&quot; : sequence of viewers that support multiple data frames&#xa;            and are present in self.linkedViewers property.&#xa;            and have a slot named &quot;slot_setFrameNumber&quot;, i.e. SignalViewer and &#xa;            ImageViewer.&#xa;            &#xa;        When &quot;others&quot; is empty, removes synchronization with all viewers in&#xa;        self.linkedViewers.&#xa;            &#xa;        &#xa;        Any navigation links between the others are left intact. This asymmetry &#xa;        with linkToViewers() is deliberate.&#xa; break all currently defined &quot;links&quot;" visibility="public" isInline="false" isSpecification="false" name="unlinkFromViewers" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuYsyfs97vZaW" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uNcQa4xucI5m9" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubrQ00hcNRKUr" isOverride="false" comment="Drives frame navigation from the GUI.&#xa;        &#xa;        The valueChanged signal of the widget used to select the index of the &#xa;        displayed data frame should be connected to this slot in _configureGUI_()&#xa;        &#xa;        NOTE: the subclass can override this function.&#xa;print(&quot;ScipyenFrameViewer %s slot_setFrameNumber %d&quot; % (type(self).__name__, value))" visibility="public" isInline="false" isSpecification="false" name="slot_setFrameNumber" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVPJHxk7OWPea" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uMUZLJ6oJaQiE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uQdQqyD0urQhR" xmi.id="uMk5uqNJIaJrH" visibility="public" isSpecification="false" name="" discriminator="" child="uuOVuuTtIHR7o"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="ufs1BhCTRb9Ie" visibility="public" isSpecification="false" name="Ui_ImageViewerWindow" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="ufs1BhCTRb9Ie" xmi.id="uW87V1s8oibs4" visibility="public" isSpecification="false" name="" discriminator="" child="uuOVuuTtIHR7o"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="upzLgNZSMlGGa" visibility="public" isSpecification="false" name="PictMagics" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uZC1nHL79NEgR"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ulU1I4vvdW0bo" isOverride="false" comment="%exit line magic&#xa;class MyProxyStyle(QtWidgets.QProxyStyle):&quot;&quot;&quot;To prevent repeats of valueChanged in QSpinBox controls for frame navigation.This raises the spin box SH_SpinBox_ClickAutoRepeatThreshold so thatvalueChanged is not repetedly called when frame navigation takes too long time.See https://bugreports.qt.io/browse/QTBUG-33128.&quot;&quot;&quot;def __init__(self, *args):super().__init__(*args)def styleHint(self, hint, *args, **kwargs):if hint == QtWidgets.QStyle.SH_SpinBox_ClickAutoRepeatRate:return 0elif hint == QtWidgets.QStyle.SH_SpinBox_ClickAutoRepeatThreshold:return 1000000return super().styleHint(hint, *args, **kwargs)" visibility="public" isInline="false" isSpecification="false" name="exit" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uudfprqY01txw" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u73K2lxr4zSgn" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="line"/>
          <UML:Parameter xmi.id="uA2icGnDMpdYI" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="local_ns"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="ubVMIsXeZTzL3" visibility="public" isSpecification="false" name="Magics" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="ubVMIsXeZTzL3" xmi.id="uZC1nHL79NEgR" visibility="public" isSpecification="false" name="" discriminator="" child="upzLgNZSMlGGa"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u0E9WXYp3MGzx" visibility="public" isSpecification="false" name="FileSystemModel" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="u19FbcLEV6DYg"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ut5jEvL3LjOEv" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uH4iSc2xSdMp3" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uA0zA3u1D03Ry" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u9Ysf0VNdrals" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="data" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="us9qxG0bZREhf" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ulQc0gXVJMmit" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="ndx"/>
          <UML:Parameter xmi.id="uJn9tfqXvI7DC" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="role"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="ugVIFdQmdEuKU" xmi.id="u19FbcLEV6DYg" visibility="public" isSpecification="false" name="" discriminator="" child="u0E9WXYp3MGzx"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u7FhyqmYHacXS" visibility="public" isSpecification="false" name="WorkspaceModel" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uZmGWtwJGXgze"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uggt4LpjP4Ex0" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="windowVariableDeleted"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3bKDRMEoyZ1A" isOverride="false" comment=" reference to the IPython InteractiveShell NOTE: 2017-09-22 21:33:47 cache for the current var name to allow renaming workspace variables this should be updated whenever the variable name is selected/activated in the model table view" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuxwQZ9G4Tib4" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uc7ZdsOn0lCqy" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="shell"/>
          <UML:Parameter xmi.id="ufEKfEcKvLlKr" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="hidden_vars"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ugcjhtFpADLNe" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="reset_variable_dictionaries__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ufvYZ0RFqUrSd" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uUY7m6dD5ZdGm" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="clear" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u0qMUzkePtMbp" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u9YVdRubZEgvY" isOverride="false" comment="self.cached_vars.update([item for item in self.shell.user_ns.items() if item[0] not in self.hidden_vars and not item[0].startswith(&quot;_&quot;)])" visibility="public" isInline="false" isSpecification="false" name="pre_execute" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="unHHMrLErLvVC" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utZPVquY4K5If" isOverride="false" comment=" NOTE: 2018-10-07 09:00:53 find out what happened to the variables and populate the corresponding dictionaries FIXME: 2019-09-11 21:46:30 when you call del(figure) in the console (Figure being a matplotlib Figure instance) is unbinds the name &quot;figure&quot; in the shell (user) workspace from the Figure instance however pyplot STILL holds a live reference to it (which is only removed after calling plt.close(figure)) so just by simply comparing the figure numbers plt knows about, to those of any figures left in the user namespace will flag those figures as newly created NOTE 2019-09-11 22:01:42 a new figure (created via pyplot, or &quot;plt&quot; interface) will be present in BOTH  user namespace and Gcf.figs (placed there by the plt intereface) but absent from cached_vars conversely, a figure removed from user namespace via del statement will be present in cached_vars AND ALSO in Gcf.figs, if created via plt interface a list !!!mpl_figs_in_pyplot = plt._pylab_helpers.Gcf.figs # this maps int values to figure managers, not figure instances !!! TODO do not deletempl_figs_in_user_ns = [item for item in self.user_ns.items() if isinstance(item[1], mpl.figure.Figure)]# NOTE that user_ns and cached vars may be different in post_executempl_figs_cached = [item for item in self.cached_vars.items() if isinstance(item[1], mpl.figure.Figure)]# new figures created via pyplot interface - they're in pyplot Gcf, but not in cached, nor in user nsnew_mpl_figs_via_plt = dict(map(lambda x: (x.number, x), [ x for x in mpl_figs_in_pyplot if item not in mpl_figs_cached.values() and item not in mpl_figs_in_user_ns.values()]))# new figures created directly via matplotlib API (but still at the console)# they are present in user_ns (put there by your code), but not in cached vars, # and not (yet) in Gcf; also it doesn't automatically  get a number (this seems# to be managed only via the pyplot interface)new_mpl_figs = [item for item in mpl_figs_in_user_ns if item[1] not in mpl_figs_cached.values() and item[1] not in mpl_figs_in_pyplot.values()]if len(mpl_figs_in_pyplot):next_fig_num = max(plt.get_fignums()) + 1else:next_fig_num = 1# add these to Gcf#  note that figures created directly with mpl API don;t have a canvas yet (Backend)for fig in new_mpl_figs.values():fig.number = next_fig_numnext_fig_num += 1print(&quot;\nmpl figs in plt&quot;, mpl_figs_in_pyplot)print(&quot;\nfigs in ns&quot;, dict_of_mpl_figs_in_ns) 1) deleted variables -- present in cached vars but not in the user namespace anymoreprint(&quot;\ndeleted figs&quot;, dict_of_mpl_figs_deleted_in_ns)print(&quot;\nnew_mpl_figs&quot;,new_mpl_figs)print(&quot;modified vars:&quot;, len(self.modified_vars)) not really necessary? (vars are stored by ref)print(type(item[1]))print(item[0])wid = int(item[1].winId())print(wid)for mapping in self.windows.maps:mapping.pop(wid, None)self.windows.pop(wid, None)traceback.print_exc()" visibility="public" isInline="true" isSpecification="false" name="post_execute" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uixouPwQpm68V" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="usInQo5Q78UW1" isOverride="false" comment=" cache this NOTE: 2016-03-26 23:18:00 somehow enabling variable name editing from within the workspace view is NOT trivial, so we disable this for now so that we display at least the data name &amp; type so that we display at least the data name &amp; typememsz    = str(total_size(data)) # too slow for large collectionsmemsz    = str(total_size(data)) # too slow for large collectionsmemsz    = str(total_size(data)) # too slow for large collectionselif isinstance(data, pd.Series):elif isinstance(data, pd.DataFrame): data name and type are always presentprint(str(e))" visibility="public" isInline="false" isSpecification="false" name="generateRowContents" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uW69Su1DLe74G" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uH5LMmpFQdxiB" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dataname"/>
          <UML:Parameter xmi.id="uimduBmfkAHOn" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uL4vUtIICM8Bw" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="getRowContents" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uArYtugDStjWr" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uo1vPsD6hyIIV" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="row"/>
          <UML:Parameter xmi.id="uzd5vNEx4RNwN" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="asStrings"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uEYCOl65wROHn" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="getRowIndexForVarname" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uBuEg9xGP9bEA" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uuBa5LpSRY6A8" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="varname"/>
          <UML:Parameter xmi.id="u4O0lL6WiM5N3" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="regVarNames"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uxSUWbDSYJdou" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="getCurrentVarName" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ufIKnrVyhd7KI" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uhYDlSCdN0GWg" isOverride="false" comment=" FIXME/TODO 2019-08-04 23:55:04 make this faster generate model view row contents for existing item" visibility="private" isInline="false" isSpecification="false" name="update_variable_row__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uExkkLOHsAGOo" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u4m0VycFJqkxv" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dataname"/>
          <UML:Parameter xmi.id="ubHlQGifuV4Vk" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="unfM46e7j4g8a" isOverride="false" comment=" FIXME/TODO 2019-08-04 23:55:04 make this faster generate model view row contents for existing item" visibility="public" isInline="false" isSpecification="false" name="updateRowForVariable" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uWFE04zAHBy8c" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uVGS13lGTxQbr" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dataname"/>
          <UML:Parameter xmi.id="uLhghraATAUPv" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uVdQpSSFZlnwB" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="removeRowForVariable" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u3ogDOU2Jc7Q9" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uc89nQfNnG1Fj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dataname"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uF2LqsgUhaSBM" isOverride="false" comment=" generate model view row contents append the row to the model" visibility="public" isInline="false" isSpecification="false" name="addRowForVariable" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uW4OvYgYHq3Di" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uNAIj1VayNXGX" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dataname"/>
          <UML:Parameter xmi.id="ufbTZDfvBaQpq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uu7StT4iJnsPb" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="clearTable" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uxcSG82bNZItM" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4wWM0IoxK8D5" isOverride="false" comment="Updates workspace model table&#xa;print(&quot;update table from console:&quot;, from_console)print(&quot;current rows:&quot;, self.rowCount())print(&quot;cached vars:&quot;, self.cached_vars) NOTE: 2018-10-07 21:46:03 added/removed/modified variables as a result of code executed in the console;  pre_execute and post_execute IPython events are handled as follows: pre_execute always creates a snapshot of the shell.user_ns, in cached_vars; hence, cached_vars represent the most recent state of the user_ns (and hence of the mainWindow.workspace) post_execute checks shell.user_ns against cached_vars and determines: 1) if variables have been deleted from user_ns (but still present       in cached_vars) => deleted_vars 2) if variables present in user_ns have been modified (these have       the same KEYs in cached_vars, but the cached_vars maps these KEYs        to different objects than the ones they are mapped to in user_ns   => modified_vars 3) if variables have been created in (added to) user_ns (but       missing from cached_vars) => new_varsprint(&quot;deleted variables:&quot;, self.deleted_vars) variables deleted via a call to &quot;del()&quot; in the consoleprint(&quot;modified variables:&quot;, self.modified_vars) variables modified via code executed in the consoleprint(&quot;added variables:&quot;, self.new_vars) variables created by code executed in the console NOTE:; 2018-10-07 21:54:45 for variables added/modified/deleted from code executed outside the console, unfortunately we cannot easily rely on the event handlers pre_execute and post_execute; therefore the cached_vars does not offer us much help here we rely directly on shell.user_ns insteadmpl_figs_in_pyplot = [plt.figure(i) for i in plt.get_fignums()]dict_of_mpl_figs_in_ns = dict([item for item in self.cached_vars.items() if isinstance(item[1], mpl.figure.Figure)])print(&quot;displayed vars:&quot;, displayed_vars) variables deleted from workspace or modified by code executed  outside the console deleted by GUIprint(varname) variables created by code executed outside the consoleprint(&quot;displayed vars again:&quot;, self.getDisplayedVariableNames(asStrings=True))" visibility="public" isInline="false" isSpecification="false" name="updateTable" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9iWRRBwntkUu" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u3JceRTe7SX9k" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="from_console"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uS0lMse0YyC6F" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="getDisplayedVariableNames" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uySKVMuWiFpuZ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uLF9ji7KfzbdU" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="asStrings"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" stereotype="class-or-package" isLeaf="false" isAbstract="false" xmi.id="uFBH0trH87hes" visibility="public" isSpecification="false" name="QtGui" isRoot="false">
       <UML:Namespace.ownedElement>
        <UML:Class namespace="uFBH0trH87hes" isLeaf="false" isAbstract="false" xmi.id="uouWhaK9Lo2sM" visibility="public" isSpecification="false" name="QStandardItemModel" isRoot="false"/>
        <UML:Class namespace="uFBH0trH87hes" isLeaf="false" isAbstract="false" xmi.id="ugnrRc9W0YXIf" visibility="public" isSpecification="false" name="QValidator" isRoot="false"/>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uouWhaK9Lo2sM" xmi.id="uZmGWtwJGXgze" visibility="public" isSpecification="false" name="" discriminator="" child="u7FhyqmYHacXS"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uDeiQRNgvwIFC" comment="Inherits QTableView with customized drag &amp; drop&#xa;    WARNING work in progress; not currently used&#xa;" visibility="public" isSpecification="false" name="WorkspaceViewer" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="umk1Ai7mJLsVZ"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ui2FX60i7jKFz" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uTQLSBhokvQFK" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uoW4H7jmLFU5W" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="mainWindow"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uqs5D2S8VWkbS" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="mousePressEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPN1fy2MkKWZf" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uLZfzPL0KIynS" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5GIwBg33930f" isOverride="false" comment="print(event.pos())pass # use CustomContextMenu policy" visibility="public" isInline="false" isSpecification="false" name="contextMenuEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u61eG8bSh01ZN" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uHcXJFU6JwHQo" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uHnB52akrTTe3" isOverride="false" comment=" NOTE: 2019-08-10 00:24:01 create QDrag objects for each dragged item ignore the DropEvenmt mimeData in the console () NOTE: use Jupyter (IPython >= 4.x and qtconsole / qt5 by default)" visibility="public" isInline="false" isSpecification="false" name="mouseMoveEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uxtg8xJ5SrnrR" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uQcWe6AuyVZCo" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="event"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="utD0IyH1dg8ml" xmi.id="umk1Ai7mJLsVZ" visibility="public" isSpecification="false" name="" discriminator="" child="uDeiQRNgvwIFC"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uvGIb48jM9sj3" visibility="public" isSpecification="false" name="EmbedIPython" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uSoPRuvkpInx2"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uBw7AUzya1ZNn" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="historyItemsDropped"/>
        <UML:Attribute xmi.id="upgtj9i1L1n6B" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="workspaceItemsDropped"/>
        <UML:Attribute xmi.id="uhCeBum171ZR9" ownerScope="classifier" comment="workspaceItemsDropped = pyqtSignal(bool)" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="loadUrls"/>
        <UML:Attribute xmi.id="uaaW56A426eHk" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="pythonFileReceived"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uFh2dhvt5wc5L" isOverride="false" comment="        super(RichIPythonWidget, self).__init__() NOTE: 2016-03-08 15:38:19super(IPythonWidget, self).__init__() what if gui is NOT Qt?# NOTE: 2016-03-20 14:37:37# this must be set BEFORE start_channels is called#self.ipkernel.shell.banner2 = &quot;\n&quot;.join(EmbedIPython.banner)self.ipkernel.shell.banner2 = u'\n*** NOTE: ***\n\nUser variables created here in console be visible in the User variables tab of the PICT main window.\n' +\u'\n\nThe Pict main window GUI object is accessible from the console as `mainWindow` or `mainWindow` (an alias of mainWindow)' +\u'\n\nExcept for user variables, if any of `mainWindow`, `mainWindow`, or loaded modules are deleted from the console workspace by calling del(...), they can be restored using the `Console/Restore Namespace` menu item.' +\u'\n\nThe &quot;Workspace&quot; dock widget of the Pict main window shows variables shared between the console (the IPython kernel) and the Pict window.' +\u'\n\nThe &quot;matplotlib.pyplot&quot; module is aliased as &quot;plt&quot;. Use this prefix for pyplot functions (e.g., plt.plot(), plt.cla(), etc.)' +\u'\n\nTo clear this window at any time type %clear at the prompt'+\u'\n\nFor further details type console_info()'self.kernel.shell.push(kwarg) NOTE: 2019-08-07 16:34:58 enforce qt5 backend for matplotlib see NOTE: 2019-08-07 16:34:23 self.settings = QtCore.QSettings(&quot;PICT&quot;, &quot;PICT&quot;)self.menubar = QtWidgets.QMenuBar(parent=self)self.setMenuBar(self.menubar)if evt.mimeData().hasFormat(&quot;text/plain&quot;):print(&quot;dragEnterEvent&quot;)print(&quot;Event: &quot;,evt)print(&quot;proposed action: &quot;,evt.proposedAction())print(&quot;mime data: &quot;, evt.mimeData())print(&quot;mime data formats: &quot;, mimeData.formats()) NOTE:2019-08-02 13:59:26 code below taken from console_widget module in qtconsole packageWrites a text in console buffer&#xa;data = evt.mimeData().data(evt.mimeData().formats()[0])print(dir(evt.keyboardModifiers()))print(&quot;EmbedIPython.dropEvent: event source: %s&quot; % src)print(&quot;EmbedIPython.dropEvent: \nevt mimeData %s&quot; % evt.mimeData())print(&quot;EmbedIPython.dropEvent: \ndata: %s \nsrc: %s&quot; % (text, src)) NOTE: 2019-08-10 00:23:42 for drop events issued by mainWindow's workspace viewer and command history ignore the mimeData and simply paste the text via clipboard (is there a way to bypass this? it work well as it is, but...) we do this asynchronously, via Qt's signal/slot mechanismNOTE: 2017-03-21 22:56:23 ScipyenWindow is signalled to copy the command: copy string(s) to the system's cliboard then paste them directly  into the console this works fine, with the added bonus that the drag/dropped commands  are also available on the system clipboard to paste onto some text  editorif isinstance(self.mainWindow, ScipyenWindow):print(&quot;EmbedIPython.dropEvent mime data has text:&quot;,  evt.mimeData().hasText())if evt.mimeData().hasText():print(evt.mimeData().text())print(&quot;EmbedIPython.dropEvent mime data has urls:&quot;, evt.mimeData().hasUrls())print(&quot;EmbedIPython.dropEvent possible actions:&quot;, evt.possibleActions())print(&quot;EmbedIPython.dropEvent proposed action:&quot;, evt.proposedAction())print(&quot;EmbedIPython.dropEvent actual drop action:&quot;,  evt.dropAction())print(evt.keyboardModifiers() &amp; QtCore.Qt.ShiftModifier)quoted = evt.keyboardModifiers() &amp; QtCore.Qt.ShiftModifierlinesep = evt.keyboardModifiers() &amp; QtCore.Qt.ControlModifierself.mainWindow.slot_pasteWorkspaceSelection() NOTE: 2019-08-10 00:29:04 do the above asynchronouslyself.workspaceItemsDropped.emit(bool(quoted))print(evt.mimeData().hasText())print(evt.mimeData().hasUrls())print(evt.possibleActions())print(evt.proposedAction())print(evt.dropAction())self.mainWindow.slot_pasteHistorySelection() NOTE: 2019-08-10 00:29:27 do the above asynchronously NOTE: 2019-08-10 00:54:40 TODO: load data from diskevt.accept()NOTE: 2019-08-02 13:35:52 allow dropping text in the console  useful for drag&amp;drop python code directly from a python source file opened in a text editor (that also supports drag&amp;drop) event source is from outside the Pict application (i.e. it is None)print(&quot;EmbedIPython.dropEvent: \nproposed action: %s&quot; % evt.proposedAction())print(&quot;EmbedIPython.dropEvent source:&quot;,  src)print(&quot;EmbedIPython.dropEvent mime data has text:&quot;,  evt.mimeData().hasText())print(&quot;EmbedIPython.dropEvent mime data has urls:&quot;,  evt.mimeData().hasUrls())print(&quot;EmbedIPython.dropEvent possible actions:&quot;,  evt.possibleActions())print(&quot;EmbedIPython.dropEvent proposed action:&quot;,  evt.proposedAction())print(&quot;EmbedIPython.dropEvent actual drop action:&quot;,  evt.dropAction()) check if this is a python source file NOTE: 2019-08-10 00:32:00 set mainWindow to load the URL asynchronously this also allows us to decide if we should also cd to the directory of the (local) URL, by pressing SHIFT while dropping NOTE: 2019-08-10 00:33:00 just write at the console whatever text has been droppedprint(echoing) NOTE: 2019-08-13 11:08:14 TODO: allow for running the code without writing it in console but store in history nevertheless (maybe?) NOTE: 2019-08-13 11:03:52 displays the text in the console to be edited to execute place cursor at the end of text and press ENTER executed statements are stored in python's command history NOTE: 2019-08-13 11:04:26 does NOT write to the console, does NOT store in historyexecuting...&quot; % wintitle)NOTE:NOTE: Other considered options:NOTE: 2017-03-21 22:41:53 connect this sigal to the _rerunCommand slot of ScipyenWindow:NOTE: half-baked approach that does not actuallyNOTE: paste the commands as input, but instead executes them directlyNOTE: FIXME NOT REALLY WHAT IS INTENDEDNOTE: TODO either use the paste mechanism of the ControlWidget superclass NOTE: (tricky, because that accesses private member of that superclass)NOTE: TODO or completely customize the item model of the history tree such that NOTE: upon drag event, the items DATA (specifically the command string(s)) NOTE: are encoded as text mime format and thus decoded hereNOTE: TODO FIXME this last suggestion would leave me again with the issueNOTE: of pasting them directly onto underlying text widget of the console, NOTE: which is a private memberprint(&quot;dropEvent&quot;)print(&quot;Event: &quot;,evt)print(&quot;proposed action: &quot;,evt.proposedAction())print(&quot;Event mime data formats: &quot;, evt.mimeData().formats())print(&quot;Event data: &quot;, data, &quot; &quot;, repr(data))print(&quot;Event source: &quot;, repr(evt.source())) TODO 2016-03-24 13:47:48  I quite like the stock Qt console of IPython that is launched by qtconsoleapp - it's a customized QMainWindow with a rich ipython widget as the actual &quot;console&quot;   with a lot of nice bells and whistles: magics listing, help, etc, but also   functionality that I don't want/need: tabbed consoles (with new or the same kernel),   possibility to restart/stop the current kernel   Therefore I'm deriving from it and override functions I find not necessary for picty   Actually it might be just damn simpler to generate my own console main window class   TODOclass _PictConsole(ConsoleMainWindow):pass NOTE 2016-03-27 16:53:16 the way multiple inheritance works in pyqt dictates that additional signals are  inerited only from the _FIRST_ superclass, which must also have the deepest  inheritance tree" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOYYTKhjhcLT7" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u1BxKXj1KzTBn" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="mainWindow"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Class namespace="uvGIb48jM9sj3" isLeaf="false" isAbstract="false" xmi.id="u4FeXqNNHtJeB" visibility="public" isSpecification="false" name="WindowManager" isRoot="false">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="u7QfNvsgkSV78"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNaV4UZqlaelc" isOverride="false" comment="super(WindowManager, self).__init__(parent) the Python3 way? gui_viewers defined in gui package (see gui/__init__.py) for matplotlib figuresself.currentViewerIDs = dict(map(lambda x: (x, None), gui_viewers))self.currentViewerIDs[&quot;Figure&quot;] = None" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="u5cHeDzWIkya8" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uvFBOlmRsQI4H" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ut2ektTG4ofUI" isOverride="false" comment="Not used, but keep it&#xa;" visibility="public" isInline="false" isSpecification="false" name="slot_windowActivated" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="upxDlPxlovtH0" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uCRKfJQYkNSdY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="obj"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uEiNrTgGu4l62" isOverride="false" comment=" TODO" visibility="public" isInline="false" isSpecification="false" name="slot_windowVariableDeleted" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uGpdYUU1byoeB" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uw9SDHM7Et5zw" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="wid"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1JrgLjtrKsCz" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="handle_mpl_figure_close" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="u0FVuuIUk9U8f" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uKGb50Fb7Z7eE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utg3KGxNqf4RX" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="handle_mpl_figure_click" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uGx1JkawlcPrj" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uUJlKXsbXP0gq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u42Te4P3DD27j" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="handle_mpl_figure_enter" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uiUlBXrVzfQm8" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uGSwpjLS1WM3A" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBN3mtWlWoiuB" isOverride="false" comment="Sets up the name of a new window viewer variable in the workspace&#xa;        Should be called before initializing an instance of winClass.&#xa;        Can be bypassed by creating a viewer window instance directly in the &#xa;        workspace by calling its constructor at the console.&#xa; algorithm: if name is a non-empty string, check if it is suitable as identifier, and if it is already mapped to a variable in the workspace:    use validateVarName to get a version with a counter appended to it. if no name is given (name is either None, or an empty string), then then compose the name based on the winClass name, append a counter based on the number of viewers of winClass type, in self.viewers NOTE: 2019-11-01 22:04:38 check winClass inherits from QtWidgets.QMainWindow, mpl.figure.Figure NOTE: 2019-11-01 22:04:47 check if winClass is one of the registered viewers this makes NOTE 2019-11-01 22:04:38 redundant TODO: mechanisms for registering new viewer types" visibility="protected" isInline="false" isSpecification="false" name="set_new_viewer_window_name_" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uLNqIJpQN0Rja" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="u7UIE5oU5q050" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="winClass"/>
            <UML:Parameter xmi.id="u07QdKtJFQK01" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="name"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uer23V4BFlquv" isOverride="false" comment="Factory method for a GUI Viewer or matplotlib figure.&#xa;        &#xa;        Parameters:&#xa;        -----------&#xa;        &#xa;        winClass : str, type, or sip.wrappertype&#xa;            The only acceptable type is mpl.figure.Figure (where mpl is an alias to matplotlib)&#xa;            &#xa;            The only acceptable sip.wrappertype objects are the viewer classes&#xa;            defined in the variable &quot;gui_viewers&quot; in the user workspace. These&#xa;            classes are:&#xa;            &#xa;            DataViewer, MatrixViewer, ImageViewer, SignalViewer, TableEditor, &#xa;            TextViewer, XMLViewer.&#xa;            &#xa;            When a str the ony acceptable ones are the string verison of the &#xa;            above (i.e. the value of their __name__ attribute).&#xa;            &#xa;        *args, **kwargs: passed directly to the constructor (__init__ function)&#xa;            of the winClass.&#xa;            &#xa;        &#xa;" visibility="protected" isInline="false" isSpecification="false" name="newViewer" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uqzly4RAPQk4Z" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uWZlzHw9zgpGr" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="winClass"/>
            <UML:Parameter xmi.id="uH6kjJzYW4Ft4" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uuZlP1Yze6vSP" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="removeViewer" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="ud9YvoJvwMH9R" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uJdaUPIWT0FtA" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="win"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ucdOduOX4aIWA" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="setCurrentWindow" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uXAX6nFMu5Cr0" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="umyO7h3wMBdEj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="obj"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uaRXM98R7jPmb" isOverride="false" comment="A list of figures managed by matplotlib.&#xa;" visibility="public" isInline="false" isSpecification="false" name="matplotlib_figures" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uyi5veErZq3Zw" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uDPE6yMvMWWq6" isOverride="false" comment="A list of figures managed by both matplotlib and self.&#xa;" visibility="public" isInline="false" isSpecification="false" name="managed_matplotlib_figures" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="ujAUfcE0GscDO" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="un8Zj3x0yVaBW" isOverride="false" comment="if not isinstance(viewer, (QtWidgets.QMainWindow, mpl.figure.Figure)):assert viewer.ID == wId@pyqtSlot(int)@safeWrapper&quot;def&quot; removeImageViewerWindow(self, imvId):if len(self.imageViewerWindows) > 0 and imvId in self.imageViewerWindows.keys():#print(&quot;mainWindow removing image viewer &quot;, imvId)#if len(self.imageViewerWindows) > 0:win = self.imageViewerWindows.pop(self.currentImageViewerWindowID, None)#self.currentImageViewerWindowID = self.imageViewerWindows.keys()[len(self.imageViewerWindows)-1]#del(self.imageViewerWindows[imvId])if win:#zombies = [(key, z) for (key, z) in self.workspace.items() if z.__class__ == win.__class__ and z == win]zombies = [(key, z) for (key, z) in self.workspace.items() if type(z) == type(win) and z == win]if len(zombies):self.workspace.pop(zombies[0], None)@pyqtSlot(int)@safeWrapper&quot;def&quot; removeSignalViewerWindow(self, sgwId):#print(sgwId)if len(self.signalViewerWindows) > 0 and sgwId in self.signalViewerWindows.keys():#if len(self.signalViewerWindows) > 0:win = self.signalViewerWindows.pop(self.currentSignalViewerWindowID, None)#del(self.signalViewerWindows[sgwId])if win:zombies = [(key, z) for (key, z) in self.workspace.items() if type(z) == type(win) and z == win]if len(zombies):self.workspace.pop(zombies[0], None)@pyqtSlot(int)@safeWrapper&quot;def&quot; removeXmlViewerWindow(self, wId):if len(self.xmlViewerWindows) > 0 and wId in self.xmlViewerWindows.keys():#if len(self.xmlViewerWindows) > 0:win = self.xmlViewerWindows.pop(self.currentXmlViewerWindowID, None)#del(self.xmlViewerWindows[wId])if win:zombies = [(key, z) for (key, z) in self.workspace.items() if type(z) == type(win) and z == win]if len(zombies):self.workspace.pop(zombies[0], None)@pyqtSlot(int)@safeWrapper&quot;def&quot; removeTextViewerWindow(self, wId):if len(self.txtViewerWindows) > 0 and wId in self.txtViewerWindows.keys():#if len(self.txtViewerWindows) > 0:win = self.txtViewerWindows.pop(self.currentTxtViewerWindowID, None)#del(self.txtViewerWindows[wId])if win:zombies = [(key, z) for (key, z) in self.workspace.items() if type(z) == type(win) and z == win]if len(zombies):self.workspace.pop(zombies[0], None)@pyqtSlot()@safeWrapper&quot;def&quot; removeTableEditorWindow(self, wId):if len(self.tableEditorWindows)> 0 and wId in self.tableEditorWindows.keys():#if len(self.tableEditorWindows) > 0:win = self.tableEditorWindows.pop(wId, None)#del(self.tableEditorWindows[wId])if win:zombies = [(key, z) for (key, z) in self.workspace.items() if type(z) == type(win) and z == win]if len(zombies):self.workspace.pop(zombies[0], None)@pyqtSlot(int)@safeWrapperdef removeMatplotlibFigure(self, wId):if len(self.matplotlibFigures) > 0 and wId in self.matplotlibFigures.keys():fig = self.matplotlibFigures[wId]plt.close(fig)win = self.matplotlibFigures.pop(wId, None)#if len(self.matplotlibFigures) > 0:#self.matplotlibFigures.pop(self.currentMatplotlibFigureID, None)if win:zombies = [(key, z) for (key, z) in self.workspace.items() if type(z) == type(win) and z == win]if len(zombies):self.workspace.pop(zombies[0], None)" visibility="public" isInline="false" isSpecification="false" name="slot_setCurrentViewer" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uR7oIbw1e43NP" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uaBp7k9HrwGCk" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="wId"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class namespace="uvGIb48jM9sj3" isLeaf="false" isAbstract="false" xmi.id="uVTeXt4nsd9J6" visibility="public" isSpecification="false" name="ScriptsManagerWindow" isRoot="false">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="uzfLdcqFXVyDm"/>
          <UML:Generalization xmi.idref="uKiCmIPOn9tOV"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute xmi.id="u13EgEa2wnZ5R" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_forgetScripts"/>
          <UML:Attribute xmi.id="uPEFiwMrw1ZzI" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_executeScript"/>
          <UML:Attribute xmi.id="ujxc7wvBOmTYt" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_importScript"/>
          <UML:Attribute xmi.id="upL57ZoC72smP" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_pasteScript"/>
          <UML:Attribute xmi.id="uIP09hqInetYu" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_editScript"/>
          <UML:Attribute xmi.id="u0H4lWtKWFQcb" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_openScriptFolder"/>
          <UML:Attribute xmi.id="u4Cji8PDgmqhC" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_pythonFileReceived"/>
          <UML:Attribute xmi.id="u8pnuM9zwAkX6" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_pythonFileAdded"/>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uli05kg5b4XAU" isOverride="false" comment="self.scriptsTable = QtWidgets.QTableWidget(0, 2, self)self.scriptsTable.setHorizontalHeaderLabels([&quot;Name&quot;, &quot;Path&quot;])self.scriptsTable.setAlternatingRowColors(True)self.scriptsTable.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)self.setCentralWidget(self.scriptsTable)" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uWTwssdW1vU5M" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="ujug8zy05s2No" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0oJwrg435es7" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="load_settings_" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uJkyfoTgIGISe" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uxDOPx6eiesZf" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="save_settings_" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uMRkzdmUrdini" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uCdOtjkIv5xP1" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setData" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uXsggolwDp5SQ" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="udh8nM8TiQE6m" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="scriptsDict"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uT33saVnV2kK4" isOverride="false" comment=" check if this is a python source filereturn" visibility="public" isInline="false" isSpecification="false" name="dropEvent" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uPmkpwtCq7YqL" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uL6P1hcCAJTf9" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNnucWWX7moWJ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="clear" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uMouVLI9zOiZ9" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uofCu86erNlHd" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="closeEvent" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uGVQCSAr8UfoO" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="u0nWYK8lFL0mc" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKAGOwKXPsc2v" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="scriptsCount" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="u2VkXoVpmsYv3" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ulwoOHGGl25aY" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="scriptNames" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="udG5gAJiw8Vyt" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uEA00gxszFaAY" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="scriptFileNames" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uwcBoMqWUZ5Ih" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3ktuQWZ5sOQJ" isOverride="false" comment="actions = list()actions.append(execItem)actions.append(pasteItem)actions.append(delItems)actions.append(clearAction)" visibility="public" isInline="false" isSpecification="false" name="slot_customContextMenuRequested" isRoot="false" isVirtual="true">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="u5NIpQZ5Nr2wR" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uVnNY1vPXsq6i" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pos"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uEE6Cclm2Co54" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_cellDoubleClick" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="ugNwkqHys2BJC" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="u5QLwGUuAWILP" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="row"/>
            <UML:Parameter xmi.id="udoLeSV0H12LV" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="col"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uYq3LtDGnHQff" isOverride="false" comment=" NOTE: PyQt5 QFileDialog.getOpenFileName returns a tuple (fileName, filter string)" visibility="public" isInline="false" isSpecification="false" name="slot_addScript" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uwoNTz8jEaWKu" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uE4gDMvrPNhEI" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_forgetScripts" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uEKBnD6fHS9YZ" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBkTqYCSsO4vc" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_forgetAll" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uyKnE0KP038LZ" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u8TdyGXSpWx51" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_executeScript" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uHd8iibJHAg8I" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ukrYyqPvIG4D8" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_importAsModule" isRoot="false" isVirtual="true">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uYDHxGyNmAUed" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLoqTRGEkvIZJ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_editScript" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="u0CmQyTdNWDfV" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujdkMFmGSQqhp" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_openScriptFolder" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="ugJBhddLtkWfO" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uzw2PlTWlxenR" isOverride="false" comment=" NOTE 2019-09-12 09:34:31 Beginning to consolidate variable handling in the GUI framework TODO: make this configurable (a mime type-like mechanism?)class VTH(QtCore.QObject):" visibility="public" isInline="false" isSpecification="false" name="slot_teleportScript" isRoot="false" isVirtual="true">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="u8TYkYfEODHLi" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class namespace="uvGIb48jM9sj3" isLeaf="false" isAbstract="false" xmi.id="uVmiBPxJA6fPs" visibility="public" isSpecification="false" name="VTH" isRoot="false">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="uh87TcIqADnjb"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute xmi.id="uoIkFz2M5Mtnn" ownerScope="classifier" comment="&quot;types&quot;: [np.ndarray, tuple, list]} if isinstance(x, mpl.figure.Figure) else {&quot;action&quot;: x.view_action_name, &quot;types&quot;: list(x.supported_types)}), gui_viewers))" visibility="public" initialValue="dict" type="ubge0kexwrzQa" isSpecification="false" name="default_handlers"/>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2egsVQO0kewF" ownerScope="classifier" isOverride="false" comment="Modifies data handling by viewers or registers a new viewer type.&#xa;        Viewers are user-designed windows for data display.&#xa;        Parameters:&#xa;        ----------&#xa;        viewerClass: sip.wrappertype derived from gui.scipyenviewer.ScipyenViewer&#xa;                OR a python type derived from matplotlib.fiure.Figure.&#xa;        &#xa;        dataTypes: a python type or a sequence (tuple, list) of python types&#xa;        &#xa;        actionName: a non-empty str or None, the name of the menu action in the&#xa;            context menu of the Scipyen's workspace browser &#xa;            &#xa;            When actionName is None, if the viewer is already registered its &#xa;            action name is unchanged; for a new viewer, the action name will be&#xa;            set to &quot;View&quot;.&#xa;        &#xa; viewer type is already registered; action name my be left unchanged registers a new viewer type" visibility="public" isInline="false" isSpecification="false" name="register" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="u1jxRj9sa91tP" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uOFmfKnpArxep" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="viewerClass"/>
            <UML:Parameter xmi.id="umWwtdHZ6GRDX" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dataTypes"/>
            <UML:Parameter xmi.id="uc0xkdSqUrV2r" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="actionName"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uK2RGdCWb11xv" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="registered_handlers" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="u3gbGhwSiDpgn" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uTl3vlwNeOGRX" ownerScope="classifier" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="is_supported_type" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uDKdYIUZx0Wcb" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="u8qK0WqY6skCi" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="obj_type"/>
            <UML:Parameter xmi.id="uJ16l2PckOUiM" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="viewer_type"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNRWVR1LIR8tS" ownerScope="classifier" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="get_handlers_for_type" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uA6XVA9sGpIkU" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uXf4bxWRozLGY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="obj_type"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uGetpZ2rZEgmO" ownerScope="classifier" isOverride="false" comment="if isinstance(variable, (type, sip.wrappertype)):" visibility="public" isInline="false" isSpecification="false" name="get_view_actions" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="u3hSIOcnlm83f" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uzHo4TTV6xrV3" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="variable"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRhUZNEzjq93N" ownerScope="classifier" isOverride="false" comment="if isinstance(variable, (type, sip.wrappertype)):" visibility="public" isInline="false" isSpecification="false" name="get_actionNames" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uKhsXVWFa7sAB" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="u1MGq2IrePcls" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="variable"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uD3cYGmLdgEUc" isOverride="false" comment="Resets all gui handlers to the default.&#xa;        This will remove any registered custom viewer!&#xa;" visibility="public" isInline="false" isSpecification="false" name="reset_all" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uQCx1wx5QSmBO" type="u6qsmeTRUEKLt" kind="return"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ukJJg6iwD6i1P" ownerScope="classifier" isOverride="false" comment="Resets the configuration for the built-in viewer types.&#xa;        Does nothing for user-designed viewer that have been registered manually.&#xa; TODO: enable renaming &amp; deleting of variable names from within the workspace view NOTE: 2016-05-02 20:22:58 CHANGES: 1) uses Qsettings to store app settings, including: Recent Files menu and recent directory recent directory is being udated when a File/Open... menu action is invoked TODO: make the number of recent files configurable 2) open... functions not decorated with _workspaceModifier anymore, to allow more flexibility in handing recently open files 3) recent files implemented as an ordered dictionary that maps the fully qualified  path name of the recent file to a mode tag that indicates how the file should be open see docstring for self._addRecentFile_  4) similarly implemented recentDirectories (a collections deque, most recent first) and a recentDiretory(to be phased out)" visibility="public" isInline="false" isSpecification="false" name="reset_handler" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="ubIUjDL3sWWG3" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="upeBP4fDGbDql" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="viewerClass"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
        <UML:Class namespace="uvGIb48jM9sj3" isLeaf="false" isAbstract="false" xmi.id="uxFUhJjqj5o0M" comment=" argument and return variable parsing moved to _installPluginFunction_" visibility="public" isSpecification="false" name="ScipyenWindow" isRoot="false">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="uudXOpxVNMewl"/>
          <UML:Generalization xmi.idref="ul55m8RYDTjjw"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Attribute xmi.id="uhEcvm75nbE3A" ownerScope="classifier" visibility="public" type="uMWkFJsxOSCuy" isSpecification="false" name="pluginActions"/>
          <UML:Attribute xmi.id="uD5CeEJvsBeau" ownerScope="classifier" comment="TODO: make this user-configurable" visibility="public" initialValue="10" type="uJe3bI2rF2OQt" isSpecification="false" name="maxRecentFiles"/>
          <UML:Attribute xmi.id="uHvUufCMegMdg" ownerScope="classifier" comment="TODO: make this user-configurable" visibility="public" initialValue="100" type="uJe3bI2rF2OQt" isSpecification="false" name="maxRecentDirectories"/>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uI5gsr4n3JfMi" isOverride="false" comment="print(nOutputs) and ((type(in_types) in (tuple, list) and len(in_types) > 0) or (type(in_types) is type)): prepare the dialog (see vigra.pyqt.QuickDialog)d = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Enter Arguments&quot;)widgetClass = vigra.pyqt.quickdialog.IntegerInputwidgetClass = vigra.pyqt.quickdialog.FloatInputwidgetClass = vigra.pyqt.quickdialog.StringInputwidgetClass = vigra.pyqt.quickdialog.CheckBoxwidgetClass = vigra.pyqt.quickdialog.InputVariable this means the function expects a variable selected  in the workspace table therefore we don't need a prompt widget for it so that argument parsing below worksd.varPromptWidget = vigra.pyqt.quickdialog.InputVariable(d, &quot;Variadic arguments: &quot;)d.kwPromptWidget = vigra.pyqt.quickdialog.InputVariable(d, &quot;Keyword arguments: &quot;)widget = vigra.pyqt.quickdialog.OutputVariable(d, rt_nm[k]) don't call anything, just return nothing NOTE: 2016-04-15 03:19:05 deal with positional arguments in case field was empty b SHOULD be None here NOTE: 2016-04-15 03:19:30 deal with variadic arguments NOTE: 2016-04-15 03:20:00 deal with keyword arguments no need to return anything here no need to return anything here NOTE: 2016-04-15 03:20:13 finally, deal with return variables NOTE: 2016-04-17 22:18:05 do this always: functions that do not return but take mutable arguments from the workspace may result in these arguments being modified and we'd like this to be seen in the workspace table and do it from within inner_f NOTE: 2016-04-17 16:26:33  inner_f does not need to return anythingd = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Enter Return Variable Names&quot;)widget = vigra.pyqt.quickdialog.OutputVariable(d, ret_names[k]) don't call anything, just return nothing NOTE: 2016-04-17 22:18:05 do this always: functions that do not return but take mutable arguments from the workspace may result in these arguments being modified and we'd like this to be seen and do it from within inner_f NOTE: 2016-04-17 16:27:01 inner_f does not need to return anything NOTE: 2016-04-17 16:14:18 argument parsing code moved to _installPluginFunction_ ini order to keep this decorator small: this decorator should only do this: DECORATEfrom PyQt5.QtCore import pyqtSlot NOTE: 2016-04-17 16:16:52 moved to _installPluginFunction_# NOTE:2016-04-17 15:39:03 in python 3 use inspect.getfullargspec(f)argSpec = inspect.getfullargspec(f)kwa = argSpec.keywords NOTE: 2016-04-17 16:18:18 to reflect new code layoutsuper(ScipyenWindow, self).__init__(parent) 2016-08-04 17:39:06 NOTE: python3 wayprint(&quot;ScipyenWindow __init__&quot;)self.scipyenEditor              = &quot;kwrite&quot;pg.setConfigOptions(editorCommand=self.scipyenEditor) cached file name for python source (for loading or running)self._defaultCursor = QtGui.QCursor(QtCore.Qt.ArrowCursor) NOTE: 2016-04-15 23:58:08 define some place holders NOTE: 2017-04-26 08:31:30 do not remove; might use these laterself.imageViewer   = dict()self.signalViewers = dict() NOTE: 2018-10-07 21:12:14 (re)initializes self.workspace, self._nonInteractiveVars, self.ipkernel, self.console and self.shell ----------------- connect widget actions through signal/slot mechanism NOTE: 2017-07-04 16:28:52 do not delete: this is the first code where self.cwd is defined &amp; initiated!self.slot_updateCwd() NOTE: 2016-03-20 14:49:05 we also need to quit the app when Pict main window is closed NOTE: 2017-07-04 16:10:14 for this to work one has to set horizontalScrollBarPolicy to ScrollBarAlwaysOff (e.g in QtDesigner) NOTE: 2016-04-15 12:18:04 TODO/FIXME also import the plugins in the pict / ipkernel scopes NOTE: 2016-04-15 14:25:23 all this does is to make these guys visible in the workspace browser -- do we really want this? clearly not, since the workspace is the user_ns namespace of the ipython kernel, where all  free variables are held (plus bits added by ipython)if len(pict_plugin_loader.loaded_plugins) > 0:self.workspace.update(dict(pict_plugin_loader.loaded_plugins))#print(&quot;ScipyenWindow initialized&quot;) NOTE: 2018-02-22 13:36:17 finally, inject self into relevant modules:for m in (ltp, ivramp, membrane, epsignal, CaTanalysis, pgui, sigp, imgp, crvf, plots):self.app.focusWindowChanged[]Creates a QtConsole instance for running an IPython interactive shell.&#xa;        &#xa;        The IPython kernel is an InProcess kernel (i.e. &quot;embedded&quot;) because the&#xa;        main event loop is run by QApplication (PyQt5)&#xa;        &#xa;        After console initialization the main application (mainWindow) will gain&#xa;        a &quot;shell&quot; and a &quot;ipkernel&quot;; both variables will be re-initialized upon &#xa;        calling this method.&#xa;        &#xa;        HOWEVER, the IPython event handlers supplied by the workspace model&#xa;        will have to be registered with the ipkernel's shell manually afterwards,&#xa;        and BEFORE  any other methods calling a code to be executed within the &#xa;        ipkernel is called (e.g. via ipkernel.shell.run_cell(...)).&#xa; creates a Qt console with an embedded ipython kernel i.e. a QtInProcessKernelManager NOTE: 2018-10-08 10:48:46 the code inside pict is executed in its own QApplication loop whereas code entered in this console is executed in the ipython kernel which therefore has to be &quot;embedded&quot; in the QApplication At any time there can be only ONE master event loop, In this case, that's the QApplication event loop (PyQt5) Also, all free (user) variables are stored in this kernel's namespace which is also referenced as instance variable 'self.workspace' of ScipyenWindow The ipython kernel itself is referenced as the instance variable self.ipkernel Furthermore, the console &quot;shell&quot;  is accessible as self.ipkernel.shell aliased ot the instance variable self.shell Its user namespase (user_ns) is referenced as self.workspace (see below) For convenience, the ipkernel, console and the shell are also aliased  into the workspace NOTE: 2018-10-08 10:48:53 About self.console.execute(...) vs self.shell.run_cell(...): Both will generate pre_execute and post_execute IPython events, HOWEVER: * console.execute(str) always executes the expression in str inside the    console's shell/kernel; code will be echoed to the console UNLESS   the hidden=True is also passed after the str parameter * shell.run_cell(str) does the same as console.execute with hidden=False   (the extression in str is always echoed; there is no &quot;hidden&quot; parameter   to run_cell(...))from core import custom_magicsNOTE: 2017-03-19 16:21:51 FYI:NOTE: The actual shell is an instance of NOTE: ipykernel.inprocess.ipkernel.InProcessInteractiveShellNOTE: NOTE: The shell is accessible as self.ipkernel.shell and is the SAME NOTE: object at the one returned by manually calling get_ipython()NOTE: at the consoleNOTE:NOTE: This inherits from ZMQInteractiveShell which inherits from InteractiveShellNOTE:NOTE:NOTE: Some important &amp; useful function (bound methods) of the shell instance:NOTE:NOTE: show_banner(banner=None)NOTE: to directly execute code inside the shell we can use one of its bound NOTE: methods, inherited all the way from IPython.core.InteractiveShell:NOTE:NOTE: run_cell (overridden by ipkernel.zmqshell.ZMQInteractiveShell but syntax and functionality are the same)NOTE: run_cell_magic NOTE: run_codeNOTE: runcode, NOTE: run_line_magicNOTE:self.ipkernel.shell.push(self.a, self.testing) # fooling around this is always 1 immediately after initialization access history database independently of the shell should not interfere with the history  NOTE: 2019-08-03 17:03:03 populate the command history widgetcache the sessionlineItem = QtWidgets.QTreeWidgetItem(sessionItem, [inline])lineItem.setText(0,repr(line))lineItem.setText(1,inline)self.console.historyItemsDropped.connect(self._rerunCommand)NOTE: 2017-03-21 22:55:57 much better! connect signals emitted by the console when processing a drop eventself.console.workspaceItemsDropped[bool].connect(self.slot_pasteWorkspaceSelection)NOTE: until input has been enetered at the console, this is the LAST session on record NOT the current one! ------------------------------ set up a` COMMON workspace ------------------------------ NOTE: 2016-03-20 14:29:16 populate kernel namespace with the imports from this current module  this effectively is the second time they're being imported, but this time in the ipkernel environment __module_name__ is &quot;pict&quot; so we take all its contents into the kernel namespace (they're just references to those objects)self.workspace['mainWindow'] = self NOTE: 2016-03-20 20:50:42 -- WRONG! get_ipython() returns an instance of the interactive shell, NOT the kernel useful for testing functionality; remove upon release alias to self.ipkernel.shell NOTE: 2018-05-08 10:49:37 console exit() is broken as of ipykernel 4.8.2/ipython 6.3.1/jupyter 1.0.0/jupyter-client 5.2.3/jupyter-console 5.2.0/jupyter-core 4.4.0 override with our custom exit instead NOTE 2019-08-04 11:05:59 directly call this slot TODO/FIXME 2019-08-04 11:06:16 this does not override ipython's exit:  this will have to be called as %exit line magic (i.e. automagic doesn't work) hide the variables added ot the workspace so far (ipkernel, console, shell) -------------------------- finally, customize console window title and show it -------------------------self.workspace['mainWindow'] = self.workspace['mainWindow'] NOTE: 2016-03-20 21:18:32 to run code inside the console and use the console as stdout,  call console.execute(...) calling console.ipkernel.shell.run_cell(...) uses the system stdio  FIXME -- why does it appear to execute only ONE print command?self.console.execute(&quot;print(ipkernel.shell.banner2)&quot;)self.console.execute(source=&quot;sys.stdio.flush()&quot;,hidden=True)self.console.execute(source=&quot;print(u'''\nimported modules:''')&quot;, hidden=True)self.console.execute(source=&quot;print(ipkernel.shell.banner2)&quot;, interactive=True)self.console.execute(source=&quot;print('\nimported modules:')&quot;, interactive=True)for k,v in self.workspace.items():if type(v) is types.ModuleType:s = &quot;print('''%s -> %r''')&quot; % (k,v)print(s)self.console.execute(source=s, hidden=True) NOTE: 2016-03-20 21:02:52 these print to the stdout, which is the system terminal, NOT the consoleprint(self.ipkernel.shell.banner2) print(&quot;\n\nImported modules:\n(call 'dir(module)' for details)&quot;)print(__imported_modules__)sys.stdout.flush()To be connected to workspaceChanged signal emitted by the workspace watcher&#xa;print(&quot;slot_workspaceChanged:&quot;)self.workspaceModel.updateTable(self.workspaceWatcher) NOTE: 2016-03-26 17:07:17 as a workaround for the problem in NOTE: 2016-03-26 17:01:32pyplot commands may produce or close a figure; we need to reflect this!&#xa;print(&quot;activator of slot_updateWorkspaceTable: &quot;, self.sender())if self.sender() == self.workspaceWatcher:self.workspaceModel.updateTable(self.workspaceWatcher)return 1) remove figure variables that are NOT managed by pyplot anymorematplotlibFigNumbers = plt.get_fignums()workspace_figs = [f for f in self.workspace.values() if \isinstance(f, mpl.figure.Figure) and \hasattr(f, &quot;number&quot;)]staleFigs = [f for f in workspace_figs if f.number not in matplotlibFigNumbers]staleFigNumbers = [f.number for f in staleFigs]newFigNumbers = [n for n in matplotlibFigNumbers if n not in staleFigNumbers]for f in staleFigs:if self.currentMatplotlibFigureID == f.number:self.currentMatplotlibFigureID = Noneself.workspace.pop(&quot;Figure%d&quot; % f.number, None)self.matplotlibFigures.pop(&quot;Figure%d&quot; % f.number, None)del(staleFigs)for figNum in newFigNumbers:self.workspace[&quot;Figure%d&quot; % figNum] = plt.figure(figNum)self.matplotlibFigures[&quot;Figure%d&quot; % figNum] = self.workspace[&quot;Figure%d&quot; % figNum]# set the current matplotlib figure to be last one in the dictif len(self.matplotlibFigures):self.currentMatplotlibFigureID = [f for f in self.matplotlibFigures.keys()][-1]# 2) add references to figures that are managed by pyplot but are missing #   from the workspaceif len(plt.get_fignums()) > 0:for figNum in plt.get_fignums():if &quot;Figure%d&quot; % figNum not in self.workspace.keys():# NOTE: 2017-08-26 00:03:02# avoid duplicate references such as when plt.figure() was called with# a return argument e.g. fig=plt.figure(1)if figNum not in [v.number for v in self.workspace.values() if isinstance(v, mpl.figure.Figure)]:self.workspace[&quot;Figure%d&quot; % figNum] = plt.figure(figNum)self.matplotlibFigures[&quot;Figure%d&quot; % figNum] = self.workspace[&quot;Figure%d&quot; % figNum]print(&quot;matplotlibFigures: &quot;, self.matplotlibFigures)else:figures = [v in self.workspace.values() if isinstance(v, mpl.figure.Figure)] NOTE: refresh the cached_vars in the workspace model (emulates what happens just BEFORE code is executed in the console)self.workspaceModel.pre_execute() NOTE: 2016-03-26 17:06:42 as a workaround for the problem in NOTE: 2016-03-26 17:01:32 DEPRECATEDself.updateWorkspaceSignal.emit()Slot to update the history tree widget once a command has been entered at the console&#xa;        This occurs only for the current session&#xa;NOTE: 2017-03-19 21:26:37 self.console.history_tail stores only the NOTE: command line input to the console (interactive input)NOTE: so it's OK to connect this to console's executed slotNOTE: however pressing ENTER (and thus firing the executed signal)NOTE: will only generate an empty string; in this case, the console'sNOTE: history_tail will how historic commands because nothing is appendedNOTE: to it -- we therefore must check that (1) the execution count is > 1NOTE: and that is has been updated after the last ENTER pressprint(&quot;execution count in slot_updateHistory: &quot;, self.ipkernel.shell.execution_count) only update history if something has indeed been executed NOTE: 2016-03-25 09:43:58 inspired from stock IPython/core/magic/namespaces.py@classmethod NOTE: 2017-08-24 15:50:46 special case when &quot;_&quot; variables are matplotlib.figure.Figure instances created with plt commands (functions) but NOT assigned to unbound variables I'm relying on pyplot's own figure manager: no two figures can have the same numberprint(hidden_mpl_figure_names)cmd = &quot;&quot;.join([newVarName, &quot;=&quot;, n, &quot;; del(&quot;, n, &quot;)&quot;])self.console.execute(cmd, hidden=True) NOTE: 2016-04-16 00:12:26 why does the above NOT prevent the display of a module created at the console  (e.g. after a call like m = types.ModuleType(), m is listed there, when it really shouldn't)if not varnames:return Noneif not varnames:return NoneviewCount = len(lsvars(xv.XMLViewer, ws = self.workspace))name = &quot;%s%d&quot; % (type(xvw).__name__, viewCount)#name = &quot;XMLViewer%d&quot; % viewCountxvw.setTitle(name)self.workspace[name]=xvwself.slot_updateWorkspaceTable()from ephys.membrane import analyse_AP_depol_seriesvarname = self.workspaceModel.getCurrentVarName()if varname is None:indexList = self.workspaceView.selectedIndexes()if len(indexList) == 0:returnvarname = self.workspaceModel.item(indexList[0].row(),0).text()if varname is None:returnif varname not in self.workspace.keys():returndata = self.workspace[varname]if isinstance(data, neo.Block):args = (data,)kwargs = dict()self._run_loop_process_(analyse_AP_depol_series, None, *args, **kwargs)### BEGIN do not delete -- revisit this a session node was selected when a &quot;Node&quot; is selected, get the entire list of selected children  a command node was selected  check-out its parent session number not sure we'll ever reach this allow for items to be selected disjoint from their sessions when selection crosses sessions but leave selectedSessionID unchanged this is a session item move on to the next and its parent is a session item in fact a historic session item  so get its session number make sure we get back to the curent session ID append the command itselfcmd = &quot;\n&quot;.join(selectionList) + &quot;\n&quot;cmd = &quot; &quot;.join(selectionList) + &quot;\n&quot;### ENDsessionNo = self.currentSessionIDfor item in selectedItems:parent = item.parent()if parent is None:              # this is a session itemcontinue                    # move on to the nextptxt = parent.text(0)           # and its parent is a session itemif ptxt != &quot;Current&quot;:           # in fact a historic session item sessionNo = int(ptxt)       # so get its session numberelse:sessionNo = self.currentSessionID # make sure we get back to the curent session IDlineNo = int(item.text(0))if magic is None:selectionList.append(item.text(1)) # append the command itselfcmd = &quot;\n&quot;.join(selectionList) + &quot;\n&quot;else:if sessionNo != self.currentSessionID:selectionList.append(&quot;%s/%s&quot; % (sessionNo, repr(lineNo)))else:selectionList.append(repr(lineNo))cmd = &quot; &quot;.join(selectionList) + &quot;\n&quot;print(cmd)print(cmd) don't leave gremlinsprint(&quot;ScipyenWindow.slot_variableItemPressed %s&quot;, ndx)self.workspaceModel.currentVarItem = self.workspaceModel.item(ndx.row(),0)self.workspaceModel.currentVarName = self.workspaceModel.item(ndx.row(),0).text()item = self.workspace[self.workspaceModel.currentVarName]if isinstance(item, (QtWidgets.QMainWindow, mpl.figure.Figure)):self._setCurrentWindow(item)print(&quot;ScipyenWindow.slot_variableItemActivated %s&quot;, ndx) view (display) object in console is no handler exists        Contex menu requested by workspace viewer&#xa;quoted = bool(QtWidgets.QApplication.keyboardModifiers() &amp; QtCore.Qt.ShiftModifier)self._copy_varnames_quoted_ = quotedif bool(QtWidgets.QApplication.keyboardModifiers() &amp; QtCore.Qt.ControlModifier):self._copy_varnames_separator_ = &quot;,\n&quot;else:self._copy_varnames_separator_ = &quot;, &quot;print(len(indexList)) one variable selectedcm.addSeparator() several variables selected always goes to new windowif isinstance(item, (QtWidgets.QMainWindow, mpl.figure.Figure)):self._setCurrentWindow(item)self.workspaceModel.itemChanged.connect(self.slot_variableItemNameChanged)print(&quot;ScipyenWindow slot_selectionChanged: currentVarName %s&quot; % self.workspaceModel.currentVarName)@pyqtSlot(QtGui.QStandardItem)Called when itemChanged was emitted by workspaceModel.&#xa;        &#xa;        Typically this is called after a variable has been renamed following an&#xa;        &quot;Edit&quot; key press (which on Unix/KDE and Windows is usually &quot;F2&quot;).&#xa;        &#xa;        For the case when the variable name is changed via its context menu see &#xa;        slot_renameWorkspaceVar().&#xa;        &#xa;print(&quot;slot_variableItemNameChanged&quot;) only accept changes in the first (0th) column which contains the variable nameprint(&quot;workspace model rows: &quot;, self.workspaceModel.rowCount())originalVarName = self.workspaceModel.getCurrentVarName()print(&quot;ScipyenWindow slot_variableItemNameChanged originalVarName %s&quot; % originalVarName)print(&quot;ScipyenWindow slot_variableItemNameChanged newVarName %s&quot; % newVarName) NOTE: 2017-09-22 21:57:23 check newVarName for sanity also update the item's textcmd = &quot;&quot;.join([newVarNameOK, &quot;=&quot;, originalVarName, &quot;; del(&quot;, originalVarName,&quot;)&quot; ])print(cmd)self.console.execute(cmd, hidden=True)Renames workspace variables through GUI Menu action.&#xa;        &#xa;        Called when &quot;Rename&quot; menu item is called from the context menu of an &#xa;        workspace item.&#xa;        &#xa;        For the case when the variable name is changed through pressing system's &#xa;        &quot;rename&quot; key (e.g., F2 in KDE) see slot_variableItemNameChanged()&#xa;        &#xa;        Presents a dialog prompting for a new variable name.&#xa;dlg = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Rename variable&quot;)pw = vigra.pyqt.quickdialog.StringInput(dlg, &quot;To :&quot;)pw = VariableNameStringInput(dlg, &quot;To:&quot;)self.slot_updateWorkspaceTable()QtWidgets.QApplication.setOverrideCursor(QtGui.QCursor(QtCore.Qt.WaitCursor))QtWidgets.QApplication.restoreOverrideCursor()QtWidgets.QApplication.restoreOverrideCursor() NOTE: check out keyboard modifier WHEN this slot is calledvarNames = list()for i in indexList:varNames.append(self.workspaceModel.item(i.row(),0).text())self.app.clipboard().setText(&quot;, &quot;.join(varNames))        DEPRECATED&#xa;indexList = self.workspaceView.selectedIndexes() by default this will paste the contents of the Cliboard, not the X11 selectionif quoted:self.slot_copyWorkspaceSelectionQuoted()else:self.slot_copyWorkspaceSelection()        DEPRECATED&#xa;def _rerunCommand(self):cmd = self._getHistoryBlockAsCommand_(&quot;%rerun&quot;)self.ipkernel.shell.run_cell(cmd, store_history = True, silent=False, shell_futures=True)self.executionCount = self.ipkernel.shell.execution_countself._updateHistoryView_(self.executionCount-1, self.ipkernel.shell.history_manager.input_hist_raw[-1])self.slot_updateWorkspaceTable() only accept session items here (for now) session items have parent Noneprint(item.text(0)) a session line selected  a command line is selected False if col1 selectedprint(&quot;slot_historyItemSelected selected session&quot;, self.selectedSessionID)print(&quot;slot_historyItemActivated&quot;)print(parent) this is a session item we don't care about it now, this IS a statement item and we care about it its parent can only be a session item maybe a historic session number if so then get its session number get its line number (execution number) get its actual statementprint(cmd)TODO: explore constructing a command like %hist %rerun %recall line magicsTODO: I'd need to store the line number as well, somehow, in the history tree widgetTODO: in which case the history tree would have the items on 3 columns (session, line no, code)TODO: and these would be executed by self.ipkernel.shell.run_line_magic('recall', ...)NOTE: until then, we send the item's text to the shell by callingNOTE: self.ipkernel.shell.run_cell(cmd, store_history=True, silent=False, shell_futures=True)NOTE: see code comments in self.slot_initQtConsole()NOTE: 2017-03-19 21:15:48 while this DOES go to the ipython's historyNOTE: it DOES NOT go to the self.console.history_tail therefore calling the slot_updateHistory slotNOTE: won't work hence -- basically, console.history and shell history go out of syncNOTE: therefore we need to update OUR history manuallyNOTE: 2017-03-19 22:54:55 also this DOES NOT re-create the outputNOTE: I guess I can live with this for now...del self.consoleself.close()&quot;def&quot; consoleExit(self):self.slot_pictQuit()#if self.console is not None:#self.console.kernel_manager.shutdown_kernel()#self.console.close()#self.console = Noneself.settings.setValue(&quot;ScipyenWindow/Editor&quot;, self.scipyenEditor)### NOTE: user-defined gui handlers (viewers) for variable types, or user-changed configuration of gui handlers store user-define handlers store customizations for built-in handlers: NOTE: 2017-09-21 22:14:55 leave this empty at GUI startup! NOTE: 2017-09-21 22:16:47 leave this empty at GUI startup! this ensures recentDirectories is never emptyprint(&quot;showFilesFilter %s&quot; % showFilesFilter)if showFilesFilter:self.filesFilterFrame.show() settings for ScipyenWindow group FIXME: 2019-11-03 22:56:20 -- inconsistency what if a viewer doesn't have any types defined? by default it would be skipped from the auto-menus, but if one uses VTH.register() then types must be defined! see FIXME: 2019-11-03 22:56:20for viewerClass in VTH.gui_handlers.keys():if  END NOTE: 2016-05-02 14:26:58 add HERE a &quot;Recent Files&quot; submenu to the menuFile NOTE: 2017-11-10 14:17:11 TODO factor the follwing out in a plugin-like framework BEGIN NOTE: 2017-11-11 21:30:58 add this as a menu command, and open it in a separate window, rather than tabbed window, which is more useful for small screens (e.g.,laptops)self.tabWidget.addTab(self.lscatWindow, &quot;CaT Analysis&quot;) ENDself.tabWidget.setCurrentIndex(0) NOTE:2019-08-06 15:21:23 this will mess up filesFilterFrame visibility!self.app.lastWindowClosed.connect(self.slot_pictQuit)self.actionOpen.triggered.connect(self.openFile)self.actionOpen_Files.triggered.connect(self.slot_openFiles) NOTE: 2017-07-07 22:14:40 Shortcut to delete selected items in workspaceView thanks to QtCentre forum (J-P Nurmi)self.menuScripts.insertMenu(self.actionQuit, self.recentScriptsMenu) NOTE: 2016-05-02 12:22:21 -- refactoring plugin codesself.startPluginLoad.connect(self.slot_loadPlugins)self.startPluginLoad.emit()### BEGIN NOTE: 2019-08-11 00:01:11 replace the workspace viewer in the designer UI file with the derived one WARNING work in progress, don't use yetself.workspaceView = WorkspaceViewer(self)self.workspaceView.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContents)self.workspaceView.setAlternatingRowColors(True)self.workspaceView.setSortingEnabled(True)self.workspaceView.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked | QtWidgets.QAbstractItemView.EditKeyPressed |QtWidgets.QAbstractItemView.AnyKeyPressed)#self.workspaceView.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)self.workspaceView.setAcceptDrops(True)self.workspaceView.setDragEnabled(True)self.workspaceView.setDragDropMode(QtWidgets.QAbstractItemView.DragDrop)self.workspaceView.setDefaultDropAction(QtCore.Qt.IgnoreAction)self.dockWidgetWorkspace.setWidget(self.workspaceView)self.workspaceView.show()### END custom workspace viewerself.workspaceView.clicked[QtCore.QModelIndex].connect(self._variableItemSelected)self.workspaceView.entered[QtCore.QModelIndex].connect(self.varIndexEntered)self.workspaceView.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)self.actionNew_Image_Viewer.triggered.connect(self.slot_newImageViewerWindow)self.actionNew_Signal_Viewer.triggered.connect(self.slot_newSignalViewerWindow)self.fileSystemModel.dataChanged[QtCore.QModelIndex, QtCore.QModelIndex, &quot;QVector&lt;int>&quot;].connect(self.slot_fileSystemDataChanged) filter/select variable names combo filter/select commands from history comboprint(self.currentDir) list of QModelIndex NOTE: 2017-06-29 21:49:39targetDir = os.path.dirname(item)self._setRecentDirectory_(targetDir)def mousePressEvent(self, event):passprint(event.mimeData())@safeWrapperdef dragLeaveEvent(self, event):print(&quot;ScipyenWindow dragLeaveEvent event mimedata&quot;, event.mimeData())@safeWrapperdef mouseMoveEvent(self, event):event.accept()src = event.source()print(&quot;ScipyenWindow.dropEvent source: %s&quot; % src)print(&quot;ScipyenWindow.dropEvent mimeData formats: %s&quot; % event.mimeData().formats())data = event.mimeData().data(event.mimeData().formats()[0])print(&quot;ScipyenWindow.dropEvent: \ndata: %s \nsrc: %s&quot; % (data, src)) check if this is a python source fileprint(mimeType.name())pass list of QModelIndex NOTE: 2017-08-03 08:44:34 TODO/FIXME decide on the match; basically works with match2 TODO add to varname history and save/restore from configuration file TODO: find a way to filter displayed variable names -- low pripriy as we don't  overpopulate the variable browser yetSelect variables in workspace viewer, according to name filter.&#xa;match = QtCore.Qt.MatchContains | \QtCore.Qt.MatchCaseSensitive | \QtCore.Qt.MatchWildcard | \QtCore.Qt.MatchWrap | \QtCore.Qt.MatchRecursivematch1 = QtCore.Qt.MatchWildcard| \QtCore.Qt.MatchCaseSensitive | \QtCore.Qt.MatchWrap | \QtCore.Qt.MatchRecursiveprint(i.text())self.lastVariableFind = val NOTE: 2019-10-17 21:36:39 TODO: find a way to filter command display (grey out the ones NOT filtered for) -- a higher priority than for slot_filterSelectVarNames ,since here we have A LOT of commands in the history TODO: if the above task is successfully completed, then also find  out how to filter or select by session numberFinds command in history tree based on glob search.&#xa;        &#xa;        Works across sessions.&#xa;        &#xa;        TODO option to search in a selected session only&#xa; FIXME TODO find across sessions search in the selected session (click on session number)selected_children = list()print(&quot;file filter %s&quot; % val) and len(self.fileSystemFilterHistory) &lt; 10: NOTE: 2018-10-17 21:28:20 not implemented because there are issues with this in Qt5.  one could design a custom file watcher but this will introduce significant overheadsSignal activated from self.fileSystemTreeView is connected to this&#xa;print(self.fileSystemModel.filePath(ndx))print(&quot;ScipyenWindow.slot_chDirString: \nval = %s; \nprotocol = %s; \ntarget = %s&quot; % (val, protocol, target)) NOTE: 2017-03-04 16:08:17 because for whatever reason PyQt5 also  returns the shortcut indicator character '&amp;'self.shell.run_cell(''.join([&quot;cd '&quot;, targetDir, &quot;'&quot;])) NOTE 2017-07-04 15:59:38 for this to work one has to set horizontalScrollBarPolicy to ScrollBarAlwaysOff (e.g in QtDesigner)print(args) list of QModelIndex list of QModelIndexselectedItems = [item for item in self.fileSystemTreeView.selectedIndexes() \if item.column() == 0]# list of QModelIndex NOTE: 2018-09-27 10:11:49 prevent user interaction when only one item (which may take a while to load especially if it is a big file)QtWidgets.QApplication.setOverrideCursor(QtGui.QCursor(QtCore.Qt.WaitCursor))QtWidgets.QApplication.restoreOverrideCursor()QtGui.QDesktopServices.openUrl(QtCore.QUrl(&quot;file://%s&quot; % fileName)) list of QModelIndexif os.path.isfile(fileName):QtGui.QDesktopServices.openUrl(QtCore.QUrl(&quot;file://%s&quot; % os.path.dirname(fileName)))else:QtGui.QDesktopServices.openUrl(QtCore.QUrl(&quot;file://%s&quot; % fileName))u_fileName = url.fileName().path() NOTE: PyQt5 QFileDialog.getOpenFileName returns a tuple (fileName, filter string) TODO check if this is a legitimate ASCII file containing python codeself._temp_python_filename_ = fileNameself._slot_python_code_to_console()self.scriptsManager.exec_() NOTE: PyQt5 QFileDialog.getOpenFileName returns a tuple (fileName, filter string) TODO check if this is a legitimate ASCII file containing python code NOTE 2019-09-14 09:22:54 FIXME there are some cavetas to thiscm.addSeparator()importAsModule = cm.addAction(&quot;Import As Module&quot;)importAsModule.triggered.connect(self._slot_importPythonModule)Entrypoint into the file reading system, for calls from file system tree view&#xa;        &#xa;self._addRecentFile_(fName, fileReader)print(&quot;changeWorkDir targetDir &quot;, targetDir)Common delegate for reading data from a file.&#xa;        &#xa;        Currently only opens image files and axon &quot;ABF files&quot;. &#xa;        TODO: pickle, hdf5, matlab, etc&#xa;        &#xa;        Called by various slots connected to File menu actions. &#xa;        &#xa;        Arguments:&#xa;        &#xa;        fName -- fully qualified data file name&#xa;        &#xa;        fileReader -- (optional, default is None) a str that specifies the image &#xa;                    reader (currently, only &quot;vigra&quot; or &quot;bioformats&quot;), or a &#xa;                    boolean, where a value of False chooses the vigra impex &#xa;                    library, whereas True chooses the bioformats library.&#xa;                    &#xa;                    When None, this functions assumes that an image is to be loaded.&#xa;                    TODO: Guess file type for other data file types as well.&#xa;                    &#xa;                    The file reader is chosen between vigra and bioformats,&#xa;                    according to the file extension. TODO: use other readers as well.&#xa;                    &#xa;                    Other planned readers are hdf5, pickle, matlab, &#xa;                    &#xa;                    NOTE: For image files, this only reads the image pixels. Currently, image metadata &#xa;                    is only read through the bioformats library (as OME XML document)&#xa;                    &#xa;                    TODO: Supply other possible image readers?&#xa;        &#xa;        &#xa; 2016-08-15 16:20:24 TODO: give the user the possibility to open image data and image metadata SEPARATELY for now, they are returned both, for convenience NOTE: 2017-06-21 15:59:41 fix insane file names [data, fileReader] = pio.loadFile(fName)traceback.print_exception(excInfo[0], excInfo[1], excInfo[2], file=tbStrIO) python3 way TODO: diverge onto HDF5 and bioformats handlingSaves data to file.&#xa;        &#xa;        If one variable is selected in the workspace, opens a dialog to save it&#xa;        to a specific file type e.g., VigraArrays are saved as images or volumes&#xa;        (according to their dimensions, see pictio.saveImageFile),&#xa;        other data types are saved as a Python pickle file i.e., are serialized.&#xa;            TODO provide write ops for other data types, in particular HDF5, &#xa;            &#xa;            &#xa;        If more than one variable is selected, then calls pict.slot_saveSelectedVariables&#xa;        where all selected vars are serialised individually to pickle files.&#xa;        &#xa;        TODO If no variable is selected then offer to save the workspace contents to&#xa;        a pickle file (as a dict!!!)&#xa;            &#xa;            &#xa;        &#xa;selectedItems = [item for item in self.fileSystemTreeView.selectedIndexes() \if not self.fileSystemModel.isDir(item)]# list of QModelIndexvarname = self.workspaceModel.getCurrentVarName()if varname is None:return make sure we get the data in the first column (the variable name)  TODO: FIXME write code for more data types (HDF5, ...) NOTE: 2016-04-01 11:09:49 file dialog filtered on all supported image file formats check is selected file format supported by vigra and use vigra impex to open else use bioformats to open NOTE: 2016-04-01 11:48:52 use list comprehension to construct filter@_workspaceModifier # NOTE: 2016-05-02 20:46:58 not used anymore here TODO: merge with file openers for the fileSystemTreeView 2016-08-11 13:48:19 NOTE: the API for getOpenFileName has changed for Qt 5If you want multiple filters, separate them with ';;', for example:&quot;Images (*.png *.xpm *.jpgui);;Text files (*.txt);;XML files (*.xml)&quot; NOTE: PyQt5 QFileDialog.getOpenFileName returns a tuple (fileName, filter string)print(&quot;fileName: &quot;, fileName) NOTE: 2016-04-01 12:18:23 keep this as we may want to enforce the use of BioFormats for opening files@_workspaceModifier # NOTE: 2016-05-02 20:46:45 decorator not used anymore here 2016-08-11 14:13:24 NOTE: see NOTE above loadImageFile(self):@pyqtSlot()def loadBioFormatsImageFile(self):'''Slot to which an item in the File typically connects to.Prompts user to choose a file using a File Open dialog.'''from utilities import makeFileFilterString(allImageTypesFilter, individualImageTypeFilters) = makeFileFilterString(bf.READABLE_FORMATS, 'BioFormats Image Types')filesFilterString = ';;'.join([allImageTypesFilter, individualImageTypeFilters])bf_extensions = bf.READABLE_FORMATStargetDir = self.recentDirectories[0]if targetDir is not None and targetDir != &quot;&quot; and os.path.exists(targetDir):fileName = QtWidgets.QFileDialog.getOpenFileName(self, caption=u'Open Image File Using BioFormats', filter=filesFilterString, directory=targetDir)else:fileName = QtWidgets.QFileDialog.getOpenFileName(self, caption=u'Open Image File Using BioFormats', filter=filesFilterString)if len(fileName) > 0:if isinstance(fileName, tuple):fileName = fileName[0] # NOTE: PyQt5 QFileDialog.getOpenFileName returns a tuple (fileName, filter string)if isinstance(fileName, str) and len(fileName) > 0:if self.loadDiskFile(fileName, True):self._addRecentFile_(fileName, &quot;bioformats&quot;)self.slot_updateWorkspaceTable()Allows the opening of several files, as opposed to openFile.&#xa;text = pio.loadFile(self._temp_python_filename_)self.console.writeText(text)QtWidgets.QApplication.setOverrideCursor(QtGui.QCursor(QtCore.Qt.WaitCursor))worker = pgui.ProgressWorker(self._run_python_source_code_, None, self._temp_python_filename_, {'paste': False})self.threadpool.start(worker)if all([isinstance(self.workspace[v], (dict, pd.DataFrame, pd.Series, neo.basesignal.BaseSignal, neo.SpikeTrain))] for v in varnames):if not isinstance(self.workspace[varname], (pd.Series, pd.DataFrame, np.ndarray, dict)):@pyqtSlot()@safeWrapperdef slot_viewSelectedVarInTableEditor(self):if bool(QtWidgets.QApplication.keyboardModifiers() &amp; QtCore.Qt.ShiftModifier):newWindow = Trueelse:newWindow = Falsevarname = self.workspaceModel.getCurrentVarName()if varname is None:indexList = self.workspaceView.selectedIndexes()if len(indexList) == 0:returnvarname = self.workspaceModel.item(indexList[0].row(),0).text()if varname is None:returnif not self.viewVar(varname, newWindow=newWindow, winType = &quot;TableEditor&quot;):self.console.execute(varname)if not self.viewVar(varname, newWindow=False, useSignalViewerForNdArrays=useSignalViewerForNdArrays):Displays ndarray in a TableEditor&#xa; workspaceModel dit not pick it up, try to get it from workspaceView create a tableEditor if none is present re-use existing viewer window NOTE: to avoid clash with python's raise PyQt uses &quot;raise_()&quot;Displays ndarray in a new  TableEditor&#xa; workspaceModel dit not pick it up, try to get it from workspaceViewif bool(QtWidgets.QApplication.keyboardModifiers() &amp; QtCore.Qt.ControlModifier):useSignalViewerForNdArrays = Trueelse:useSignalViewerForNdArrays = Falseif not self.viewVar(varname, newWindow=True, useSignalViewerForNdArrays=useSignalViewerForNdArrays):def plotVar(self, varname, newWindow=False): #, useSignalViewerForNdArrays=False):winId = Noneif varname in self.workspace.keys():if type(self.workspace[varname]).__name__ in (&quot;Block&quot;, &quot;Segment&quot;, &quot;AnalogSignal&quot;, &quot;IrregularlySampledSignal&quot;, &quot;SpikeTrain&quot;, &quot;Event&quot;, &quot;Epoch&quot;, &quot;DataSignal&quot;):winDict = self.signalViewerWindowswinId   = self.currentSignalViewerWindowIDwinType = &quot;SignalViewer&quot;elif isinstance(self.workspace[varname], np.ndarray) and self.workspace[varname].size > 1:# doesn't make sense to plot scalars!winDict = self.matplotlibFigureswinId = self.currentMatplotlibFigureIDwinType = &quot;Figure&quot;else:return Falseif not newWindow and len(winDict) > 0 and winId is not None and winId in winDict.keys():# try to re-use an existing viewer# the list comprehension below won't work for pyplot figures, # because their ID is a number !!!winVarName = &quot;&quot;if winType == &quot;Figure&quot;:winVarName = [k for k in self.workspace.keys() if type(self.workspace[k]).__name__ == winType and self.workspace[k].number == winId]else:winVarName = [k for k in self.workspace.keys() if type(self.workspace[k]).__name__ == winType and self.workspace[k].ID == winId]if len(winVarName) > 0:prefix = winVarName[-1]else:prefix = winType #shouldn't happenif isinstance(winDict[winId], mpl.figure.Figure):plt.figure(winId)plt.cla()plt.plot(self.workspace[varname])plt.get_current_fig_manager().canvas.draw_idle()else:winDict[winId].view(self.workspace[varname], title=varname)else: # create a new windowif winType == &quot;Figure&quot;:self.slot_newMatplotlibFigure()winId = self.currentMatplotlibFigureIDfig = plt.figure(winId)plt.plot(self.workspace[varname])winDict[winId].show()winDict[winId].canvas.update()else:if winType == &quot;ImageViewer&quot;:self.slot_newImageViewerWindow()winId = self.currentImageViewerWindowIDelif winType == &quot;SignalViewer&quot;:self.slot_newSignalViewerWindow()winId = self.currentSignalViewerWindowIDelif winType == &quot;XMLViewer&quot;:self.slot_newXmlViewerWindow()winId = self.currentXmlViewerWindowIDelif winType == &quot;TextViewer&quot;:self.slot_newTxtViewerWindow()winId = self.currentTxtViewerWindowIDelif winType == &quot;TableEditor&quot;:self.slot_newTableEditorWindow()winId = self.currentTableEditorWindowIDwinDict[winId].view(self.workspace[varname])winDict[winId].setWindowTitle(&quot;%s - %s&quot; % (winDict[winId].windowTitle(), varname))return Truereturn False, useSignalViewerForNdArrays=True):Displays a variable in the workspace.&#xa;        The variable is selected by its name&#xa;print(&quot;ScipyenWindow.viewVar, newWindow:&quot;, newWindow)Actually displays a python object in user's workspace&#xa;        Delegates to appropriate viewer according to object type, creates a new&#xa;        viewer if necessary.&#xa;        Call this function when the intention is to display variables that are &#xa;        NOT in user's workspace.&#xa;        &#xa;        Parameters:&#xa;        ------------&#xa;        obj: the python variable&#xa;        &#xa;        objname: str, the name used in the viewer's window title (not necessarily the &#xa;                    object's name)&#xa;                    &#xa;        newWindow: bool (default False). When False, displays the object in the&#xa;                currently active viewer window, is a suitable one exists, or&#xa;                creates a new one.&#xa;                &#xa;                When True, displays the object in a new instance of a suitable viewer.&#xa;                &#xa;        useSignalViewerForNdArrays when true, plot signals in signal viewer&#xa; TODO: accommodate new viewer typesprint(&quot;viewObject: type(obj) %s&quot; % type(obj).__name__)print(&quot;viewObject: winType&quot;, winType) parent should never be None, but let's check anyway do we &quot;unload&quot;, &quot;offload&quot;, or simply &quot;forget&quot; them? parent should never be None, but let's check anyway check if menu left empy, chances are it is created by the plugin => remove it TODO/FIXME 2016-04-03 00:14:47 make forceRecompile a configuration variable !!!print(&quot;   slot_loadPlugins&quot;) NOTE: 2016-04-15 11:53:08 let the plugin loader just load plugin module code and do the plugin initialization heremenudict = p.init_pict_plugin()print(&quot;   done slot_loadPlugins&quot;) NOTE: 2016-04-03 00:25:00 calling this seems to make the qt app close -- why? NOTE: FIXED 2016-04-03 01:03:53 -- we call this asynchrnously,  via Qt signal/slot mechanismdw = os.walk(path) FIXME: 2016-04-03 16:34:19 not sure this will be very efficient when we will iterate through many plugins; I guess ImageJ approch is better, in that all plugins are rooted in the  &quot;Plugins&quot; menu in the menubar and then the menu path corresponds to the  actual subdirectory path of the plugin file (or a virtual path if plugin is a jar file)parentActions = parent.actions() NOTE: TODO: in python 3: use inspect.getfullargspec(f)  to parse *args, **kwargs syntax !!! NOTE: 2016-04-17 15:49:08 funcargs are mostly useful to get return annotation if present I found inspect.getfullargspec (or better, inspect.getfullargspec in python 3) more useful to get positional argument listarg_param_names = sig.parameters.keys() #not very useful to get the parameter types !!! NOTE: 2016-04-17 16:32:00 this will raise KeyError if annotations is incomplete; however if an annotation is badly formed (e.g. it has a  list or tuple, or None, or anything else in ) the _inputPrompter_ will raise ValueError on the input Type simple ! NOTE 2016-04-17 16:06:29 code taken from prompt_f in _inputPrompter_ and from slot_wrapPluginFunction decorator, in order to keep the  deocrator's code small and tractable   if is None, or is a nonempty (tuple or list) or is a type or the string '~' cover the case where argument type is given as a single type leave it as a tupleif (arg_defaults is not None and len(arg_names) > len(arg_defaults)):defs = [None] * len(arg_names)defs[(len(arg_names)-len(arg_defaults)):] = arg_defaultsarg_defaults = defsdel defselif arg_defaults is None:arg_defaults = [None] * len(arg_names) Ideally, these functions might not be visible as free functions in the console environment, but rather as member(s) of a subenvironment (module-like) named in a simple fashion (to minime keystrokes, thus to facilitate their call from the console). On the other hand, their naming should reconcile possible name clashes e.g., different plugin advertise functions with the same name (and signature, maybe). A simple way would be to reference the plugin module in the global environment of the console -- how? -- but NOT in the user_ns namespace, so that they do not clutter the workspace window unnnecessarily. Alternatively we could  alter the workspace model such that the workspace window does not display  function objects. This however is not really desiable, as it would also hide  functions defined by the user at the console, and thus deteaf the purpose of having a console in the first place (i.e. quick code prototyping) One option would be to &quot;re-import&quot; the plugin module in the console environment as we did for __all__ in slot_initQtConsole. This could be done  here if the console and the ipkernel are initialized, or could  be done inside slot_initQtConsole function. The drawback is that this will also expose functions defined inside the plugin module, but not advertised by the init_pict_plugin function, which may  or may not be desirable. Another option is to create &quot;pseudo-modules&quot; (types.ModuleType) and populate them with the function object(s) advertised by the  fully fledged plugin module NOTE: 2016-04-16 10:05:48 at this point we cannot change f.__name__ (it having been already  registered with a menuitem so if it has a weird / nonconformant name  e.g. with spaces or illegal characters the following code will fail. It if the responsibility of the plugin author to ensure that the  advertised functions have sane names inside self.plugins, create a pseudo-module for the function's plugin,if not already there by the way the original (fully fledged) module should already be in sys (because the module has been loaded with imp.load_module by  pict_plugin_loader therefore the next check is redundant, and the  lines inside the 'if' block below might as well be taken out of it now &quot;install&quot; the function in this pseudo-module corresponding to the plugin module that defined the function more than one function definedprint(&quot;_run_loop_process_ args&quot;, args) the nested dict iterate over keys #print(mp) avoid name clashes  plugin module does not advertise any menu path => use plugin module name as submenu of a canonical Plugins menu" visibility="protected" isInline="false" isSpecification="false" name="inputPrompter_" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uNBggEVhEjKxg" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="u3zx9ncvvlyP6" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="nOutputs"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="udtlXeClGQczR" visibility="public" isSpecification="false" name="RichJupyterWidget" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="udtlXeClGQczR" xmi.id="uSoPRuvkpInx2" visibility="public" isSpecification="false" name="" discriminator="" child="uvGIb48jM9sj3"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="usNxH4XoEwQSe" visibility="public" isSpecification="false" name="__QMainWindow__" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="usNxH4XoEwQSe" xmi.id="u7QfNvsgkSV78" visibility="public" isSpecification="false" name="" discriminator="" child="u4FeXqNNHtJeB"/>
      <UML:Generalization namespace="Logical_View" parent="uyQnH1v8ZlFKH" xmi.id="uzfLdcqFXVyDm" visibility="public" isSpecification="false" name="" discriminator="" child="uVTeXt4nsd9J6"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uhgqHIOpN8bhj" visibility="public" isSpecification="false" name="__UI_ScriptManagerWindow__" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="uhgqHIOpN8bhj" xmi.id="uKiCmIPOn9tOV" visibility="public" isSpecification="false" name="" discriminator="" child="uVTeXt4nsd9J6"/>
      <UML:Generalization namespace="Logical_View" parent="ubge0kexwrzQa" xmi.id="uh87TcIqADnjb" visibility="public" isSpecification="false" name="" discriminator="" child="uVmiBPxJA6fPs"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uhUloQKUJ0rxk" visibility="public" isSpecification="false" name="WindowManager" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="uhUloQKUJ0rxk" xmi.id="uudXOpxVNMewl" visibility="public" isSpecification="false" name="" discriminator="" child="uxFUhJjqj5o0M"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="utMatULWaucNg" visibility="public" isSpecification="false" name="__UI_MainWindow__" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="utMatULWaucNg" xmi.id="ul55m8RYDTjjw" visibility="public" isSpecification="false" name="" discriminator="" child="uxFUhJjqj5o0M"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uOwMotFKyDQMO" comment="### END pict.gui modules" visibility="public" isSpecification="false" name="MatrixViewer" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uBTcmHlPq2YuW"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uYzfM8cVQK76h" ownerScope="classifier" visibility="public" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="supported_types"/>
        <UML:Attribute xmi.id="uxYxoDHjEETMG" ownerScope="classifier" visibility="public" initialValue="&quot;Matrix&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="view_action_name"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u476e5QBJVLaC" isOverride="false" comment="self._defaultCursor = QtGui.QCursor(QtCore.Qt.ArrowCursor)print(&quot;SignalViewer.__init__ viewerVarName: &quot;, viewerVarName)self._tableWidget.setSortingEnabled(False) # this IS the default!" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uEPLsesYgu4Sm" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uEWK4UQtPEktg" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="un9OPCLOMjecj" isOverride="false" comment=" this can be expensive!" visibility="public" isInline="false" isSpecification="false" name="closeEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ujM8Z1X9CVgcK" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u44ajschruEFR" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uViCEAY3zZ6XA" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="setupView" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usvfywCN359rP" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4i1VxfDHuu8T" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setData" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u7Qu4uvBahYOc" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uvBbiYAmqh4LB" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
          <UML:Parameter xmi.id="u8abMCBs5D3Nq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="doc_title"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0hSVvqFAqxe1" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="view" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uiie5sdQk6KIz" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uJWxvfvrP5Ief" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
          <UML:Parameter xmi.id="uOozDeF4pmfA7" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="doc_title"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZNBjI4UiPGqO" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setTitlePrefix" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uGEeoVqONC5nH" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uzA1n6HmHxtd8" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uF9w6LiQkIhWL" isOverride="false" comment="Sets the document-specific part (suffix) of the window title" visibility="public" isInline="false" isSpecification="false" name="setTitle" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u3ICabHdSNj3F" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uzox8yGIwlR7k" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
          <UML:Parameter xmi.id="udOd1uvrAOBqx" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="prefix"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uP0lM9DEEdqpQ" isOverride="false" comment="print(&quot;filePath: &quot;, filePath)print(&quot;filePath is None: &quot;, filePath is None)if filePath is not None:print(&quot;filePath is empty: &quot;, len(filePath) == 0)outputXmlFile = QtCore.QFile(filePath)if outputXmlFile.open(QtCore.QFile.WriteOnly | QtCore.QFile.Truncate):out = QtCore.QTextStream(outputXmlFile)self.model.domDocument.save(out,4, QtXml.QDomNode.EncodingFromDocument)" visibility="public" isInline="false" isSpecification="false" name="saveAsFile" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uKec7lxR7s6g8" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJeUguvY2s4ta" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="ID" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOzFeuvDkDguB" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uelIR5YmIVZu9" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="ID" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9c6sUDXN9PlN" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uyWVayuNn6KFh" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uatorjw59LS9K" xmi.id="uBTcmHlPq2YuW" visibility="public" isSpecification="false" name="" discriminator="" child="uOwMotFKyDQMO"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uBbXToV1Clxpg" visibility="public" isSpecification="false" name="SelectablePlotItem" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ul9VowhwWoa8E"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uKRoHLEw5TCUo" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="itemClicked"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u7tS15yz3CqVG" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uqtpWgYF7TdGG" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uswyHeMAUk0QQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uPqoAMIylPRmL" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="mousePressEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uhr7ddbpI0Wb8" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uvDNyEb9hheII" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="ev"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" stereotype="class-or-package" isLeaf="false" isAbstract="false" xmi.id="uq6woPgCNDhTA" visibility="public" isSpecification="false" name="pg" isRoot="false">
       <UML:Namespace.ownedElement>
        <UML:Class namespace="uq6woPgCNDhTA" isLeaf="false" isAbstract="false" xmi.id="uZdX2oz1leUsF" visibility="public" isSpecification="false" name="PlotItem" isRoot="false"/>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uZdX2oz1leUsF" xmi.id="ul9VowhwWoa8E" visibility="public" isSpecification="false" name="" discriminator="" child="uBbXToV1Clxpg"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uB68wDksp88F1" comment="A combobox to use with a QuickDialog.&#xa;    &#xa;    The combobox is nothing fancy -- only accepts a list of text items&#xa;" visibility="public" isSpecification="false" name="QuickDialogComboBox" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="u7nI6Vbqpc3Vn"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ukUCS3cWBbuTL" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uEzxxjEYs9fnU" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uJVmGzPTeXUlY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uxLszzIU85qIU" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1OdqcMD7lDyY" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setFocus" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uyC9eRo9M9W8V" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="up1Dn58pWEoTN" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setItems" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHDhE9gmpOmMp" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uI7B8PNsKiXMG" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="textList"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNhlSy2qb09gL" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setValue" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLSlnxUJQr6Jm" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uR7eOybwTQ4WH" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="index"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uM84kDuctoOjb" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setText" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ukBB9S34bAp6P" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uiC59mHVQpGnp" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="text"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uh4GH31yJkGJI" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="value" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzX4kkqbo21tD" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uWg0bIOYeGip8" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="text" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uvi5mYnfXl4Q9" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZXCEOHb3yAGo" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="connectTextChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwTf2SWMa9zMV" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uExUXlEIK3dQl" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="slot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u7NV4SawTw8bP" isOverride="false" comment="Connects the combobox currentIndexChanged signal.&#xa;        NOTE: this is an overlaoded signal, with to versions &#xa;        (respectively, with a str and int argument).&#xa;        &#xa;        Therefore it is expected that the connected slot is also overloaded&#xa;        to accept a str or an int&#xa;" visibility="public" isInline="false" isSpecification="false" name="connectIndexChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uQvi68BnfbGZP" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uVIvZBo7lz5BG" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="slot"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uFSRfJdGLFmSB" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="disconnect" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="utHXbX4mdKERE" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="us9YseioI9TgM" xmi.id="u7nI6Vbqpc3Vn" visibility="public" isSpecification="false" name="" discriminator="" child="uB68wDksp88F1"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uR98rfuYUT5QF" visibility="public" isSpecification="false" name="GuiWorkerSignals" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="utXiiiMJ3XzBe"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uTL9iEqKLUz1H" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_finished"/>
        <UML:Attribute xmi.id="uHpmmfAhSdLWY" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_error"/>
        <UML:Attribute xmi.id="uxeq58s9MbCiD" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_result"/>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" stereotype="class-or-package" isLeaf="false" isAbstract="false" xmi.id="ueK15ZEdyD9QS" visibility="public" isSpecification="false" name="QtCore" isRoot="false">
       <UML:Namespace.ownedElement>
        <UML:Class namespace="ueK15ZEdyD9QS" isLeaf="false" isAbstract="false" xmi.id="uEEMyH6rTeT4L" visibility="public" isSpecification="false" name="QAbstractTableModel" isRoot="false"/>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="ucXsHb6NzgfI1" xmi.id="utXiiiMJ3XzBe" visibility="public" isSpecification="false" name="" discriminator="" child="uR98rfuYUT5QF"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uI29uPaawjAEq" visibility="public" isSpecification="false" name="GuiWorker" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ucEX16aUcYqDH"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uDgfMcTnShv86" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uNIqtbu2jr2L8" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u6Bkph0eP55jK" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="fn"/>
          <UML:Parameter xmi.id="uBAI4em0KwKGy" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJYyRgL1gF1zo" isOverride="false" comment=" Return the result of the processing Done Done" visibility="public" isInline="false" isSpecification="false" name="run" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ui21DNCUQ01bF" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uKogmcaEsYQlW" xmi.id="ucEX16aUcYqDH" visibility="public" isSpecification="false" name="" discriminator="" child="uI29uPaawjAEq"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uDEuivPMxotSI" visibility="public" isSpecification="false" name="ProgressWorkerSignals" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uqSNLOdC1Zhrs"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="ujzQOBOFYGgz3" ownerScope="classifier" comment="See Martin Fitzpatrick's tutorial on Multithreading PyQt applications with QThreadPool&#xa;https://martinfitzpatrick.name/article/multithreading-pyqt-applications-with-qthreadpool/&#xa;&#xa;Defines the signals available from a running worker thread.&#xa;Supported signals are:&#xa;signal_finished&#xa;No data&#xa;sig_error&#xa;`tuple` (exctype, value, traceback.format_exc() )&#xa;signal_result&#xa;`object` data returned from processing, anything&#xa;signal_progress&#xa;`int` indicating % progress&#xa;" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_finished"/>
        <UML:Attribute xmi.id="uLZViNgQ9E2je" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_error"/>
        <UML:Attribute xmi.id="uuxYXZaXKhiVg" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_result"/>
        <UML:Attribute xmi.id="uXSbbOVJvOvqO" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_progress"/>
        <UML:Attribute xmi.id="uCzKfcYvVYCyV" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_setMaximum"/>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="ucXsHb6NzgfI1" visibility="public" isSpecification="false" name="QObject" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="ucXsHb6NzgfI1" xmi.id="uqSNLOdC1Zhrs" visibility="public" isSpecification="false" name="" discriminator="" child="uDEuivPMxotSI"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="us4UwMQuWvowJ" comment="    ProgressWorker thread&#xa;    Inherits from QRunnable to handler worker thread setup, signals and wrap-up.&#xa;    :param fn:  The function callback to run on this worker thread. Supplied args and &#xa;                     kwargs will be passed through to the runner.&#xa;                     &#xa;    :type fn: function&#xa;    &#xa;        The function is expected to execute a loop computation and its signature&#xa;        should contain an optional named parameter &quot;progressSignal&quot; of type &#xa;        pyqtSignal, to be emitted after each iteration of the loop code.&#xa;    :param args: Arguments to pass to the callback function&#xa;    :param kwargs: Keywords to pass to the callback function&#xa;    &#xa;    NOTE: the entire loop is executed in a separate thread and periodically&#xa;    signals its progress by emitting the progressSignal, connected to a &#xa;    progressDialog in the main (GUI) thread.&#xa;" visibility="public" isSpecification="false" name="ProgressWorker" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="u6hM6PjmYRVCR"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="udqhIcPO1LB79" isOverride="false" comment="        fn: callable&#xa;        progressDialog: QtWidgets.QProgressDialog&#xa;        *args, **kwargs are passed to fn&#xa; Store constructor arguments (re-used for processing)else:self.pd = None Add the callback to our kwargsprint(&quot;ProgressWorker fn args&quot;, self.args)" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uDi8wqc7wMfUC" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uOlTSFCZEQ19F" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="fn"/>
          <UML:Parameter xmi.id="ujHJuCtf6ixPS" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="progressDialog"/>
          <UML:Parameter xmi.id="u8nUk0xCPYCvx" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6rIlVxMLcyuP" isOverride="false" comment=" Retrieve args/kwargs here; and fire processing using them Return the result of the processing Done" visibility="public" isInline="false" isSpecification="false" name="run" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVA7ie8iaURfv" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uKogmcaEsYQlW" visibility="public" isSpecification="false" name="QRunnable" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="uKogmcaEsYQlW" xmi.id="u6hM6PjmYRVCR" visibility="public" isSpecification="false" name="" discriminator="" child="us4UwMQuWvowJ"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u422jGAiZc4xx" visibility="public" isSpecification="false" name="PlanarGraphics" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uwwUGLn9FEQTB"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="u0PPnPWgbYOoe" ownerScope="classifier" comment="to the parametric form of the constructor" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="u7epFYwTFra1Y" ownerScope="classifier" visibility="protected" initialValue="None" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="u9JSh2JlHBOCh" ownerScope="classifier" visibility="protected" initialValue="&quot;&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Attribute xmi.id="uMZ8YrIiSO9mk" ownerScope="classifier" comment="NOTE: properties (descriptor names) do not belong here" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="required_attributes_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uC7nf5csj3NKe" ownerScope="classifier" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="upgrade_attribute__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ufnMbJnh5NlKA" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uUhYo5PyLotjH" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="old_name"/>
          <UML:Parameter xmi.id="uAJzKaKHZFKt6" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="new_name"/>
          <UML:Parameter xmi.id="ulW1S5VjFCkcX" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="attr_type"/>
          <UML:Parameter xmi.id="uT9TnEb625ZQy" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="default"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="ubge0kexwrzQa" xmi.id="uwwUGLn9FEQTB" visibility="public" isSpecification="false" name="" discriminator="" child="u422jGAiZc4xx"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uICuisVy6uW5x" visibility="public" isSpecification="false" name="GraphicsObjectType" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uP2d6iMTXUGJH"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uFAcrgGJNFoFJ" ownerScope="classifier" comment="5 parameters (W, H, xWin, yWin, radius)" visibility="public" initialValue="1" type="uJe3bI2rF2OQt" isSpecification="false" name="vertical_cursor"/>
        <UML:Attribute xmi.id="umRlhTkHGtQbm" ownerScope="classifier" comment="5 parameters (W, H, xWin, yWin, radius)" visibility="public" initialValue="2" type="uJe3bI2rF2OQt" isSpecification="false" name="horizontal_cursor"/>
        <UML:Attribute xmi.id="uuTogVlEuXw1j" ownerScope="classifier" comment="5 parameters (W, H, xWin, yWin, radius)" visibility="public" initialValue="4" type="uJe3bI2rF2OQt" isSpecification="false" name="crosshair_cursor"/>
        <UML:Attribute xmi.id="uQlnuo06pP0V2" ownerScope="classifier" comment="5 parameters (W, H, xWin, yWin, radius)" visibility="public" initialValue="8" type="uJe3bI2rF2OQt" isSpecification="false" name="point_cursor"/>
        <UML:Attribute xmi.id="uWerf30S1XGsN" ownerScope="classifier" comment="QPainterPath              QPointF     &lt;=> 2 coordinates (X,Y)" visibility="public" initialValue="16" type="uJe3bI2rF2OQt" isSpecification="false" name="point"/>
        <UML:Attribute xmi.id="uKfjWrc5sg8i8" ownerScope="classifier" comment="QGraphicsLineItem         QLineF      &lt;=> 4 coordinates (X0, Y0, X1, Y1)" visibility="public" initialValue="32" type="uJe3bI2rF2OQt" isSpecification="false" name="line"/>
        <UML:Attribute xmi.id="uOlbGlsqKvgND" ownerScope="classifier" visibility="public" initialValue="64" type="uJe3bI2rF2OQt" isSpecification="false" name="polyline"/>
        <UML:Attribute xmi.id="utJNOYACqmv0a" ownerScope="classifier" comment="QGraphicsRectItem         QRectF      &lt;=> 4 coordinates (X, Y, W, H) = closed" visibility="public" initialValue="128" type="uJe3bI2rF2OQt" isSpecification="false" name="rectangle"/>
        <UML:Attribute xmi.id="uFnOuHDfhrKiz" ownerScope="classifier" comment="QGraphicsPolygonItem      QPolygonF   &lt;=> sequence of QPointF &lt;=> sequence of (X, Y) pairs" visibility="public" initialValue="256" type="uJe3bI2rF2OQt" isSpecification="false" name="polygon"/>
        <UML:Attribute xmi.id="ul4VAWRZhtJPk" ownerScope="classifier" comment="QGraphicsEllipseItem      QRectF      &lt;=> 4 coordinates (X, Y, W, H) = closed" visibility="public" initialValue="512" type="uJe3bI2rF2OQt" isSpecification="false" name="ellipse"/>
        <UML:Attribute xmi.id="uICmXGbm4E9iu" ownerScope="classifier" visibility="public" initialValue="1024" type="uJe3bI2rF2OQt" isSpecification="false" name="quad"/>
        <UML:Attribute xmi.id="uDB7mJ0DPmWIm" ownerScope="classifier" visibility="public" initialValue="2048" type="uJe3bI2rF2OQt" isSpecification="false" name="cubic"/>
        <UML:Attribute xmi.id="uypenXBM2jsfR" ownerScope="classifier" visibility="public" initialValue="4096" type="uJe3bI2rF2OQt" isSpecification="false" name="arc"/>
        <UML:Attribute xmi.id="uXytngOxTXDoO" ownerScope="classifier" visibility="public" initialValue="8192" type="uJe3bI2rF2OQt" isSpecification="false" name="arcmove"/>
        <UML:Attribute xmi.id="uq3wHHdxIADo2" ownerScope="classifier" comment="Path" visibility="public" initialValue="16384" type="uJe3bI2rF2OQt" isSpecification="false" name="path"/>
        <UML:Attribute xmi.id="u8mbMqgie7RCg" ownerScope="classifier" comment="QPainterPath" visibility="public" initialValue="32768" type="uJe3bI2rF2OQt" isSpecification="false" name="qtpath"/>
        <UML:Attribute xmi.id="uyhaubJUJesU0" ownerScope="classifier" comment="QGraphicsSimpleTextItem               &lt;=> str" visibility="public" initialValue="65536" type="uJe3bI2rF2OQt" isSpecification="false" name="text"/>
        <UML:Attribute xmi.id="umaWBbYk3z4sR" ownerScope="classifier" visibility="public" initialValue="vertical_cursor" type="ubge0kexwrzQa" isSpecification="false" name="lineCursorTypes"/>
        <UML:Attribute xmi.id="uIV8DYUucToS5" ownerScope="classifier" visibility="public" initialValue="lineCursorTypes" type="ubge0kexwrzQa" isSpecification="false" name="shapedCursorTypes"/>
        <UML:Attribute xmi.id="uQ1q5YuRIllbZ" ownerScope="classifier" visibility="public" initialValue="shapedCursorTypes" type="ubge0kexwrzQa" isSpecification="false" name="allCursorTypes"/>
        <UML:Attribute xmi.id="uyrFfa5k7kd6o" ownerScope="classifier" visibility="public" initialValue="line" type="ubge0kexwrzQa" isSpecification="false" name="linearTypes"/>
        <UML:Attribute xmi.id="uRe65LF2XLueQ" ownerScope="classifier" visibility="public" initialValue="rectangle" type="ubge0kexwrzQa" isSpecification="false" name="polygonTypes"/>
        <UML:Attribute xmi.id="uWoSZ0YgzTeB2" ownerScope="classifier" visibility="public" initialValue="polygonTypes" type="ubge0kexwrzQa" isSpecification="false" name="linearShapeTypes"/>
        <UML:Attribute xmi.id="uovBMXxDvjnT3" ownerScope="classifier" visibility="public" initialValue="arc" type="ubge0kexwrzQa" isSpecification="false" name="arcTypes"/>
        <UML:Attribute xmi.id="uZHmvdQj7i8sc" ownerScope="classifier" visibility="public" initialValue="ellipse" type="ubge0kexwrzQa" isSpecification="false" name="curveTypes"/>
        <UML:Attribute xmi.id="uD8Lto3oE8eub" ownerScope="classifier" visibility="public" initialValue="linearShapeTypes" type="ubge0kexwrzQa" isSpecification="false" name="basicShapeTypes"/>
        <UML:Attribute xmi.id="u2JU9jm2FfHk6" ownerScope="classifier" visibility="public" initialValue="basicShapeTypes" type="ubge0kexwrzQa" isSpecification="false" name="commonShapeTypes"/>
        <UML:Attribute xmi.id="upJVtvDAr0YE3" ownerScope="classifier" visibility="public" initialValue="commonShapeTypes" type="ubge0kexwrzQa" isSpecification="false" name="geometricShapeTypes"/>
        <UML:Attribute xmi.id="uReOH0ieXSej8" ownerScope="classifier" visibility="public" initialValue="geometricShapeTypes" type="ubge0kexwrzQa" isSpecification="false" name="allShapeTypes"/>
        <UML:Attribute xmi.id="uDYvY8yRAvumB" ownerScope="classifier" visibility="public" initialValue="allCursorTypes" type="ubge0kexwrzQa" isSpecification="false" name="allObjectTypes"/>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u9bmWVRTqayT0" visibility="public" isSpecification="false" name="IntEnum" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="u9bmWVRTqayT0" xmi.id="uP2d6iMTXUGJH" visibility="public" isSpecification="false" name="" discriminator="" child="uICuisVy6uW5x"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u4RrB3UMIXgVE" comment="&quot;def&quot; __init__(self, x, y, name=None, frameindex=[], currentframe=0):" visibility="public" isSpecification="false" name="Move" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="udb9cbhkPeesW"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="umOjahVR5ln61" ownerScope="classifier" comment="_planar_descriptors_ = (&quot;x&quot;, &quot;y&quot;)" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="uct22wUgCFRGI" ownerScope="classifier" visibility="protected" initialValue="GraphicsObjectType.point" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="urYSDoevJZmhu" ownerScope="classifier" visibility="protected" initialValue="&quot;moveTo&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBqZdDAIaZpUq" ownerScope="classifier" isOverride="false" comment="Parameters: move to point coordinates (x,y)&#xa;" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uQQLnZtIYphQS" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uK3jKysqK2sDb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZzkZKFh4vCqC" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="points" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZZNQKiHVDHDq" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJ3FL0ag4kApd" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="point" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHHrCohDyA82O" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubpLcbegEIiRu" isOverride="false" comment="Overrides PlanarGraphics.qGraphicsItem;&#xa;        Returns a circle&#xa;" visibility="public" isInline="false" isSpecification="false" name="qGraphicsItem" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uMVTyDdwA2c4W" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ul7Clssi4ihne" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pointSize"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u422jGAiZc4xx" xmi.id="udb9cbhkPeesW" visibility="public" isSpecification="false" name="" discriminator="" child="u4RrB3UMIXgVE"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uzSXt7iceDSPR" comment="&quot;def&quot; __init__(self, x, y, name=None, frameindex=[], currentframe=0):" visibility="public" isSpecification="false" name="Line" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uvkYfQCG5NtbY"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uu1qtqarRpt3F" ownerScope="classifier" comment="_planar_descriptors_ = (&quot;x&quot;, &quot;y&quot;)" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="ud6ZxuWYHfb8I" ownerScope="classifier" comment="FIXME must revisit this: Line is in fact a point, isn't it?" visibility="protected" initialValue="GraphicsObjectType.point" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="u6baWfnVZBynW" ownerScope="classifier" visibility="protected" initialValue="&quot;lineTo&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ueFo8Dawu4koc" isOverride="false" comment="Parameters: line to destination coordinates (x,y)&#xa;" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uKc4jomBp6Cct" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ub8eD4VJ3bWFb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uaYs5BakeJ5JZ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="qGraphicsItem" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9YHVeooAyHCd" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uPWmp5TbQUmSP" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pointSize"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u422jGAiZc4xx" xmi.id="uvkYfQCG5NtbY" visibility="public" isSpecification="false" name="" discriminator="" child="uzSXt7iceDSPR"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uCYrc4iClbXEi" comment="&quot;def&quot; __init__(self, x, y, c1x, c1y, c2x, c2y, name=None, frameindex=[], currentframe=0):" visibility="public" isSpecification="false" name="Cubic" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="u2ZvqPG6ctB18"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uCc3xmrz5gGzF" ownerScope="classifier" comment="A cubic curve path segment&#xa;&#xa;Coordinates are,respectively, for the:&#xa;first control point: x, y;&#xa;second control point: x1, y1; &#xa;end point (destination): x2, y2.&#xa;&#xa;Corresponds to the triplet:&#xa;(QPainterPath.CurveToElement, QPainterPath.CurveToDataElement, QPainterPath.CurveToDataElement).&#xa;&#xa;When present at the beginning of a path, it ALWAYS starts at (0.0, 0.0). &#xa;&#xa;Otherwise, its origin is the previous PlanarGraphics&#xa;object (Move, Line, CubicCurve or QuadCurve element).&#xa;&#xa;" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="ucwyFNNq2BpcJ" ownerScope="classifier" visibility="protected" initialValue="GraphicsObjectType.cubic" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="uyD0sxBYhzvYi" ownerScope="classifier" visibility="protected" initialValue="&quot;cubicTo&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ua1Imn8lJUNdI" isOverride="false" comment="        Parameters:&#xa;        x,y = cubic curve destination coordinates&#xa;        c1x, c1y = first control point coordinates&#xa;        c2x, c2y = second control point coordinates&#xa;" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uRoRDXQyTf1hg" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uEKnwwQFjR726" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utTmCVzwdgGAi" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="controlPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uudLIs3kYtijF" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uEGNAx1FyvMv2" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uVreF63zb7k1m" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="asControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="udAmHs5gvDJse" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uGLCzLw3mYVum" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uWtTOVTOL9vWX" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="fromControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZkIFfSSdQQhC" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uk1NjYdRnG9K1" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="path"/>
          <UML:Parameter xmi.id="uCayTk2Lk3jKu" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uDKwFhRhBfK5Y" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="qPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9vB6zeEsyFkW" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ueUnfoVNs9Fxx" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ukQKavMtudYwk" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="translate" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uFTdF47WQLnWv" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uSqJVld9B56GO" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dx"/>
          <UML:Parameter xmi.id="uWNNqIDpJwYyK" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dy"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uDY4sOnhfN3lt" isOverride="false" comment="Creates a cubic BSpline object with origin at &quot;xy&quot;&#xa;        &#xa;        Parameters:&#xa;        ==========&#xa;        xy: array_like: the x0, y0 coordinates of the origin&#xa;        &#xa;        extrapolate: boolean, default True (see scipy.inteprolate.BSpline)&#xa;        &#xa;&quot;def&quot; qGraphicsItem(self, pointSize=0, frame = None):if frame is None:state = self.currentStateelse:if frame in self.frameIndices:state = self.getState(frame)else:warnings.warn(&quot;No state is associated with specified frame (%d)&quot; % frame)returnret = QtWidgets.QGraphicsPathItem(self())" visibility="public" isInline="false" isSpecification="false" name="makeBSpline" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uROYN3ggjZZwe" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="upBWIwScsgNUI" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="xy"/>
          <UML:Parameter xmi.id="uJ46uwn52LB9n" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="extrapolate"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u422jGAiZc4xx" xmi.id="u2ZvqPG6ctB18" visibility="public" isSpecification="false" name="" discriminator="" child="uCYrc4iClbXEi"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u2YDb6O6k5qf6" comment="&quot;def&quot; __init__(self, x, y, cx, cy, name=None, frameindex=[]):" visibility="public" isSpecification="false" name="Quad" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uS1712aVwSbJA"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="ugA51VElGPkdI" ownerScope="classifier" comment="A quadratic curve path segment.&#xa;&#xa;Coordinates are, respectively, for the control point: x, y and for the end&#xa;end point (destination): x1, y1.&#xa;&#xa;Corresponds to the tuple:&#xa;(QPainterPath.CurveToElement, QPainterPath.CurveToDataElement).&#xa;&#xa;When present at the beginning of a path, it ALWAYS starts at (0.0, 0.0). &#xa;&#xa;Otherwise, its origin is the previous PlanarGraphics&#xa;object (Move, Line, CubicCurve or QuadCurve element).&#xa;" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="uLBTRYwSGPHCM" ownerScope="classifier" visibility="protected" initialValue="GraphicsObjectType.quad" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="u6Tu41zEZHK9Z" ownerScope="classifier" visibility="protected" initialValue="&quot;quadTo&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="umHBGOE1dwiXG" isOverride="false" comment="        Parameters:&#xa;        x,y = quad curve to point coordinates&#xa;        c11x, c1y = control point coordinates&#xa;" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uePplVnMNofUF" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uTYTf5lr5Nvrv" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uXzBVZtCmdUQN" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="controlPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uyzjHviRnBGtr" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uauBLphh9ODOR" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utsLXc79HfFOJ" isOverride="false" comment=" NOTE: FIXME shouldn't this be in inverse order?" visibility="public" isInline="false" isSpecification="false" name="asControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLJc5BwLbTnnS" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uzwExp6Ye3l4D" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ugknBaKFC4Mfh" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="fromControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ul8BNYXvxwFF0" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uQmoZLNiB0y2E" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="path"/>
          <UML:Parameter xmi.id="uRXd6VErehZDK" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubhqmDzWn7rbP" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="translate" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u7iyn6w7VOBzN" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uAwhMh2FazwQk" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dx"/>
          <UML:Parameter xmi.id="uxlyI1ofBXxv0" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dy"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uIaUZXhU10mKL" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="qPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ultsW5elDud82" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ukSTd0bFbU0YG" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uudACdbs14uLJ" isOverride="false" comment="Creates a cubic BSpline object with origin at &quot;xy&quot;&#xa;        &#xa;        Parameters:&#xa;        ==========&#xa;        xy: array_like: the x0, y0 coordinates of the origin&#xa;        &#xa;        extrapolate: boolean, default True (see scipy.inteprolate.BSpline)&#xa;        &#xa;" visibility="public" isInline="false" isSpecification="false" name="makeBSpline" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u7Apz2XxhbTAs" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u6mZcUaLXCGYJ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="xy"/>
          <UML:Parameter xmi.id="uoVJ6YjWflAHv" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="extrapolate"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u422jGAiZc4xx" xmi.id="uS1712aVwSbJA" visibility="public" isSpecification="false" name="" discriminator="" child="u2YDb6O6k5qf6"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uvbyyFOMYS7Lj" visibility="public" isSpecification="false" name="Arc" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uGON2xCMDHc3Q"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uAik6ncY0hYzY" ownerScope="classifier" comment="see NOTE: 2019-03-19 13:49:51" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="uNqp9dhJq03cK" ownerScope="classifier" visibility="protected" initialValue="GraphicsObjectType.arc" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="uwfUqDQlmpHcr" ownerScope="classifier" visibility="protected" initialValue="&quot;arcTo&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uT3YTzWWLnWfc" isOverride="false" comment="        Positional parameters:&#xa;        =======================&#xa;        x, y, w, h = bounding rectangle (top left (x, y) width and height)&#xa;        &#xa;        s = start angle (degrees, positive is CCW; negative is CW)&#xa;        &#xa;        l = sweep length (angle in degrees, positive is CCW; negative is CW)&#xa;        &#xa;" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uejEHT0Z07pMq" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u8vAH0pJE2FDW" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uyiSYQ8FyVovs" isOverride="false" comment="Returns the control points for this Arc, as a tuple.&#xa;        &#xa;        To be used for graphical manipulation of the arc.&#xa;        &#xa;        The control points are given as (x,y) pairs or Cartesian coordinates&#xa;        with the major axis of the arc's ellipse having a 0 angle, in the &#xa;        following order:&#xa;        &#xa;        cp0: the origin of the enclosing rectangle (Move to)&#xa;        &#xa;        cp1: starting point of the arc (line to)&#xa;        &#xa;        cp2: the centre of the arc's ellipse (and enclosing rectangle) (line to)&#xa;        &#xa;        cp3: the end point of the arc (line to)&#xa;        &#xa; empty pathhorizontal = Truehorizontal = False cp0: top-left corner of the enclosing rectangle  cp1: the first point on the arc (EXCLUDING the connection to the arc's ellipse centre) cp2: the centre of the arc's ellipse (same as the centre of its enclosing rectangle) cp3: the last point on the arc (EXCLUDING any connection back to the centre)" visibility="public" isInline="false" isSpecification="false" name="controlPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uf0PRB8pi7JBu" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uMLY33TqQULUJ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uM9woTJCBtN6E" isOverride="false" comment="Returns the control points for this Arc, as a Path object&#xa;        &#xa;        To be used for graphical manipulation of the arc.&#xa;        &#xa;        The control points are given as (x,y) pairs or Cartesian coordinates&#xa;        with the major axis of the arc's ellipse having a 0 angle, in the &#xa;        following order:&#xa;        &#xa;        cp0: the origin of the enclosing rectangle (Move to)&#xa;        &#xa;        cp1: starting point of the arc (line to)&#xa;        &#xa;        cp2: the centre of the arc's ellipse (and enclosing rectangle) (line to)&#xa;        &#xa;        cp3: the end point of the arc (line to)&#xa;        &#xa;" visibility="public" isInline="false" isSpecification="false" name="asControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uoqJHivPsuF8C" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uuLXnXLjLKMt9" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1fFZD7yZuJWZ" isOverride="false" comment=" cp0: top-left corner of the enclosing rectangle  cp1: the first point on the arc (EXCLUDING the connection to the arc's ellipse centre) cp2: the centre of the arc's ellipse (same as the centre of its enclosing rectangle) cp3: the last point on the arc (EXCLUDING any connection back to the centre)" visibility="public" isInline="false" isSpecification="false" name="fromControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uipxAEGgY03db" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uOLZQdzHtBPTA" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="path"/>
          <UML:Parameter xmi.id="uK19RGtjCMDVB" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u422jGAiZc4xx" xmi.id="uGON2xCMDHc3Q" visibility="public" isSpecification="false" name="" discriminator="" child="uvbyyFOMYS7Lj"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u2rTZ9b192VKp" visibility="public" isSpecification="false" name="ArcMove" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uaOQjcYzfCrNe"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uR6Zry0jmzpaE" ownerScope="classifier" comment="see # NOTE: 2019-03-19 13:49:51" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="ucwrJkZRO1GEA" ownerScope="classifier" visibility="protected" initialValue="GraphicsObjectType.arcmove" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="uV0Z8z21zUDAo" ownerScope="classifier" visibility="protected" initialValue="&quot;arcMoveTo&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLlTR9PPC9ppx" isOverride="false" comment="        Positional parameters:&#xa;        =====================&#xa;        x, y, w, h = bounding rectangle (top left (x,y), width and height)&#xa;        &#xa;        a = angle (degrees, positive is CCW; negative is CW)&#xa;        &#xa;" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="unB0EkZyRAlGM" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uMchLPBDpaZjc" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujBmLp5Xu91Yj" isOverride="false" comment="Returns the control points for this Arc, as a tuple.&#xa;        &#xa;        To be used for graphical manipulation of the arc.&#xa;        &#xa;        The control points are given as (x,y) pairs or Cartesian coordinates&#xa;        with the major axis of the arc's ellipse having a 0 angle, in the &#xa;        following order:&#xa;        &#xa;        cp0: the origin of the enclosing rectangle (Move to)&#xa;        &#xa;        cp1: starting point of the arc (line to)&#xa;        &#xa;        cp2: the centre of the arc's ellipse (and enclosing rectangle) (line to)&#xa;        &#xa;        cp3: the end point of the arc (line to)&#xa;        &#xa; empty pathhorizontal = Truehorizontal = False cp0: top-left corner of the enclosing rectangle  cp1: the first point on the arc (EXCLUDING the connection to the arc's ellipse centre) cp2: the centre of the arc's ellipse (same as the centre of its enclosing rectangle)" visibility="public" isInline="false" isSpecification="false" name="controlPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uCorM9TCutp6F" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uiuYV32FSeiGJ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4oZjagTt2IZw" isOverride="false" comment="Returns the control points for this ArcMove, as a Path object&#xa;        &#xa;        NOTE: Since this is a move on an arc trajectory, there is NO sweep length&#xa;        To be used for graphical manipulation of the arc.&#xa;        &#xa;        The control points are given as (x,y) pairs or Cartesian coordinates&#xa;        with the major axis of the arc's ellipse having a 0 angle, in the &#xa;        following order:&#xa;        &#xa;        cp0: the origin of the enclosing rectangle (Move to)&#xa;        &#xa;        cp1: starting point of the arc (line to)&#xa;        &#xa;        cp2: the centre of the arc's ellipse (and enclosing rectangle) (line to)&#xa;        &#xa;" visibility="public" isInline="false" isSpecification="false" name="asControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLg04SdfVLdep" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uLHFo7DQmWac3" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uoIcogbHE6T96" isOverride="false" comment=" cp0: top-left corner of the enclosing rectangle  cp1: the first point on the arc (EXCLUDING the connection to the arc's ellipse centre) cp2: the centre of the arc's ellipse (same as the centre of its enclosing rectangle)" visibility="public" isInline="false" isSpecification="false" name="fromControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u4Pt2TkpkL3Km" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u2AxysvOLlGld" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="path"/>
          <UML:Parameter xmi.id="udWqzmsb1vzKa" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u422jGAiZc4xx" xmi.id="uaOQjcYzfCrNe" visibility="public" isSpecification="false" name="" discriminator="" child="u2rTZ9b192VKp"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="ueUDQVCi6UlF7" comment="&quot;def&quot; __init__(self, x, y, w, h, name=None, frameindex=[], currentframe=0):" visibility="public" isSpecification="false" name="Ellipse" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="u8QDVXA0vb6B1"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uDGnLGMWxmkle" ownerScope="classifier" comment="see NOTE: 2019-03-19 13:49:51" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="u3qq4YnsQkfmW" ownerScope="classifier" visibility="protected" initialValue="GraphicsObjectType.ellipse" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="uFmwhYtloUfIi" ownerScope="classifier" visibility="protected" initialValue="&quot;addEllipse&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uTwVpe0YRXuEf" isOverride="false" comment="        Parameters: &#xa;        x, y, w, h = bounding rectangle (top left (x,y), width, height)&#xa;" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u3Q3ZsRrIgYR0" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u9r8EHd599Rex" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uQH0kdO21W0ZN" isOverride="false" comment="Control points are the top-left and bottom right of the enclosing rectangle&#xa; TODO use more detailed control points as for ArcTo  NOTE: this would be an unnecessary complication" visibility="public" isInline="false" isSpecification="false" name="controlPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u7aWBrISGewpj" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uDycIIAy6RjQQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujnPZOst9Lh8m" isOverride="false" comment="Control path is a line along the first diagonal of the encolsing rectangle&#xa;        (top-left to bottom-right)&#xa;" visibility="public" isInline="false" isSpecification="false" name="asControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uYwuHVpmh91fd" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u5ngPrv7wCjW4" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uCErhr50Qvnvp" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="fromControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ukHEzI99NnmPX" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uK4aCz2zrvXOj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="path"/>
          <UML:Parameter xmi.id="uQi2hgPmJVJpW" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLUR16hTynZ8e" isOverride="false" comment="Returns the points (vertices) of the enclosing rectangle.&#xa;        &#xa;        If there is no associated state for the specified frame index returns an&#xa;        empty list.&#xa;        &#xa;" visibility="public" isInline="false" isSpecification="false" name="qPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uU3AwdwVmdAyh" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uvCxaX8biD1b3" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0qQXcHUQisFB" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="qGraphicsItem" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u986H02xx0Dlb" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uEKc7PWU9gjMm" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pointSize"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u422jGAiZc4xx" xmi.id="u8QDVXA0vb6B1" visibility="public" isSpecification="false" name="" discriminator="" child="ueUDQVCi6UlF7"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uoRoS02AXpUhj" visibility="public" isSpecification="false" name="Rect" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ut2cyAfh3372p"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uPTlmUGL5b2R0" ownerScope="classifier" comment="see NOTE: 2019-03-19 13:49:51" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="uLbsDA3ZQUCzW" ownerScope="classifier" visibility="protected" initialValue="GraphicsObjectType.rectangle" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="u2TIoWMUT6Kjy" ownerScope="classifier" visibility="protected" initialValue="&quot;addRect&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRNvGWUyXt3qm" isOverride="false" comment="        Positional parameters: &#xa;        =====================&#xa;        &#xa;        x, y: top left coordinates (x,y) &#xa;        &#xa;        w, h: width and height&#xa;        &#xa;" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ue2TD8UAcNwvy" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="umI3xv83XABzb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ucDuKOwlyoJHV" isOverride="false" comment="Control points are the top-left and bottom right vertices&#xa;" visibility="public" isInline="false" isSpecification="false" name="controlPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1CPnkU9w5v8l" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ujfNKxqzxTYHU" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uzFqelaCSpZEl" isOverride="false" comment="Control path is the diagonal from top-left to bottom-right&#xa;" visibility="public" isInline="false" isSpecification="false" name="asControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuG2fenBistso" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uupAgDd28ZTfr" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uAmr2KeDRSE1b" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="fromControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uH4HNgdUqqh0a" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uiBxVzd6aXncd" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="path"/>
          <UML:Parameter xmi.id="ukC0MQdSX9fWD" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uil3oixY0Q9gd" isOverride="false" comment="Returns the points (apices) of the rectangle.&#xa;        &#xa;        If there is no associated state for the frame index specified returns&#xa;        an empty list&#xa;        &#xa;" visibility="public" isInline="false" isSpecification="false" name="qPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="up78y6UwmcGcA" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uzNOxQOiNYrAd" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uf9xHPLlh8qtJ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="qGraphicsItem" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uNukaqtY7oAoL" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uMPegk99wxmNZ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pointSize"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRjabANSHqaDR" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="asCanonicalPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uoVVKOx1tHDjK" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uNNZirHcgCxx3" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKFlFuzUqAxCK" isOverride="false" comment="ret.addState(f, frame_path.currentState)" visibility="public" isInline="false" isSpecification="false" name="convertToPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uvQWEolT3fVaP" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uQAtgDXmSMLrA" isOverride="false" comment="ret.addState(f, frame_path.currentState)NOTE: Only Move, Line and Cubic correspond to QPainterPath.Element  &quot;tier 1&quot; elements: primitives that can be called directly" visibility="public" isInline="false" isSpecification="false" name="convertToCanonicalPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIAkcDluF3BBt" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u422jGAiZc4xx" xmi.id="ut2cyAfh3372p" visibility="public" isSpecification="false" name="" discriminator="" child="uoRoS02AXpUhj"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="upKtpGmkDowm6" visibility="public" isSpecification="false" name="Cursor" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uc1YAhaXAjQNR"/>
        <UML:Generalization xmi.idref="ubhi6TmSxtuUp"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="u9jsVeQEBTlJ7" ownerScope="classifier" comment="_planar_descriptors_ = (&quot;x&quot;, &quot;y&quot;, &quot;width&quot;, &quot;height&quot;, &quot;xwindow&quot;, &quot;ywindow&quot;, &quot;radius&quot;)" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="uRi0z7SjcnqCW" ownerScope="classifier" visibility="protected" initialValue="GraphicsObjectType.vertical_cursor" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="uNKFLvTl1ipD1" ownerScope="classifier" visibility="protected" initialValue="None" type="ubge0kexwrzQa" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Attribute xmi.id="uB431H3vZBHhn" ownerScope="classifier" comment="1) implement cursors linking" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_cursorSelected"/>
        <UML:Attribute xmi.id="uZWXme4R23xNu" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_cursorDeselected"/>
        <UML:Attribute xmi.id="uU2dNkJXOZvfU" ownerScope="classifier" comment="sig_editMe = pyqtSignal(str, name=&quot;sig_editMe&quot;)" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_reportPosition"/>
        <UML:Attribute xmi.id="ua1dIBaj8kONe" ownerScope="classifier" comment="sig_reportDynamicPosition = pyqtSignal(str, name=&quot;sig_reportDynamicPosition&quot;)" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_doubleClicked"/>
        <UML:Attribute xmi.id="uXhOo2veHNQtk" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_axisPositionChanged"/>
        <UML:Attribute xmi.id="uzns4Aq9SxWAT" ownerScope="classifier" comment="_cursorTypes_ = {(True, True):'crosshair', (True, False):'horizontal', (False,True):'vertical'}" visibility="protected" initialValue="{" isSpecification="false" name="cursorTypes_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uqg35do72x7ra" isOverride="false" comment="        Keyword parameters:&#xa;        ===================&#xa;        x, y:               scalars, cursor position (in pixels)&#xa;        &#xa;        width, height:      scalars, size of cursor main axis (in pixels) or &#xa;                            None &#xa;        &#xa;        xwindow, ywindow:   scalars, size of cursor's window &#xa;        &#xa;        radius:             scalar, cursor radius (for point cursors) &#xa;        &#xa;        name:               str, this cursor's name&#xa;        &#xa;        graphicstype:         GraphicsObjectType enum value defining a cursor&#xa;                            (see pictgui.GraphicsObjectType)&#xa;        &#xa;        &#xa;        At most one of x or y can be None (which one is determined by its&#xa;        position in the parameter expression list or in the sequence).&#xa;        &#xa;        When width or height are None, they will use the full size of their &#xa;        corresponding image axes.&#xa;print(&quot;Cursor.__init__&quot;, self)print(&quot;Cursor %s init link_objects = %s: &quot; % (self, linked_objects))" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uNvPtipWEFkZ7" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uuRDIWa39GRTW" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uB2XZ5rN43K1w" isOverride="false" comment=" NOTE FIXME what to do here? path encapsulates a single line segment a polyline/polygon there is the possibility that path is a point-by-point mapping to the width spanned by the vertical cursor; in this case, path HAS an element for every possible (int(v.x)) it is simpler to pick up the path element at the index in the  path, that is given by the vertical cursor's x coordinate # (taken as an int)else:# CAUTION: this line can quickly become very expensive !!!# consider factoring this in the Path object# on the other hand, parametric curves (Quad, Cubic) doe not have a closed form!!!euclid_lengths = [math.sqrt((e1.x -  e0.x) ** 2 + (e1.y - e0.y) ** 2) for (e0,e1) in zip(path[:-1], path[1:])]" visibility="public" isInline="false" isSpecification="false" name="map_to_pc_on_path" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ubkAdDPJuUFbr" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uXPukUWJNIeiA" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
          <UML:Parameter xmi.id="uZtZ0i4BG60fF" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="path"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uB6zOfdwERHRs" isOverride="false" comment="self.__is_single_axis__ = isinstance(self._host_graphics_item_, pg.GraphicsScene) valid ranges where the cursor lines can go dict that maps PlotItem objects to SignalProxy objects -- only used for  dynamic cursors for static cursors only (see InifiniteLine for the logic) to make the lines move in concert for multi-axes cursors" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uu2OAx6Aodf2m" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uNQ2pvHjpum0o" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="plot_item"/>
          <UML:Parameter xmi.id="u3IVsOWa4uPuI" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="x"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uTN9xRuaQlieK" isOverride="false" comment="print(&quot;_setup_lines_ after hl xy&quot;, (self.x, self.y))" visibility="protected" isInline="false" isSpecification="false" name="setup_lines_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ujcQvuXf8zf9i" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ugStIGzYedUdc" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="h"/>
          <UML:Parameter xmi.id="uhe6ZuEqgBX8X" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="v"/>
          <UML:Parameter xmi.id="uLlEAzoV6D9XP" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uGFiRYsojVY5J" isOverride="false" comment="xmin = min([-np.inf if p.dataBounds(0)[0] is None else p.dataBounds(0)[0] for p in plotDataItems])xmax = max([np.inf if p.dataBounds(0)[1] is None else p.dataBounds(0)[1] for p in plotDataItems])ymin = min([-np.inf if p.dataBounds(1)[0] is None else p.dataBounds(1)[0] for p in plotDataItems])ymax = max([np.inf if p.dataBounds(1)[1] is None else p.dataBounds(1)[1] for p in plotDataItems])" visibility="protected" isInline="false" isSpecification="false" name="get_plotitem_data_bounds_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="un2utmbLHehcE" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uZcYfKpJO6mRK" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uCN9KegwP8jmM" isOverride="false" comment="Get the useful boundaries for cursor lines, from the host&#xa;        (unless they've been specified by caller)&#xa;        Boundaries returnes in same format as for PlotItem.viewRange()&#xa; host is a graphics scene when the cursor is intended to span NOTE 2019-02-07 17:14:27 several axes. In this case, I cannot rely on data bounds (viewRange()[1])  because each data in the plot can have different scales; so I have to rely on the plotitems' bounding rects  for best pracice, pre-determine the bounds in the caller, according to the plot items layout, data boundaries and type of cursor (vertical, horizontal or crosshair) NOTE: 2019-02-07 17:25:24 the disadvantage of this apporoach is that we can now move the cursor beyond the data boundaries, but then see NOTE 2019-02-07 17:14:27# each range is [[xmin,xmax], [ymin,ymax]]ranges = [self._get_plotitem_data_bounds_(p) for p in pIs]xmin = min([rg[0][0] for rg in ranges])xmax = " visibility="protected" isInline="false" isSpecification="false" name="get_host_boundaries_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1dK4WwH5dyuh" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uaXXMWVjUEMxv" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="host"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="untdgLYFM5GnL" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="update_hline_position_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ugvrtXjnD1gCg" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uK99OUbhS6S1B" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
          <UML:Parameter xmi.id="uQGiioxSA5jiI" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="plotitem"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uQJtE4Ao0lasu" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="update_vline_position_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="us0dKjsdijW5V" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uB3frqHiDe9Dd" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
          <UML:Parameter xmi.id="uL39ebeSRiq6e" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="plotitem"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZ5yv9kd5s6kP" isOverride="false" comment="print(&quot;_add_lines_to_host_ xy&quot;, (self.x, self.y))" visibility="protected" isInline="false" isSpecification="false" name="add_lines_to_host_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6bXPqN1XQG81" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ux5MwKIFumITu" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_positionChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uldc3MJRN1Z9K" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uPjAXt4ICQRxM" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ugek45GCX2jzQ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_linkedPositionChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ulJcTEXl5sznE" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="udi3PN1DWJd8E" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pos"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u34BGCwcTPOfZ" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="slot_line_selected_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ukCqP0rRPpAbc" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uMYnRju7OdyAy" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_setSelected" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="umdvRUcwAARcf" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u2tKhlMISPPXE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uI7hrYvFxqqpx" isOverride="false" comment=" [[xmin, xmax], [ymin, ymax]]" visibility="public" isInline="false" isSpecification="false" name="setBounds" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uy57BWtVXIhyX" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uqmaRiEtPYj8W" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="host"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uAl9noNFJzUE1" isOverride="false" comment="Bidirectionally link this cursor to at least another one of the same type.&#xa;        All other cursors will be linked to this one and to each other.&#xa;        For linked cursors, when one is moved by dx, dy, the linked cursor(s) is (are) &#xa;        moved by the same distance.&#xa; avoid &quot;double&quot; linking avoid double linking avoid &quot;double&quot; linking" visibility="public" isInline="false" isSpecification="false" name="linkTo" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uXW3ibUIKnQ9Z" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uV4Q5f28qls2g" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u9BB1MumKHTMd" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="unlinkFrom" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uNwkBIZgRlwwP" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u4kon3rkgNBme" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uPhfSoncZ9PA0" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="detach" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uRXohJZ5SiDGu" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uYJDFEjwLlOUH" isOverride="false" comment="Attaches this cursor to a PlotItem or a GraphicsScene&#xa;        (of the pyqtgraph framework)&#xa;        TODO allow the attaching to a scene a cursor formerly attached to a &#xa;        plot item, aned vice-versa&#xa;        this means we have to compute appropriate position coordinates!&#xa;" visibility="public" isInline="false" isSpecification="false" name="attach" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="umHvqc02dF5hE" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uN9Y9JnMo2B6d" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="host"/>
          <UML:Parameter xmi.id="u4gnwB5w9YATQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="xBounds"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uifGD7zLiDcZO" isOverride="false" comment="print(&quot;show_lines&quot;, show_lines) NOTE: 2019-02-03 14:48:05 override default value of &quot;movable&quot;print(&quot;_setup_cursor_ after _setup_lines_ xy&quot;, (self.x, self.y))print(&quot;_setup_cursor_ after __add_lines_to_host__ xy&quot;, (self.x, self.y))" visibility="protected" isInline="false" isSpecification="false" name="setup_cursor_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uDCkzduaDcNJY" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ubwm5pgxhFqiQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="host"/>
          <UML:Parameter xmi.id="u57xo8NAHBWAa" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="cursor_type"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uDx7P8BW1vqFi" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="interpret_scene_mouse_events_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6txipTJU89GB" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u1iBJx6QKocEo" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="scene"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uIXcoyMCAl8s1" isOverride="false" comment=" NOTE: 2019-02-09 23:29:22 here, evt is a mouse event" visibility="protected" isInline="false" isSpecification="false" name="slot_selected_in_scene_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uqzrtD53YkFjS" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uw19fZV7aA2jj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="updJOcbzhDoKC" isOverride="false" comment="Workaround to synchronize movvement of BOTH lines when mouse is dragged in the scene.&#xa;        Calls _interpret_scene_mouse_events_ because to find out if any of the lines&#xa;        has been clicked on and if it's being dragged.&#xa; NOTE: 2019-02-09 12:45:02 We cannot rely on sigDragged signal from the line we currently interact from to inform the movement of the other line, because each of the cursor's  lines have one of the coordinates set to 0.0 (being orthogonal) ATTENTION: 2019-02-09 23:11:56 evt is a QtCore.QPointF, and NOT a mouse event object !!!print(&quot;click %s&quot; % scene.clickEvents[0])try:if len(scene.clickEvents):if &quot;MouseClickEvent&quot; in str(scene.clickEvents[0]):#print(&quot;click %s&quot; % scene.clickEvents[0])items = scene.items(evt)if self.vline is not None and self.vline in items:self.sig_cursorSelected.emit(self.ID)if self.hline is not None and self.hline in items:self.sig_cursorSelected.emit(self.ID)except:pass" visibility="protected" isInline="false" isSpecification="false" name="slot_mouse_event_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uC7FJ7I2SA1Ok" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uFGwfL1SNwXxO" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uxYIZykQGzleF" isOverride="false" comment="Use only for dynamic cursors&#xa; CAUTION when activated by the scene sigMouseMoved signal, this carries the mouse event's scenePos()" visibility="protected" isInline="false" isSpecification="false" name="slot_mouse_moved_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uhfYKRf8BCzuG" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uoJ5IWx2Zas1f" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uObdqjuopkRks" isOverride="false" comment=" CAUTION when activated by the scene sigMouseMoved signal, this carries the mouse event's scenePos(); what if pos is NOT this but a point in  other coordinate system? NOTE: only report position when mouse is in the sceneBoundingRect FIXME  2019-02-10 21:30:29 for multiaxes crosshair the horizontal line is stuck on top plot item NOTE: this will cause re-entrant code!if self._linked_ and len(self._linked_cursors_):for c in self._linked_cursors_:# CAUTION this may crash if no curent plot item is defined in Cc.x = self.xc.y = self.y" visibility="protected" isInline="false" isSpecification="false" name="update_lines_from_pos_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uTKhgw0lX2F34" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="usUHbDfAikmf9" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pos"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKI1nUt1GkrOB" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="hostScene" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uiuyebfzvmnaN" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ueNmRnHKzFHKR" isOverride="false" comment="An ordered mapping (collections.OrderedDict) of PlotItems&#xa;        The plot items are those available to this cursor in the parent widget.&#xa;        Returns a map of plot item (key) to its tuple of (x,y) coordinates in the scene (value).&#xa;        These would include the plot item host of the cursor (for single axis cursors).&#xa; get a list of all plot items in the scene CAUTION they may be hosted in different layouts! FIXME: we're assuming the cursors are in a SignalViewer window (the only one that supports multi-axes cursors) therefore we're returning a list of plot items sorted by their Y coordinate  in the scene (as a SignalViewer will lay lot items vertically) sort plot items by their row &amp; column coordinate (i.e. x, and y coordinate) NOTE: in the scene, coordinate (0, 0) is the TOP LEFT " visibility="public" isInline="false" isSpecification="false" name="scenePlotItems" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOU5zbVQH8fH7" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uMQ6qjihx5hvj" isOverride="false" comment="Read-only:&#xa;        The GraphicsItem that hosts this cursor.&#xa;        Currently, this is either a PlotItem, or a GraphicsScene&#xa;" visibility="public" isInline="false" isSpecification="false" name="hostItem" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uAKntdpa9ikJZ" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uINBTIau5Znw7" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isSingleAxis" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOiEjzfRy4B4I" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uTEFG1G4QWd9c" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isMultiAxis" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOdwWMVytgcD8" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujiElz9lsBUOu" isOverride="false" comment="Read-only&#xa;" visibility="public" isInline="true" isSpecification="false" name="vline" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uYgWEYR0NcAqj" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujWvDuHlM4Jvb" isOverride="false" comment="Read-only&#xa;" visibility="public" isInline="false" isSpecification="false" name="hline" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uSviQhT9QXWiQ" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="updwJs9iIXpeN" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="pos" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uNW1MOf93qLqD" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujn5ECFIX2Fuu" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="pos" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6vNnJ2KA7HSO" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uzsOkAorFnUZZ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uL2BtsvghWJGc" isOverride="false" comment="The X coordinate of the cursor in axes (PlotItem) data coordinates.&#xa;        For multi-axes cursors this will return the value in the &quot;current&quot; PlotItem&#xa;        (i.e., the plot where the cursor coordinates are mapped to a point in the&#xa;        plot item's view range)&#xa;        &#xa;        NOTE: To obtain the &quot;y&quot; data coordinate in another PlotItem (axes system)&#xa;        that is spanned by the cursor, call self.getX(plotitem)&#xa; as last resort NOTE: a pair of values, not a QtCore.QPoint/F CAUTION this may return None !!! up to the caller to do what it wants with this" visibility="public" isInline="false" isSpecification="false" name="x" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPSXzS6Zg2wWk" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uq4AhQcJuMTBT" isOverride="false" comment="Expects a value in a plotitem valid range&#xa;" visibility="public" isInline="false" isSpecification="false" name="x" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5hUPZBZkx09Q" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uygUI4WMdQ8zb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubeOQEfIaz2wi" isOverride="false" comment=" so that we can also use this function with single axis cursorsreturn self._host_graphics_item_.vb.mapSceneToView(QtCore.QPointF(self.x, self.y)).x() try this very last resort; caller should check this" visibility="public" isInline="false" isSpecification="false" name="getX" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uCcJ15iRbzEXD" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ustYhiZzZRyV3" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="plotitem"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1NWcYpuFnLnb" isOverride="false" comment="Sets the X coordinate of a line.&#xa;        &#xa;        The X coordinate is specified in axis coordinates&#xa;        &#xa;        For single-axes cursors, this simply sets the &quot;x&quot; property.&#xa;        &#xa;        For multi-axes cursor one must also specify the PlotItem in which the value is given&#xa;        &#xa; so that we can also use this function with single axis cursors" visibility="public" isInline="false" isSpecification="false" name="setX" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uDZKRwSYZhrck" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uGazQiwHGvHgQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
          <UML:Parameter xmi.id="uUA8FQ5MqzDZ8" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="plotItem"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uaUNfh9EtzRCq" isOverride="false" comment="The Y coordinate of the cursor in axes (PlotItem) data coordinates.&#xa;        For multi-axes cursors this will return the value in the &quot;current&quot; PlotItem&#xa;        (i.e., the plot where the cursor coordinates are mapped to a point in the&#xa;        plot item's view range)&#xa;        &#xa;        NOTE: To obtain the &quot;y&quot; data coordinate in another PlotItem (axes system)&#xa;        that is spanned by the cursor, call self.getY(plotitem)&#xa; as last resort NOTE: a pair of values, not a QtCore.QPoint/F CAUTION this may return None !!! up to the caller to do what it wants with this" visibility="public" isInline="false" isSpecification="false" name="y" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uhL3vlWvvA5RM" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNhYu1RzbNJbS" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="y" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u2jpPbctfONdz" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uFwQuOSVsAwQ1" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utUeMGYAILPok" isOverride="false" comment=" so that we can also use this function with single axis cursorsreturn self._host_graphics_item_.vb.mapSceneToView(QtCore.QPointF(self.x, self.y)).y() try this very last resort; caller should check this" visibility="public" isInline="false" isSpecification="false" name="getY" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIL2SLwF63oAC" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="unbEYkRtZzSmR" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="plotitem"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uDD9YbxtNQMrE" isOverride="false" comment=" so that we can also use this function with single axis cursors" visibility="public" isInline="false" isSpecification="false" name="setY" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uROclu0wnmHMN" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u5Y6Y2p8ktLP9" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
          <UML:Parameter xmi.id="uHfYAUzIO5Vxq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="plotItem"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uAAcuGbiD8lrx" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="xwindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uJj7rYBP896XR" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uPWaBi4pU2x0j" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="xwindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ucQyXDaChqxiX" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uiU4km4Cyzmck" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBFaICnFkk6z7" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="ywindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uq7ycMxUGDZdw" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u03MxeCkNAHkE" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="ywindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOoa2Ik5BVbwU" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uXZPdZWk9BbmA" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4QPi0nuIqLii" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="ID" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="urbfTItEpwCpq" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ulEU3bkDwCPWS" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="ID" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uQTRw17GShPzB" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uGBbSMI93nhxg" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uHNI4rWvKwtHW" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="defaultPen" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uBV6P2CwD6fE4" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uC6I7jPDje3Lk" isOverride="false" comment="A QtGui.QPen&#xa;" visibility="public" isInline="false" isSpecification="false" name="pen" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u0fon47LvYppb" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZX4qPtHN9toS" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="pen" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uEonSKd3e52Go" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uu9sxUNXGBvrD" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uIhPGJNtLELdM" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="linkedPen" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uerrwFrNXipad" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ug21HovIRq77u" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="linkedPen" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uszfayRXSbWUa" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="usHC1gV9u9IFb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1NIE4FTv3DfH" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="hoverPen" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="unw7YlHqzCCiG" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBs3jNRrU6oC9" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="hoverPen" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuKL7MzCDr5xE" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u3ddzHdyIiNYA" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uGcMsIYWC14j4" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="cursorType" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u3tuoUetuR7ji" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u8iHaGUvZ8XRw" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isSelected" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ulsYQrfb3xmsQ" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0am31aYtT70i" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isDynamic" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9HGy2f37DVtq" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uK0CPjHdb46EP" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isCrosshair" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="urJwcR4rlyTT3" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uidLtyhwdNVjW" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isHorizontal" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u73RkTqqdCnMj" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0nczaroFeidR" isOverride="false" comment="##class SignalViewer(QMainWindow, Ui_SignalViewerWindow):" visibility="public" isInline="false" isSpecification="false" name="isVertical" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuPSqX9tmpCdh" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u422jGAiZc4xx" xmi.id="uc1YAhaXAjQNR" visibility="public" isSpecification="false" name="" discriminator="" child="upKtpGmkDowm6"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uWddJW35Y56dy" visibility="public" isSpecification="false" name="Text" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uZT9TdxRvPckF"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uZxxhxR4m21ac" ownerScope="classifier" comment="see NOTE: 2019-03-19 13:49:51" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="uIQR4J9jk0dEl" ownerScope="classifier" visibility="protected" initialValue="GraphicsObjectType.text" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="ulHIi5pPw2OCh" ownerScope="classifier" visibility="protected" initialValue="&quot;&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Attribute xmi.id="uqfZUTwm934K2" ownerScope="classifier" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="required_attributes_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRb8ZICu3ixSS" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5pboe9miZ6t0" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uvu5GoBrMI0F8" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ublc9SIesZLTn" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="closed" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZRewMCBFtgKc" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uM7yEgAKTmGPN" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="copy" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u26KHjl1562kj" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uMqLNuj46aDLW" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="controlPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOpk02xJtnAzR" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uqpXypCVbeeT7" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uOvRVizhlsw5X" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="fromControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1DiPe39zojH7" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ueGbtJtNSul2q" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="path"/>
          <UML:Parameter xmi.id="up5Ypmz9PXCtE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ul7f5Tl7zDjm2" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="asControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzkc2cZOmcsF0" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uReILNeMW9GXW" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uFHriqu3a9Oib" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="asPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="us6BnewJWZJaB" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uMPGJCSyO357A" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uyisQ9wtRqiw4" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="qPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u7Sfq4g4FEYOP" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="unfk1Al2RUQLd" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u422jGAiZc4xx" xmi.id="uZT9TdxRvPckF" visibility="public" isSpecification="false" name="" discriminator="" child="uWddJW35Y56dy"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uEFtNmx8d5KVg" visibility="public" isSpecification="false" name="Path" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="urfMfCijFkMg0"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uuuMvdWdEwZfZ" ownerScope="classifier" comment="leave empty" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="planar_descriptors_"/>
        <UML:Attribute xmi.id="uCkyXblMLrShj" ownerScope="classifier" visibility="protected" initialValue="GraphicsObjectType.path" type="ubge0kexwrzQa" isSpecification="false" name="graphics_object_type_"/>
        <UML:Attribute xmi.id="uDWPlPXzQf4H9" ownerScope="classifier" visibility="protected" initialValue="&quot;addPath&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="qt_path_composition_call_"/>
        <UML:Attribute xmi.id="uGFPQcZglTKPK" ownerScope="classifier" visibility="protected" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="required_attributes_"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uqSGKyz02fOFe" isOverride="false" comment=" the actual list of primitives that compose this path; each is a PlanarGraphics object (NOT a Path) and have their own frame-state associations i.e. an element can be visible in a subset of frames whereas other elements can be visibule in a disjoint subset of frames NOTE: 2019-07-22 08:39:51 FIXME at the moment len(path) and len(path.states) is the same something's confused here fallback position for an empty path; will be returned if no data is found when currentstate is queried also serves as cached position NOTE: TODO perhgaps, in the general case, this should hold the min(x), min(y) coordinate of the convex hull of the path ? NOTE:  2018-02-11 21:02:35 # TODO!!! cache of the euclidean lengths of its segments and contour lengths of its shaped elements.self._currentframe_ = currentframeself._ID_ = nameself._closed_ = closed copy c'torself._currentstate_ = self.currentState NOTE: clauses for c'tor based on an iterable passed as  arguments -- two subclauses: NOTE: this clause builds a Path from an iterable of  PlanarGraphics passed as an unique var-positional parameter TODO check here that all PlanarGraphics are acceptable  (they originally needed to be PathElements of Tier2PathElements, only!) also used for unpicklingprint(&quot;*****\nPath c'tor from sequence of %d planar graphics\n*****&quot; % len(args[0]))obj_list = [p.copy() for p in args[0]]print(&quot;** Copy of element %d: %s&quot; % (k, p)) NOTE: 2018-01-20 09:56:56 make sure Path begins with a Movexx = [e.x for e in self._objects_ if isinstance(e, PlanarGraphics)]xx = [x for x in xx if x is not None]x = min(xx)if len(xx):x = min(xx)else:x = 0yy = [e.y for e in self._objects_ if isinstance(e, PlanarGraphics)]yy = [y for y in yy if y is not None]if len(yy):y = min(yy)else:y = 0 NOTE: clause for c'tor of path from iterable of coordinate tuples e.g. as stored in image XML metadata, etc => Move (, Line) * 2nd control point destination point 1st control point NOTE: do not delete -- keep for referenceself.append(Cubic(x=c1.x, y=c1.y, c1x=c2.x, c1y=c2.y, c2x=element.x, c2y=element.y, frameindex=frameindex, currentframe=currentframe)) do not parse &quot;curve to data&quot; elements, for now k >  0 NOTE: 2018-01-20 09:51:23 make sure Path begins with a Move" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ufQExVPZMjMBm" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uO7mjy4eJVOXE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uSF5BHal4KWdU" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="reduce__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usJ0axXQoxOF8" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubYJ1I2URkVmn" isOverride="false" comment="s = [super(PlanarGraphics, self).__repr__(), &quot;:\n&quot;]s += [&quot;[&quot;]s += [&quot;, &quot;.join([o.__repr__() for o in self])]s += [&quot;]&quot;]return &quot;&quot;.join(s)" visibility="private" isInline="false" isSpecification="false" name="repr__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usk76eWYCsjnw" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uz4kIsLA9spQD" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="str__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uWR7rEmpXIeVI" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u8GI1ZsaIrF4x" isOverride="false" comment="Generates a QtGui.QPainterPath.&#xa;        &#xa;        Named parameters:&#xa;        =================&#xa;        path:   None (default) or a QtGui.QPainterPath to which a new painter path&#xa;                generated by this function will be appended&#xa;                &#xa;        frame:  None (default) or an int >= 0; the index of the frame for which to &#xa;                generate a painter path.&#xa;                &#xa;                When None, the painter path will be generated from the current &#xa;                state (which may be the state associated with the current frame&#xa;                of the common state).&#xa;                &#xa;                When an int, if frame is fpund among the frame state associations&#xa;                a painter path will be generated from the state associated with&#xa;                the specified frame. &#xa;                &#xa;                If frame is NOT found among the frame-state associations then&#xa;                an empty painter path will be returned.&#xa;                &#xa;        closed: None (default) or a boolean; when a boolean, True or False will&#xa;                force the generated path to be closed or open, respectively&#xa;                &#xa;        connected: boolean (default, False); when True and the &quot;path&quot; parameter&#xa;                is not None the generated painter path will be connected to the&#xa;                specified &quot;path&quot; parameter unless the last point on the &quot;path&quot;&#xa;                is shared with the first point on the generated path&#xa;        &#xa;        &#xa; this calls the object's __call__ function just add the &quot;primitive&quot; element to the path NOTE: ALWAYS  operate on current state (be it the common one, or the state associated with current frame)" visibility="private" isInline="false" isSpecification="false" name="call__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uAVMwefv0qGUC" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uzUtmJYLuZ314" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="path"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0J70zG5jik7G" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="setattr__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIlJoKFxNZ8Cb" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ulsS0FTrS6Ma1" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="name"/>
          <UML:Parameter xmi.id="uhFuyG5rq2kqU" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uYmw9Vk6SurA1" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="getattr__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6Is9felBfn8I" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uY4gv9dqUz7De" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="name"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uxTFfKRZIDhvi" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="setitem__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ueZX8Xk8ZcFKX" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="un4UJ7EkrC8F9" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="key"/>
          <UML:Parameter xmi.id="uzQwmRLcpVEnW" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u7nGTSfF4Dzko" isOverride="false" comment="Implements self[key] list semantic&#xa;        &#xa;        When key is an int, returns the PlanarGraphics object at index key.&#xa;        &#xa;        When key is a slice returns a Path object containg the PlanarGraphics&#xa;        elements as extracted by the slice object.&#xa;" visibility="private" isInline="false" isSpecification="false" name="getitem__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIMkg7SdGmReg" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uYHox2WfQqf5O" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="key"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utG3PE2xagiEL" isOverride="false" comment="Returns the number of PlanarGraphics elements in this Path object.&#xa;" visibility="private" isInline="false" isSpecification="false" name="len__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzF103gRS78y2" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3gNnCm2rbzoZ" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="add__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u159JQmnyxvhM" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uSIOqspXGa8tT" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="urMFi6ArMOVV4" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="iadd__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uc4LcbzKTTIcJ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="urBznFHxlLcMi" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2WL0Rwr22xRl" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="imul__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uE48BLD9hBLAZ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uc5O2usN42oUl" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uUfhpZuVGeMQp" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="mul__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u50upVlceoOEV" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uUB5BUOFatauE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uEw5BCqApUkRx" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="rmul__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uAmKVANuvCwfl" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uW1spyu4vCfv5" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNJVYKbYUm10y" isOverride="false" comment="Returns a list_iterator&#xa;" visibility="private" isInline="false" isSpecification="false" name="iter__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPI73OMtJcpkQ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uNOqUxEKUd6wi" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uXxnZ9aTpppbE" isOverride="false" comment="Returns a list_reverseiterator&#xa;" visibility="private" isInline="false" isSpecification="false" name="reversed__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u2q3rfXkdoXPF" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uf3CApYr2tIeN" isOverride="false" comment="Overrides PlanarGraphics.appendStates() to flag that Path objects does not support this method&#xa;" visibility="public" isInline="false" isSpecification="false" name="appendStates" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uFrA2lxBlhkYX" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u8wamUlTzuQj1" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="unhSUEScPFQyY" isOverride="false" comment="Paths are appended as nested subpaths.&#xa;        To append all elements of another path, use appendStates().&#xa;        &#xa;        Returns:&#xa;        =======&#xa;        self&#xa;" visibility="public" isInline="false" isSpecification="false" name="append" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u0tRcGTEWljSe" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uRFY4wS0E3py0" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uaXI3kTkAz5fU" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="count" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u2LJH03gCr3BD" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uPvobCLwFJBNl" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="unNQXpSaWyqjO" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="clear" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="urcHME0qL4qaa" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u9NUgqgufW2Ka" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="pop" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHChOBUNHjWah" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ul5o08JaxAqfV" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="index"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u58K3Si8c8S6e" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="extend" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzwZd0pNJHggs" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="us8TFDp47V9AD" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKaatAqEfRJq2" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="translate" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuUO80NNzqPh8" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="upheKCKRQNnhm" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dx"/>
          <UML:Parameter xmi.id="uZVc7NVCExYUF" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="dy"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uDLL2kZqwIBNi" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="index" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuRfhdPKpGMO5" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u7ZTVXB7lsQHy" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
          <UML:Parameter xmi.id="umsvPM6s9NiWp" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6m1bIhwQl8dV" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="insert" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ucvSsb9ZsCfYL" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uc64vx3snBY0F" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="index"/>
          <UML:Parameter xmi.id="uzVB0wz8aucUo" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4A8b7GecZSOL" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="remove" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uML6VBqz8xGoZ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ukAjNApargS2n" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubQk895ybLNNB" isOverride="false" comment="Reverses the order of the elements in this Path.&#xa;" visibility="public" isInline="false" isSpecification="false" name="reverse" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5060dEQNYD6x" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uocfSMLoRVUZS" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="check_state_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u7Mz1J62uReIG" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="upXc257Z0yPB3" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="states"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2jdQ8ID5S0Ac" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="check_frame_states_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u17Za6MUncOPN" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uUZIfoLtn5Iaa" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5JCcY0Ac4zfE" isOverride="false" comment="Adds a copy of state to each of its objects.&#xa;        Use with CAUTION.&#xa;        &#xa; make sure state complies with this planar type make sure state is conformantdef mergeStates(self, other):&quot;&quot;&quot;Adds the states of other Path to this Path.The other Path must:a) have the same number of elements as this oneb) have elements with just one stateThe links between state and frame indices are managed as in PlanarGraphics.addState()&quot;&quot;&quot;if not isinstance(other, Path):raise TypeError(&quot;Expecting a Path PlanarGraphics; got %s instead&quot; % type(other).__name__)if len(other) != len(self):raise ValueError(&quot;The other Path has a different length (%d) from this one (%d)&quot; % (len(other), len(self)))if any([len(o.states) > 1 for o in other]):raise ValueError(&quot;Elements in the other Path must have one state each&quot;)for k, o in enumerate(self):o.addState(other[k].states[0])" visibility="public" isInline="false" isSpecification="false" name="addState" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ufPNzWwiiwNbU" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u4PgYrOLOCtOU" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="state"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubQ9qQUNEL496" isOverride="false" comment="Returns the nth subpath as a Path object, or self when there are no subpaths&#xa;        &#xa;        NOTE: The returned Path object contains REFERENCES, NOT COPIES, of the&#xa;        corresponding elements in this object.&#xa;        &#xa;        Precondition: 0 &lt;= n &lt; subpathCount&#xa;        &#xa;" visibility="public" isInline="false" isSpecification="false" name="subpath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u79llza1UASBJ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uBw1yPwaqFx64" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="n"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utwoFYWxdWn6i" isOverride="false" comment="Overrides PlanarGraphics.remapFrameStateAssociations, for Path objects.&#xa;        &#xa;        Re-asssigns frame links to PlanarGraphics elements in the Path.&#xa;        &#xa;        Parameters:&#xa;        ==========&#xa;        &#xa;        newmaps = sequence of new state-frame mappings with one mapping for each&#xa;                    element of the path&#xa;                    &#xa;                    The sequence mength must be equal to the number of elements &#xa;                    in this Path.&#xa;                    &#xa;                    If an element of this Path is not a Path, the corresponding&#xa;                    element in the sequence must be a dict &#xa;                    (see PlanarGraphics.remapFrameStateAssociations() )&#xa;                    &#xa;                    If an element of the Path is itself a Path (i.e., nested Path)&#xa;                    then the corresponding element of the sequence must be another &#xa;                    sequence like newmaps, with as many elements as there are &#xa;                    elements in the nested Path.&#xa;                    &#xa;                Elements where the corresponding dictionary in the sequence is &#xa;                empty are left untouched.&#xa;        &#xa; deleagate to element's remapping functionif update:self.updateFrontends()" visibility="public" isInline="false" isSpecification="false" name="remapFrameStateAssociations" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="unKG0WoWRYLii" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ujupphE98VHPa" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="newmaps"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ucT25faSWnsbe" isOverride="false" comment="Read-only property: the list of components of this Path object.&#xa;        &#xa;        Being a list, is not immutable!&#xa;" visibility="public" isInline="false" isSpecification="false" name="components" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ud6ktPuHv4sCW" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ukT1s9JMNQOLj" isOverride="false" comment="Returns the number of subpaths.&#xa;        &#xa;        This is the number of Move elements minus one. &#xa;        &#xa;" visibility="public" isInline="false" isSpecification="false" name="subpathCount" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usP7eEybMhbPj" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2c3aOUAKnnju" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="nestedSubpathCount" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIcc3XQaJt0LJ" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="umW79jtLdxzLV" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="position" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ujKC6VPE1zypg" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLVi8Eo0Xq4Gc" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="pos" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uWBtBAlb4wMT8" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uwQnKUOQ2q0f6" isOverride="false" comment="The &quot;x&quot; coordinate of the current state of this path.&#xa;        &#xa;        This is the minimum of all x positions of its elements, in the current &#xa;        state.&#xa;        &#xa;        Together with &quot;y&quot; property, this defines the position of the entire&#xa;        path, in the current descriptor state&#xa;states = [s for s in self.asPath(self.currentFrame) if s is not None]" visibility="public" isInline="false" isSpecification="false" name="x" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ufGBnDEEftrPn" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKrvs2qdDX4wW" isOverride="false" comment=" NOTE: 2018-01-20 22:30:22 shift all elements horizontally, by the distance between current x coordinate and valueNOTE: 2019-03-28 14:37:22 make sure ALL points in a spline are translated this is a tuple ! (x=value, y)" visibility="public" isInline="false" isSpecification="false" name="x" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uXTmgk0hhLXXm" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uFDMzAdJtPLkc" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBPkeOfg30ya8" isOverride="false" comment="The &quot;y&quot; coordinate of the current state of this path's first element.&#xa;        &#xa;        This is the minimum of all y positions of its elements, in the current &#xa;        state.&#xa;        &#xa;        Together with &quot;x&quot; property, this defines the position of the entire&#xa;        path, in the current descriptor state&#xa;states = [s for s in self.asPath(self.currentFrame) if s is not None]" visibility="public" isInline="false" isSpecification="false" name="y" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uGCbfjm6JL7k6" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0yFgLjteKWVv" isOverride="false" comment="states = [s for s in self.getState(self.currentFrame) if s is not None]states = [s for s in self.asPath(self.currentFrame) if s is not None] NOTE: 2018-01-20 22:33:12 shift all elements vertically, by the distance between current y coordinate and value this is a tuple! (x, y=value)" visibility="public" isInline="true" isSpecification="false" name="y" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ueVjeFGpTpgbm" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uKEq6S9Ki49Hf" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uncFb1x79BcRJ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="maxFrameIndex" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uFHJIkHr2uhIg" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="usRah521zlGbO" isOverride="false" comment="Sequence of nested lists of frame indices, one per element in this Path.&#xa;        &#xa;        Nested Paths are given as nested lists at a deeper level.&#xa;        &#xa;" visibility="public" isInline="false" isSpecification="false" name="elementsFrameIndices" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6DfPIHxo25b3" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uWSuqaNh3sy6y" isOverride="false" comment="Parameter MUST be a sequence of nested sequences, of the same length as self.&#xa;        &#xa;        Parametrs:&#xa;        ==========&#xa;        value:  One of:&#xa;                1) a list of elements, each as per PlanarGraphics.frameIndices()&#xa;                2) just one element as per PlanarGraphics.frameIndices()&#xa;                3) an empty list&#xa;                4) the list [None]&#xa;                5) None&#xa;            &#xa;                Case (1) requires a list with as many elements as there are in &#xa;                the Path and for setting the frameIndices propery of each path&#xa;                element (&quot;atomically&quot;).&#xa;                &#xa;                In this case, elements that are empty lists will leave the &#xa;                corresponding path elements unchanged.&#xa;                Elements that are [None] or None, will set the corresponding path&#xa;                element to have one frameless state.&#xa;                &#xa;                Cases (2) - (5) set the frameIndices of every eleMent to a common&#xa;                set of values as per PlanarGraphics.frameIndices()&#xa;        &#xa;        See PlanarGraphics.frameIndices setter for details at Path element level.&#xa;        &#xa;        In addition, Path elements that are themselves a Path (i.e. nested Paths) &#xa;        expect the corresponding element to have a similar structure to &quot;value&quot;.&#xa;        &#xa; apply this element-wise e,pty values or has None => go element-wise also element-wise go &quot;atomically&quot; delegate to element's function" visibility="public" isInline="false" isSpecification="false" name="elementsFrameIndices" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u4pOd0IboXjX3" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u4sO1WoLEnCt6" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="upTfOOi0o2WWU" isOverride="false" comment="List of unique frame indices that are associated with a state.&#xa;            Read-only; to change frames in the elements' states use elementsFrameIndices&#xa;frlist = [e.frameIndices for e in self._objects_]return unique([f for f in itertools.chain(*frlist)])frndx = np.array([e.frameIndices for e in self._objects_]).flatten()return list(np.unique(frndx[!np.isnan(frndx)]))" visibility="public" isInline="false" isSpecification="false" name="frameIndices" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="umWNaRbZfWBKS" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uUYf7dqutfdFK" isOverride="false" comment="Parameter MUST be a sequence of nested sequences, of the same length as self.&#xa;        &#xa;        Parametrs:&#xa;        ==========&#xa;        value:  One of:&#xa;                1) a list of elements, each as per PlanarGraphics.frameIndices()&#xa;                2) just one element as per PlanarGraphics.frameIndices()&#xa;                3) an empty list&#xa;                4) the list [None]&#xa;                5) None&#xa;            &#xa;                Case (1) requires a list with as many elements as there are in &#xa;                the Path and such that it will set the frameIndices property for&#xa;                each path element.&#xa;                &#xa;                In this case, elements that are empty lists will leave the &#xa;                corresponding path elements unchanged.&#xa;                Elements that are [None] or None, will set the corresponding path&#xa;                element to have one frameless state, based on the current state.&#xa;                &#xa;                Cases (2) - (5) set the frameIndices of every element to a common&#xa;                set of values as per PlanarGraphics.frameIndices()&#xa;        &#xa;        See PlanarGraphics.frameIndices setter for details at Path element level.&#xa;        &#xa;        In addition, Path elements that are themselves a Path (i.e. nested Paths) &#xa;        expect the corresponding element to have a structure similar to that of&#xa;        &quot;value&quot;.&#xa;        &#xa; apply this element-wise e,pty values or has None => go element-wise also element-wise go &quot;atomically&quot; delegate to element's function" visibility="public" isInline="false" isSpecification="false" name="frameIndices" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ulA2OIvLc5sXx" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u66z52kAq4yTE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uC4HtsTxU1GRV" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="type" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uMVKdQsXYcB6i" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLLWMy51loyUh" isOverride="false" comment="Returns a list of lists of states (one list per element)&#xa; FIXME should this not be a list of states (as paths) instead? as it is right now it returns a list with as many elements as there are elements in the path, which is confusing; a path's state should return a single-state path corresponding to the queried state" visibility="public" isInline="false" isSpecification="false" name="states" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ujKUw7H6LxIz9" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uQ9fU68WhTFH5" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="indexedStates" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uhueOM8C9uQD7" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="urRd4cqQpBaBN" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="currentFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOMJg4HHHcWos" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uSo9mNjTpWKBR" isOverride="false" comment="@property&quot;def&quot; currentStateIndexed(self):&quot;&quot;&quot;A list of (index, state) tuples.&quot;index&quot; is the index of the element in this Path (taken as list) &quot;state&quot; is the index of the element of this Path object.The states are taken from the PlanarGraphics elements thatcompose this Path object, provided that they have a stateassociated with the current frame. Elements that do NOT have a state given the current frame are skipped. In the extreme case where none of  this Path's elements have a defined state for the current frame, the returned list will be empty.&quot;&quot;&quot;return [(k, p.currentState) for k, p in enumerate(self._objects_) if p.currentState is not None] # may be empty" visibility="public" isInline="false" isSpecification="false" name="currentFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u3BiLMSt8bYcV" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uWvtOKN7QAVfL" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujXYXbrmjR16v" isOverride="false" comment="A list of states.&#xa;        &#xa;        As for the currentStateIndexed property, the states are taken from the&#xa;        PlanarGraphics elements that compose this Path object, provided that they&#xa;        have a state associated with the current frame. &#xa;        &#xa;        Elements that do NOT have a state given the current frame are skipped. &#xa;        &#xa;        In the extreme case where none of this Path's elements have a defined &#xa;        state for the current frame, the returned list will be empty.&#xa;        &#xa;return [p.getState(self._currentframe_) for p in self._objects_] # may be empty" visibility="public" isInline="false" isSpecification="false" name="currentState" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uY8uVJjY6lCUo" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3C4cNQIJBeJ0" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="closed" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u37UV8Snncq8e" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u7JOTU5Lle5Fy" isOverride="false" comment=" remove last element (break-up path)" visibility="public" isInline="true" isSpecification="false" name="closed" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uTvVGyKdsfRcb" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ugq2W9qSE6Yer" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uWgjZWkfOWmXG" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="closePath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLUA0R08Km64s" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubmk92txCUHUq" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="openPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uTFQkdi84oAbw" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ucP1rbQY9fYqx" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="qGraphicsItem" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9AvpY2V5HDLo" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uvvESxXbgiapi" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pointSize"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uy3GmaLgmGg6y" isOverride="false" comment=" the common state or the state associated with current frame, if present" visibility="public" isInline="false" isSpecification="false" name="qPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uz5Fm2NyCsNKi" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uNdSwNk5y7QxY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujfJNihtqSZmz" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setParameter" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uS5E3BsCXZ7vK" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uX2OJobPXoAyU" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="name"/>
          <UML:Parameter xmi.id="u4Oe8TKqHRJKa" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
          <UML:Parameter xmi.id="uYtX3vEosLBAQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uzrZfvktxzenW" isOverride="false" comment="Propagate the states at specified frame, to destframes&#xa;" visibility="public" isInline="false" isSpecification="false" name="propagateFrameState" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPxkLJzJYiukw" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uXunxnEqHrqSr" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
          <UML:Parameter xmi.id="uLJd2PuB7YSwS" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="destframes"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5Yy5kRp3zom8" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="hasStateForFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uiW7XBc48xDSu" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uDyu9m669C1jM" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ur2i9fpdNkoD5" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="getObjectForFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uS95c1shGkngS" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uYVpQVLC77cM6" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uMq39KdbLu13W" isOverride="false" comment="Returns a Path object containg COPIES of only those elements in self that have a state defined for the specified frame&#xa;        &#xa;        frame: int (frame index)&#xa;        &#xa;if len(elements):if allStates:return Path(elements)else:ee = [e.getObjectForFrame(frame) for e in elements]return Path(ee)" visibility="public" isInline="false" isSpecification="false" name="asPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u8k1kK4uZ50Kw" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ufW2pFeM3bzIt" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubM8B5TslzKab" isOverride="false" comment="Returns a list of states that are defined for the specified frame.&#xa;        &#xa;        A state is defined for the specified frame if either:&#xa;        * its z_frame == frame&#xa;        * its z_frame is None&#xa;        &#xa;        The result is a list of state references.&#xa;        &#xa; referencesraise NotImplementedError(&quot;Path objects do not support this method; use asPath()&quot;)def getFrameStateIndexed(self, frame):return [(k, p.getState(frame)) for k,p in enumerate(self._objects_) if p.getState(state) is not None] # may be empty" visibility="public" isInline="false" isSpecification="false" name="getState" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzzesmzGjWhaJ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uVQu6kjHGMkoW" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uD27nw4wpvGZx" isOverride="false" comment="raise NotImplementedError(&quot;Path objects do not support this method&quot;)" visibility="public" isInline="false" isSpecification="false" name="removeState" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLYAi0xjprpCM" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uxSIaXuPP4LSo" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKh4OAhpEGHRm" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="controlPoints" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLFgyqwGYH4SA" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uCEDl85pStwDv" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uV6r7NBtxF9W1" isOverride="false" comment="Returns a Path that represents a polyline connecting all control points.&#xa;" visibility="public" isInline="false" isSpecification="false" name="asControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uj5FV6gL25NoR" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uOFdmQw35WSVN" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uXnwp0GTkgjNk" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="fromControlPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZHn88ZbTk4KP" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uk83nuLxw9EGg" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="path"/>
          <UML:Parameter xmi.id="uGJpGc4PpP48A" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uqHt1Oi8wHKGC" isOverride="false" comment=" o.linkFrame() may raise its own error." visibility="public" isInline="false" isSpecification="false" name="linkFrames" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1DxNESqyEE8N" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ujbYTExZu92iv" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKHvmGo9cnEmQ" isOverride="false" comment="See PlanarGraphics.objectForFrame&#xa;" visibility="public" isInline="false" isSpecification="false" name="objectForFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOoYhGQ1WJ673" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uHc9vTuhGwTak" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frame"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ustkAKE7S4qHU" isOverride="false" comment="Re-composes this Path from a (possibly different) QPainterPath object.&#xa;        &#xa;        The (new) Path will be composed of Tier 1 primitives (MoveTo, LineTo and CubicTo)&#xa;        &#xa;        NOTE: This operates on the state of its elements, associated with the &#xa;        current frame or on the common state, if no frame-state association exists&#xa;controlPoints = [None, None] # what's this for? does not parse CurveToDataElement objectselse: # do not parse curve to data elementscontinue " visibility="public" isInline="false" isSpecification="false" name="adoptPainterPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uA7Br4uq1C2FZ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ur466Xsm5RpGG" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="p"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u422jGAiZc4xx" xmi.id="urfMfCijFkMg0" visibility="public" isSpecification="false" name="" discriminator="" child="uEFtNmx8d5KVg"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u0DZsX8x6tBfj" visibility="public" isSpecification="false" name="MouseEventSink" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ubfTHtOLj87Mj"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="upwWNaoLhT99r" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u12iajUJcwtmP" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="udRD1A3tzSmzY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uy37lOWUA0qLO" isOverride="false" comment="return QtCore.QObject.eventFilter(obj, evt)" visibility="public" isInline="false" isSpecification="false" name="eventFilter" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHL7v2oM9Ybk4" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uBLvB9glrYFBB" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="obj"/>
          <UML:Parameter xmi.id="uxzfCTqoWoTvC" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="ucXsHb6NzgfI1" xmi.id="ubfTHtOLj87Mj" visibility="public" isSpecification="false" name="" discriminator="" child="u0DZsX8x6tBfj"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uxQtMu7ru4jOB" visibility="public" isSpecification="false" name="Planar2QGraphicsManager" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uUMAfF25YV9AT"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uJKUUd63MRmgu" ownerScope="classifier" comment="Each planar graphics object can be displayed by several graphics objects.&#xa;e.g. one ROI or Cursor can be shown in several image windows.&#xa;&#xa;The planar descriptors of the planar graphics object can thus be manipulated&#xa;in two ways:&#xa;&#xa;a) programmatically (by directly calling appropriate setter functions of the&#xa;planar graphics object) -- in this case, ALL of the &quot;connected&quot; graphics&#xa;objects used for displaying the planar graphics object need to be updated&#xa;to reflect the new planar graphics object state, AVOIDING re-entrant&#xa;code loops: the updaing of the graphics objects must not trigger a new&#xa;update of the planar graphics object&#xa;&#xa;b) by GUI interaction with the any of the graphics objects used for displaying&#xa;the planar graphics object -- in this case, the descriptors of the planar&#xa;graphics object must be updated accordingly AVOIDING re-entrant code&#xa;loops: i.e. when a graphics object has changed, the states of the &#xa;corresponding planar  graphics object must be updated, and this must be &#xa;reflected in all of the graphics objects used for display EXCEPT for the&#xa;one that initiated the change.&#xa;&#xa;&#xa;" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_planar_changed"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4zoEHOOx2Wdv" isOverride="false" comment=" NOTE: 2019-03-09 10:44:55 one planar graphics object to many graphics objects: use the planarobject as key to a set of graphics objects (ensure unique elements) NOTE: 2019-03-09 10:47:01 should we accept ONLY ONE PlanarGraphics object in this ? YES: KISS!!!" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzv4ZRggw1pnp" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u4HrqgKbW9iLQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="planarobject"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u8svvLNRgN4aL" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="register" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uGPyJfleVmLox" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u5hkAflsRJV3B" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="planarobject"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uPJVA8AIDA7DC" isOverride="false" comment=" implies self.__obj_map__ is not empty" visibility="public" isInline="false" isSpecification="false" name="deregister" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOFlppDIArydg" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ujZ09s7O3r5wv" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="planarobject"/>
          <UML:Parameter xmi.id="ufndfVfI2872R" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="grobject"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uTXQkk6oIZWXI" isOverride="false" comment=" connect this to appropiate sgnal emitted by the graphics object" visibility="public" isInline="false" isSpecification="false" name="slot_graphics_changed" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ueNurcrTa6aNI" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLYfH5c1G0QRD" isOverride="false" comment=" call this from the planar object" visibility="public" isInline="false" isSpecification="false" name="planar_changed_callback" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="udMMfd5KhG5Q4" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="ucXsHb6NzgfI1" xmi.id="uUMAfF25YV9AT" visibility="public" isSpecification="false" name="" discriminator="" child="uxQtMu7ru4jOB"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uMFxLQJg04J4c" comment=" then set frameVisibility to the list of _ALL_ frame indices in the data." visibility="public" isSpecification="false" name="GraphicsObject" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uUuHiQaBfROTM"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uU324BaIIBesW" ownerScope="classifier" comment="Graphical object that displays PlanarGraphics objects using Qt Framework classes.&#xa;FIXME&#xa;TODO Logic for building/editing ROIs is broken for ellipse -- why?&#xa;TODO check cachedPath logic&#xa;&#xa;NOTE: 2019-03-09 10:05:30&#xa;the correspondence between the display object and the PlanarGraphics object&#xa;is to be managed by an instance of Planar2QGraphicsManager&#xa;&#xa;NOTE: 2018-01-17 21:56:23&#xa;currentframe and framesVisibility __init__() parameters cached to be &#xa;available when exiting build mode (i.e., from within __finalizeShape__)&#xa;&#xa;&#xa;TODO: when building a shape, by default the resulting backend has no frame-state&#xa;association; we must then give the option to associate states with certain frame&#xa;&#xa;&#xa;NOTE: 2018-01-19 09:49:04 DONE&#xa;x and y properties correctly update self.backend x and y&#xa;&#xa;NOTE: 2018-01-19 17:04:36&#xa;TODO: curent frame might have to be managed independently, to allow more flexibility&#xa;on linked cursors:&#xa;&#xa;now, several GUI cursors (frontends) can be referenced by a common backend&#xa;however, image viewer windows are not necessarily &quot;linked&quot; i.e., one may&#xa;be able to view a different image frames in different windows.&#xa;&#xa;The issue is whaty happens when a window shows a frame for which backend &#xa;has descriptor state, but another window shows a frame where the (same)&#xa;backend does NOT have a descriptor state. Clearly, in the latter, the cursor&#xa;is NOT visible -- DONE. However, when changing frames in a window this also &#xa;sets the backend's currentFrame to that value&#xa;&#xa;NOTE: All the action in build mode happens in the mouse event handlers&#xa;&#xa;Encapsulates the GUI conterpart (&quot;frontend&quot;) of the PlanarGraphics objects&#xa;defined in this module. In turn the PlanarGraphics obejcts are the &quot;backend&quot; &#xa;of the GraphicsObject.&#xa;&#xa;The PlanarGraphics objects are in a one-to-many relationship with GraphicsObject&#xa;objects: several GraphicsObject objects may subserve (i.e. graphically display)&#xa;the same PlanarGraphics object. It follows that the same PlanarGraphics object&#xa;may be displayed by several GraphicsObject objects, each in its own graphics &#xa;scene.&#xa;&#xa;The PlanarGraphics -- GraphicsObject entity can be constructed from both &#xa;directions:&#xa;&#xa;a) constructing a GraphicsObject parametrically (i.e. from planar descriptors &#xa;as per the __init__() signature of the GraphicsObject) generates a PlanarGraphics&#xa;backend automatically&#xa;&#xa;b) constructing a PlanarGraphics object then displaying it in a scene (by &#xa;calling the appropriate addGraphicsObject method in ImageViewer) will generate&#xa;a GraphicsObject frontend in that image viewer's scene.&#xa;&#xa;From the GUI, the user can manipulate the frontend directly (mouse and key&#xa;strokes) whereas the backends can only be are manipulated indirectly (via their &#xa;frontends).&#xa;&#xa;&#xa;&#xa;The following graphical types are supported (see the GraphicsObjectType enumeration):&#xa;vertical_cursor     = 1     &#xa;horizontal_cursor   = 2     &#xa;crosshair_cursor    = 4     &#xa;point_cursor        = 8     &#xa;point               = 16    &#xa;line                = 32    &#xa;polyline            = 64&#xa;rectangle           = 128   &#xa;polygon             = 256   &#xa;ellipse             = 512   &#xa;quad                = 1024&#xa;cubic               = 2048&#xa;arc                 = 4096&#xa;arcmove             = 8192&#xa;path                = 16384 &#xa;text                = 32768 &#xa;&#xa;lineCursorTypes     = vertical_cursor       | horizontal_cursor&#xa;shapedCursorTypes   = lineCursorTypes       | crosshair_cursor&#xa;allCursorTypes      = shapedCursorTypes     | point_cursor&#xa;&#xa;linearTypes         = line                  | polyline&#xa;polygonTypes        = rectangle             | polygon &#xa;linearShapeTypes    = polygonTypes          | linearTypes&#xa;arcTypes            = arc                   | arcmove&#xa;curveTypes          = ellipse               | arcTypes&#xa;basicShapeTypes     = linearShapeTypes      | curveTypes&#xa;commonShapeTypes    = basicShapeTypes       | point&#xa;geometricShapeTypes = commonShapeTypes      | path&#xa;allShapeTypes       = geometricShapeTypes   | text&#xa;&#xa;allObjectTypes      = allCursorTypes        | allShapeTypes&#xa;&#xa;Any combination of these flags can be used to determine the type of the&#xa;GraphicsObject instance or its inclusion in the subsets above, using &#xa;logical AND (&amp;).&#xa;&#xa;e.g. self.objectType &amp; allCursorTypes returns > 0 if the object is a cursor type&#xa;&#xa;Non-cursor types are rendered by means of QAbstractGraphicsShapeItem. This means&#xa;that except for text, path, point and line, the generated shaped are always closed&#xa;(in particular the polygons).&#xa;&#xa;To generate open polygons use the &quot;path&quot; type with QPainterPaths to draw &#xa;an open polygon (in Qt a polygon is considered &quot;open&quot; if the two extreme &#xa;points have different coordinates).&#xa;&#xa;" visibility="public" initialValue="GraphicsObjectType.allShapeTypes" type="ubge0kexwrzQa" isSpecification="false" name="nonCursorTypes"/>
        <UML:Attribute xmi.id="uKJOdheoVjeBY" ownerScope="classifier" comment="this is for Qt Graphics View Framework RTTI logic" visibility="public" initialValue="QtWidgets.QGraphicsItem.UserType" type="ubge0kexwrzQa" isSpecification="false" name="Type"/>
        <UML:Attribute xmi.id="uao2IohJhFwcR" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalPosition"/>
        <UML:Attribute xmi.id="u74UisKDra0Iw" ownerScope="classifier" comment="used to notify the cursor manager (a graphics viewer widget) that this cursor has been selected" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="selectMe"/>
        <UML:Attribute xmi.id="uvnIhYo3IRjJO" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalGraphicsObjectPositionChange"/>
        <UML:Attribute xmi.id="uGgGAH2I571b8" ownerScope="classifier" comment="to do with this (i.e., what menu &amp; actions to generate)" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="requestContextMenu"/>
        <UML:Attribute xmi.id="uhQ7hHqOGQBhF" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalROIConstructed"/>
        <UML:Attribute xmi.id="uLwO46myAK6IJ" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalBackendChanged"/>
        <UML:Attribute xmi.id="uZScZGov0JR0R" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signalIDChanged"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="urHWhIMKTXsqt" isOverride="false" comment="self.defaultLinkedTextPen   = QtGui.QPen(QtCore.Qt.black, self.defaultTextPenWidth, QtCore.Qt.SolidLine, QtCore.Qt.RoundCap, QtCore.Qt.RoundJoin) NOTE: 2018-06-23 17:21:06 &quot;CB stands for &quot;CommonBackend&quot;" visibility="private" isInline="false" isSpecification="false" name="setup_default_appearance__" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwSo27ypyrIfB" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uGa9mfu1Ot1TN" isOverride="false" comment="        Named parameters:&#xa;        =================&#xa;        &#xa;        objectType : one of the GraphicsObjectType enum values&#xa;                    default is GraphicsObject.allShapeTypes&#xa;                    &#xa;                    See table below for the types defines in this enum&#xa;                    &#xa;        parameters: see table below; default is None; &#xa;                    &#xa;                    When None or an empty list:&#xa;                    (1) if objectType is nonCursorTypes this triggers the &#xa;                        interactive drawing logic.&#xa;                        &#xa;                    (2) if objectType is a cursor type, raises an error&#xa;        &#xa;        &quot;objectType&quot;:     Enum value: Type of &quot;parameters&quot; argument:&#xa;        ========================================================================&#xa;        vertical_cursor   1           numeric 5-tuple (W, H, xWin, yWin, radius)&#xa;        horizontal_cursor 2           numeric 5-tuple (W, H, xWin, yWin, radius)&#xa;        crosshair_cursor  4           numeric 5-tuple (W, H, xWin, yWin, radius)&#xa;        point_cursor      8           numeric 5-tuple (W, H, xWin, yWin, radius)&#xa;        point             16          numeric triple  (X, Y, radius)&#xa;        line              32          numeric 4-tuple (X0, Y0, X1, Y1) or QLineF&#xa;        rectangle         64          numeric 4-tuple (X,  Y,  W,  H)  or QRectF&#xa;        ellipse           128         numeric 4-tuple (X,  Y,  W,  H)  or QRectF&#xa;        polygon           256         sequence of numeric pairs (X, Y) or sequence of QPointF&#xa;        path              512         QPainterPath or a sequence of two-element tuples, where:&#xa;                                        element 0 is a str one of: &quot;move&quot;, &quot;start&quot;, &quot;line&quot;, &quot;curve&quot;, or &quot;control&quot;&#xa;                                        element 1 is a tuple of coordinates (x,y)&#xa;                                        &#xa;                                        each &quot;curve&quot; element MUST be followed by two &quot;control&quot; elements&#xa;                                            &#xa;        text              1024        str&#xa;        ========================================================================&#xa;        &#xa;        In addition, the GraphicsObject :class: also defines :class: members&#xa;        with values resulted from logical OR of various GraphicsObjectType members&#xa;        &#xa;        lineCursorTypes     = GraphicsObjectType.vertical_cursor    | GraphicsObjectType.horizontal_cursor&#xa;        shapedCursorTypes   = lineCursorTypes                       | GraphicsObjectType.crosshair_cursor&#xa;        allCursorTypes      = shapedCursorTypes                     | GraphicsObjectType.point_cursor&#xa;        &#xa;        polygonTypes        = GraphicsObjectType.rectangle          | GraphicsObjectType.polygon &#xa;        linearShapeTypes    = polygonTypes                          | GraphicsObjectType.line&#xa;        basicShapeTypes     = linearShapeTypes                      | GraphicsObjectType.ellipse&#xa;        commonShapeTypes    = basicShapeTypes                       | GraphicsObjectType.point&#xa;        geometricShapeTypes = commonShapeTypes                      | GraphicsObjectType.path&#xa;        allShapeTypes       = geometricShapeTypes                   | GraphicsObjectType.text&#xa;        nonCursorTypes      = allShapeTypes&#xa;        &#xa;        allObjectTypes      = allCursorTypes                        | allShapeTypes&#xa;    &#xa;        pos:    QtCore.QPoint or QtCore.QPointF, or None; default is None, which places &#xa;        it at the scene's (0,0) coordinate&#xa;        &#xa;        roiId: str or None (default is None): this sets a default ID for the object&#xa;                &#xa;                NOTE: when None, the object will get its ID from the type&#xa;                &#xa;                NOTE: this is NOT the variable name under which this object is&#xa;                bound in the caller's namespace&#xa;                &#xa;        label: str or None (defult): this is what may be shown as cursor label &#xa;            (the default is to show its own ID, if given)&#xa;        &#xa;        currentFrame and visibleFrames -- used only for parametric c'tor&#xa;            &#xa;NOTE: 2017-11-20 22:57:21 backend for non-cursor types is self._graphicsShapedItem whereas in cursor typeself._graphicsShapedItem is None !!! NOT: 2017-11-24 22:30:00 assign this early this MAY be overridden in __parse_parameters__ an int or enum !!! NOTE: this is the actual string used for label display;  it may be suffixed with the position if labelShowsPosition is True check for frameVisibility parameter execute this in the __parse_parameters__ function so that we can  distinguish between the case where we construct a GraphicsObject from  a PlanarGraphics backend (and therefore frame visibility is given by  the backend's frame-state associations) and the case where we construct a GraphicsObject parametrically (thus constructing a new backend from  scratch, hence we need frameVisibility parameter to set up the backend's frame-state associations) see qt5 examples/widgets/painting/pathstroke/ NOTE: 2018-01-17 15:33:58 used in buildMode or editMode; applies to non-cursor objects onlyself._c_shape_point         = -1 shape point editing - used in edit &amp; build modes path control point editing; valid values are 0 and 1 used in curve (cubic, quad) segment building for path ROIs because a null QPointF is still valid: CAUTION make sure this is empty after exit from build or edit modes ATTENTION NO subpaths allowed in cached path (for the moment) = use only non-path (&quot;primitive&quot;) PlanarGraphics objects as elements CAUTION this ALWAYS  has a commonState (i.e. we cache it for the currently displayed frame) exists throughtout the lifetime of self. must not be empty generated in the following circumstances: 1) __finalizeShape__ after exit from build mode 2) __parse_parameters__ when _objectType is not a cursor   either when object is build parametrically, or when it is derived from   a backend.    depending on _objectType, _cachedPath may contain a copy of the backend   itself, or a &quot;control&quot; path (containing control points &amp; lines)    WARNING the cached path can contain only Move, Line, Cubic and Quad objects !!!   e.g., for a rectangle or ellipse, the control line (used in building &amp; editing)   is in fact the diagonal or one of the diameters, respectively control point editing moveable by mouse or keyboard switching to edit mode allowed rotation &amp; skewing NOTE: 2017-06-29 08:32:11 flags when a new position change sequence has begun (the previous  sequence, if any, ended with a mouse release event) NOTE: 2017-11-23 00:08:04 unlike non-cursor types, cursors are NOT back-ended by a QGraphicsItem but rather directly painted by self.paint() method the flag below toggles the cursor painting ON / OFF TODO sync me with current frame cf self._frameindexself._x = 0self._y = 0self._width = Noneself._height = Noneself._xw = 0self._yw = 0self._r = 0 planar descriptor for cursor width bar; NOT stored in the backend NOTE: 2017-06-28 17:19:20 used as a flag to know when itemChange has been called the first time when object is a cursor type NOT stored in the baskend NOTE: 2017-06-30 13:52:03 used for linked cursors logic, when object if a cursor type NOT stored in the backend elements of cursor types - do NOT use _graphicsShapedItem here because the Qt GraphicsView system will be decorate its bounding rect  when selected vertical cursor line horizontal cursor line vertical cursor window line horizontal cursor window line point cursor central rect point and crosshair cursor window rect a Null rectangle!!! ### BEGIN ID and label management ### NOTE: bring names under a common value and KISS! use same string for ID, label (the prefix of the display string) and backend name if ID is given in the constructor, use it for self._ID_; else, generate it from object type if label is given in the constructor, use it for label, and for the ID !!!; else, if there is a backend and the backend has a name, use this as a label otherwise, use the ID for both label and backend name label passed as __init__ parameter overrides => set name for backend too no label passed at __init__;  if backend exists, use its name as IDif self.__backend__ is not None:if self.__backend__.name is None or (isinstance(self.__backend__.name, str) and len(self.__backend__.name) == 0):self.__backend__.name = self._ID_self.__backend__.updateLinkedObjects()self._displayStr= &quot;&quot;  ### END ID and label manageent ### NOTE: 2018-01-26 10:07:28 use a list of backends !!!self.setBoundingRegionGranularity(0.5)else:self.setBoundingRegionGranularity(0.25)self.setVisible(True)" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u8Awh6gOucxIe" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ukj2aDbReyUBg" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name=";"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uv8pl3Qge5FFz" isOverride="false" comment=" check frameindex and currentframe this can be an empty sequence!!! parametric cursor c'tor parametric c'tor for non-cursor graphic objects enters build mode self.__backend__ will be built in __finalizeShape__() after exit from build mode parametric construction from a QRectF parametric c'tor from a QPolygonF NOTE: QPolygonF if a :typedef: for QPointF list (I think?) this HAS to be done this way, becase QPolygonF is NOT a python iterableif self._frameindex is not None and len(self._frameindex): parametric c'tor from sequence of Qt pointsif self._frameindex is not None and len(self._frameindex): a copy c'tor x0, y0, x1, y1; either a line,  or the line of a rectangle's diagonal or one of the diameters of an ellipse the above is determined by the passed object type argument to __init__ cachedPath stores the control line (a diagonal) override backend's frame-state associations &amp; currentframe  ONLY if self._frameindex was set by __init__ parameterif self._frameindex is not None and len(self._frameindex): parametric construction of a Point TODO 2017-11-25 00:16:35 make it accept a pictgui.Point - TODO define this :class: ! parametric c'tor from (X,Y) pairs of scalar coordinates force polyline type -- if you want to build a rectangle se aboveif self._frameindex is not None and len(self._frameindex):" visibility="private" isInline="false" isSpecification="false" name="parametric_constructor__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="udnQij9Ys2E0F" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="udPr5SQmVXZLm" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parameters"/>
          <UML:Parameter xmi.id="ucK91fD96O4KP" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pos"/>
          <UML:Parameter xmi.id="uspYaxdcSHHVZ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frameindex"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uptK8N0FILpcC" isOverride="false" comment="Builds the graphics object and the planar graphic according to the following rules:&#xa;        &#xa;        1) parametric constructors:&#xa;        1.1) for cursors, build the backend from the supplied parameters&#xa;        1.2) for shaped objects, build the cached path the generate a backend from it&#xa;        &#xa;        2) construct from a planar graphic object:&#xa;        2.1) for cursors, use the planar graphics as backend&#xa;        2.2) for shaped objects, use the planar graphics as backend then generate&#xa;        a cached path from the state descriptor associated with the current frame&#xa;        (or from the common state descriptor)&#xa;        &#xa;        3) When function returnsthere shoud ALWAYS be a backend and, in the case&#xa;        of shaped objects, a cached path.&#xa;        &#xa;        3.1) The ONLY EXCEPTION this rule is for shaped objects construction with&#xa;        no parameters whatsoever: buildMode is invoked to generate a backend and &#xa;        a cached path.&#xa;        &#xa;        frameindex and current frame are used ONLY when the graphics object is contructed&#xa;        parametrically (which also generates its own new backend);&#xa;        &#xa;        when the graphics object is contructed on an existing backend, frameindex &#xa;        and currentframe parameters are ignored&#xa;        &#xa; ### BEGIN parse parameters ### parameters are the backend, so override self._objectType set in __init__ TODO 2017-11-25 00:15:21 set up backends when parameter is a pictgui primitive link coordinate changes to the attributes of the backend allow empty Path objects => merge into build mode ?raise ValueError(&quot;received an empty Path object; cannot proceed&quot;) convert a 1-element Path into the primitive this will be one of line, rectangle, polygon, polyline, or path so that we reference this directly from this object TODO: move this to __parametric_constructor__ ### END parse parameters ###" visibility="private" isInline="false" isSpecification="false" name="parse_parameters__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIsknZDJHrjx1" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uHauLJt8fMAkt" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parameters"/>
          <UML:Parameter xmi.id="uPytAHwvJ7rmp" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pos"/>
          <UML:Parameter xmi.id="uvHDxsGT6APGj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="frameindex"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufiYxplm7HVM5" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="str__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uOxRwy3ScdkWP" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1GNH9p6kWvqi" isOverride="false" comment="Constructs the label string&#xa; why this condition here?" visibility="private" isInline="false" isSpecification="false" name="setDisplayStr__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwOqerSX9vJPL" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uevpVJqIJbtdA" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRjxekiJjuaMf" isOverride="false" comment=" non-cursor linked to other GraphicsObjects !!! linked to other GraphicsObjects !!!self._graphicsShapedItem.setPen(self._linkedPen) no backend = this is in buildMode" visibility="private" isInline="false" isSpecification="false" name="calculate_shape__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uNLoArA4wHOBA" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="un4sYeKFjBg2D" isOverride="false" comment="Calculates label bounding rectangle&#xa; a null rect" visibility="private" isInline="false" isSpecification="false" name="updateLabelRect__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uvHBqfIwsfRq9" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="usmW0H0Kbjk0T" isOverride="false" comment="Creates the _graphicsShapedItem, an instance of QGraphicsItem.&#xa;        Used only by non-cursor types, after exit from build mode.&#xa;        Relies on self.__cachedPath__ which is a PlanarGraphics Path object. Therefore&#xa;        if makes inferences from self._objectType and the number of elements in&#xa;        self.__cachedPath__&#xa; NOTE: do NOT use _graphicsShapedItem for cursors !!!FIXME in build mode there is no __backend__; we create it here from the cached pathNOTE: for non-cursors, cachedPath is generated in build mode, or inNOTE:  __parse_parameters__() NOTE: 2018-01-23 20:20:38 needs to create particular backends for Rect and Ellipse because self.__cachedPath__ is a generic Path object (see __parse_parameters__) no cached path exists" visibility="private" isInline="false" isSpecification="false" name="finalizeShape__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uvZI2cZcsCExe" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uyyK8FWybxqxo" isOverride="false" comment="if self.__backend__.currentFrame != self._currentframe_:self.__backend__.currentFrame = self._currentframe_" visibility="private" isInline="false" isSpecification="false" name="drawObject__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uULYihrRPuTRj" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uWRm726SzuVgH" isOverride="false" comment=" to make sure control points stay within scene's rectangle" visibility="private" isInline="false" isSpecification="false" name="drawROI__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u4kIQk5nG71yi" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ulNraFxp6Tdp9" isOverride="false" comment="Draws cursor&#xa; NOTE: 2017-11-27 21:08:06 QPointF movedBy only used for crosshair cursors !!!if not self.hasStateDescriptor:returnstate = self.__backend__.getState(self.__backend__.currentFrame) inherited from QGraphicsObjectNOTE: 2018-01-16 22:20:38 API change: do NOT store our own graphics descriptors any more; use backend properties getters for the planar descriptors;  ATTENTION backend descriptors are in scene coordinates; therefore they  need to be mapped back on this item's coordinates CAUTION: the reverse is NOT true in itemChange where &quot;value&quot; is already given in scene coordinates, and therefore self._deltaPos is also in scene coordinates the access to the backend's planar descriptors always reads values  from the current descriptor state of the backend, that is, either the common state, or the state associated with the current image frame  (for a data &quot;volume&quot;) is the backend has frame-state associations NOTE: 2018-01-18 15:16:55 THAT'S THE CORRECT WAY !!! main cursor lines: for vertical cursor ONLY for horizontal cursor ONLY component of the point cursor (central rect) component of the point cursor and of the crosshair cursor (window rect)" visibility="private" isInline="false" isSpecification="false" name="drawCursor__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9jKoevZ8y3Ev" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utORtOZ2cZ0FV" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isLinked" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="umflGEEakUP46" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uFpMJEo2JvPpX" isOverride="false" comment=" NOTE: 2017-06-30 12:04:24 TODO: functions/event handlers to implement/overload: TODO OPTIONAL: collidesWithItem() TODO OPTIONAL: contains() -- relies on shape() TODO OPTIONAL: focusInEvent, focusOutEvent hoverEnterEvent hoverLeaveEvent  TODO OPTIONAL: keyReleaseEvent (to move it by keyboard) TODO OPTIONAL: hoverMoveEvent -- optional" visibility="public" isInline="false" isSpecification="false" name="isLinkedWith" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uKHtLk7De3sSD" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uyFN11ahSbvyu" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3edXua4tXnvR" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="type" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ucPuemqx21fg9" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4Lh4jpvh9vC0" isOverride="false" comment="  a QPainterPath with subpaths! find subpaths: subpaths always begin with a moveTo element NOTE: 2017-08-10 15:20:50" visibility="public" isInline="false" isSpecification="false" name="getShapePathElements" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLCnNrdaGOQ9H" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uQqidcgRsScA2" isOverride="false" comment="No mapping transformations here, as the cached path is a copy of the&#xa;        __backend__'s state associated with the current frame.&#xa;" visibility="private" isInline="false" isSpecification="false" name="updateCachedPathFromBackend__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uM1cdg6m6QMzd" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uEnNMAxlS2y1N" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="show" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uggtiJd153843" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uOxvqfbDevXe9" isOverride="false" comment="@safeWrapper" visibility="public" isInline="false" isSpecification="false" name="hide" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uYGjHFSwPc8ZP" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uU3mcSlZl5jVm" isOverride="false" comment="Mandatory to get the bounding rectangle of this item&#xa;if self.scene() is None:sc = self.scene  return a null QRect! NOTE: 2018-01-25 22:06:25 this is required: what if this cursor is linked with one in another window that shows a different frame, for which the backend has no state descriptor? seame check is done for non-cursor types, below QRectF(x,y,w,h) point cursor union not a cursorbRect = self.mapRectFromScene(self.__backend__().controlPointRect()) # relies on planar graphics's shape !!!! relies on planar graphics's shape !!!! no backend, or backend has no state we need this to pick up mouse events from anywhere in the scene union" visibility="public" isInline="false" isSpecification="false" name="boundingRect" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZDzxoERKR6ce" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uaZ3dlLE58rLj" isOverride="false" comment="Returns a new pictgui.Path object or None if isCursor is True.&#xa;        &#xa;        This constructs a new pictgui.Path object. &#xa;        &#xa;        To reflect the changes in this object's values in an existing&#xa;        pictgui.Path object, use direct access to the attributes of the latter.&#xa;        &#xa;        Coordinates are mapped to scene's coordinate system&#xa;        &#xa;        NOTE: This is not a reference to the backend Path object&#xa;if not self.hasStateDescriptor:return TODO FIXME ???" visibility="public" isInline="false" isSpecification="false" name="toScenePath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="urn7SoWutJwkM" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNHXV506fTBZ0" isOverride="false" comment="Returns a new pictgui.Cursor object or None if isCursor is False.&#xa;        &#xa;        This constructs a new pictgui.Cursor object. &#xa;        &#xa;        To reflect the changes in this object's values in an existing &#xa;        pictgui.Cursor object use direct acces to the attributes of the latter.&#xa;        &#xa;        Coordinates are mapped to scene's coordinate system.&#xa;        &#xa;        NOTE: This does NOT return the reference to the backend Cursor object (which may exist)&#xa;if not self.hasStateDescriptor:returnp = self.mapToScene(QtCore.QPointF(stateDescriptor.x, stateDescriptor.y))return Cursor(self.name, p.x(), p.y(), stateDescriptor.width, stateDescriptor.height, stateDescriptor.xwindow, stateDescriptor.ywindow, stateDescriptor.radius)" visibility="public" isInline="false" isSpecification="false" name="toSceneCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uJ1ascfdg7z9Y" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ue6qmWDTqbs5R" isOverride="false" comment="Returns the position in the scene as x, y sequence&#xa;        FIXME&#xa;" visibility="public" isInline="false" isSpecification="false" name="getScenePosition" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVdOOrVSEStSz" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uMgz8oIj8I6h9" isOverride="false" comment="Returns the coordinates that define this shape in the scene.&#xa;        FIXME&#xa;        Coordinates are mapped to scene's coordinate system&#xa; NOTE: 2017-11-21 23:07:07 DO NOT not rely on QPainterPath - pictgui.Path conversions here,  because QPainterPath inserts all sorts of points &amp; segments (something to do with how they compute the rendering of the actual path) FIXME the cached path is the diagonal/primary diameter line! return the x, y, width, height TODO FIXME TODO FIXME ???" visibility="public" isInline="false" isSpecification="false" name="getSceneCoordinates" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uQCdacJUT3K2i" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ulmqj3fjhWjpF" isOverride="false" comment="Used in collision detection, etc.&#xa;        Currently return a path made of this item's bounding rectangle.&#xa;path.addRect(QtCore.QRectF()) #  return a null QRect! BEGIN vertical line END vertical line BEGIN horizontal line END horizontal line for cursors this is safe: it DOES NOT recurse infinitely either no backend (in build mode), or no state for current frame needed to find collisions with mouse" visibility="public" isInline="false" isSpecification="false" name="shape" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u2qx1625I6RPU" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLD4cta6TwjeH" isOverride="false" comment="Overloads QGraphicsItem.setPos()&#xa;        Parameters:&#xa;        ==========&#xa;        x: float or QtCore.QPointF when y is None&#xa;        y: float or None&#xa; NOTE changes to backend ar done by itemChange()" visibility="public" isInline="false" isSpecification="false" name="setPos" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u0JrvZwT1Z37U" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uSXCCLdT6Yddv" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="x"/>
          <UML:Parameter xmi.id="uX0frFT7476lV" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="y"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uEmMSsgQ6w1tO" isOverride="false" comment=" because it may by Null at constructionself.scene().update(self.scene().sceneRect().x(), \self.scene().sceneRect().y(), \self.scene().sceneRect().width(), \self.scene().sceneRect().height())for v in self.scene().views():v.repaint(v.childrenRect())" visibility="public" isInline="false" isSpecification="false" name="update" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ugwzUOpwYUVAN" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ugZ9M60nevUzR" isOverride="false" comment="if self._labelShowsCoordinates:@safeWrapper" visibility="public" isInline="false" isSpecification="false" name="redraw" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uYm23WfCsTW4q" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ukKrZeOuwVhmN" isOverride="false" comment="Does the actual painting of the item.&#xa;        Also called by super().update() &amp; scene.update()&#xa; inherited from QGraphicsItem via QGraphicsObject NOTE: 2017-06-23 09:41:24 below I calculate a default label position based on cursor type this position will be then changed dynamically according to the font metrics when the painter becomes active NOTE: 2018-01-18 14:47:49 WARNING: DO NOT use _graphicsShapedItem to represent cursors, because the Qt GraphicsView system renders its shape's bounding  rect with a dotted line when item is selected.## self._graphicsShapedItem.paint(painter, styleOption, widget) point cursor non-cursor types NOTE: FIXME be aware of undefined behaviours !!! (check flags and types) this only makes sense for ROIs nothing to paint ! NOTE: 2018-01-24 15:57:16  THE SHAPE IN BUILD MODE = cached path first draw the shapepainter.drawPath(self.__cachedPath__()) NOTE: 2018-01-24 15:56:51  CONTROL POINTS AND LINES IN BUILD MODE now draw control points and lines draw control points NOTE: 2018-01-24 15:58:33  EXTRA CONTROL POINTS AND HOVER POINT IN BUILD MODE WHERE THEY EXIST not in build mode NOTE: 2018-01-24 16:12:20 DRAW SHAPE  NOTE: 2018-01-24 16:12:43 SELECT PEN &amp; BRUSH FIRST linked to other GraphicsObjects !!! linked to other GraphicsObjects !!! linked to other GraphicsObjects !!! NOTE: 2018-01-24 16:13:03 DRAW THE ACTUAL SHAPE NOTE: 2018-01-24 17:17:05 WE SHOULD HAVE A __backend__ BY NOWif self.__cachedPath__ is not None and len(self.__cachedPath__): general Path backend, including polyline, polygon NOTE: 2018-01-24 16:14:15 CONTROL AND HOVER POINTS AND CONTROL LINES IN EDIT MODE ATTENTION for paths, curves have extra control points! CAUTION: DO NOT DELETE when commented-out  this paints the boundingRect() and shape() of the thing when debugging### BEGIN DEBUGGINGpainter.fillRect(self.boundingRect(), self._controlPointBrush)painter.fillPath(self.shape(), self._testBrush)painter.setPen(QtCore.Qt.darkRed)painter.drawPath(self.shape())### END DEBUGGING" visibility="public" isInline="false" isSpecification="false" name="paint" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uV4E43yb7DHLJ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u7VDAI0QTYe7V" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="painter"/>
          <UML:Parameter xmi.id="uOdFFeYCbtVR0" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="styleOption"/>
          <UML:Parameter xmi.id="uwfwASTupQMkC" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="widget"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utgn6XeVopuDB" isOverride="false" comment="Customizes the cursor movement by mouse or keyboard.&#xa;        &#xa;        1. For vertical/horizontal cursors: &#xa;            1.1 restricts the movement of the _MAIN_ cursor line (the long line) &#xa;                and label to the perpendicular direction; &#xa;            1.2 allows the movement of the window bar along the direction of the&#xa;                _MAIN_ cursor line (basically, the window bar moves unrestricted)&#xa;            &#xa;        2. For crosshair cursors: &#xa;            2.1 moves the center of the cursor but readjust the geometry of the &#xa;                cursor lines such that they always span the entire image&#xa;            2.2 the label movement is restricted horizontally (label is attached&#xa;                to the vertical cursor line)&#xa;        &#xa;         1 &amp; 2 achieved by partially restricting the new position and/or repainting.&#xa;         &#xa;        3. For non-cursors:&#xa;            just pudates the backen'd x and y coordinates (the effects of which&#xa;            depend on what the backend is) for the current frame&#xa; TODO because this changes the backend, we must ensure the backend in turn updates all OTHER frontends it may have !!! NOTE: 2017-08-11 13:12:24 trap here position changes for cursors (ONLY) so that we can constrain the movement of their components: 1) for vertical cursors, the main line and label are only allowed to move horizontally 2) for horizontal cursors, the main line and label are only allowed to  move vertically; 3) for crosshair cursors, the main lines must be trimmed/grown at the  opposite ends according the thir direction of move (such that the main cursor lines always span the scene rectangle) 4) in addition, the window bars (small whiskers perpendicular to the  main cursor line) are allowed to move in both orthogonal directions i.e. allow vertical movement for the whiskers of a vertical cursor,  and horizontal movement for the whiskers of a horizontal cursorprint(&quot;itemChange value: %s&quot; % self.name, value)NOTE: 2018-01-23 18:01:36 ATTENTION only check for backend when position changed in buildmode there is neither __backend__ nor _graphicsShapedItem if you return early without calling super().itemChange the item wont be added to the scene when value is scene change!print(&quot;self._deltaPos: &quot;, self._deltaPos) cursor types NOTE 2018-01-18 16:57:28 ATTENTION This is also called by self.setPos() (inherited) flag used in __drawCursor__() vertical cursors restrict movement to horizontal axis only horizontal cursors restrict movement to vertical axis only crosshair cursors point cursors NOTE: 2018-01-18 15:44:28 CAUTION value is already in scene coordinates, so no mapping needed here; non-cursor typesself.__drawObject__() NOTE: 2017-08-11 13:19:28 selection change is applied to all GraphicsObject types, not just cursors NOTE: ZValue refers to the stack ordering of the graphics items in the scene and it has nothing to do with frame visibility. NOTE: NOT used for now... now self.scene() is the NEW scene" visibility="public" isInline="false" isSpecification="false" name="itemChange" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIyHqdtf0JBio" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uQi38om4V0tyr" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="change"/>
          <UML:Parameter xmi.id="ut9WBY9b21qnw" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u95JFaCN2Bk2i" isOverride="false" comment="Mouse press event handler.&#xa;        &#xa;        In build mode, entered when the ROI type has not beed pre-determined at &#xa;        __init__(), keyboard modifiers determine what type of ROI is being created&#xa;        when the first point is generated with a mouse press:&#xa;        &#xa;            SHIFT             => rectangle&#xa;            CTRL              => ellipse&#xa;            ALT               => path&#xa;            CTRL SHIFT        => polygon&#xa;            ALT CTRL SHIFT    => point&#xa;            anything else     => line   (default)&#xa;        &#xa;        When ROI type is path, CTRL + ALT modifier creates a subpath.&#xa;        &#xa;        When ROI type is path and we are in _curveBuild mode, CTRL + ALT modifiers&#xa;        create a second control point, to create a cubic Bezier curve.&#xa;        &#xa;        &#xa; this is ALWAYS False for cursors NOTE: 2017-08-21 22:21:58 to avoid confusions, determine ONCE AND FOR ALL the object type  according to key modifiers, at FIRST PRESS (i.e. when _cachedPath is empty) as follows: SHIFT             => rectangle CTRL              => ellipse ALT               => path CTRL SHIFT        => polygon ALT CTRL SHIFT    => point anything else     => line When ROI type is not determined by the call to __init__(), we build a line ROI by default; keyboard modifiers can change the type of ROI being built.print(&quot;scenepos: &quot;, evt.scenePos())pressPos = evt.pos() before adding first point, cheeck key modifiers and set self._objectType accordingly NOTE: 2018-01-23 22:41:05 ATTENTION: do not delete commented-out &quot;mods&quot; code -- for debugging##SHIFT => rectangle##CTRL => ellipse##ALT => path##CTRL+SHIFT => polygon##ALt+CTRL+SHIFT => point##anything else, or no modifiers => lineprint(&quot;press at: &quot;, evt.pos(), &quot; mods: &quot;, mods) add first point stop here if building just a pointreturnprint(&quot;last press: &quot;, evt.pos(), &quot; hover point: &quot;, self._hover_point) there are previous points in the _cachedPath check if evt.pos() is &quot;over&quot; the last point in the _cachedPathd = QtCore.QLineF(evt.pos(), self.__cachedPath__[-1].point()).length() NOTE: self._constrainedPoint is set by mouse hover event handler we set it to None after using it, here press event fired far away from last point does nothing is self.__cachedPath__ already has more than one point there is only one point prior to this one append a constrained point is any else append this pointprint(&quot;to finalize: &quot;, self.__cachedPath__)returnself.update()return self._curveBuild is set in mouse move event handler cp has been used cp has been used allow the creation of a subpath select the last point, possibly move it, if followed by mouse move force repaint, do not propagate event to superclass this is ALWAYS False for cursors select a control point according to mouse event position see qt5 examples/widgets/painting/pathstroke/pathstroke.cppif not self.hasStateDescriptor:return force current state into a common stateif isinstance(p, (Ellipse, Rect)):#FIXME what to do in case of a complex path containing rects, ellipses?d0 = QtCore.QLineF(evt.pos(), self.mapFromScene(p.points()[0])).length() # d = length of line between event pos and point posd1 = QtCore.QLineF(evt.pos(), self.mapFromScene(p.points()[2])).length() # d = length of line between event pos and point posd = min(d0,d1)if (distance &lt; 0 and d &lt;= 2 * self._pointSize) or d &lt; distance:distance = dself._c_activePoint = kif d == d0:self._c_shape_point = 0else:self._c_shape_point = 1self._c_activeControlPoint = -1 d = length of line between event pos and point pos d = length of line between event pos and point posprint(&quot;Cubic&quot;)print(&quot;Move or Line&quot;) d = length of line between event pos and point pos" visibility="public" isInline="false" isSpecification="false" name="mousePressEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9MzyzJj3JEC8" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uKMExc6skEEnc" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="un30ZJAO6LmGc" isOverride="false" comment="Mouse move event handler.&#xa;        &#xa;        In buildMode the type of ROI must have already been determined by the time&#xa;        this event is issued, either at __init__ or at the time of first mouse press event.&#xa;        &#xa;        Keyboard modifiers have the following effects (NOTE: they must be present&#xa;        throughout the sequence of mouse move events):&#xa;        &#xa;        CTRL:  => move in multiples of 45 degrees angles (snapping)&#xa;        &#xa;        SHIFT: => move on diagonal (e.g., for rectangles &amp; ellipse, force them &#xa;                  to be square and circle, respectively)&#xa;                  &#xa;        ALT:   => for path ROIs only, initiates the creation of a curved segment&#xa;                    (quadratic curve)&#xa;print(&quot;mouse MOVE event position x: %g, y: %g&quot;   % (evt.pos().x(), evt.pos().y()))print(&quot;mouse MOVE event scene position x: %g, y: %g&quot;   % (evt.scenePos().x(), evt.scenePos().y()))print(&quot;mouse MOVE event from scene position x: %g, y: %g&quot;   % (self.mapFromScene(evt.pos()).x(), self.mapFromScene(evt.pos()).y()))print(&quot;mouse MOVE event to scene position x: %g, y: %g&quot;   % (self.mapToScene(evt.pos()).x(), self.mapToScene(evt.pos()).y()))print(&quot;MOVE&quot;)print(self.__backend__.x)mods = &quot;none&quot;  build mode exists only for non-cursors if objectType is a path then generate a curve (mouse is pressed) otherwise behave as for hoverMoveEvent stays True until next mouse release or mouse pressprint(&quot;move at: &quot;, evt.pos())print(&quot;mods: &quot;, mods) because the path may have been &quot;normalized&quot; avoid confusion in paint()  NOT in build modeif not self.hasStateDescriptor:return this is the windowing system mouse pointer !!! NOTE: 2018-09-26 14:47:05 by design, editMode can only be True for non-cursorsself.prepareGeometryChange() calls paint() -- force repainting, do or propgate event to the superclass NOTE: 2017-08-11 16:43:12 do NOT EVER call this here !!! leave commented-out code as a reminder ### super(GraphicsObject, self).mouseMoveEvent(evt) ###return this will also change the position of the control points! NOTE: itemChange changes the backend directly!, then we call updateself.__updateBackendFromCachedPath__() # just DON'Tself.__updateCachedPathFromBackend__() NOTE 2017-08-12 13:22:26 this IS NEEDED for cursor movement by mouse !!!! backend updating for cursors is dealt with in itemChange" visibility="public" isInline="false" isSpecification="false" name="mouseMoveEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u56e2GNBlHvRd" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uUGSHDRnpsS84" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uUfqvLJVycq7T" isOverride="false" comment="Mouse release event handler&#xa;if not self.hasStateDescriptor:returnprint(self.__backend__.x) restore this anyway! this is ALWAYS False for cursors do something here ONLY if release is at some distance from most recent mouse press NOTE: 2018-01-23 22:39:55 ATTENTION do not delete  -- for debuggingprint(&quot;release at: &quot;, evt.pos(), &quot; mods: &quot;, mods)print(&quot;obj type: &quot;, self._objectType) we allow mod of 1st cp when there is no 2nd cpsuper(GraphicsObject, self).mouseReleaseEvent(evt) together with itemChange, this implements special treatment of the object shape in the case of cursors (see notes in itemChange code) NOTE: 2017-06-29 08:40:08# don't do this -- it disturbs the crosshair linesself._deltaPos.setX(0)self._deltaPos.setY(0)@safeWrapper&quot;def&quot; mouseDoubleClickEvent(self, evt):&quot;&quot;&quot;Mouse double-click event handler - do I need this ???&quot;&quot;&quot;# TODO: bring up cursor properties dialog# NOTE: if in buildMode, end ROI construction if self._buildMode:self.__finalizeShape__()self.selectMe.emit(self._ID_, True)super(GraphicsObject, self).mouseDoubleClickEvent(evt)" visibility="public" isInline="false" isSpecification="false" name="mouseReleaseEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuzhN3Mx7KcTo" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u6w2WUlXHyqGx" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uvF999Do7Fy4n" isOverride="false" comment="        #TODO: popup context menu => Edit, Link/Unlink, Remove&#xa; so that this doesn't propagate to the underlying graphics items" visibility="public" isInline="false" isSpecification="false" name="contextMenuEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uQd0iNgklhvmw" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uitjiG7A2bStd" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZC2igx0TaPRr" isOverride="false" comment="print(d)if self._objectType &amp; (GraphicsObjectType.rectangle | GraphicsObjectType.ellipse):d0 = QtCore.QLineF(evt.pos(), self.mapFromScene(self.__cachedPath__[0].points()[0])).length() # d = length of line between event pos and point posd1 = QtCore.QLineF(evt.pos(), self.mapFromScene(self.__cachedPath__[1].points()[2])).length() # d = length of line between event pos and point posd = [d0,d1]else:d = [QtCore.QLineF(evt.pos(), self.mapFromScene(p)).length() for p in self.__cachedPath__.qPoints()]" visibility="public" isInline="false" isSpecification="false" name="hoverEnterEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uoaRgdykSSJh5" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uVG0VRTVnPs9Z" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ucXFA1qoF6WvR" isOverride="false" comment="Hover move event handler.&#xa;        &#xa;        In buildMode the type of ROI must have already been determined by the time&#xa;        this event is issued, either at __init__ or at the time of first mouse press event.&#xa;        &#xa;        Keyboard modifiers here serve to constrain any moves (NOTE: they must be&#xa;        present throughout the sequence of hover move events):&#xa;        &#xa;        CTRL:  => move in multiples of 45 degrees angles (snapping)&#xa;        &#xa;        SHIFT: => move on diagonal (e.g., for rectangles &amp; ellipse, force them &#xa;                  to be square and circle, respectively)&#xa;                  &#xa;print(&quot;HOVER MOVE position x %g, y %g&quot; % (evt.pos().x(), evt.pos().y()))print(&quot;HOVER&quot;)NOTE 2018-01-23 22:39:28 ATTENTION do not delete -- for debuggingmods = &quot;&quot; if evt.modifiers() == QtCore.Qt.ShiftModifier:mods = &quot;shift&quot;elif evt.modifiers() == QtCore.Qt.ControlModifier: mods = &quot;ctrl&quot;elif evt.modifiers() == QtCore.Qt.AltModifier: mods =&quot;alt&quot;elif evt.modifiers() == (QtCore.Qt.ControlModifier | QtCore.Qt.ShiftModifier):mods = &quot;ctrl+shift&quot;elif evt.modifiers() == (QtCore.Qt.AltModifier | QtCore.Qt.ControlModifier | QtCore.Qt.ShiftModifier):mods = &quot;alt+ctrl+shift&quot;elif evt.modifiers() == QtCore.Qt.NoModifier:mods = &quot;none&quot;if len(self.__cachedPath__):print(&quot;hovermove at :&quot;, evt.pos(), &quot; mods &quot;, mods) NOTE do not call super().hoverMoveEvent hereif self._objectType &amp; (GraphicsObjectType.rectangle | GraphicsObjectType.ellipse):d0 = QtCore.QLineF(evt.pos(), self.mapFromScene(self.__cachedPath__[0].points()[0])).length() # d = length of line between event pos and point posd1 = QtCore.QLineF(evt.pos(), self.mapFromScene(self.__cachedPath__[0].points()[2])).length() # d = length of line between event pos and point posd = [d0,d1]else:d = [QtCore.QLineF(evt.pos(), self.mapFromScene(p)).length() for p in self.__cachedPath__.qPoints()]" visibility="public" isInline="false" isSpecification="false" name="hoverMoveEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uQw6GvtoABiQd" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uM1slaLl315Ng" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ullDVhGAPhLVw" isOverride="false" comment="print(&quot;hover leave position x %g, y %g&quot; % (evt.pos().x(), evt.pos().y()))" visibility="public" isInline="false" isSpecification="false" name="hoverLeaveEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uex3MPrA1EPk1" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uP3w1OETy2TG0" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uIYeQ5uEc3FGQ" isOverride="false" comment=" NOTE: 2017-06-29 08:44:34 &quot;up&quot; means move down (coordinates origin are top-left !!!)if not self.hasStateDescriptor:return deregisters self with parent and removes it exit build mode hereself._graphicsShapedItem = None in order to deregister self with the caller exit edit mode hereif stateDescriptor is None or len(stateDescriptor) == 0:returnif newX > stateDescriptor.width-1:moveX = stateDescriptor.width-1 - self.pos().x()if newY > stateDescriptor.height-1:newY = stateDescriptor.height-1 - self.pos().y()self.__backend__.y += moveYelif self.pos().x() > stateDescriptor.width-1:y = self.pos().y()self.setPos(stateDescriptor.width-1, y)elif self.pos().y() > stateDescriptor.height-1:x = self.pos().x()self.setPos(x, stateDescriptor.height-1)elif self.pos().x() > stateDescriptor.width-1:y = self.pos().y()self.setPos(stateDescriptor.width-1, y)elif self.pos().y() > stateDescriptor.height-1:x = self.pos().x()self.setPos(x, stateDescriptor.height-1) non-cursor types" visibility="public" isInline="false" isSpecification="false" name="keyPressEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u62xYhrzNbNzZ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ue52UWd4zTZaq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uvtzQLznFBxTO" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setDefaultAppearance" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uNx2mvSkg0xsf" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uuEjSDoewyLo3" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="sharesBackendWith" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u7ezWizC9mASZ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uvpwZuT6XfWqK" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="other"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3zpulAWu36ST" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="hasTransparentLabel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uJAMOCmR6M3Uk" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uuOwm0LkURnKS" isOverride="false" comment="self.update()" visibility="public" isInline="false" isSpecification="false" name="setTransparentLabel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uhdWi2I9tlnBE" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uJW58h3THbOvt" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6gica6M8m9mT" isOverride="false" comment="@property&quot;def&quot; linked(self):&quot;&quot;&quot;Returns a dict of GraphicsObject instances to which this object is linked with&quot;&quot;&quot;return self._linkedGraphicsObjects" visibility="public" isInline="false" isSpecification="false" name="sharesBackend" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="un4i70kVb10AK" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uEc243MBqBhHm" isOverride="false" comment="print(&quot;slotFrameChanged&quot;)self.setVisible(len(self.__backend__.frameIndices) == 0 or val in self.__backend__.frameIndices)c.setVisible(len(c.__backend__.frameIndices) == 0 or val in c.__backend__.frameIndices)" visibility="public" isInline="false" isSpecification="false" name="slotFrameChanged" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5vgiD5c6uyxn" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uG3WAHBnDqLtj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uggODQfjC1JAh" isOverride="false" comment="Catched signals emitted by linked graphics objects&#xa;" visibility="public" isInline="false" isSpecification="false" name="slotLinkedGraphicsObjectPositionChange" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uNsVulbTV34Gx" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uKnGdXVqdvSgz" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="deltapos"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="upGyHiBrxDeF3" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="visible" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uniD9JvAngpll" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uACaGvBcHz238" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="visible" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuDJ0fVCgja3t" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uRNbyTlAsNHNq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uTTn7CzpE2FrD" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isVisible" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6CcetiTP2yqW" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uFQ2qF5X1kPVb" isOverride="false" comment="print(&quot;%s setVisible %s in frame %d&quot; % (self.ID, value, self._currentframe_))if isinstance(value, bool):" visibility="public" isInline="false" isSpecification="false" name="setVisible" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u298EKnSbwlF8" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uMy9VK3NVhdAD" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uzH3H5EchyL3D" isOverride="false" comment="Updates the backend primitive from this object, it being a ROI&#xa;        TODO/FIXME for now only supports Ellipse, Rect, and Path backends&#xa;        TODO expand for line, etc.&#xa;        NOTE: do not use for cursors !&#xa;        ATTENTION: does not work when __backend__ is None&#xa; this is a reference; modifying stateDescriptor attributes effectively modified self.__backend__ state for _currentframe_stateDescriptor = self.__backend__.getState(self._currentframe_)if len(stateDescriptor): NOTE: 2019-03-25 20:44:39 TODO code for all non-Cursor types!@safeWrapper" visibility="private" isInline="false" isSpecification="false" name="updateBackendFromCachedPath__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u3Duiqzg57sDg" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uIYxwN2vqZZQB" isOverride="false" comment="Call this to have the GraphicsObject remove itself from the GraphicsImageViewerWidget&#xa;print(&quot;GraphicsObject.removeFromWidget %s from %s&quot; % (self.name, self.parentwidget.windowTitle())) NOTE: 2017-06-26 22:38:06 properties" visibility="public" isInline="false" isSpecification="false" name="removeFromWidget" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ullRgUpalbufF" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uT6BnNsJw7DqS" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="parentwidget" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ukzNYanJ3BRAi" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uULwaDdekerto" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="showLabel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uigK6i3zfhiN2" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubKc3BTx3O3Jm" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="showLabel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5YQLug7C9e0a" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ubQaiVhTP9Pje" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uggAFs3kUzUwr" isOverride="false" comment="Read-only!&#xa;        The backend is set up at __init__ and it may be None.&#xa;" visibility="public" isInline="false" isSpecification="false" name="backend" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="upaEbOOVZT6Nf" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufZvMWZOWSZPm" isOverride="false" comment="Read-only&#xa; NOTE: 2017-11-22 23:49:35 new property: a list of frame indices where this object is visible if list is empty, this implies the object is visible in ALL frames be careful: is the list contains only a frame index that is never reached the object will never become visible" visibility="public" isInline="false" isSpecification="false" name="cachedPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uyUFrf3entQTo" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uT1OqKMTArXG5" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="frameVisibility" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uEEcyOwlP8d1a" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uCfdilz5mb7Ps" isOverride="false" comment="        value: int, a list of int or a range&#xa;        &#xa;        Ignored for Path objects (this is determined by inidividual elements of the Path)&#xa;        &#xa;        see PlanarGraphics.frameIndices property documentation for details&#xa;        &#xa;print(&quot;frameVisibility.setter %s&quot; % value) NOTE: this is now a list of backends!" visibility="public" isInline="false" isSpecification="false" name="frameVisibility" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uxnsdonHGuOCU" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="urcVPyVAAurFN" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uu7rDqI4W6GkG" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="currentFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwc38Wfb8ywe0" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uUkostC91i2Ls" isOverride="false" comment="print(&quot;currentFrame.setter &quot;, value)" visibility="public" isInline="false" isSpecification="false" name="currentFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="unctG4iRZ7TmL" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uhOuquN9x2pfF" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uoz1d09Sp3iDR" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="currentBackendFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ujdS7Xj5RITJf" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="urjkSpDnQbYAg" isOverride="false" comment="print(&quot;currentBackendFrame.setter &quot;, value)" visibility="public" isInline="false" isSpecification="false" name="currentBackendFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uRhVKhXcJTIuV" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uqcBRYNJpFMYY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJ8aOYBbRfUTa" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="hasStateDescriptor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ujBin1BDLL9fx" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2MA4ASc7ZomA" isOverride="false" comment="Alias to self.ID&#xa;" visibility="public" isInline="false" isSpecification="false" name="name" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="up3YoA5VoFmIM" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBZxn28EsIffF" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="name" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="utpXiqp0T0YVO" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uU16YjlFle2M0" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ur6qsMCTA0m8h" isOverride="false" comment="Name of this GUI GraphicsObject.&#xa;        This is kept in sync with the backend.name property&#xa;" visibility="public" isInline="false" isSpecification="false" name="ID" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzh5s9ZJSdXZ0" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRamJ0WxrcQbU" isOverride="false" comment=" check to avoid recurrenceself.__backend__.name = valuefor f in self.__backend__.frontends:if f != self and f.name != value:old_name = f.namef._ID_ = valueif f._parentWidget is not None:cDict = f._parentWidget._graphicsObjects[f.objectType]cDict.pop(old_name, None)cDict[value] = ff.redraw()" visibility="public" isInline="true" isSpecification="false" name="ID" isRoot="false" isVirtual="true">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u7U9g2TeOLgUh" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uKZIT5NEmLGEN" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2JgkAnZUpVUd" isOverride="false" comment="Read-only&#xa;        To change, one can only manipulate &quot;framesVisibility&quot; property&#xa;&quot;@linkedToFrame.setter&quot;&quot;def&quot; linkedToFrame(self, val):if val:self._linkToFrame = val" visibility="public" isInline="false" isSpecification="false" name="linkedToFrame" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uGYzKpP8xpPMU" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uyd37XtLJEE2p" isOverride="false" comment="When True, the coordinates will be displayed next to its name, on the label&#xa;" visibility="public" isInline="false" isSpecification="false" name="labelShowsPosition" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uucloOB3DhtTI" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKnVQUit9p3yD" isOverride="false" comment="self.__drawObject__()self.update()@property&quot;def&quot; shapedItem(self):&quot;&quot;&quot;Returns the underlying QAbstractGraphicsShapeItem or None if this is a cursor.Same as self.graphicsItem()&quot;&quot;&quot;return self._graphicsShapedItem" visibility="public" isInline="false" isSpecification="false" name="labelShowsPosition" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ul4dXaY8PJ5OX" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uHpHE1pnRGnUR" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uKDHDrEinkR6J" isOverride="false" comment="The x coordinate&#xa;" visibility="public" isInline="false" isSpecification="false" name="x" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ugnGTl8oaKkuI" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3XtV0F5fL43b" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="x" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uEx1nvpXkFrHM" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u7HMHt9pXd9JE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRGOFTsM9bSS8" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="horizontalWindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uK09Tz3LWmvU5" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uvRyTtLJLZiI5" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="horizontalWindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ue811xoPwCh0c" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u7SMavL3Zc8Cx" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="umn4FMRVN8imZ" isOverride="false" comment="Alias for the &quot;horizontalWindow&quot; property&#xa;" visibility="public" isInline="false" isSpecification="false" name="xwindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVQ2eftnO0nBM" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uFA5AO9EVBWTj" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="xwindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uFPgKybSwSJCH" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uiVvHHulW0xCM" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufVZ2hc1zQMV0" isOverride="false" comment="The y coordinate&#xa;" visibility="public" isInline="false" isSpecification="false" name="y" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ucQJUmSukPLA5" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3XL28Cpyxqy5" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="y" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwOpjEe6uNmT1" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u5qGfnbWAyug2" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubxtmPhtdpL0Z" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="verticalWindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uk69HpLFDYvP3" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u9KysSpNhWsUA" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="verticalWindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uz8Y4fDhhyeZV" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ugHNgOgdedfsY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uTwQfC4Crk8fE" isOverride="false" comment="Alias for the &quot;verticalWindow&quot; property&#xa;" visibility="public" isInline="false" isSpecification="false" name="ywindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uLgTjC7vUkQsO" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uyMjdwlfxU5Bv" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="ywindow" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ulseZGFpdyroC" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uU5PzZ1zaVXQT" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uz8iqweWJkCru" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="radius" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uQrDK8CU1BIOA" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uIBfT6vSp0D8c" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="radius" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uCIhAAqGpPJlP" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u5q7cLIqohMNi" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u1Qpok6TUKLHP" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="color" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uonF7gR8oYhBL" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ulrC3wZgPIIAP" isOverride="false" comment="Set both the pen and text color to the same value&#xa;" visibility="public" isInline="false" isSpecification="false" name="color" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u4E0dhc5M485e" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uIi5WhJzPlTIm" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="qcolor"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ucSiL2WpQXinI" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="linkedColor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uDvwATxyxBz26" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6Josjuk4hDUn" isOverride="false" comment="Set both the pen and text color to the same value&#xa;" visibility="public" isInline="false" isSpecification="false" name="linkedColor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuVyDgKqUHpYZ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uCkGeUoGYTDDO" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="qcolor"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u38UmWCwQ3LEB" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="penColor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ud0mimKhflWr0" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uHL4IBER3bbAe" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="penColor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1VRHDJ7SWltq" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u5LMFJNh23DjL" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="qcolor"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="udLNWYuFLmNda" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="colorForSharedBackend" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uA2I9NuWHp5uW" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uhqPGhbr4yoe4" isOverride="false" comment="print(&quot;GraphicsObject.colorForSharedBackend&quot;, qcolor)print(&quot;GraphicsObject.colorForSharedBackend&quot;, qcolor.name())print(&quot;colorForSharedBackend %s&quot; % self.name)" visibility="public" isInline="false" isSpecification="false" name="colorForSharedBackend" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uGOJ17QxyyKLd" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uNhRAJiLSUnAb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="qcolor"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uqpaeoy8GxEVa" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="linkedPenColor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uSvv0sTgmikfe" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubsOQaaW0bw8H" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="linkedPenColor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9Kdnv9mlDjle" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uROMZqwz0ixFb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="qcolor"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u0oyf7wEXh6pe" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="textColor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ugFNha4dd0OOJ" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uzS8XtUuaM69e" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="textColor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usJZe7aTK2sXB" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u338kHilZ98CK" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="qcolor"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZrIxrJtgreGE" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="linkedTextColor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uWhOVor4j4BbS" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uU2tBPPKrkQ87" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="linkedTextColor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uxCmw7AzX0ku4" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uxzWAab9AjT7L" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="qcolor"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBYjjBQMaHxg8" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="textBackground" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ubGCtFpHSL2bE" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRSQRck0hqXBG" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="textBackground" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uyUmX3189pyBF" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ua2tXPXJV1wyS" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="brush"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNZXQVId9vHZ0" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="opaqueLabel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uefqilR3c8zl3" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRAxEN4lebMZf" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="opaqueLabel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="unwt6kdPFYBbB" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u8FpXMDJn7sAE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uOXslV6K01NL6" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="labelFont" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ucRDPWZosUmvm" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uVXNxvgCDEgUA" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="labelFont" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u3LMCAn9admKh" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uyV7jXz3gwba2" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="font"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uEkDI8f6uzpal" isOverride="false" comment="Read-only&#xa;" visibility="public" isInline="false" isSpecification="false" name="buildMode" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uqn8EQGkaCACm" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utbTn8J0TF24e" isOverride="false" comment="When True, the shape of the object (non-cursor types) can be edited.&#xa;        Default if False.&#xa;        Editing is done via control points (GUI editing).&#xa;        &#xa;" visibility="public" isInline="false" isSpecification="false" name="editMode" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1bTp4DVqH4Oo" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRiadMrg9Wiq3" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="editMode" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6ZFzp7d6pSn6" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ukPMH2RdHZ3m8" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5EuXvS965BpP" isOverride="false" comment="Can this object be moved by mouse or keyboard.&#xa;        By default, all graphics object types can be moved.&#xa;        For ROI types, setting this to False also sets editMode to False.&#xa;" visibility="public" isInline="false" isSpecification="false" name="canMove" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uqWIECH45reKL" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u2ziG3XVdzKN3" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="canMove" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uaDxeFUQ0o8lA" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uBimuZU9x892h" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubNpXS95eEcm1" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="canEdit" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHVwxZwYsJpNE" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uXT2b173TpuTw" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="canEdit" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uFwutwocRvqEE" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uOYz6fdFAGevb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uThjYVhOpmT46" isOverride="false" comment="Can the object be transformed (rotated/scaled/skewed).&#xa;        By default, objects cannot be transformes, except for being moved&#xa;        around the scene (see &quot;canMove&quot;).&#xa;        However, non-cursor objects can be rotated/scaled/skewed&#xa;        when this property is set to &quot;True&quot;&#xa;" visibility="public" isInline="false" isSpecification="false" name="canTransform" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIBqUVZpdssEw" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="up0oH9JMPPEre" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="canTransform" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uf62ok9N1wXcp" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ueSfufz3ot1XD" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZPbByBYHb6rE" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="autoLabel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ucG93L0O2QTJc" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uGVu43indyhrn" isOverride="false" comment=" NOTE: 2017-06-26 22:48:53  immutable properties ###" visibility="public" isInline="false" isSpecification="false" name="autoLabel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5RdFrWkMzPoW" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uPDK28L9IVMCq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uH3KalzhzBge1" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="objectType" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uekCuESsVmBcY" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5SuLjrgSZMiQ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="urslGKTetnBDW" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uMpRh5NEtGPf8" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isLineCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ujgKbVEdzowTs" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ueTSa8Ixl9VN8" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isShapedCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9xyray8BJhVH" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6tSv69buBT4q" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isVerticalCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uJ7r9gQsF7Vh3" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uc7pFyFvDpsJK" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isHorizontalCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uDBohQocUrYTu" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubMmUcJ4hSAb9" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isCrosshairCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uSobIkdCoZ5gF" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uehQPpfn23EDR" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isPointCursor" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ujLfTBitLF9K8" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uG3m21EVNZZDN" isOverride="false" comment="All non-cursor types&#xa;" visibility="public" isInline="false" isSpecification="false" name="isShapeObject" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uHG20oYfxVYG8" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u34AEqeW8ZeHs" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isROI" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uQgPL7v7V2bZb" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uSikH2TzVCIJK" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isPolygonal" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uFsDmY4A9iuQ3" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uhuW3xhdj58SR" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isLinear" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwkOktVMRcTRu" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uOghKV1oGisaC" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isBasicShape" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uDHQbTman2DCl" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uG7RBlyn2Opaa" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isCommonShape" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="urh5rIfUwV88W" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="undDmqwCn5Bh1" isOverride="false" comment="Alias to self.isROI&#xa;" visibility="public" isInline="false" isSpecification="false" name="isGeometricShape" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzaLBY36nJqow" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3Ph8OONoPQ4Z" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isPoint" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwcUyrZ8e9Uwk" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uomitAmzisCHD" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isPolygon" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzsMNhljAPAef" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNW0mNbIoNxva" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isRectangle" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uAPkaRQiHHWY7" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uSkD2oY68YGrr" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isLine" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uhi1jAw5pGwZW" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uE5RNHYz9eUrr" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isEllipse" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uMQwli6eKOc2Z" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4iuxd102I2jX" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="isPath" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5jRlUwp675Ny" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uGUiLN2HicQQO" isOverride="false" comment="@property&quot;def&quot; graphicsItem(self):&quot;&quot;&quot;Same as self.shapedItem()&quot;&quot;&quot;return self._graphicsShapedItem" visibility="public" isInline="false" isSpecification="false" name="isText" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ueaCQeamxPj1r" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uU2mj5qTdb8Ho" xmi.id="uUuHiQaBfROTM" visibility="public" isSpecification="false" name="" discriminator="" child="uMFxLQJg04J4c"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uzjBC0Nw3kO38" comment="    DEPRECATED&#xa;    Use ItemsListDialog&#xa;" visibility="public" isSpecification="false" name="ColorMapList" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uWikOdL0FhNeL"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uMP6RXAzPpOAF" ownerScope="classifier" visibility="public" initialValue="QtCore.pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="itemSelected"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJQuU5eVwteXs" isOverride="false" comment=" wrong:self.connect(self, SIGNAL(&quot;itemClicked('qt.QListWidgetItem')&quot;), self.mySlot);" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuJj7IqhmFiWz" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uM6ed9aApPdaQ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uP1j5uhqE2qnm" isOverride="false" comment="self.itemsList = itemsList don't use validate as this overrides a QWidget method and breaks the dialog code below" visibility="public" isInline="false" isSpecification="false" name="setItems" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuwLy6jg2OPNx" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uFwxPkntYg3PY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="itemsList"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uuMwjgZgGn8vL" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="validateItems" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uqd0bQpL1CNRz" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uj6JZliOZdHVi" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="itemsList"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uSmtNeIAroI4C" isOverride="false" comment=" this is a QString !!!print(item.text())" visibility="public" isInline="false" isSpecification="false" name="selectItem" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uGbigYrvlEdPN" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ubOhAkV17yEDY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufIkKXKBExQTR" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="selectAndGo" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uqwBD618L4Eaz" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uzsVJIg8o4arj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="ut4ge5Dgls3YX" xmi.id="uWikOdL0FhNeL" visibility="public" isSpecification="false" name="" discriminator="" child="uzjBC0Nw3kO38"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uHJDjScV7qP2b" visibility="public" isSpecification="false" name="ItemsListDialog" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ud6PBl4mKBAND"/>
        <UML:Generalization xmi.idref="uU4L7bDbj3hHT"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uMgJlZbcBXsf2" ownerScope="classifier" visibility="public" initialValue="QtCore.pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="itemSelected"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uDQDyus9o0BRq" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usGJjdQnEvCPq" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u3l06Gslrw75r" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uDxZPDMmiB9C6" isOverride="false" comment=" 2016-08-10 11:51:07 NOTE: in python3 all str are unicode" visibility="public" isInline="false" isSpecification="false" name="validateItems" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9taTeqODAMMN" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uLrhCMZxzGwK5" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="itemsList"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="utu9jpHn9B6g6" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="selectionMode" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uMpS1MJiuZNcS" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uXzLErCuzRlcc" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="selectionMode" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uYaw3s92YHahc" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uL46HzZnjO1QC" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="selectmode"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uiuIKCM2layrU" isOverride="false" comment="Populates the list dialog with a list of strings :-)&#xa;        &#xa;        itemsList: a python list of python strings :-)&#xa;print(itemsList) 'cause it may have been set up in c'torself.listWidget.setMinimumWidth(self.listWidget.sizeHintForColumn(0))self.updateGeometry()" visibility="public" isInline="false" isSpecification="false" name="setItems" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usFfQDpl0eiey" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uhYtpHlDogRGy" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="itemsList"/>
          <UML:Parameter xmi.id="u3PES5X14NHfE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="preSelected"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLLVIeKAF6AI5" isOverride="false" comment=" this is a QString !!!" visibility="public" isInline="false" isSpecification="false" name="selectItem" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ufuom2FKkhcwW" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uJ707hAyFg2JE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ufKNkd3OFFJD4" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="selectedItems" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uGEEhHtKK52hB" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u6udzdnTd1Wa5" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="selectedItem" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6xUKI4mphNZG" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u4UZ8a2vXiSGn" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="selectAndGo" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uxBHJrGmfkQlp" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uNrf5kyTkF0DG" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="ud3yEVK8vtvhN" xmi.id="ud6PBl4mKBAND" visibility="public" isSpecification="false" name="" discriminator="" child="uHJDjScV7qP2b"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uoqlsPm2MZSEK" visibility="public" isSpecification="false" name="Ui_ItemsListDialog" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="uoqlsPm2MZSEK" xmi.id="uU4L7bDbj3hHT" visibility="public" isSpecification="false" name="" discriminator="" child="uHJDjScV7qP2b"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u1GpxzbLkdUgW" visibility="public" isSpecification="false" name="FileDialog" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uiqwk3RzW3CVT"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uaqfPhIFUeOb3" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="unxSxLZdOuZiu" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ucia7ACCSW6ZR" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uynQkxXJx13qR" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
          <UML:Parameter xmi.id="uxetJwP18gGIA" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="filter"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uOfQKtI4Gk28P" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="text" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uhBZtOTrj3NeO" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3CUNoNBwbxi2" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setFocus" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6OaZKE45nS45" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="us9YseioI9TgM" visibility="public" isSpecification="false" name="QFrame" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="us9YseioI9TgM" xmi.id="uiqwk3RzW3CVT" visibility="public" isSpecification="false" name="" discriminator="" child="u1GpxzbLkdUgW"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uJeT2th1v2L4e" visibility="public" isSpecification="false" name="InputFile" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="usGEAwSb6cXdM"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uQFskaXhMcR5b" isOverride="false" comment="self.connect(self.filebrowser, SIGNAL(&quot;clicked()&quot;), self.browse)" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="unO8RPPsTKLVi" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uLkmh4UqTjvzY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="upDKMlccuyDT8" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
          <UML:Parameter xmi.id="u0K9AF4uEMDY7" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="filter"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uQPDD9u1rxVtu" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="browse" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uaA4Uklmsc0ai" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uXpHZVhR5bx7z" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="validate" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZ9aA79GrXpuj" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u1GpxzbLkdUgW" xmi.id="usGEAwSb6cXdM" visibility="public" isSpecification="false" name="" discriminator="" child="uJeT2th1v2L4e"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uzqQqdwGP0i2y" visibility="public" isSpecification="false" name="OutputFile" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uM5YY2dSfA6jL"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u313toaO7cHuJ" isOverride="false" comment="self.connect(self.filebrowser, SIGNAL(&quot;clicked()&quot;), self.browse)" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uigw1yMs9Bmp5" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uROdhLnodKy3R" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uqBHlgsCKwnk0" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
          <UML:Parameter xmi.id="uaY4hj7mPChr4" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="filter"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLGfacuoouwbL" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="browse" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uCqkqzUEvv1h6" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uACDBZuoGTWTN" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="validate" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ure25Ift0r1QT" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u1GpxzbLkdUgW" xmi.id="uM5YY2dSfA6jL" visibility="public" isSpecification="false" name="" discriminator="" child="uzqQqdwGP0i2y"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uBZy6wG7Ry1Hv" visibility="public" isSpecification="false" name="_OptionalValueInput" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uAuku11tj2oh1"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uGg5z7QQ2e9sS" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1eKZrmrM74PT" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="udZ1xydwNhuks" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uUhNXTdZqnEZ1" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBPlXxuSmmDg4" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setFocus" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uIHFTO5K3Uym4" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uhQATuUbvhpo3" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setValue" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5RAO1zISnNlK" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uf1IWZ0jqljtO" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="text"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ugD0h4mno1vfX" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="value" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uMQjYYHZQsMAU" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uTNGKwnwzc9LW" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="text" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="um82kW3znmUV9" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujkD2i8YuYENH" isOverride="false" comment="QtCore.QString(&quot;Field '%1' must contain &quot;+self._mustContain).arg(self.label.text()))QtCore.QString(&quot;Field '%1' value must be >= &quot;+str(self.min)).arg(self.label.text()))QtCore.QString(&quot;Field '%1' value must be &lt;= &quot;+str(self.max)).arg(self.label.text()))" visibility="public" isInline="false" isSpecification="false" name="validate" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u7ZQ5d6npYNlE" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="us9YseioI9TgM" xmi.id="uAuku11tj2oh1" visibility="public" isSpecification="false" name="" discriminator="" child="uBZy6wG7Ry1Hv"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uW15xZpGffUdU" visibility="public" isSpecification="false" name="OptionalIntegerInput" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uGHlyMw1R5Cgg"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uhYXaunqVjMsZ" ownerScope="classifier" visibility="protected" initialValue="QtGui.QIntValidator" type="ubge0kexwrzQa" isSpecification="false" name="QValidator"/>
        <UML:Attribute xmi.id="u3z9nPL4ttE6v" ownerScope="classifier" visibility="protected" initialValue="int" type="ubge0kexwrzQa" isSpecification="false" name="text2Value"/>
        <UML:Attribute xmi.id="um3OGDoCrsfFV" ownerScope="classifier" visibility="protected" initialValue="&quot;an integer&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="mustContain"/>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uBZy6wG7Ry1Hv" xmi.id="uGHlyMw1R5Cgg" visibility="public" isSpecification="false" name="" discriminator="" child="uW15xZpGffUdU"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uO0i0KRRWIWHs" visibility="public" isSpecification="false" name="IntegerInput" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uSWpvqNJkzQPe"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNxhXL5Q6PU1k" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="value" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1aRNJcYmnvVB" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uW15xZpGffUdU" xmi.id="uSWpvqNJkzQPe" visibility="public" isSpecification="false" name="" discriminator="" child="uO0i0KRRWIWHs"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="udf4UFGE0Jity" visibility="public" isSpecification="false" name="OptionalFloatInput" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uOyddeGKXbyl2"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uWYdhPr7pKz7Q" ownerScope="classifier" visibility="protected" initialValue="QtGui.QDoubleValidator" type="ubge0kexwrzQa" isSpecification="false" name="QValidator"/>
        <UML:Attribute xmi.id="ufg04Cg8u0d7t" ownerScope="classifier" visibility="protected" initialValue="float" type="ubge0kexwrzQa" isSpecification="false" name="text2Value"/>
        <UML:Attribute xmi.id="ulUsDeN9pdt4p" ownerScope="classifier" visibility="protected" initialValue="&quot;a float&quot;" type="u6qsmeTRUEKLt" isSpecification="false" name="mustContain"/>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uBZy6wG7Ry1Hv" xmi.id="uOyddeGKXbyl2" visibility="public" isSpecification="false" name="" discriminator="" child="udf4UFGE0Jity"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="usi3m0ODGV64x" visibility="public" isSpecification="false" name="FloatInput" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uRmBdToSgu0QD"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uENNlHrmYacQH" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="value" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uTRRRwVh5eJBj" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="udf4UFGE0Jity" xmi.id="uRmBdToSgu0QD" visibility="public" isSpecification="false" name="" discriminator="" child="usi3m0ODGV64x"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u9BE3YCkjlMVJ" visibility="public" isSpecification="false" name="OptionalStringInput" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uhI2SAzkMzZ96"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u81gnUrkL1QhS" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPYHXGbzUY7OV" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ull2LAxpMJ1K8" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uExlc7i42j7Hq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJO6EjS44unMc" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setFocus" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uRsatGOyappmK" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ugLfYAEcKLXbs" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="setText" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uJxDJyNKvRvlI" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ukYEk0EcojPyL" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="text"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uY1Z19Ld0gyNr" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="text" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uAM2WziXts7Mk" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uQqaqQDYBudth" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="unicode" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uuIWWLoX9sMMt" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="us9YseioI9TgM" xmi.id="uhI2SAzkMzZ96" visibility="public" isSpecification="false" name="" discriminator="" child="u9BE3YCkjlMVJ"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uP9AVZNgRYEUu" visibility="public" isSpecification="false" name="StringInput" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uk3kT8xr3b9WS"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="umA0URd0ZOt7j" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="umzlSYq67cinT" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uKHJnDlzJ69S6" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uYNg2hg1LwYJa" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uPWukG6XDmtEP" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="validate" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uALRjbg3QbBiR" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="u9BE3YCkjlMVJ" xmi.id="uk3kT8xr3b9WS" visibility="public" isSpecification="false" name="" discriminator="" child="uP9AVZNgRYEUu"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uuRiAN5vXYqz4" visibility="public" isSpecification="false" name="CheckBox" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="un9M913RsGy6a"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="us2wDdLG9Bc51" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uSAvDvGliuTQq" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uPxWhWXyqBf5P" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uKSlPAUhmBEkX" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uRaQH1deA0ZCt" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="selection" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="udxdO1yUUSM08" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uMKlw12GXcn3O" xmi.id="un9M913RsGy6a" visibility="public" isSpecification="false" name="" discriminator="" child="uuRiAN5vXYqz4"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="usgaNsUKeNBUG" visibility="public" isSpecification="false" name="Choice" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uOWilITDOR2ib"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uNa9R2ej2Ntk4" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uYKIJEcPB07c6" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uZMBXpGpjoyDb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uPRCe1BwuAFfV" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
          <UML:Parameter xmi.id="uYpacdwgKmFFZ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="vertical"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="urJQ8jxiQbqlK" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="addButton" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="unYgUrfQrYzuI" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u7dFK4jWuz6rt" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
          <UML:Parameter xmi.id="uaT6AZxDA4WlP" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="result"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ueaXxcbE61X4Q" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="addSpacing" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uteoXCY6uvw0x" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uE7Bdx9Fbi6hB" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="spacing"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uhOqA8w1ZZqWT" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="selectButton" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u4kdGWhH60FiQ" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uDh22tHUdot6n" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="index"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uH3L6Nm1AP4lG" isOverride="false" comment=" should never happen" visibility="public" isInline="false" isSpecification="false" name="selection" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uBoElZHbw7etV" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="us9YseioI9TgM" xmi.id="uOWilITDOR2ib" visibility="public" isSpecification="false" name="" discriminator="" child="usgaNsUKeNBUG"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="ulJBJAx5u7yWK" visibility="public" isSpecification="false" name="HChoice" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uMRSmPRVsSsP4"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujek1AJ0sFcwt" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPLvuaTiTBc1S" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uAxCw3ipT9RQF" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uEHW9KotL1mVZ" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="usgaNsUKeNBUG" xmi.id="uMRSmPRVsSsP4" visibility="public" isSpecification="false" name="" discriminator="" child="ulJBJAx5u7yWK"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uDAzkx47H2HUX" visibility="public" isSpecification="false" name="VChoice" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ukggxtymgSgtN"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ul1UBeTx8NMTq" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uWmbzIAXSq3qu" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uPF2eJqc2ecUq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uTpqP6bkkH3fr" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="usgaNsUKeNBUG" xmi.id="ukggxtymgSgtN" visibility="public" isSpecification="false" name="" discriminator="" child="uDAzkx47H2HUX"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uevtRbb5EZbra" visibility="public" isSpecification="false" name="DialogGroup" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="ulsg2p5COmlgc"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uogSfCwiWZTzR" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="utKSxjUdUEspI" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uFFzrxFR8Dfa1" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uGHKyIGNJv9xz" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="vertical"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uyNcvSJnbFM2o" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="addWidget" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uYdhis99cpbvX" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uQvgXWVckG3xD" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="widget"/>
          <UML:Parameter xmi.id="udHuWBS8N9CkD" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="stretch"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uXlrJsXrzcYgJ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="addSpacing" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ulpiDS8GIZmXP" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ue9Nv9msq8i6Y" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="spacing"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u93shnSpjlEku" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="addStretch" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZahdE6PaR2qb" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uQYP2aRFlNtRq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="stretch"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uU3SLR5D7Okag" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="addLabel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u9FPs7sYYhOH6" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u8B8e8VJV5tRq" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="labelString"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ulbjhh2CxzMJL" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="validate" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzwyVGyvPpJ8p" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="us9YseioI9TgM" xmi.id="ulsg2p5COmlgc" visibility="public" isSpecification="false" name="" discriminator="" child="uevtRbb5EZbra"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uiuBnqKx7BzWY" visibility="public" isSpecification="false" name="HDialogGroup" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uo0Y8ml7FDcxQ"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uzLhbt30QVmSD" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uKmpKnb3eILm8" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uxmE7cWQrsApH" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uevtRbb5EZbra" xmi.id="uo0Y8ml7FDcxQ" visibility="public" isSpecification="false" name="" discriminator="" child="uiuBnqKx7BzWY"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uuSfpnDAuxIzw" visibility="public" isSpecification="false" name="VDialogGroup" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="u4HxVeiywXR4f"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uy0b6T8kXvNq0" isOverride="false" comment="class DialogStack(qt.QWidgetStack):    def __init__(self, parent, widgetMapping = None):        qt.QWidgetStack.__init__(self, parent)        parent.addWidget(self)        self.widgetMapping = widgetMapping        self.size = 0                def raiseWidget(self, index):        if self.widgetMapping:            qt.QWidgetStack.raiseWidget(self, self.widgetMapping[index])        else:            qt.QWidgetStack.raiseWidget(self, index)    def addWidget(self, widget):        qt.QWidgetStack.addWidget(self, widget, self.size)        self.size = self.size + 1            def validate(self):        try:            return self.visibleWidget().validate()        except AttributeError:            pass TODO FIXME: when using my custom QValidator python (or pyqt5) crashes with TypeError: invalid result from VarNameValidator.validate()" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uc6FGHPtBrrm3" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uVn5IJFyFfTSs" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uevtRbb5EZbra" xmi.id="u4HxVeiywXR4f" visibility="public" isSpecification="false" name="" discriminator="" child="uuSfpnDAuxIzw"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uaBeLBvPyQNKP" visibility="public" isSpecification="false" name="VariableNameStringInput" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uZo5kcf7PdR3E"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ugn7c8OYqLYdL" isOverride="false" comment="self.variable.setValidator(VariableNameStringInput.VarNameValidator(self))" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ugZlekfq3aVel" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uKfdnG9OzefUi" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="usfZSnlFhCiLB" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="label"/>
          <UML:Parameter xmi.id="uxXYxNU9hZHxR" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="ws"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ulc9OJIBrkxMU" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="validate" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u1053Q0BbdrfV" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
       <UML:Namespace.ownedElement>
        <UML:Class namespace="uaBeLBvPyQNKP" isLeaf="false" isAbstract="false" xmi.id="uoza88MnpTKSY" comment="Cezar M. Tigaret&#xa;" visibility="public" isSpecification="false" name="VarNameValidator" isRoot="false">
         <UML:GeneralizableElement.generalization>
          <UML:Generalization xmi.idref="u8Hp4Acm1Y4M3"/>
         </UML:GeneralizableElement.generalization>
         <UML:Classifier.feature>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u20kBax7jTzgt" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="ueQEqEaD4bkKu" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="ujUXra7jTvLDY" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uepp4HRgdXL3k" isOverride="false" comment="if s[0:pos].isidentifier() and not keyword.iskeyword(s[0:pos]):ret = QtGui.QValidator.Intermediateelse:ret = QtGui.QValidator.Invalid" visibility="public" isInline="false" isSpecification="false" name="validate" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="uNz1OwcpsxBCj" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="uSib5OMUeGieS" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="s"/>
            <UML:Parameter xmi.id="uCId7DNXttrcm" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pos"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
          <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uAeoV5kLFcgML" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="fixup" isRoot="false" isVirtual="false">
           <UML:BehavioralFeature.parameter>
            <UML:Parameter xmi.id="u2vSu9YjXd6J2" type="u6qsmeTRUEKLt" kind="return"/>
            <UML:Parameter xmi.id="u27y6OotN5pL3" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="s"/>
           </UML:BehavioralFeature.parameter>
          </UML:Operation>
         </UML:Classifier.feature>
        </UML:Class>
       </UML:Namespace.ownedElement>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uP9AVZNgRYEUu" xmi.id="uZo5kcf7PdR3E" visibility="public" isSpecification="false" name="" discriminator="" child="uaBeLBvPyQNKP"/>
      <UML:Generalization namespace="Logical_View" parent="ugnrRc9W0YXIf" xmi.id="u8Hp4Acm1Y4M3" visibility="public" isSpecification="false" name="" discriminator="" child="uoza88MnpTKSY"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uDDesxnuMaWqW" visibility="public" isSpecification="false" name="QuickDialog" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uquy4sHtw0GaL"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uP04JkeryxVIo" isOverride="false" comment="self.setOrientation(QtCore.Qt.Vertical)" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPHNTz2wSjkXU" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="utme9xhS5UblW" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
          <UML:Parameter xmi.id="uHZNIDBnV6aIS" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="title"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uIYRjEtT4V6fP" isOverride="false" comment="self.connect(self.buttons.Cancel, SIGNAL(&quot;clicked()&quot;), self.reject)self.connect(self.buttons.OK, SIGNAL(&quot;clicked()&quot;), self.tryAccept)" visibility="public" isInline="false" isSpecification="false" name="insertButtons" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uwCBCdxOeXT1p" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ud25fAyABicLQ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="addWidget" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVe49Oou95FAB" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uecJX7c96Azzz" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="widget"/>
          <UML:Parameter xmi.id="uj1pfR59V0cAj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="stretch"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uh3ejQUPAWCE5" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="addSpacing" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uFAcut4QbkaaP" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uZ4aEjyUlNem4" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="spacing"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uiwvVJrV4qmuQ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="addStretch" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u13Np24z6gQpp" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ucDEleDZ0kcid" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="stretch"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uHyKU2xRUVxyJ" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="addLabel" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uoMBxvO5zfuyp" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uelOmQkepH6qi" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="labelString"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uX5k2LiLXYeqq" isOverride="false" comment="self.help = qt.QVBox(self)self.help.text = QtCore.QtextEdit(self.help)" visibility="public" isInline="false" isSpecification="false" name="setHelp" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPRwcM6vGi0gz" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uD3YTTpjmzNmT" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="*"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uqdlSntGnoOhN" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="tryAccept" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZdY6HoVBdNob" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="ud3yEVK8vtvhN" xmi.id="uquy4sHtw0GaL" visibility="public" isSpecification="false" name="" discriminator="" child="uDDesxnuMaWqW"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uyQnH1v8ZlFKH" visibility="public" isSpecification="false" name="QMainWindow" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="uyQnH1v8ZlFKH" xmi.id="ub2h9yqTH9cwW" visibility="public" isSpecification="false" name="" discriminator="" child="uatorjw59LS9K"/>
      <UML:Generalization namespace="Logical_View" parent="uatorjw59LS9K" xmi.id="uUsQUf7v81Fda" visibility="public" isSpecification="false" name="" discriminator="" child="uQdQqyD0urQhR"/>
      <UML:Generalization namespace="Logical_View" parent="ucXsHb6NzgfI1" xmi.id="ubhi6TmSxtuUp" visibility="public" isSpecification="false" name="" discriminator="" child="upKtpGmkDowm6"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uCPiwu64w67a9" visibility="public" isSpecification="false" name="SignalViewer" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="u0iZzAPVT6MQh"/>
        <UML:Generalization xmi.idref="utYfwKOuX2QOt"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="ufaMorxE94u5s" ownerScope="classifier" comment="dockedWidgetsNames = [&quot;coordinatesDockWidget&quot;]" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_activated"/>
        <UML:Attribute xmi.id="uEMRiQGwTwffv" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="closeMe"/>
        <UML:Attribute xmi.id="uEF2LV4jOFtvV" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="frameChanged"/>
        <UML:Attribute xmi.id="urjXJIQhepNQc" ownerScope="classifier" comment="implement viewing for all these" visibility="public" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="supported_types"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uK0qgrKGnbezY" isOverride="false" comment="SignalViewer constructor.&#xa;print(&quot;SignalViewer *args&quot;, args)print(&quot;SignalViewer **kwargs&quot;, kwargs) maps item row position to name a dict of SignalCursors mapping str name to cursor object maps signal name with list of cursors NOTE: 2019-03-08 13:20:50 map plot item index (int) with list of cursors NOTE: 2017-05-10 22:57:30 these are linked cursors in the same windowself._current_frame_index_ = 0 NOTE: 2017-04-08 23:00:48 in effect number of signals /frame !!!self.nonSignalAnnotations = None to avoid over-creating linear region items map epoch name (str) to a dict with:   &quot;epoch&quot; -> Epoch    &quot;axes&quot;  -> dict:       &quot;plotitem&quot; -> list of LinearRegionItem objects (NOTE: neo.Epoch objects are NOT hashable, but PlotItem objects are) to select signals via GUI (comboboxes at bottom of main window); signal indices in collection signal indices in collection which analog signals do we actually plot? which irregular signals do we actually plot? axes where overlaid plots are shown NOT the same with special neo data structure overlays! NOTE: 2017-11-16 14:26:59 these overlays are for special neo data structures (epoch, spike trains, events) and not to be used for general purpose overlays such as  overlaid signals (viewed throgh self.overlay()) overlays for special neo data structures NOTE: 2019-04-28 18:03:20 contrary to online documentation for pyqtgraph 0.10.0, the source code indicates that LinearRegionItem constructor only accepts &quot;brush&quot;; &quot;pen&quot; must be delivered direcly to the LinearRegionItem's lines (the item's &quot;lines&quot; attribute) also, there is no mention of &quot;hoverBrush&quot; or &quot;hoverPen&quot; anywhere in the source code for LinearRegionItem or its superclass UIGraphicsItem in fact, hovering just modifes the brush by doubling its alpha value for future use, maybe (see NOTE: 2019-04-28 18:03:20) NOTE: 2019-04-28 18:03:20 contrary to online documentation for pyqtgraph 0.10.0, the source code indicates that LinearRegionItem constructor only accepts &quot;brush&quot;; &quot;pen&quot; must be delivered direcly to the LinearRegionItem's lines (the item's &quot;lines&quot; attribute) also, there is no mention of &quot;hoverBrush&quot; or &quot;hoverPen&quot; anywhere in the source code for LinearRegionItem or its superclass UIGraphicsItem in fact, hovering just modifes the brush by doubling its alpha valueself.train_plot_options[&quot;train_brush&quot;] = None# for future use, maybe (see NOTE: 2019-04-28 18:03:20)self.train_plot_options[&quot;train_hoverPen&quot;] = Noneself.train_plot_options[&quot;train_hoverBrush&quot;] = Noneself.train_plot_options[&quot;trains_color_set&quot;] = [(255, 0, 0, 50),(0, 255, 0, 50),(0, 0, 255, 50),(255, 255, 0, 50),(255, 0, 255, 50),(0, 255, 255, 50)]# prepend black to the default color cycle000000&quot;] + [&quot;b&quot;, &quot;r&quot;, &quot;g&quot;, &quot;c&quot;, &quot;m&quot;, &quot;y&quot;]  + self._mpl_prop_cycle_.by_key()['color']C173B088&quot;, &quot;horizontal&quot;:&quot;#B1D28F88&quot;, &quot;vertical&quot;:&quot;#ff007f88&quot;}self.cursorColors = {&quot;crosshair&quot;:&quot;#C173B088&quot;, &quot;horizontal&quot;:&quot;#B1D28F88&quot;, &quot;vertical&quot;:&quot;#F2BB8888&quot;}self.linkedCursorColors = {&quot;crosshair&quot;:&quot;#B14F9A88&quot;, &quot;horizontal&quot;:&quot;#77B75388&quot;,&quot;vertical&quot;:&quot;#F29B6888&quot;}print(&quot;SignalViewer.__init__ self._winTitle_: &quot;, self._winTitle_)super(SignalViewer, self).__del__() a dict of SignalCursors mapping str name to cursor objectfor k in range(self.annotationsViewer.topLevelItemCount()):for kc in range(self.annotationsViewer.topLevelItem(k).childCount()):self.annotationsViewer.collapseItem(self.annotationsViewer.topLevelItem(k).child(kc))self.annotationsViewer.collapseItem(self.annotationsViewer.topLevelItem(k))data is a sequence of neo signals&#xa;        also updates the _plotted_analogsignal_index or _plotted_irregularsignal_index&#xa;        analog: boolean;&#xa;            True (default) => deal with the analog signal combobox&#xa;            False => deal with the irregularly sampled signals combobox&#xa; NOTE: 2019-01-28 12:04:53 one could &quot;automagically&quot; select which combobox to use, this has flaws (what if data is a mix of both?) better to force this choice by a parameter call NOTE: 2019-01-28 12:49:20 there is the possibility that some previous multiple choices were made for lists of numpy vectors or VigraKernel1D objects numpy array or Kernel1D the number of signals is different that what the combobox knows about we have to repopulate it some old names in the choice list are missing from data new names in data not present on old choice list current list of names in data now, if there WAS a combobox choice before, apply it to the new contents NOTE: 2019-01-28 15:06:06 &quot;prefilter with whatever signal selection was passed as the &quot;signals&quot; argument to &quot;plot()&quot; function OK now get the actual selection: cache previous choices (deep copy) CAUTION commandSigIndex is NOT a reference! is a POD type no choice before, or &quot;All&quot; selected: either choose what was passed on the command line and set up combobox accordingly, or fallback ot select all signals index not valid &quot;Choose&quot; &quot;All&quot; &quot;Choose&quot; &quot;All&quot; &quot;Choose&quot; &quot;All&quot; select all signals (fallback) choices were made from gui; disregards the &quot;signals&quot; and &quot;irregularsignals&quot; parameters passed to the plot() function here, prevSignalNdx > 0 and prevSignalNdx &lt;= len(currentlyAvailableChoices) - 1 is True previously selected signal name found in the current list of signal names, OR &quot;Choose&quot; was selected => get its index from the current combobox list and select it NOTE will deal with pre-selected choices below previously selected signal name not found, (because it has been renamed, or because it has been removed) AND &quot;Choose&quot; was not selected previously =>  1) if index is suitable, use the signal at THAT index,   whatever that signal is 2) if index is unsuitable then fallback to &quot;All&quot; NOTE: suitable index is any int > 0 and &lt; index of &quot;Choose&quot; because signalChoiceList is a reference because signalChoiceNames is a reference also a referenceprint(&quot;signalChoiceList&quot;, signalChoiceList)print(&quot;signalChoiceNames&quot;, signalChoiceNames)print(&quot;signal_indices_to_plot&quot;, signal_indices_to_plot)data can be: neo.Segment, or a sequence of signals,&#xa;        or a signal:&#xa;            neo.AnalogSignal&#xa;            neo.IrregularlySampledSignal&#xa;            datatypes.DataSignal&#xa;            numpy.ndarray&#xa;            vigra.Kernel1D&#xa; the actual layout of the plot items (pyqtgraph framework)self.viewerWidgetLayout.addWidget(self.fig)### BEGIN set up annotations dock widgetprint(&quot;_configureGUI_ sets up annotations dock widget&quot;)print(&quot;_configureGUI_ sets up annotations dock widget action&quot;)### END set up annotations dock widget### BEGIN set up coordinates dock widgetprint(&quot;_configureGUI_ sets up coordinates dock widget&quot;)print(&quot;_configureGUI_ sets up coordinates dock widget action&quot;)self.coordinatesDockWidget.visibilityChanged[bool].connect(self._slot_dock_visibility_changed_)### END set up coordinates dock widgetprint(&quot;_configureGUI_ sets up dock widget actions menu&quot;)self.showAnnotationsDockWidgetAction = self.annotationsDockWidget.toggleViewAction()self.showAnnotationsDockWidgetAction.setCheckable(True)self.showAnnotationsDockWidgetAction.setChecked(True)self.showAnnotationsDockWidgetAction.toggled[bool].connect(self.slot_displayDockWidget)self.showAnnotationsDockWidgetAction.triggered.connect(self.slot_displayDockWidget)self.showAnnotationsDockWidgetAction = self.docksMenu.addAction(&quot;Annotations&quot;)self.showAnnotationsDockWidgetAction.triggered.connect(self.slot_dockWidgetRequest)self._show_dock_actions_[self.annotationsDockWidget.objectName()] = self.showAnnotationsDockWidgetActionself.showCoordinatesDockWidgetAction = self.coordinatesDockWidget.toggleViewAction()self.showCoordinatesDockWidgetAction.setCheckable(True)self.showCoordinatesDockWidgetAction.setChecked(True)self.showCoordinatesDockWidgetAction.toggled[bool].connect(self.slot_displayDockWidget)self.showCoordinatesDockWidgetAction.changed.connect(self.slot_dockWidgetRequest)self.showCoordinatesDockWidgetAction.triggered[bool].connect(self.slot_displayDockWidget)self._show_dock_actions_[self.coordinatesDockWidget.objectName()] = self.showCoordinatesDockWidgetActionfor action in self._show_dock_actions_.values():self.docksMenu.addAction(action)#action.toggled[bool].connect(self.slot_displayDockWidget)#print(&quot;_configureGUI_ adds dock widget actions menu to the menu bar&quot;)#print(&quot;_configureGUI_ widget actions menu added to the menu bar&quot;)Add a cursor to the selected axes in the signal viewer window.&#xa;        &#xa;        Requires that there is at least one Axis object in the figure, hence it rewuires some data &#xa;        to be plotted first.&#xa;        &#xa;        Arguments:&#xa;        cursorType : str, one of &quot;c&quot;, &quot;v&quot; or &quot;h&quot; respectively, for crosshair, vertical or &#xa;                    horizontal cursors; default is &quot;c&quot;&#xa;                    &#xa;        where      : None, float (for vertical or horizontal cursors) or two-element &#xa;                    sequence of floats for crosshair cursors&#xa;                    when None, the cursor will be placed in the middle of the axes&#xa;                    &#xa;        hWin    : None or float with the horizontal size of the cursor window&#xa;                    (skipped for horizontal cursors)&#xa;                    &#xa;        vWin    : as hWin; skipped for vertical cursors&#xa;        &#xa;        label      None, or a str; is None, the cursor will be assigned and ID composed of &#xa;                    &quot;c&quot;, &quot;v&quot;, or &quot;h&quot;, followed by the current cursor number of the same type&#xa;        &#xa;        It is recommended to pass arguments as keyword arguments for predictable behavior.&#xa;        &#xa;        cursorType -- char &quot;c&quot; (default), &quot;h&quot; or &quot;v&quot; respectively, for crosshair, &#xa;                      horizontal or vertical cursor&#xa;                      &#xa;        hWin, vWin = float scalars with the horizontal and vertical window size for the cursor&#xa;        &#xa;        where = float scalar  or two-element (list, tuple, numpy ndarray) with cursor coordinate(s)&#xa;        &#xa; removes dynamic cursor -- practically one can only have at most one  dynamic cursor at any timeself.dynamicCursorStatus.clear()Removes whatever cursors are already there then add new ones from the arguments.&#xa;        cursorType &quot;c&quot; (default), &quot;h&quot; or &quot;v&quot;&#xa;        *where = a sequence of X coordinates&#xa;        Requires at least one Axis object, therefore some data must be plotted first.&#xa;        &#xa;        Arguments:&#xa;        cursorType : string, one of &quot;c&quot; for crosshair, &quot;v&quot; for vertical, &quot;h&quot; for horizontal cursors&#xa;                    -- optional (default is &quot;c&quot;)&#xa;                    &#xa;        where      : comma-separated list or a sequence of cursor coordinates:&#xa;                        * for crosshair cursors, the coordinates are given as two-element tuples;&#xa;                        * for vertical and horizontal cursors, the coordinates are floats&#xa;                    &#xa;        keyword arguments (&quot;name=value&quot; pairs):&#xa;                    hWin = 1D sequence of floats with the horizontal extent of the cursor window&#xa;                        (for crosshair and vertical cursors); must have as many elements as &#xa;                        coordinates supplied in the *where argument&#xa;                    vWin   = as above, for crosshair and horizontal cursors&#xa;                    labels         = 1D sequence of str for cursor IDs; must have as many&#xa;                        elements as supplied through the *where argument&#xa;self._plotOverlayFrame_()def setupLTPCursors(self, LTPOptions, pathway, axis=None):&quot;&quot;&quot; Convenience function for setting up cursors for LTP experiments:Arguments:==========LTPOptions: a dict with the following mandatory key/value pairs:{'Average': {'Count': 6, 'Every': 6},'Cursors': {'Labels':  ['Rbase','Rs','Rin','EPSC0base','EPSC0Peak','EPSC1base','EPSC1peak'],'Pathway0': [0.06,0.06579859882206893,0.16,0.26,0.273,0.31,0.32334583993039734],'Pathway1': [5.06,5.065798598822069,5.16,5.26,5.273,5.31,5.323345839930397],'Windows': [0.01, 0.003, 0.01, 0.01, 0.005, 0.01, 0.005]},'Pathway0': 0,'Pathway1': 1,'Reference': 5,'Signals': ['Im_prim_1', 'Vm_sec_1']}pathway: int = the pathway for which the cursors are shown: can be 0 or 1axis: optional default None: an int index into the axis receiving the cursors(when None, the fist axis i.e. at index 0, is chosen)&quot;&quot;&quot;if axis is not None:if isinstance(axis, int):if axis &lt; 0 or axis >= len(self.axesWithLayoutPositions):raise ValueError(&quot;When specified, axis must be an integer between 0 and %d&quot; % len(self.axesWithLayoutPositions))self.currentAxes = axiselse:raise ValueError(&quot;When specified, axis must be an integer between 0 and %d&quot; % len(self.axesWithLayoutPositions))self.setupCursors(&quot;v&quot;, LTPOptions[&quot;Cursors&quot;][&quot;Pathway%d&quot;%pathway])Add a set of cursors to the selected axes in the SignalViewer window.&#xa;        &#xa;        Requires at least one Axis object, therefore some data must be plotted first.&#xa;        &#xa;        Arguments:&#xa;        cursorType : string, one of &quot;c&quot; for crosshair, &quot;v&quot; for vertical, &quot;h&quot; for horizontal cursors&#xa;                    -- optional (default is &quot;c&quot;)&#xa;                    &#xa;        where      : comma-separated list or a single sequence of cursor coordinates:&#xa;                    for crosshair cursors, the coordinates are given as a two-element tuple&#xa;                    for vertical and horizontal cursors, the coordinates are floats&#xa;                    &#xa;        keyword arguments (&quot;name=value&quot; pairs):&#xa;                    hWin = 1D sequence of floats with the horizontal extent of the cursor window&#xa;                        (for crosshair and vertical cursors); must have as many elements as &#xa;                        coordinates supplied in the *where argument&#xa;                    vWin   = as above, for crosshair and horizontal cursors&#xa;                    labels         = 1D sequence of str for cursor IDs; must have as many&#xa;                        elements as supplied through the *where argument&#xa;@pyqtSlot()@safeWrapperdef slot_dockWidgetRequest(self):actionName = self.sender().objectName()dockName = actionName.split(&quot;_&quot;)[1]signalBlocker = [QtCore.QSignalBlocker(action) for action in self._show_dock_actions_.values()]print(&quot;slot_dockWidgetRequest actionName %s wants to display %s:&quot; % (actionName, dockName), self.sender().isChecked())for dock in self.dockWidgets:if dock[1].objectName() == dockName:dock[1].setVisible(True)dock[1].show()#if self.sender().isChecked():#dock[1].setVisible(True)#dock[1].show()#else:#dock[1].hide()@pyqtSlot(bool)@safeWrapperdef slot_displayDockWidget(self, value=True):actionName = self.sender().objectName()dockName = actionName.split(&quot;_&quot;)[1]print(&quot;slot_displayDockWidget actionName %s wants to display %s:&quot; % (actionName, dockName), value)signalBlocker = [QtCore.QSignalBlocker(action) for action in self._show_dock_actions_.values()]for dock in self.dockWidgets:if dock[1].objectName() == dockName:#print(&quot;slot_displayDockWidget checking dock&quot;, dock[1].objectName())#action = self._show_dock_actions_[dockName]if value:dock[1].setVisible(True)dock[1].show()#action.setChecked(True)else:dock[1].hide()#action.setChecked(False)@pyqtSlot(bool)@safeWrapperdef _slot_dock_visibility_changed_(self, value):dock = self.sender()dockName = dock.objectName()print(&quot;_slot_dock_visibility_changed_ dockName %s:&quot; % dockName, value)if dockName not in self._show_dock_actions_.keys():returnsignalBlocker = [QtCore.QSignalBlocker(action) for action in self._show_dock_actions_.values()]self._show_dock_actions_[dockName].setChecked(dock.isVisible()) data value reporting only makes sense for vertical cursor typesif isinstance(cursor.hostItem, pg.PlotItem) and x is not np.nan:text += &quot;\n&quot;.join(data_text) data value reporting only makes sense for vertical cursor typesif isinstance(cursor.hostItem, pg.PlotItem) and x is not np.nan:if isinstance(plotitem.vb.name, str) and len(plotitem.vb.name.strip()):data_text.append(&quot;%s&quot; % plotitem.vb.name)else:data_x, data_y = dataitems[0].getData()ndx = np.where(data_x >= x)[0]if len(ndx):data_text.append(&quot;Y: %f&quot; % data_y[ndx[0]])elif len(data_text) == 1:plot_item_text.append(data_text[0])else:plot_item_text.append(|)self._cursor_coordinates_text_ = &quot;;&quot;.join(text)statusLabel.setText(&quot;\n&quot;.join(text))statusLabel.clear()TODO call GUI chooser dialog TODO call GUI chooser dialogBidirectionally links cursors of the same type.&#xa;        Linked cursors move together when either of them is moved by the user.&#xa;        Supports single-axis static cursors (which can only be &quot;dragged&quot; around).&#xa;        The axes need not be the same, HOWEVER:&#xa;        &#xa;        a) linked cursors MUST have the same type&#xa;        &#xa;        b) for horizontal cursors&#xa;Unlinks several linked cursors.&#xa;        &#xa;        Either cursor may still be individually linked to other cursors of the same type.&#xa; just unlink ALL linked cursors from any link they may have it is a cursor ID this is a tuple or list of cursor IDs: we unlink id1 from each one, keep their link state unchanged a comma-seprated list of cursor IDs: unlink _ALL_ of them unlink ALL&quot;def&quot; selectCursor(self, ID):self.slot_selectCursor(ID)  syntactic sugar NOTE: makes no sense to add a cursors when there are NO plot items (axes) here  [[xmin, xmax], [ymin, ymax]]  [[xmin, xmax], [ymin, ymax]] because 1st item is the insivible root name scene coordinate system is upside-down!if len(self.allDataCursors) == 0:return FIXME 2017-10-09 22:52:28 what do we do with these?!?axes, _ = zip(*self.axesWithLayoutPositions)d = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Choose cursor to remove&quot;) now, also remove its line2D objects from the axes in case a manual request was made and this happens to be the selected cursor make sure this is a cursor we know about  to update its appearance make sure this is a cursor we know about get the selected cursor if no ID given otherwise try to get cursor with given ID if neither returned a valid cursor, then  use the sender() only when not choosing but if sender is not a cursor then force making a choice we actually did get a cursor in the end,  make sure we also have its idd = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Edit cursor&quot;)d = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Edit cursor %s&quot; % crsId)namePrompt = vigra.pyqt.quickdialog.StringInput(d, &quot;Name:&quot;)promptX = vigra.pyqt.quickdialog.FloatInput(d, &quot;X coordinate:&quot;)promptXWindow = vigra.pyqt.quickdialog.FloatInput(d, &quot;Horizontal window size:&quot;)promptY = vigra.pyqt.quickdialog.FloatInput(d, &quot;Y coordinate:&quot;)promptYWindow = vigra.pyqt.quickdialog.FloatInput(d, &quot;Vertical window size:&quot;)promptX = vigra.pyqt.quickdialog.FloatInput(d, &quot;X coordinate:&quot;)promptXWindow = vigra.pyqt.quickdialog.FloatInput(d, &quot;Horizontal window size:&quot;)promptY = vigra.pyqt.quickdialog.FloatInput(d, &quot;Y coordinate:&quot;)promptYWindow = vigra.pyqt.quickdialog.FloatInput(d, &quot;Vertical window size:&quot;) populate dialog fields w/ data choose cursor as per dialog; otherwise cursor is set above bail out whe a name change is desired this would be different from the cursor's id change cursor id if new name not emptyprint(d.promptX.value(), d.promptXWindow.value())print(&quot;_slot_update_cursor_editor_dlg_ cid&quot;, cid)print(&quot;_slot_update_cursor_editor_dlg_ dialog&quot;, d)print(&quot;_slot_update_cursor_editor_dlg_ cursor&quot;, c) , (&quot;crosshair&quot;):workspace is a dict as returned by globals()&#xa;        TODO&#xa;d = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Attach epoch to data&quot;)epochNamePrompt = vigra.pyqt.quickdialog.StringInput(d, &quot;Epoch Name:&quot;)toCurrentSegmentCheckBox = vigra.pyqt.quickdialog.CheckBox(d, &quot;Current segment only&quot;)overwriteEpochCheckBox = vigra.pyqt.quickdialog.CheckBox(d, &quot;Overwrite existing epochs&quot;)passd = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Make Epoch From Interval Between Cursors:&quot;)namePrompt=vigra.pyqt.quickdialog.StringInput(d, &quot;Name:&quot;)c1Prompt = vigra.pyqt.quickdialog.StringInput(d, &quot;Cursor 1:&quot;)c2Prompt = vigra.pyqt.quickdialog.StringInput(d, &quot;Cursor 2:&quot;)toCurrentSegmentCheckBox = vigra.pyqt.quickdialog.CheckBox(d, &quot;Current segment only&quot;)overwriteEpochCheckBox = vigra.pyqt.quickdialog.CheckBox(d, &quot;Overwrite existing epochs&quot;)self._plotOverlayFrame_()d = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Make Epoch From Interval Between Cursors:&quot;)namePrompt=vigra.pyqt.quickdialog.StringInput(d, &quot;Name:&quot;)c1Prompt = vigra.pyqt.quickdialog.StringInput(d, &quot;Cursor 1 ID:&quot;)c2Prompt = vigra.pyqt.quickdialog.StringInput(d, &quot;Cursor 2 ID:&quot;)d = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Make Epoch From Cursors:&quot;)d.promptWidgets.append(vigra.pyqt.quickdialog.StringInput(d, &quot;Name:&quot;))d = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Make Epoch From Cursor:&quot;)d.promptWidgets.append(vigra.pyqt.quickdialog.StringInput(d, &quot;Name:&quot;))d = vigra.pyqt.quickdialog.QuickDialog(self, &quot;Make Epoch From Interval Between Two Cursors:&quot;)d.promptWidgets.append(vigra.pyqt.quickdialog.StringInput(d, &quot;Name:&quot;))self._plotOverlayFrame_()        Positional parameters:&#xa;        ======================&#xa;        x = data to be plotted, or the data domain, if data is given separatelyt as &quot;y&quot;&#xa;        &#xa;        Named parameters:&#xa;        =================&#xa;        y = None, or data to be plotted; when None, then &quot;x&quot; is taken as the data&#xa;        &#xa;            NOTE: data to be plotted can be one of:&#xa;                neo.Block&#xa;                neo.Segment&#xa;                neo.AnalogSignal&#xa;                neo.IrregularlySampledSignal -- TODO! not implemented yet&#xa;                datatypes.DataSignal&#xa;                numpy array (1D..2D)&#xa;                    1D arrays have shape (n,) or (n,1) where n is the number of samples&#xa;                    &#xa;                vigra.Kernel1D &#xa;                &#xa;        plotStyle = not implemented --  passed on to matplotlib &quot;backend&quot;&#xa;        &#xa;        style = see plotStyle TODO FIXME&#xa;        &#xa;        title = str: window title&#xa;        &#xa;        segments = None (default), a range, slice object, sequence of int, or an int.&#xa;        &#xa;            Used when data to be plotted is a neo.Block, or a sequence of &#xa;            neo.Segment objects.&#xa;            &#xa;            Pre-selects a subset of the Block's segments (or of the segments in &#xa;            the sequence) to be plotted&#xa;            &#xa;            When None: all available segments are plotted one at a time;&#xa;            use the bottom slider/spin box to navigate through the segments.&#xa;            &#xa;            NOTE: Segments can also be pre-selected for plotting outside SignalViewer,&#xa;            then passed to this function as a sequence of segments. &#xa;            &#xa;        signals = None (default), a range, slice object, sequence of int, an int,&#xa;            sequence of str, or a str.&#xa;            &#xa;            Used when data to be plotted is a neo.Block, a neo.Segment, a &#xa;            sequence of neo.Segment objects, or a sequence of neo.AnalogSignal &#xa;            or datatypes.DataSignal objects:&#xa;            &#xa;            Pre-selects a subset of the neo.AnalogSignal or datatypes.DataSignal&#xa;            objects from the data, to be plotted.&#xa;            &#xa;            NOTE: for neo.Block data, or a sequence of segments, this assumes &#xa;            that all segments have the same number of analog signals, &#xa;            with the same names.&#xa;            &#xa;            NOTE: Signals can also be pre-selected for plotting outside SignalViewer,&#xa;            then passed to this function as a sequence of segments. However, this&#xa;            precludes the use of selector comboboxes in the SignalViewer GUI.&#xa;            &#xa;        irregularSignals: same as signals, for plotting neo.IrregularlySampledSignal &#xa;            objects -- NOTE plotting is not implemented yet for these objects&#xa;            &#xa;        NOTE: for numpy arrays, only 2D arrays are supported, by convention taken to&#xa;        represent the signal's channels as column vectors&#xa;        Varkeyword parameters:&#xa;        ======================&#xa;        mapping passed directly to matplotlib plotting routines&#xa;            should only contain parameters affecting line style, symbols, colours,&#xa;            thickness,&#xa;            &#xa;            xlabels and ylabels MAY be passed when plotting numpy arrays and Kernel1D&#xa;            data, but should not be used for plotting neo signals or datatypes.DataSignal,&#xa;            other data types as they provide their own information&#xa;            &#xa;            when applied to neo segment / block objects these will affect plotting of&#xa;            _ALL_ signals in the segment/block!&#xa;            &#xa;self._prepareAxes_(0)TODO TODO TODO implement plotting for: list of 1D or 2D numpy arrays (as multi-frame data) where 2D array is a multi-channel array (each channel is a column)NOTE 2017-04-10 08:09:45self.frameIndex is the indexing into segmentsself.epoch_plot_options = dict()self.train_plot_options[&quot;train_brush&quot;] = kwargs.pop(&quot;train_brush&quot;, None)self.train_plot_options[&quot;train_hoverPen&quot;] = kwargs.pop(&quot;train_hoverPen&quot;, None)self.train_plot_options[&quot;train_hoverBrush&quot;] = kwargs.pop(&quot;train_hoverBrush&quot;, None) NOTE: 2019-01-24 21:05:34 use only the first epoch in an Epoch array (if there are several elements)self.frameIndex                     = segments only used for ndarrays, see below  NOTE: 2019-04-30 09:55:33 assign to x and y, BUT: is an Epoch, SpikeTrain or Event array is passed AND there already is an &quot;y&quot;, don't assign to it (just overlay stuff) only the data variable Y is passed,  argument (X) and the expected Y will be None by default here we swap these two variables and we end up with X as Noneelse:self.x = x   1) convert all index parameters to range form (such that functions like len &amp; indexing can be applied uniformly)   2) calculate the (maximum) number of axes per frame -- to simplify the code and possibly speed up       the execution, I'd rather cache the axes and just replace the xdata &amp; ydata instead of calling upper level       functions like &quot;plot&quot; -- I'll worry about different plot styles later NOTE: signal indexing applies to ALL segments in the neo.Block NOTE: channel indexing applies to ALL analog signals in a segment NOTE: if this is NOT what was intended then for complex indexing the signals and/or channels NOTE: should be plotted separately these are taken from ancillary data in the Block no segment index given; use ALL segments convert slice to rangealways generate a LIST of indices, or a range these are taken from ancillary data in the Segment override/disregard user-specified segments parameters, because it makes no sense here TODONOTE: 2017-04-08 22:21:21 I need to think carefully about this a ChannelIndex: 1) groups all analog signals inside a block accross segments, OR 2) indexes a SUBSET of the channels within an analogsignal, OR 3) contains neo.core.Unit objectsself.frameIndex = range(1)self._plotEpochs_(clear=True) NOTE: 2017-04-08 22:30:07 this is an array of one or more continuous analog signals (channels) with the same duration, sampling rate and start time = a 2D array with dim 0 = time; dim 1  = channel index TODO - see Epochs as exampleself.overlays.clear() # tyaken from ancillary data in the Unit; TODO plot a SpikeTrain independently of data TODO - see Epochs as exampleself.overlays.append(self.y) # plotted as overlaid spike trainraise NotImplementedError(&quot;Plotting stand-alone neo.core.SpikeTrain objects is not yet implemented&quot;)self.frameIndex = range(1)self.signalIndex = range(1)raise TypeError(&quot;Plotting neo.core.SpikeTrain objects is not yet implemented&quot;)  TODO plot an event independently of data TODO - see Epochs as exampleself.overlays.append(self.y) # plotted as overlaid event TODONOTE: EventArray has been ditched as of neo v. 0.5.0 plot an Epoch independently of dataself.dataAnnotations.append({&quot;Epoch %s&quot; % y.name: y.annotations})pass # delegated to displayFrame()because these may be plotted as an add-on so we don't want to mess up the title TODO only used for ndarrays, see below  one frame, one channel one channel, several frames TODO channelAxis == 1 => one frame, several channels TODO several channels (axis 1) by several frames (axis 2) or vice-versa TODO TODOprint(&quot;SignalViewer.plot numpy array: self.x =&quot;, self.x) may raise exceptions at plotting time only used for ndarrays, see below  x might be a single 1D array (or 2D array with 2nd  axis a singleton), or a list of such arrays in this case force x as a list also! this effectively requires all arrays to have a common domainself.dataAnnotations = [{s.name: s.annotations} for s in y]self.dataAnnotations = [{s.name: s.annotations} for s in y]self.dataAnnotations = [{s.name: s.annotations} for s in y]print(self.y) x might be a single 1D array (or 2D array with 2nd  axis a singleton), or a list of such arrays in this case force x as a list also!because these may be plotted as an add-on so we don't want to mess up the titleif self._docTitle_ is None or (isinstance(self._docTitle_, str) and len(self._docTitle_.strip()) == 0):self.nFramesLabel.setText(&quot;%d of %d&quot; % (self._current_frame_index_, self._number_of_frames_))Alias to setData&#xa;def overlay(self, x, data=None, plotStyle=None, style=None, title=None, \interval = None,  axisIndex = None, \*args, **kwargs):&quot;&quot;&quot;Overlays one data set over the plot.This targets a specific axis (the currently selected axesby default), thus one can overlay signal plots only in one axis.If data containes several channels (e.g. multi-channel AnalogSignalor DataSignal) these will all be plotted in that same axis.Plot data (self.x, self.y) must already exist and plotted.Overlay data can be:a neo.Segmenta neo.AnalogSignal, neo.IrregularlySampledSignala numpy arraya vigra Kernel1Da datatypes.DataSignala list of vigra Kernel1D, numpy arrays or DataSignal (all elements mustbe of the same type)The overlay must resolve itself to the same number of frames as data,or just one frame (it will be replicated across the data frames)&quot;&quot;&quot;if self.x is None and self.y is None:raise RuntimeError(&quot;Cannot overlay without having some data already plotted&quot;)if len(self.fig.axes) == 0:raise RuntimeError(&quot;Cannot overlay without having some data already plotted&quot;)if axisIndex is None:if self._current_plot_item_ is None or self._current_plot_item_ not in self.fig.axes:self.currentAaxes = 0self.overlayAxes = 0else:self.overlayAxes = self.fig.axes.index(self._current_plot_item_)elif isinstance(axisIndex, int):if axisIndex &lt; 0 or axisIndex >= len(self.fig.axes):raise ValueError(&quot;Axis index of overlay plot is expected to be between 0 and %d inclusive; got %d instead&quot; % (len(self.fig.axes)-1, axisIndex))self.overlayAxes = axisIndexelse:raise TypeError(&quot;Invalid axis index for overlay plot: %s&quot; % type(axisIndex).__name__)self.oy = Noneself.ox = Noneself.o_start = Noneself.o_stop = Noneif isinstance(interval, neo.Epoch):if len(interval) > 0:self.o_start = interval.times[0]else:self.o_start = interval.timesif len(interval.durations) > 0:self.o_stop = interval.durations[0]else:self.o_stop = interval.durationstry:if data is None:if x is not None:  # when only the data variable Y is passed, data = x     # it will be trapped as the first positionalx = None  # argument (X) and the expected Y will be None by default# here we swap these two variables and we end up with X as Noneelse:raise ValueError(&quot;I need something to plot&quot;)# NOTE: 2017-11-15 14:08:00# cannot create weak reference to 'list', 'tuple' or NoneType objectsif x is not None:if isinstance(x, (tuple, list)):self.ox = xelse:self.ox = weakref.ref(x)else:self.ox = None# NOTE: 2017-09-01 16:03:22# these will get assigned below, depending on the type of the dataself.oy = None#print(&quot;signalviewer overlay %s&quot; % type(data).__name__)if isinstance(data, (neo.AnalogSignal, neo.core.IrregularlySampledSignal, dt.DataSignal)):self.oy = weakref.ref(data)self.overlayFrameIndex= range(1)elif isinstance(data, vigra.filters.Kernel1D):xx, yy = dt.vigraKernel1D_to_ndarrayif self.ox is None or (type(self.ox).__name__ == &quot;weakref&quot; and self.ox() is None):self.ox = weakref.ref(xx)self.oy = weakref.ref(yy)self.overlayFrameIndex = range(1)#self.signalIndex = range(1)elif isinstance(data, np.ndarray):self.oy = weakref.ref(data)if self.oy().ndim == 1:self.overlayFrameIndex = range(1)elif self.oy().ndim == 2:if self.oy().shape[1] != len(self.frameIndex):raise TypeError(&quot;Too many frames for overlay plot; should be 1 or %d&quot; % len(self.frameIndex))else:self.overlayFrameIndex = self.oy().shape[1]else:raise TypeError(&quot;Unsupported array dimensions for overlay plot; should be 1 or 2&quot;)if self.ox is None or (type(self.ox).__name__ == &quot;weakref&quot; and self.ox() is None):xx = np.linspace(0, data.shape[0], data.shape[0], endpoint=False)[:, np.newaxis]#print(xx)self.ox = weakref.ref(xx)elif isinstance(data, (tuple, list)):if len(data) != 1 and len(data) != len(self.frameIndex):raise TypeError(&quot;Wrong number of frames for overlay plot; should be 1 or %d&quot; % len(self.frameIndex))self.overlayFrameIndex = range(len(data))if all([isinstance(i, vigra.filters.Kernel1D) for i in data]):xx, yy = [dt.vigraKernel1D_to_ndarray(i) for i in data]if self.ox is None or (type(self.ox).__name__ == &quot;weakref&quot; and self.ox() is None):self.ox = [weakref.ref(x_) for x_ in xx]else:if isinstance(x, np.ndarray):if x.ndim == 1:self.ox = [weakref.ref(x)]elif x.ndim == 2:# this effectively requires all arrays to have a common domainif x.shape[1] > 1:raise TypeError(&quot;for overlay plots 'x', the 2nd axis of a 2D array must have shape of 1&quot;)self.ox = [weakref.ref(x) for x_ in xx]elif isinstance(x,(tuple, list)) and len(x) == len(data) and \all([isinstance(x_, np.ndarray) and x_.ndim &lt;= 2 for x_ in x]):self.ox = list()for x_ in x:if x.ndim == 1:self.ox.append(weakref.ref(x_))else:if x.shape[1] > 1:raise TypeError(&quot;for overlay plots, 'x', the 2nd axis of a 2D array must have shape of 1&quot;)self.ox.append(weakref.ref(x_))else:raise TypeError(&quot;Invalid x specified for overlay plot&quot;)self.oy = [weakref.ref(y_) for y_ in yy]elif all([isinstance(i, (neo.AnalogSignal, neo.core.IrregularlySampledSignal, dt.DataSignal)) for i in data]):self.oy = [weakref.ref(y_) for y_ in data] #x contained in the data element#for yy in self.oy:#print(type(yy()).__name__)elif all([isinstance(i, np.ndarray) and i.ndim &lt;= 2 for i in data]):self.oy = [weakref.ref(y_) for y_ in data]if self.ox is None or (type(self.ox).__name__ == &quot;weakref&quot; and self.ox() is None):xx = [np.linspace(0, y_.shape[0], y_.shape[0], endpoint=False)[:,np.newaxis] for y_ in data]#self.x = list()# NOTE: 2017-11-15 16:40:48# whys does this store dead references?#self.x = [weakref.ref(x_.copy()) for x_ in xx] self.x = xxelse: # x might be a single 1D array (or 2D array with 2nd # axis a singleton), or a list of such arrays# in this case force x as a list also!if isinstance(x, np.ndarray):if x.ndim == 1:self.ox = [weakref.ref(x)]elif x.ndim  == 2:if x.shape[1] > 1:raise TypeError(&quot;for overlay plot 'x', the 2nd axis of a 2D array must have shape of 1&quot;)self.ox = [weakref.ref(x)]elif isinstance(x,(tuple, list)) and \all([isinstance(x_, np.ndarray) and x_.ndim &lt;= 2 for x_ in x]):self.ox = list()for x_ in x:if x.ndim == 1:self.ox.append(weakref.ref(x_))else:if x.shape[1] > 1:raise TypeError(&quot;for overlay plot 'x', the 2nd axis of a 2D array must have shape of 1&quot;)self.ox.append(weakref.ref(x_))else:raise TypeError(&quot;Invalid x specified for overlay plot&quot;)else:raise TypeError(&quot;Unexpected list element types for overlay plot&quot;)# TODO FIXME write this up; until then, avoid overlaying blocks#elif isinstance(data, neo.Block):## accept this only when self.y is a Block and either:## a) data has one segment, or has as many segents as self.y#if isinstance(self.y, weakref) and isinstance(self.y, neo.Block):#if len(data.segments) != 1 and len(data.segments != self.y.segments):#raise TypeError(&quot;To overlaid Block must have one segment or as many segments as the plotted data&quot;)#if len(data.segments) == 1:#if not all([len(s.analogsignals) == len(data.segments[0].analogsignals) for s in self.y]):#raise TypeError(&quot;The overlaid Block segment must have as many signals as the plotted data&quot;)#self.oy = weakref.ref(data)#else:#raise TypeError(&quot;A neo.Block can only be overlaid on a neo.Block&quot;)else:raise TypeError(&quot;Cannot overlay plot %s data types&quot; % type(data).__name__)self.overlay_args = argsself.overlay_kwargs = kwargsif plotStyle is not None and isinstance(plotStyle, str):self.overlayStyle = plotStyleelif style is not None and isinstance(style, str):self.overlayStyle = styleself.displayFrame() # calls self._plotOverlayFrame_ at the endself.show();self.fig.canvas.update()except Exception as e:traceback.print_exc()if self._current_plot_item_ is None:self.setCurrentAxes(0)        Emits self.frameChanged signal when not a guiClient&#xa; NOTE: 2018-09-25 23:06:55 recipe to block re-entrant signals in the code below cleaner than manually docinenctign and re-connecting and also exception-safeself.framesQSpinBox.valueChanged[int].disconnect()self.framesQSlider.valueChanged[int].disconnect()print(&quot;ImageViewer %s currentFrame: &quot; % self.windowTitle(), self._current_frame_index_)if not self._gui_client_:# updates the graphics items positions from their backend store# ONLY is this is an independent window (ie. it is not a client# to some other app e.g. LSCaT)## when a client to such app, it falls to that app to manage the # graphics items' backends (i.e., to set the index of their current # frame) followed by the backends' responsibility to update# their frontends#for obj_dict in self.graphicsObjects().values():for obj in obj_dict.values():if obj.backend.currentFrame != self._current_frame_index_: # check to avoid race conditions and recurrenceobj.backend.currentFrame = self._current_frame_index_self.frameChanged.emit(self.currentFrame)self.framesQSpinBox.valueChanged.connect(self.slot_setFrameNumber)self.framesQSlider.valueChanged.connect(self.slot_setFrameNumber) NOTE: 2018-05-21 20:59:18A zipped list of tuples, each with a PlotItem and a one-element list of grid coordinates.&#xa;        &#xa;        The structure is as follows:&#xa;        &#xa;        [ (PlotItem, [(row, col)]), ...]&#xa;        &#xa;        The elements in the zipped list are SORTED by the value of row (see above)&#xa;        in increasing order&#xa;        &#xa;        Read-only&#xa;        &#xa;items = [item for item in self.analogSignalsLayout.items.items()] References the plotItemsWithLayoutPositions property -- syntactic sugar&#xa; alternatively:axes, coords = zip(*self.axesWithLayoutPositions)if index &lt;= len(axes):return axes[index]Calls self.getPlotItem(index) -- syntactic sugar&#xa; a reference, so saves computationsQtWidgets.QMessageBox.critical(self, &quot;Set current axes:&quot;, &quot;Must plot something first!&quot;)Not to be confused with the Qt method self.cursor() !!!&#xa;print(crsID)Returns a list of Cursor objects in a PlotItem or spanning all plot items.&#xa;        &#xa;        List is empty if no cursor exists.&#xa;        &#xa;        index: None (default) or int&#xa;        &#xa;            when None, return the cursors in the selected PlotItem (if not None, else&#xa;                in the signals layout scene i.e., the vertical cursors that span all the plot items)&#xa;                &#xa;            when an int valid values are in the semi-open interval [-1, len(self.axesWithLayoutPositions) )&#xa;                when index  == -1 then returns the cursors that span all the plot items&#xa;                otherwise, returns the cursors in the PlotItem with the specified index&#xa;        &#xa; may be None if there is no scene, i.e. no plot item as in (2.5,) NOTE the comma at the end to define a unary tuple as in (2.5,) NOTE the comma at the end to define a unary tuple@safeWrapperdef _plotOverlayFrame_(self):#print(&quot;_plotOverlayFrame_ %d&quot; % self._current_frame_index_)if self.oy is None or (type(self.oy).__name__ == &quot;weakref&quot; and self.oy() is None):#print(&quot;no overlay&quot;)returnif isinstance(self.oy, list):if any([y is None or (type(y).__name__ == &quot;weakref&quot; and y() is None) for y in self.oy]):returnif len(self.overlayFrameIndex) == 1:if self.ox is not None:ox = self.ox[0]else:ox = Noneoy = self.oy[0]else:if self.ox is not None:ox = self.ox[self._current_frame_index_]else:ox = Noneoy = self.oy[self._current_frame_index_]else:oy = self.oyox = self.oxif type(oy).__name__ == &quot;weakref&quot;:if isinstance(oy(), dt.DataSignal):self._plotOverlaySignal_(oy().domain, oy(), *self.overlay_args, **self.overlay_kwargs)elif isinstance(oy(), (neo.core.AnalogSignal, neo.core.IrregularlySampledSignal)):self._plotOverlaySignal_(oy().times, oy(), *self.overlay_args, **self.overlay_kwargs)elif isinstance(oy(), np.ndarray):if ox is None:raise TypeError(&quot;x array None for numpy array data&quot;)self._plotOverlaySignal_(ox(), oy(), *self.overlay_args, **self.overlay_kwargs)else:if isinstance(oy, dt.DataSignal):self._plotOverlaySignal_(oy.domain, oy, *self.overlay_args, **self.overlay_kwargs)elif isinstance(oy, (neo.core.AnalogSignal, neo.core.IrregularlySampledSignal)):self._plotOverlaySignal_(oy.times, oy, *self.overlay_args, **self.overlay_kwargs)elif isinstance(oy, np.ndarray):if ox is None:raise TypeError(&quot;x array None for numpy array data&quot;)self._plotOverlaySignal_(ox, oy, *self.overlay_args, **self.overlay_kwargs)self.fig.canvas.draw()@safeWrapperdef _plotOverlaySignal_(self, x, y, **kwargs):#self.fig.add_subplot(self.nAxes,1,self.overlayAxes+1) # selects the axes if already existing#self.fig.add_subplot(self.overlayAxes) # selects the axes if already existingplot_kwargs = self.overlay_kwargsif len(kwargs) > 0:plot_kwargs.update(kwargs)if y.ndim == 1:nChannels = 1else:nChannels = y.shape[1]if &quot;color&quot; not in plot_kwargs.keys():if nChannels == 1:plot_kwargs[&quot;color&quot;] = self.defaultOverlaidLineColorelse:plot_kwargs.pop(&quot;color&quot;, None) # fall back on color cyclerif &quot;linewidth&quot; not in plot_kwargs.keys():plot_kwargs[&quot;linewidth&quot;] = self.defaultOverlaidLineWidthplot_kwargs[&quot;gid&quot;] = &quot;overlay&quot;lines = [line for line in self.fig.axes[self.overlayAxes].lines if line.get_gid() is not None and line.get_gid()==&quot;overlay&quot;]if len(lines) == 0:if nChannels > 1:self.fig.axes[self.overlayAxes].set_prop_cycle(&quot;color&quot;, self._defaultOverlaidLineColorList_)lines = self.fig.axes[self.overlayAxes].plot(x, y, *self.overlay_args, **plot_kwargs)self.fig.axes[self.overlayAxes].redraw_in_frame()else:if y.ndim == 1 and len(lines) > 1:for l in lines:l.remove()del(lines)self.fig.axes[self.overlayAxes].redraw_in_frame()lines = self.fig.axes[overlayAxes].plot(x, y, *self.plot_args, **plot_kwargs)elif len(lines) != y.shape[1]:for l in lines:l.remove()del(lines)self.fig.axes[self.overlayAxes].redraw_in_frame()lines = self.fig.axes[overlayAxes].plot(x, y, *self.plot_args, **plot_kwargs)else:for (k,l) in enumerate(lines):l.set_xdata(x)if y.ndim == 1:l.set_ydata(y)else:l.set_ydata(y[:,k])NOTE: 2017-04-09 10:04:40complete revamp of displayFrame (the old one is kept for backward compatibility)Plots individual frame -- synonim with data &quot;sweep&quot; or data &quot;segment&quot;&#xa;        Delegates plotting as follows:&#xa;        &#xa;        neo.Segment                     -> _plotSegment_ # needed to pick up which signal from segment&#xa;        &#xa;        neo.AnalogSignal                -> _plotSignal_&#xa;        neo.IrregularlySampledSignal    -> _plotSignal_&#xa;        neo.Epoch                       -> _plotSignal_&#xa;        neo.SpikeTrain                  -> _plotSignal_&#xa;        neo.Event                       -> _plotSignal_&#xa;        &#xa;        datatypes.DataSignal            -> _plotSignal_&#xa;        &#xa;        sequence of &#xa;        neo.AnalogSignal, &#xa;        neo.IrregularlySampledSignal, &#xa;        datatypes.DataSignal, &#xa;        np.ndarray&#xa;        vigra.filters.Kernel1D          -> NOTE  this is converted to two numpy arrays in plot()&#xa;        &#xa;        Anything else                   -> _plot_numeric_data_&#xa;        &#xa; TODO make cursors redraw themselves after axes clear / canvas redraw NOTE: 2017-04-09 17:14:08  determine how many axes we need here ! I should cache this ! a sequence of objects can be a sequence of signals, with &quot;signal&quot; being one of: neo.AnalogSignal neo.IrregularlySampledSignal datatypes.DataSignal numpy array (vector with shape (n,) or (n, 1)) or matrix (columns vectors) shaped (n, m) vigra.Kernel1D NOTE: because the signals in the collection do not necessarily  have a common &quot;domain&quot; (e.g. time domain, sampling rate, etc) each  signal is considered to belong to its own hypothetical data &quot;frame&quot; (&quot;sweep&quot;, or &quot;segment&quot;) when the 2nd dimension of the &quot;signals&quot; is non-singleton, the data is interpreted as &quot;multi-channel&quot; vigra.Kernel1D are a special case, as they are converted on-the-fly to a tuple of 1D arrays (x, y) see setData() for list of kernel1D, datatypes.DataSignal, and np.ndarraysprint(&quot;displayFrame: self.x: &quot;, self.x)print(&quot;displayFrame %d type %s&quot; % (self._current_frame_index_, type(self.y[self._current_frame_index_]).__name__)) x is contained in the signal plot an Epoch independently of data accepts sequence of np.ndarray or VigraKernel1D objects calls _setup_signal_choosers_() and _prepareAxes_() calls _setup_signal_choosers_() and _prepareAxes_() plot an Epoch independently of data by default what seems to be the default in LinearRegionItem epochs are plotted in all axes so to query the epoch brush colors we only need the first axis this epoch had been shown before ax has lrisif brush == lri.brush:brush = next(brushes) this epoch had not been shown beforefor l in lri.lines:penColor = brush.color()penColor.setAlpha(255)l.setPen(QtGui.QPen(penColor))Plots stand-alone spike trains.&#xa;        CAUTION: DO NOT use when plotting spike trains associated with a neo.Segment or neo.Unit!&#xa;Plots stand-alone epochs.&#xa;        CAUTION: DO NOT use when plotting epochs associated with a segment&#xa;train_pen = kwargs.pop(&quot;train_pen&quot;, self.train_plot_options[&quot;train_pen&quot;])000000&quot;}x1 = (epoch.times.flatten() + epoch.durations.flatten()).magnitudex = [v for v in zip(x0,x1)]plots the contents of a neo.Segment; delegated from displayFrame&#xa;        &#xa;        Calls _setup_signal_choosers_ to determine which signals from the segment&#xa;        will actually be plotted -- this takes into account the state(s) of the&#xa;        signal selection comboboxes and checkboxes and any signal index passed on&#xa;        as parameter to setData()&#xa;        &#xa;        Sets up the number of axes (calls _prepareAxes_()), then loops through&#xa;        signals or signal channels to call _plot_numeric_data_() on each axis,&#xa;        from top to bottom.&#xa;        &#xa;        NOTE: does NOT take into account signal selection comboboxes and any signal index&#xa;        passed on as argument to setData()&#xa;        &#xa;        NOTE: analog signals are always plotted first (in the top axes)&#xa;        &#xa;        Pseudo-code:&#xa;        &#xa;        1)  if plotting of analog signals is enabled AND there are analog signals:&#xa;                if plotting channels separately: &#xa;                    provide for twice as many axes as analog signals in this segment&#xa;                    &#xa;                else:&#xa;                    provide for as many axes as analog signals in this segment&#xa;            &#xa;        2)  if plotting irregular signals is enabled AND there are irregular signals:&#xa;                if plotting channels separately:&#xa;                    provide for twice as many axes as irregular signals&#xa;                    &#xa;                else:&#xa;                    provide for as many axes as analogsignals&#xa;                    &#xa;        3)  create as many axes as the sum of (1) and (2) above&#xa;        &#xa;        4)  initialize axis counter, start at 0&#xa;            loop through signals:&#xa;                if plotting channels separately:&#xa;                    loop through signal's 2nd dimension&#xa;                        select axis using counter&#xa;                        _plot_numeric_data_ of signal's channel (vector sliced form signal on 2nd dimension)&#xa;                        increment axis counter&#xa;                        &#xa;                else:&#xa;                    select axis using counter&#xa;                    _plot_numeric_data_ of signal (is several channels, they will&#xa;                        be plotted on the same axis)&#xa;                        &#xa;                    increment axis counter&#xa;                    &#xa;        5) plot other data items in the segment: spike trains, epochs, event arrays&#xa; required for prepare axes and caching of cursors (see comments in _prepareAxes_()) can be either neo.AnalogSignal, or dt.DataSignal apply whatever slicing was required by arguments to setData() plot channel on same axis but cycle the colors000000&quot;)000000&quot;) plot extra bits in the segment (spike trains, epochs, events arrays)000000&quot;}000000&quot;}self._plotOverlayFrame_()Called to plot a numpy array&#xa;        must call _setup_signal_choosers_ beforehand&#xa;plotting of individual signal objects:&#xa;        neo.AnalogSignal, neo.IrregularlySampledSignal, or datatypes.DataSignal&#xa;        &#xa;        Calls _setup_signal_choosers_, then determines how may axes are needed,&#xa;        depending on whether channels are plotted separately (and which ones, if&#xa;        indicated in arguments passed on to setData())&#xa;        &#xa;        Data is then plotted in each axes (if more than one) from top to &#xa;        bottom iterating through channels (if required) by calling&#xa;        _plot_numeric_data_()&#xa;if not isinstance(signal, (neo.core.baseneo.BaseNeo, dt.DataSignal)):does the actual plotting of signals&#xa;        &#xa;        name is required for internal management of plot data items&#xa;        &#xa;        Returns a pyqtgraph.PlotItem where the data was plotted&#xa;        &#xa;        x and y must be 2D numpy arrays with compatible dimensions&#xa;        &#xa; ATTENTION: x, y are both numpy arrays here ! NOTE: 2019-04-06 09:37:51 Some SVG software have problems with SVG files created from plots of data containing nans (nan values are not plotted in pyqtgraph, nor in matplotlib):  When the curve begins with nans: Inkscape simply doesn't draw the curve Karbon seems to add a random point at the beginning of the curve, to    generate a segment that &quot;fills&quot; up the missing part Only LibreOffice Draw seem to cope with such SVG files, in that it display correctly  As a workaround, we only plot here thos parts of the signal where  ther are NO nans, although this still doesn't seem to work! so the best workaroudn is to open the svg file in LibreOffice Draw then re-export it as svg. NOTE: 2019-01-31 16:28:14 is color cycling automatically done by PlotDataItem? -- NOPE nothing left to plot NOTE 2019-09-15 18:53:56: FIXME find a way to circumvent clearing the plotItem in prepareAxes beacuse it causes too much flicker see NOTE 2019-09-15 18:53:40plotDataItems[0].setData(x, y, **kwargs)plotItem.plot(x, y, **kwargs)print(&quot;_plot_numeric_data_ y.shape[1]&quot;, y.shape[1], &quot;plotDataItems:&quot;, len(plotDataItems))ndx = ~np.isnan(y[k,:])plotDataItems[k].setData(x, y[:,k], **kwargs)plotItem.plot(x, y[:,k], **kwargs)sigNames: a sequence of str or None objects - either empty, or with as many elements as nAxes&#xa;plotitems_coords = sorted([i for i in self.signalsLayout.items.items()], key = lambda x: x[1][0])if len(plotitems_coords):plotitems, _ = zip(*plotitems_coords)else:plotitems = list()print(&quot;%s ._prepareAxes_ %d axes&quot; % (self.windowTitle(), nAxes))print(&quot;there currently are %d plot items&quot; % len(plotitems)) enforce naming of plot items!!! number of axes not to be changed -- just update the names of the plotitems see NOTE: 2019-03-07 09:53:38print(plotitem.vb.name)print(sigNames[k])if plotitem.vb.name != sigNames[k]: dict of lists of cursors! FIXME there are issues in pyqtgraph when ViewBox objects are deleted from &quot;outside&quot;if self.signalsLayout.scene() is not None:self.signalsLayout.clear()self.__plot_items__.clear() FIXME there are issues with ViewBox being deleted in pyqtgraph! adapt existing plotitems make sure no cached cursors exist for these plotitems NOTE: 2019-03-07 09:53:38 change the name of plotitems to preserve always update this! NOTE: 2019-02-07 23:21:55 if fewer plot items are needed than they currenty exist, remove the extra ones the consequence is that a signal plotted on a plot item at  some position (index in the layout) may now be plotted on a pre-existing plot item at a different position (&quot;left behind&quot;) that's allright until we have to manage the cursors of the plot item(s) that are to be removed TODO there are two options: a) simple option: also lose the cursor registered with the plotitem that will be removed b) cache the cursor and wait until a new plotitem is constructed, to plot the data of a signal with the same name CAUTION: what if the name is the same but it represents something else altogether? i.e.different scales etc Anyway, it is bad practice to have a neo.Block with segments  that contain different numbers of signals in their fields (analogsignals, irregularlysampledsignals, etc). However this can happen ! So we would need to &quot;detach&quot; the cursor, then &quot;attach&quot; it to the new plot item plotting a signal with same name when it comes back -- pretty convoluted step-by-step: 1. cache the cursors in the to-be-removed plot item by storing references in a list, in a dictionare keyed on the signal's name 2. when the signal's name become available again (in another segment) then attached the cached cursors to the corresponding (new) plot item remove extra plotitems and plotitem in self.__plot_items__:ndx = self.__plot_items__.index(plotitem) are there any cursors in this plotitem? option (b)self._cached_cursors_[plotitem.vb.name] = cursors see NOTE: 2019-03-08 13:20:50del self.__plot_items__[ndx] adapt existing plotitems see NOTE: 2019-03-07 09:53:38 clear cached cursors for these: NOTE 2019-09-15 18:53:40: FIXME: this creates a nasty flicker but is we don't call it we'll get a nasty stacking of curves now update plotitem's registered namme and plotitem.vb.name is None: then add more plotitems as required restore cached cursors if any restore cached cursors if anyif len(self._cached_cursors_):for k,p in enumerate(plotitems):if p.vb.name in self._cached_cursors_:for c in self._cached_cursors_[p.vb.name]:c.attach(p) why would this return None? FIXME this shouldn't really be here? if it's already connected then what?reattach multi-axes cursors connect plot items scene hover events to report mouse cursor coordinatesConnected to a PlotItem's scene sigMouseHover signal.&#xa;        &#xa;        The signal does NOT report mouse position!&#xa;        &#xa;        obj should be a list of PlotItem objects, &#xa;        technically with just one element&#xa;print(&quot;mouse hover in&quot;, obj) pos is a QPointF connected to a PlotItem's scene! at this stage there should already be a _focussed_plot_item_self.mouseCursorCoordinateStatus.clear()print(&quot;slot_mouseClickSelectPlotItem event:&quot;, evt)plotitems = self.plotItems@pyqtSlot(int)@safeWrapperdef slot_setFrameNumber(self, val):if val >= self._number_of_frames_ or val &lt; 0: returnself.currentFrame = valif len(self._linkedViewers_) > 0:for viewer in self._linkedViewers_: viewer.currentFrame = val        TODO: cache cursors when keepCursors is True&#xa;        at the moment do NOT pass keepCcursor other than False!&#xa;        need to store axis index witht he cursors so that we can restore it ?!?&#xa;self.fig.clear() # both mpl.Figure and pg.GraphicsLayoutWidget have this methodprint(&quot;SignalViewer.clear() %s&quot; % self.windowTitle()) a dict of SignalCursors mapping str name to cursor objectself._current_frame_index_ = 0 NOTE: 2017-04-08 23:00:48 in effect number of signals /frame !!! NOTE: 2018-09-25 23:12:46 recipe to block re-entrant signals in the code below cleaner than manually docinenctign and re-connecting and also exception-safeSets the window-specific prefix of the window title&#xa;" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uq98RZ9yGrYDt" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uoNeaNYBCeqOd" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uQdQqyD0urQhR" xmi.id="u0iZzAPVT6MQh" visibility="public" isSpecification="false" name="" discriminator="" child="uCPiwu64w67a9"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uWxSlnj58Zu4c" visibility="public" isSpecification="false" name="Ui_SignalViewerWindow" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="uWxSlnj58Zu4c" xmi.id="utYfwKOuX2QOt" visibility="public" isSpecification="false" name="" discriminator="" child="uCPiwu64w67a9"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="u7ivkp0gFefKv" comment=" WARNING do not use yet" visibility="public" isSpecification="false" name="MetaHeaderView" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uitQFEncUJsa3"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBFcCjE7jau6m" isOverride="false" comment=" This block sets up the edit line by making setting the parent to the Headers Viewport.Create Set the Alignmnet Hide it till its needed This is needed because I am having a werid issue that I believe has to do with it losing focus after editing is done. Connects to double click" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usPty5gLtc43M" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ureKS77LJhY6v" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="orientation"/>
          <UML:Parameter xmi.id="uLqYKmsOOav3y" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uQqN2vRTZRrBf" isOverride="false" comment=" This block signals needs to happen first otherwise I have lose focus problems again when there are no rows" visibility="public" isInline="false" isSpecification="false" name="doneEditing" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uigmeUTMhBZNC" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="udW4vSWavmjo5" isOverride="false" comment=" This block sets up the geometry for the line edit Make it visiable Let it send signals" visibility="public" isInline="false" isSpecification="false" name="editHeader" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uim6Vauxs4RFN" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uLi0Y0pAnBHeo" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="section"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="usbTh2Q76qi5B" xmi.id="uitQFEncUJsa3" visibility="public" isSpecification="false" name="" discriminator="" child="u7ivkp0gFefKv"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uYdAcSttImQco" visibility="public" isSpecification="false" name="TabularDataModel" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="u3GFGP022fsub"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="uRQstCw4T5vtn" ownerScope="classifier" comment="Change log:&#xa;NOTE  2018-11-25 01:24:39&#xa;1. Read-only row/column headers&#xa;2. Supports: &#xa;1D and 2D numpy arrays (by default one-dimensonal numpy arrays are&#xa;displayed as column vectors)&#xa;pandas DataFrame and Series objects; header data supports MultiIndex&#xa;axis index objects (see pandas Indexing API)&#xa;WARNING use with caution&#xa;" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="editCompleted"/>
        <UML:Attribute xmi.id="uTiJ0ixp33iag" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_rowsPopulated"/>
        <UML:Attribute xmi.id="uUqrykeQHSbuu" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_columnsPopulated"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ujqblzLa0kc8G" isOverride="false" comment="if not isinstance(data, (pd.Series, pd.DataFrame, np.ndarray, type(None))):raise TypeError(&quot;%s data is not yet supported&quot; % type(data).name)if isinstance(data, np.ndarray) and data.ndim > 2:raise TypeError(&quot;cannot support numpy array data with more than two dimensions&quot;)self._modelDataRowHeaders = Noneself._modelDataColumnHeaders = None NOTE: 2018-11-10 10:58:09 how many columns &amp; rows are actually displayedself._displayedColumns = 0### BEGIN paged displaydef canFetchMore(self, parentIndex):return True#return self._displayedRows_ &lt; self._modelRows_#ret = self._displayedColumns &lt; self._modelColumns_ or self._displayedRows_ &lt; self._modelRows_#print(&quot;displayed columns %d&quot; % self._displayedColumns, &quot;rows %d&quot; % self._displayedRows_)#print(&quot;canFetchMore: %s&quot; % ret)#return retdef fetchMore(self, parentIndex):remainingRows = self._modelRows_ - self._displayedRows_#remainingColumns = self._modelColumns_ - self._displayedColumns#print(&quot;remaining rows %d&quot; % remainingRows, &quot;columns %d&quot; % remainingColumns)rowsToFetch = min(10, remainingRows)#columnsToFetch = min(2, remainingColumns)if remainingRows > 0:self.beginInsertRows(QtCore.QModelIndex(), self._displayedRows_, self._displayedRows_ + rowsToFetch -1)self._displayedRows_ += rowsToFetchself.endInsertRows()#self.signal_rowsPopulated.emit(rowsToFetch)#if remainingColumns > 0:#self.beginInsertColumns(QtCore.QModelIndex(), self._displayedColumns, self._displayedColumns + columnsToFetch -1)#self._displayedColumns += columnsToFetch#self.endInsertColumns()#self.signal_columnsPopulated.emit(columnsToFetch)### END paged display### BEGIN item data handling### BEGIN read-only access" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uvEYcrc475EMf" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ujsO7q1STRhLI" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uaGdtZSxR3WZz" isOverride="false" comment="print(&quot;TabularDataModel data, index row: %d; col %d; role %s&quot; % (modelIndex.row(), modelIndex.column(), role))" visibility="public" isInline="false" isSpecification="false" name="data" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ul3ny2WSe4Ggd" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u3s1Po7PN3dm0" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="modelIndex"/>
          <UML:Parameter xmi.id="uYH9Z98MUX9cg" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="role"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ubX02zmEgglhQ" isOverride="false" comment="print(&quot;TabularDataModel headerData&quot;)" visibility="public" isInline="false" isSpecification="false" name="headerData" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u2VUQJg5ao3fa" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uOAJbnEvRU2re" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="section"/>
          <UML:Parameter xmi.id="u0TFiwtmQYvUj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="orientation"/>
          <UML:Parameter xmi.id="uScn6FKNSz9xh" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="role"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJcg8ZNVAwX1y" isOverride="false" comment="print(&quot;TabularDataModel rowCount&quot;)return self._displayedRows_if parentIndex.isValid():return 0if self._modelData_ is None:return 0if isinstance(self._modelData_, (pd.DataFrame, pd.Series, np.ndarray)):return self._modelData_.shape[0]else:return 0 #  NOTE: 2018-11-10 11:26:48 TODO nested lists ?!?" visibility="public" isInline="false" isSpecification="false" name="rowCount" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVXgqe5TdL8DI" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ugksmjyRHZ2l6" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parentIndex"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZWnNYVlh7FLl" isOverride="false" comment="print(&quot;TabularDataModel columnCount&quot;)### END  read-only access### BEGIN editable items" visibility="public" isInline="false" isSpecification="false" name="columnCount" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u4APPwOmK4yMe" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ugy5xoBysMz9l" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parentIndex"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uuGoOjKiGv0mz" isOverride="false" comment="print(&quot;TabularDataModel flags&quot;)return QtCore.Qt.ItemIsEditable | QtCore.Qt.ItemIsSelectable" visibility="public" isInline="false" isSpecification="false" name="flags" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="udcC9ZdPGxyaY" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uGoOhPtBETcZb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="modelIndex"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u9qbVvXYZguRg" isOverride="false" comment="### END editable items### BEGIN resizable model### END resizable model### END item data handling" visibility="public" isInline="false" isSpecification="false" name="setData" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6j42DQlBCxH6" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uHfLQ9YqdBPzm" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="modelIndex"/>
          <UML:Parameter xmi.id="uol1psV3GBQhk" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
          <UML:Parameter xmi.id="uL5poLxcEyxqE" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="role"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ud4ww6CJMB50h" isOverride="false" comment="print(&quot;TabularDataModel setModelData&quot;)self._modelData_ = dataself._modelData_ = data.valuesself._modelDataRowHeaders = data.indexself._modelDataColumnHeaders = data.columnsself._modelData_ = data.valuesself._modelDataRowHeaders = data.indexself._modelDataColumnHeaders = data.name include domain as the first columnself._modelRows_ = data.shape[0]self._modelColumns_ = data.shape[1] + 1 self._displayedColumns = 0print(&quot;TabularDataModel setModelData %s&quot; % type(self._modelData_).__name__)self.headerDataChanged.emit(QtCore.Qt.Vertical, 0, self._modelData_.shape[0])" visibility="public" isInline="false" isSpecification="false" name="setModelData" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVrEk7cmGW3CC" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uWoFcMGcA9VV3" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ulEMK3Ug11DZX" isOverride="false" comment="def appendView()" visibility="public" isInline="false" isSpecification="false" name="views" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u6cRHzHdsLigj" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uicpxvmc116nc" isOverride="false" comment=" column header NOTE: 2018-11-24 14:57:12 axis indexes in pandas are instances of Index or one of its subclasses; so we need to check for its subclasses first MultiIndex is subclass of Index so catch it first NOTE: 2018-11-27 21:32:16 TODO: chech pandas API for other possibilitiesif isinstance(self._modelData_.iloc[:,section], pd.core.arrays.categorical.CategoricalDtype):if isinstance(self._modelData_.iloc[:,section], pd.core.arrays.categorical.CategoricalDtype):print(ret) NOTE: 2018-11-22 23:16:45 could columns be anything else than Index? vertical (rows) header MultiIndex is subclass of Index so catch it firstif isinstance(self._modelData_.iloc[section,:], pd.core.arrays.categorical.CategoricalDtype):if isinstance(self._modelData_.iloc[:,section], pd.core.arrays.categorical.CategoricalDtype): the type of the data row, not of its index !if isinstance(self._modelData_.dtype, pd.core.arrays.categorical.CategoricalDtype): MultiIndex is subclass of Index so catch it firstif isinstance(self._modelData_.iloc[section], pd.core.arrays.categorical.CategoricalDtype):if isinstance(self._modelData_.index[section], pd.core.arrays.categorical.CategoricalDtype): the type of data at [section] horizontal (columns) header vertical (rows) header NOTE: 2018-11-10 11:12:39 TODO nested lists !!!" visibility="private" isInline="false" isSpecification="false" name="getHeaderData__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPSO79nsshLUj" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ucvYceLfW7Vzn" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="section"/>
          <UML:Parameter xmi.id="uepOMSmwcmAJf" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="orientation"/>
          <UML:Parameter xmi.id="uu4VxlbJ5kVqk" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="role"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5ryLbVV60pwU" isOverride="false" comment="if role == QtCore.Qt.DisplayRole:if role == QtCore.Qt.EditRole:return QtCore.QVariant(&quot;%s&quot; % ret)elif role == QtCore.Qt.AccessibleTextRole:return QtCore.QVariant(&quot;%s&quot; % ret)" visibility="private" isInline="false" isSpecification="false" name="getModelData__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uSiUBQP8p3sRt" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="utuz0m9oI3Wi1" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="row"/>
          <UML:Parameter xmi.id="uneHQZ1KSBmtG" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="col"/>
          <UML:Parameter xmi.id="ugaDj3QA9Xosb" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="role"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uiimiC6TvzMUD" isOverride="false" comment=" NOTE: 2018-11-22 11:11:43 don't delete this; contemplate using it at module/app levelold_qvariant_autoconv = sip.enableautoconversion(QtCore.QVariant, False)data_type = self._modelData_.loc[data_row, data_col].dtypedata_type = self._modelData_.iloc[row, col].dtypeelse:self._modelData_.set_value(data_row, data_col, data_value)result = np.fromstring(value, dtype=data_type)self._modelData_.loc[data_row, data_col] = resultself._modelData_.iloc[row, col] = resultdata_type = self._modelData_.iloc[row].dtypeelse:result = np.fromstring(value, dtype=data_type)self._modelData_.iloc[row] = resultelse:result = np.fromstring(value, dtype=data_type)self._modelData_[row, col] = result NOTE: 2018-11-22 11:11:43 don't delete this; contemplate using it at module/app levelsip.enableautoconversion(QtCore.QVariant, old_qvariant_autoconv)" visibility="protected" isInline="false" isSpecification="false" name="setDataValue_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ukUemwd9AFboX" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ussvoJDHJUKod" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
          <UML:Parameter xmi.id="uKvj1MHwdjDAK" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="row"/>
          <UML:Parameter xmi.id="uQoi60foEmhD5" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="col"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uEEMyH6rTeT4L" xmi.id="u3GFGP022fsub" visibility="public" isSpecification="false" name="" discriminator="" child="uYdAcSttImQco"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uQVbTqhbrZBb7" visibility="public" isSpecification="false" name="TableEditor" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uCqkafc7ROOTG"/>
        <UML:Generalization xmi.idref="udldRLxKfpnkt"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Attribute xmi.id="u5lU6kGlSvmIr" ownerScope="classifier" comment="implement plotting -- via the plots module" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="sig_activated"/>
        <UML:Attribute xmi.id="uDQxFaKLiwhYJ" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="closeMe"/>
        <UML:Attribute xmi.id="usE9yKa7fdnN2" ownerScope="classifier" visibility="public" initialValue="pyqtSignal" type="ubge0kexwrzQa" isSpecification="false" name="signal_window_will_close"/>
        <UML:Attribute xmi.id="u6Tmcah76P476" ownerScope="classifier" comment="finish implementing all these" visibility="public" initialValue="(" type="ubge0kexwrzQa" isSpecification="false" name="supported_types"/>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZ1lS8cV1VfVx" isOverride="false" comment="print(&quot;TableEditor.__init__ **kwargs&quot;, kwargs)self._scipyenWindow_ = Noneself._docTitle_ = Noneself._currentFrameData          = Noneself.frameNo                    = 0self.nFrames                    = 1" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uESUkDEVmrGf8" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="udByrfS4eYA1W" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uDgWBclcwZLt8" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="closeEvent" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u78olj1CJ9Mvo" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u5d4lnIkb4fN5" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uArdMGmMAlcSe" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="save_settings_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uN3bkHPlnuWvO" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uZhlqHAg2iQIN" isOverride="false" visibility="protected" isInline="false" isSpecification="false" name="load_settings_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ulUG7fFFBlaQ9" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uO59isKHiKJKi" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_refreshData" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u5cn1iICupRW9" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ud0KDSayDn93D" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="slot_use_mpl_toggled__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uXLS6QoJGlq9D" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uOvkUNyi8ckZU" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uTCHNPjfOVp26" isOverride="false" comment="Initializes and configures the GUI elements.&#xa; NOTE: 2019-01-12 12:21:34 CAUTION: setting section resize mode policies to ResizeToContents has a HUGE speed penalty for large data sets (~ 1k rows and tens of columns)  A better alternative I guess is to resize ot contents AFTER the table model data has been (re)loaded, or just resize manually e.g. via a menu action. CAUTION initialize the GUI elements defined in the *.ui fileself.framesSlider.setMinimum(0)self.framesSlider.setMaximum(0)self.framesSlider.valueChanged.connect(self.slot_setFrameNumber)self.framesSpinBox.setKeyboardTracking(False)self.framesSpinBox.setMinimum(0)self.framesSpinBox.setMaximum(0)self.framesSpinBox.valueChanged.connect(self.slot_setFrameNumber) TODO see plots moduleplot_Action_Custom = self.plotMenu.addAction(&quot;PlotCustom...&quot;) NOTE: 2019-09-06 13:08:00 TODO see plots moduleplot_Action_Custom.triggered.connect(self.slot_customPlotSelectedColumns) NOTE: 2019-09-06 10:31:32 stick to matplotlib for now TODO implement pyqtgraph plotting as alternativeself.__use_mpl_action__ = self.plotMenu.addAction(&quot;&amp;Use matplotlib&quot;)self.__use_mpl_action__.setCheckable(True)self.__use_mpl_action__.setChecked(self.__use_matplotlib__)self.__use_mpl_action__.toggled[bool].connect(self.__slot_use_mpl_toggled__)self._dataModel_.setModelData(self._data_)self._dataModel_.signal_rowsPopulated[int].connect(self.slot_rowsReceived)self._dataModel_.signal_columnsPopulated[int].connect(self.slot_columnsReceived) NOTE: 2018-11-28 21:46:18 WARNING HUGE speed penalty when using ResizeToContents policy, for large data sets (~1k rows and tens of columns)self.tableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)self.tableView.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch) NOTE: 2018-11-29 23:15:13 you may play with this by also setting the precision to be based only on what is actually visible: see NOTE: 2018-11-28 21:46:18 and NOTE: 2018-11-29 23:15:13self.tableView.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.ResizeToContents)self.tableView.verticalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)self.tableView.setContextMenuPolicy(QtCore.Qt.ActionsContextMenu)self.tableView.itemChanged[QtWidgets.QTableWidgetItem].connect(self.slot_tableEdited, type=QtCore.Qt.QueuedConnection)" visibility="protected" isInline="false" isSpecification="false" name="configureGUI_" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u35oh7wLqAHqH" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLA4uIjDOIyMN" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="event" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u2Agm1CxoYYYY" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uRxPNIFLcDwzk" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="evt"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u5rCe5W5WcxDx" isOverride="false" comment=" what's this for? do I really need it?" visibility="public" isInline="false" isSpecification="false" name="clear" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uCCKPPfJfZcAi" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uGleblJ5WOyJ5" isOverride="false" comment="Sets the window-specific prefix of the window title" visibility="public" isInline="false" isSpecification="false" name="setTitlePrefix" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uT14zvzHY0ZOi" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u3jrZYn8PA3IA" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ukAQTq28ne84R" isOverride="false" comment="Sets the document-specific part (suffix) of the window title.&#xa;        &#xa;        Optionally sets up the prefix (generic window title)&#xa;@pyqtSlot(int)&quot;def&quot; slot_rowsReceived(self, rows):print(&quot;received %d rows&quot; % rows)@pyqtSlot(int)&quot;def&quot; slot_columnsReceived(self, cols):print(&quot;received %s columns&quot; % cols)" visibility="public" isInline="false" isSpecification="false" name="setTitle" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uVYi9gK92cmez" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uR3GKVtMDi3cp" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
          <UML:Parameter xmi.id="uWMD5MzfBdF76" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="prefix"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uaS8jUMsNTzgT" isOverride="false" comment=" TODO code for xarray.DataArray TODO code to display categories for categorical data (like frame viewer in rkward) FIXME what is the difference between pandas.Categorical and a series with dtype CategoricalDType? NOTE: CategoricalDType is in pandas.core.dtypes.dtypes (quite deeply nested !!!)self.setVisible(True)" visibility="protected" isInline="false" isSpecification="false" name="viewData" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ukxHVqca5Xqiv" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uq1xws9tCTb9n" isOverride="false" comment=" NOTE: 2019-01-12 12:28:08 this still bears a penalty for large data sets: the table shows up lateself.tableView.horizontalHeader().resizeSections(QtWidgets.QHeaderView.ResizeToContents) NOTE: 2018-11-28 21:43:15 TODO: other data types as well ?, e.g.: 1) list of lists i.e. nested lists) 2) SQL database?" visibility="public" isInline="false" isSpecification="false" name="setData" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="udUCMb1Acsmhj" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ukzvloYL5wNOz" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="data"/>
          <UML:Parameter xmi.id="u7ZOS8u3YhgwM" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="docTitle"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uduJUCZgsCYC6" isOverride="false" comment="&quot;.csv&quot;)targetDir  = os.path.join(targetDir, strutils.string_to_valid_identifier(self._docTitle_),&quot;.csv&quot;)" visibility="public" isInline="false" isSpecification="false" name="slot_exportAsCSVFile" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uByKsR9RmyoR9" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ukeix6WL7jJ2E" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_resizeAllColumnsAndRowsToContents" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u8paOVK6JJHMo" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uJoVTJfhZyy6B" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_resizeAllColumnsToContents" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPwJ8MGROgrs8" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uvClKe1eow1qU" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_resizeAllRowsToContents" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usfev8w5qXY8W" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="unOVkzDZ7Uhun" isOverride="false" comment=" NOTE: 2019-09-06 10:44:22 we need _scipyenWindow_ to expose the matplotlib figureprint(&quot;slot_plotSelectedColumns&quot;, type(self._scipyenWindow_).__name__)" visibility="public" isInline="false" isSpecification="false" name="slot_plotSelectedColumns" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZEiKx5bnG3C3" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uG7QaPYGGos6H" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_customPlotSelectedColumns" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="umoah50Nkyijg" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBIJSJGKgE4r2" isOverride="false" comment=" bail out if there is no selection NOTE: 2019-09-06 10:16:28 find out how many columns the selection spans NOTE: 2019-09-06 10:23:17 arrange selected model indexes by column select model indexes by their columns => list of models with same column bail out if there are different numbers of selected model indexes in different columns NOTE: 2019-09-06 10:47:17 generate data to plot make this the current figureplot_data = data[0] TODO" visibility="private" isInline="false" isSpecification="false" name="plot_model_data__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uoKFgntWeRloz" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uwmfQSVtTEZJS" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="modelIndexes"/>
          <UML:Parameter xmi.id="uBQ9qiSLAMY4t" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="custom"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u869JzwIB59ge" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="useMatplotlib" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uts7llfBZ9GG0" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uBq7zXUQ1LIMf" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="useMatplotlib" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPRfXk2z7HCWp" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ua4Fvze2t3op1" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="value"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uEWOl3wOFFkGy" isOverride="false" comment="The number of data frames&#xa;@property&quot;def&quot; currentFrame(self):return self.frameNo@currentFrame.setter&quot;def&quot; currentFrame(self, val):if not isinstance(val, int) or val >= self.nFrames or val &lt; 0: returnsignalBlockers = [QtCore.QSignalBlocker(widget) for widget in \(self.framesSpinBox, self.framesSlider)]self.framesSpinBox.setValue(val)self.framesSlider.setValue(val)self.frameNo = valself._viewData(newdata=False)@pyqtSlot(int)@safeWrapper&quot;def&quot; slot_setFrameNumber(self, val):if val >= self.nFrames or val &lt; 0: returnself.currentFrame = val;" visibility="public" isInline="false" isSpecification="false" name="dataFrames" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ux9ln2HpIWbJt" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uAKrdon5lR6RS" isOverride="false" comment="print(&quot;table_context_menu at pos %s&quot; % pos)" visibility="public" isInline="false" isSpecification="false" name="slot_table_context_menu_requested" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ung0qmzS9whI9" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="ueHuxeSr5aWFI" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pos"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="u3pO5zfOZTNoC" isOverride="false" comment="selected_text.append(self._dataModel_.data(previous).toString())data = self._dataModel_.data(modelIndex).toString()" visibility="public" isInline="false" isSpecification="false" name="slot_copySelection" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uZpXiA4klqlYU" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uefLKEqYNMvpA" isOverride="false" comment="sizeHint = self.tableView.horizontalHeader().sectionSizeHint(ndx)sizeHint = self.tableView.horizontalHeader().sectionSizeHint(self.selectedColumnIndex)" visibility="public" isInline="false" isSpecification="false" name="slot_resizeSelectedColumnsToContents" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="utABwc765iElq" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uuEdfaUVNCuHT" isOverride="false" comment="sizeHint = self.tableView.horizontalHeader().sectionSizeHint(ndx)sizeHint = self.tableView.horizontalHeader().sectionSizeHint(self.selectedColumnIndex)" visibility="public" isInline="false" isSpecification="false" name="slot_resizeSelectedRowsToContents" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uzPK0Jpc8QQzY" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uzGnXTcMDZjJj" isOverride="false" comment="print(&quot;horizontal header context menu at pos %s&quot; % pos)print(&quot;clicked column %s&quot; % self.tableView.columnAt(pos.x()))copyColumnContents = cm.addAction(&quot;Copy column data&quot;)" visibility="public" isInline="false" isSpecification="false" name="slot_horizontal_header_context_menu_request" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ujwmEBhAB3VsA" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u0SpW2XDAQL3H" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pos"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uLjFbfRCakHc4" isOverride="false" comment="print(&quot;vertical header context menu at pos %s&quot; % pos)print(&quot;clicked row %s&quot; % self.tableView.RowAt(pos.x()))copyColumnContents = cm.addAction(&quot;Copy column data&quot;)" visibility="public" isInline="false" isSpecification="false" name="slot_vertical_header_context_menu_request" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="u88r8JQwJD2mV" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u386mPPo0cChj" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="pos"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="unEJd7tCmdDVb" isOverride="false" comment="columnName = self.tableView.horizontalHeaderItem(self.selectedColumnIndex).text() NOTE: 2018-11-28 23:38:29 this is a QtCore.QVariant that wraps a python str" visibility="public" isInline="false" isSpecification="false" name="slot_copyColumnName" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="udP1xziipT9mO" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="ua8cpuqTJNK23" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="slot_copyRowName" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="um9QQLMe6I0ZT" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uCLK63Nz8w2oO" isOverride="false" comment=" TODO code for xarray.DataArray TODO code for multi-indexed pandas data frames TODO code for as_type(...) for pandas data -- e.g. categorical CAUTION here" visibility="public" isInline="false" isSpecification="false" name="slot_tableEdited" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="ufe23NkOOhUis" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u9KTgOqw9wy4l" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="item"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="umQXc61vDPI5A" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="ID" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="usBhHZWPzcimT" type="u6qsmeTRUEKLt" kind="return"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uojmfVPL9v7OT" isOverride="false" visibility="public" isInline="false" isSpecification="false" name="ID" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uPtmFgZab1JRV" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="uJQEwhVZnZjrc" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="val"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="uatorjw59LS9K" xmi.id="uCqkafc7ROOTG" visibility="public" isSpecification="false" name="" discriminator="" child="uQVbTqhbrZBb7"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="uOC1NQlx4hAmm" visibility="public" isSpecification="false" name="Ui_TableEditor" isRoot="false"/>
      <UML:Generalization namespace="Logical_View" parent="uOC1NQlx4hAmm" xmi.id="udldRLxKfpnkt" visibility="public" isSpecification="false" name="" discriminator="" child="uQVbTqhbrZBb7"/>
      <UML:Class namespace="Logical_View" isLeaf="false" isAbstract="false" xmi.id="um9yI0sjBm1Yq" visibility="public" isSpecification="false" name="ComboBoxDelegate" isRoot="false">
       <UML:GeneralizableElement.generalization>
        <UML:Generalization xmi.idref="uYgCQX7vkaqpL"/>
       </UML:GeneralizableElement.generalization>
       <UML:Classifier.feature>
        <UML:Operation isQuery="false" isLeaf="false" isAbstract="false" xmi.id="uPtgVv96TLs0U" isOverride="false" visibility="private" isInline="false" isSpecification="false" name="init__" isRoot="false" isVirtual="false">
         <UML:BehavioralFeature.parameter>
          <UML:Parameter xmi.id="uN8lg1CAQUDjL" type="u6qsmeTRUEKLt" kind="return"/>
          <UML:Parameter xmi.id="u25dM3e0ytl1t" value="" visibility="private" type="u6qsmeTRUEKLt" isSpecification="false" name="parent"/>
         </UML:BehavioralFeature.parameter>
        </UML:Operation>
       </UML:Classifier.feature>
      </UML:Class>
      <UML:Generalization namespace="Logical_View" parent="udUqjDFHYGnpC" xmi.id="uYgCQX7vkaqpL" visibility="public" isSpecification="false" name="" discriminator="" child="um9yI0sjBm1Yq"/>
     </UML:Namespace.ownedElement>
     <XMI.extension xmi.extender="umbrello">
      <diagrams resolution="101">
       <diagram documentation="" isopen="1" textcolor="#000000" showopsig="1" localid="-1" showgrid="0" snapgrid="0" linecolor="#ff0000" xmi.id="ujZdw0FqNTwyq" showatts="1" showstereotype="1" showpubliconly="0" type="1" showpackage="1" usefillcolor="1" font="Noto Sans,8,-1,5,50,0,0,0,0,0,Regular" showscope="1" snapcsgrid="0" name="class diagram" showattsig="1" snapx="25" canvaswidth="0" canvasheight="0" showops="1" linewidth="0" showattribassocs="1" griddotcolor="#eff0f1" snapy="25" backgroundcolor="#fcfcfc" fillcolor="#ffffc0" zoom="100">
        <widgets/>
        <messages/>
        <associations/>
       </diagram>
       <diagram documentation="" isopen="1" textcolor="#000000" showopsig="1" localid="-1" showgrid="0" snapgrid="0" linecolor="#ff0000" xmi.id="uM950Y2KPpRlV" showatts="1" showstereotype="1" showpubliconly="0" type="1" showpackage="1" usefillcolor="1" font="Noto Sans,8,-1,5,50,0,0,0,0,0,Regular" showscope="1" snapcsgrid="0" name="ScipyenViewer" showattsig="1" snapx="25" canvaswidth="1000" canvasheight="689" showops="1" linewidth="0" showattribassocs="1" griddotcolor="#eff0f1" snapy="25" backgroundcolor="#fcfcfc" fillcolor="#ffffc0" zoom="100">
        <widgets>
         <classwidget showattributes="1" usesdiagramusefillcolor="0" textcolor="#000000" localid="uqf8Cm58ZPOKb" linecolor="#ff0000" height="105" xmi.id="uatorjw59LS9K" usesdiagramfillcolor="0" showstereotype="1" y="-801" showpubliconly="0" showpackage="1" usefillcolor="1" font="Noto Sans,8,-1,5,50,0,0,0,0,0,Regular" showscope="1" showattsigs="601" showopsigs="601" x="-693" width="1000" linewidth="0" autoresize="1" isinstance="0" showoperations="1" fillcolor="#ffffc0" drawascircle="0"/>
        </widgets>
        <messages/>
        <associations/>
       </diagram>
      </diagrams>
     </XMI.extension>
    </UML:Model>
    <UML:Model namespace="m1" isLeaf="false" isAbstract="false" xmi.id="Use_Case_View" visibility="public" isSpecification="false" name="Use Case View" isRoot="false">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model namespace="m1" isLeaf="false" isAbstract="false" xmi.id="Component_View" visibility="public" isSpecification="false" name="Component View" isRoot="false">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model namespace="m1" isLeaf="false" isAbstract="false" xmi.id="Deployment_View" visibility="public" isSpecification="false" name="Deployment View" isRoot="false">
     <UML:Namespace.ownedElement/>
    </UML:Model>
    <UML:Model namespace="m1" isLeaf="false" isAbstract="false" xmi.id="Entity_Relationship_Model" visibility="public" isSpecification="false" name="Entity Relationship Model" isRoot="false">
     <UML:Namespace.ownedElement/>
    </UML:Model>
   </UML:Namespace.ownedElement>
  </UML:Model>
 </XMI.content>
 <XMI.extensions xmi.extender="umbrello">
  <docsettings documentation="" viewid="uM950Y2KPpRlV" uniqueid="uN8lg1CAQUDjL"/>
  <listview>
   <listitem open="1" id="Views" type="800">
    <listitem open="1" id="Component_View" type="821"/>
    <listitem open="1" id="Deployment_View" type="827"/>
    <listitem open="1" id="Entity_Relationship_Model" type="836"/>
    <listitem open="1" id="Logical_View" type="801">
     <listitem open="0" id="usNxH4XoEwQSe" type="813"/>
     <listitem open="0" id="utMatULWaucNg" type="813"/>
     <listitem open="0" id="uhgqHIOpN8bhj" type="813"/>
     <listitem open="0" id="uBZy6wG7Ry1Hv" type="813">
      <listitem open="0" id="uGg5z7QQ2e9sS" type="815"/>
      <listitem open="0" id="uBPlXxuSmmDg4" type="815"/>
      <listitem open="0" id="uhQATuUbvhpo3" type="815"/>
      <listitem open="0" id="uTNGKwnwzc9LW" type="815"/>
      <listitem open="0" id="ujkD2i8YuYENH" type="815"/>
      <listitem open="0" id="ugD0h4mno1vfX" type="815"/>
     </listitem>
     <listitem open="0" id="uvbyyFOMYS7Lj" type="813">
      <listitem open="0" id="uM9woTJCBtN6E" type="815"/>
      <listitem open="0" id="uyiSYQ8FyVovs" type="815"/>
      <listitem open="0" id="u1fFZD7yZuJWZ" type="815"/>
      <listitem open="0" id="uNqp9dhJq03cK" type="814"/>
      <listitem open="0" id="uT3YTzWWLnWfc" type="815"/>
      <listitem open="0" id="uAik6ncY0hYzY" type="814"/>
      <listitem open="0" id="uwfUqDQlmpHcr" type="814"/>
     </listitem>
     <listitem open="0" id="u2rTZ9b192VKp" type="813">
      <listitem open="0" id="u4oZjagTt2IZw" type="815"/>
      <listitem open="0" id="ujBmLp5Xu91Yj" type="815"/>
      <listitem open="0" id="uoIcogbHE6T96" type="815"/>
      <listitem open="0" id="ucwrJkZRO1GEA" type="814"/>
      <listitem open="0" id="uLlTR9PPC9ppx" type="815"/>
      <listitem open="0" id="uR6Zry0jmzpaE" type="814"/>
      <listitem open="0" id="uV0Z8z21zUDAo" type="814"/>
     </listitem>
     <listitem open="0" id="uLMfT3rQjyLfj" type="813">
      <listitem open="0" id="ujSZMY1n8EBvh" type="815"/>
      <listitem open="0" id="u2epDB3dzd1nt" type="815"/>
      <listitem open="0" id="ufEdGw2bMWOuI" type="815"/>
      <listitem open="0" id="uJiqXaGJlIkyL" type="815"/>
      <listitem open="0" id="uHkOxuqMJmSqM" type="815"/>
      <listitem open="0" id="uKOGhJ954fjbq" type="815"/>
      <listitem open="0" id="uEH2o6YEHqDk1" type="815"/>
      <listitem open="0" id="u3AIS8ZF6LnOk" type="815"/>
      <listitem open="0" id="unBWSQOby1yBv" type="815"/>
      <listitem open="0" id="uxbL1cqZQJGx7" type="815"/>
      <listitem open="0" id="uWuVCLpMS2bXe" type="815"/>
      <listitem open="0" id="u0dpmjjjVh9Zd" type="815"/>
      <listitem open="0" id="ukGuCHAFP44mR" type="815"/>
      <listitem open="0" id="umm21kNJFzaB7" type="815"/>
      <listitem open="0" id="u6oOCjwbFyYA9" type="815"/>
     </listitem>
     <listitem open="0" id="uuRiAN5vXYqz4" type="813">
      <listitem open="0" id="us2wDdLG9Bc51" type="815"/>
      <listitem open="0" id="uRaQH1deA0ZCt" type="815"/>
     </listitem>
     <listitem open="0" id="usgaNsUKeNBUG" type="813">
      <listitem open="0" id="urJQ8jxiQbqlK" type="815"/>
      <listitem open="0" id="ueaXxcbE61X4Q" type="815"/>
      <listitem open="0" id="uNa9R2ej2Ntk4" type="815"/>
      <listitem open="0" id="uhOqA8w1ZZqWT" type="815"/>
      <listitem open="0" id="uH3L6Nm1AP4lG" type="815"/>
     </listitem>
     <listitem open="0" id="ujZdw0FqNTwyq" type="807" label="class diagram"/>
     <listitem open="0" id="utaHfES8DRatE" type="813">
      <listitem open="0" id="uZlzR0OYlp6Hq" type="815"/>
     </listitem>
     <listitem open="0" id="uzjBC0Nw3kO38" type="813">
      <listitem open="0" id="uJQuU5eVwteXs" type="815"/>
      <listitem open="0" id="uMP6RXAzPpOAF" type="814"/>
      <listitem open="0" id="ufIkKXKBExQTR" type="815"/>
      <listitem open="0" id="uSmtNeIAroI4C" type="815"/>
      <listitem open="0" id="uP1j5uhqE2qnm" type="815"/>
      <listitem open="0" id="uuMwjgZgGn8vL" type="815"/>
     </listitem>
     <listitem open="0" id="um9yI0sjBm1Yq" type="813">
      <listitem open="0" id="uPtgVv96TLs0U" type="815"/>
     </listitem>
     <listitem open="0" id="us1ioEFSsFijU" type="813">
      <listitem open="0" id="uWUwe3CL9phrm" type="814"/>
      <listitem open="0" id="ukOXqHx3YveKx" type="814"/>
      <listitem open="0" id="ua8dB2kZIjdMW" type="814"/>
      <listitem open="0" id="uyMzSsZe6VVgT" type="814"/>
      <listitem open="0" id="uzQrP9chRvbnx" type="814"/>
      <listitem open="0" id="u5UIdbXxtlfrd" type="814"/>
      <listitem open="0" id="utR0fZaFsYcQz" type="814"/>
     </listitem>
     <listitem open="0" id="uCYrc4iClbXEi" type="813">
      <listitem open="0" id="uVreF63zb7k1m" type="815"/>
      <listitem open="0" id="utTmCVzwdgGAi" type="815"/>
      <listitem open="0" id="uWtTOVTOL9vWX" type="815"/>
      <listitem open="0" id="ucwyFNNq2BpcJ" type="814"/>
      <listitem open="0" id="ua1Imn8lJUNdI" type="815"/>
      <listitem open="0" id="uDY4sOnhfN3lt" type="815"/>
      <listitem open="0" id="uCc3xmrz5gGzF" type="814"/>
      <listitem open="0" id="uDKwFhRhBfK5Y" type="815"/>
      <listitem open="0" id="uyD0sxBYhzvYi" type="814"/>
      <listitem open="0" id="ukQKavMtudYwk" type="815"/>
     </listitem>
     <listitem open="0" id="upKtpGmkDowm6" type="813">
      <listitem open="0" id="uZ5yv9kd5s6kP" type="815"/>
      <listitem open="0" id="uYJDFEjwLlOUH" type="815"/>
      <listitem open="0" id="uGcMsIYWC14j4" type="815"/>
      <listitem open="0" id="uzns4Aq9SxWAT" type="814"/>
      <listitem open="0" id="uHNI4rWvKwtHW" type="815"/>
      <listitem open="0" id="uPhfSoncZ9PA0" type="815"/>
      <listitem open="0" id="uCN9KegwP8jmM" type="815"/>
      <listitem open="0" id="uGFiRYsojVY5J" type="815"/>
      <listitem open="0" id="ubeOQEfIaz2wi" type="815"/>
      <listitem open="0" id="utUeMGYAILPok" type="815"/>
      <listitem open="0" id="uRi0z7SjcnqCW" type="814"/>
      <listitem open="0" id="ujWvDuHlM4Jvb" type="815"/>
      <listitem open="0" id="uMQ6qjihx5hvj" type="815"/>
      <listitem open="0" id="uKI1nUt1GkrOB" type="815"/>
      <listitem open="0" id="u1NIE4FTv3DfH" type="815"/>
      <listitem open="0" id="uBs3jNRrU6oC9" type="815"/>
      <listitem open="0" id="u4QPi0nuIqLii" type="815"/>
      <listitem open="0" id="ulEU3bkDwCPWS" type="815"/>
      <listitem open="0" id="uqg35do72x7ra" type="815"/>
      <listitem open="0" id="uB6zOfdwERHRs" type="815"/>
      <listitem open="0" id="uDx7P8BW1vqFi" type="815"/>
      <listitem open="0" id="uK0CPjHdb46EP" type="815"/>
      <listitem open="0" id="u0am31aYtT70i" type="815"/>
      <listitem open="0" id="uidLtyhwdNVjW" type="815"/>
      <listitem open="0" id="uTEFG1G4QWd9c" type="815"/>
      <listitem open="0" id="u8iHaGUvZ8XRw" type="815"/>
      <listitem open="0" id="uINBTIau5Znw7" type="815"/>
      <listitem open="0" id="u0nczaroFeidR" type="815"/>
      <listitem open="0" id="uIhPGJNtLELdM" type="815"/>
      <listitem open="0" id="ug21HovIRq77u" type="815"/>
      <listitem open="0" id="uAl9noNFJzUE1" type="815"/>
      <listitem open="0" id="uB2XZ5rN43K1w" type="815"/>
      <listitem open="0" id="uC6I7jPDje3Lk" type="815"/>
      <listitem open="0" id="uZX4qPtHN9toS" type="815"/>
      <listitem open="0" id="u9jsVeQEBTlJ7" type="814"/>
      <listitem open="0" id="updwJs9iIXpeN" type="815"/>
      <listitem open="0" id="ujn5ECFIX2Fuu" type="815"/>
      <listitem open="0" id="uNKFLvTl1ipD1" type="814"/>
      <listitem open="0" id="ueNmRnHKzFHKR" type="815"/>
      <listitem open="0" id="uI7hrYvFxqqpx" type="815"/>
      <listitem open="0" id="uifGD7zLiDcZO" type="815"/>
      <listitem open="0" id="uTN9xRuaQlieK" type="815"/>
      <listitem open="0" id="u1NWcYpuFnLnb" type="815"/>
      <listitem open="0" id="uDD9YbxtNQMrE" type="815"/>
      <listitem open="0" id="uXhOo2veHNQtk" type="814"/>
      <listitem open="0" id="uZWXme4R23xNu" type="814"/>
      <listitem open="0" id="uB431H3vZBHhn" type="814"/>
      <listitem open="0" id="ua1dIBaj8kONe" type="814"/>
      <listitem open="0" id="uU2dNkJXOZvfU" type="814"/>
      <listitem open="0" id="u34BGCwcTPOfZ" type="815"/>
      <listitem open="0" id="ugek45GCX2jzQ" type="815"/>
      <listitem open="0" id="updJOcbzhDoKC" type="815"/>
      <listitem open="0" id="uxYIZykQGzleF" type="815"/>
      <listitem open="0" id="ux5MwKIFumITu" type="815"/>
      <listitem open="0" id="uIXcoyMCAl8s1" type="815"/>
      <listitem open="0" id="uMYnRju7OdyAy" type="815"/>
      <listitem open="0" id="u9BB1MumKHTMd" type="815"/>
      <listitem open="0" id="untdgLYFM5GnL" type="815"/>
      <listitem open="0" id="uObdqjuopkRks" type="815"/>
      <listitem open="0" id="uQJtE4Ao0lasu" type="815"/>
      <listitem open="0" id="ujiElz9lsBUOu" type="815"/>
      <listitem open="0" id="uL2BtsvghWJGc" type="815"/>
      <listitem open="0" id="uq4AhQcJuMTBT" type="815"/>
      <listitem open="0" id="uAAcuGbiD8lrx" type="815"/>
      <listitem open="0" id="uPWaBi4pU2x0j" type="815"/>
      <listitem open="0" id="uaUNfh9EtzRCq" type="815"/>
      <listitem open="0" id="uNhYu1RzbNJbS" type="815"/>
      <listitem open="0" id="uBFaICnFkk6z7" type="815"/>
      <listitem open="0" id="u03MxeCkNAHkE" type="815"/>
     </listitem>
     <listitem open="0" id="ue8LMHOYPMs4l" type="813"/>
     <listitem open="0" id="Datatypes" type="830">
      <listitem open="1" id="ulTVPKBaMKh5F" type="829"/>
      <listitem open="0" id="ugalu2i3owagh" type="829"/>
      <listitem open="0" id="uSNaOW8HFZzdu" type="829"/>
      <listitem open="1" id="uKH3gjU5YkBVm" type="829"/>
      <listitem open="0" id="ulXNWyw4KujZ2" type="829"/>
      <listitem open="0" id="uJZgFUD5i7eOm" type="829"/>
      <listitem open="0" id="uJe3bI2rF2OQt" type="829"/>
      <listitem open="1" id="uMWkFJsxOSCuy" type="829"/>
      <listitem open="1" id="uOvkRwXmVcdvj" type="829"/>
      <listitem open="0" id="uMsLPQ1yxeQ82" type="829"/>
      <listitem open="0" id="u4JoSFN6Sng7d" type="829"/>
      <listitem open="1" id="udEba0vVLcmGd" type="829"/>
      <listitem open="0" id="uw4nEK5xlYxxu" type="829"/>
      <listitem open="0" id="uXkZ9A0Ot8Zk6" type="829"/>
      <listitem open="0" id="utJIIOVTI8ztT" type="829"/>
      <listitem open="0" id="ukfUvb6HKMeub" type="829"/>
      <listitem open="0" id="uG24QBVhLDst3" type="829"/>
      <listitem open="1" id="u1Dzzw6ECLWtW" type="829"/>
      <listitem open="0" id="u6qsmeTRUEKLt" type="829"/>
      <listitem open="0" id="u88FoidZoqJ58" type="829"/>
      <listitem open="0" id="ukEyMTirtQYJQ" type="829"/>
      <listitem open="0" id="uP94CJ1Vi02IT" type="829"/>
      <listitem open="0" id="uvdpWpy3hTYDR" type="829"/>
      <listitem open="0" id="uvB2s7WZuddpv" type="829"/>
     </listitem>
     <listitem open="0" id="ucL5DFO15wqiH" type="813">
      <listitem open="0" id="ufywipW04Q0Ph" type="815"/>
      <listitem open="0" id="uoxAQbdyQw0zM" type="814"/>
      <listitem open="0" id="urqTsnWZqvh2V" type="815"/>
      <listitem open="0" id="uuMZR0RONLbEo" type="815"/>
      <listitem open="0" id="u5KekChfeUUrz" type="815"/>
      <listitem open="0" id="uKfFm8hhyDqMP" type="815"/>
      <listitem open="0" id="uRCY0uLQWEgsO" type="815"/>
      <listitem open="0" id="uIUPyS0kKRjMu" type="815"/>
      <listitem open="0" id="uZFYexDVjy4d2" type="815"/>
      <listitem open="0" id="uKyqlTM4yHfHt" type="815"/>
      <listitem open="0" id="uMhtz0ZS0V2eq" type="815"/>
      <listitem open="0" id="ui3gBGLIzPGkd" type="815"/>
      <listitem open="0" id="uzoYXke227xUV" type="814"/>
      <listitem open="0" id="uUdJzhIr3kWzQ" type="814"/>
      <listitem open="0" id="updVcZ1oGSsMt" type="815"/>
      <listitem open="0" id="udpPb6R7uE5SK" type="815"/>
      <listitem open="0" id="uV3gWu5B0l6vT" type="815"/>
      <listitem open="0" id="u2alT3HsEIpdf" type="815"/>
      <listitem open="0" id="uhiICRznNRpns" type="815"/>
      <listitem open="0" id="uolsgilrYEvC8" type="815"/>
      <listitem open="0" id="uOdXQ5FI1mCL7" type="815"/>
      <listitem open="0" id="uAhThDwSaQhXU" type="814"/>
      <listitem open="0" id="uhUJELiz03iRx" type="815"/>
     </listitem>
     <listitem open="0" id="uevtRbb5EZbra" type="813">
      <listitem open="0" id="uU3SLR5D7Okag" type="815"/>
      <listitem open="0" id="uXlrJsXrzcYgJ" type="815"/>
      <listitem open="0" id="u93shnSpjlEku" type="815"/>
      <listitem open="0" id="uyNcvSJnbFM2o" type="815"/>
      <listitem open="0" id="uogSfCwiWZTzR" type="815"/>
      <listitem open="0" id="ulbjhh2CxzMJL" type="815"/>
     </listitem>
     <listitem open="0" id="ueUDQVCi6UlF7" type="813">
      <listitem open="0" id="ujnPZOst9Lh8m" type="815"/>
      <listitem open="0" id="uQH0kdO21W0ZN" type="815"/>
      <listitem open="0" id="uCErhr50Qvnvp" type="815"/>
      <listitem open="0" id="u3qq4YnsQkfmW" type="814"/>
      <listitem open="0" id="uTwVpe0YRXuEf" type="815"/>
      <listitem open="0" id="uDGnLGMWxmkle" type="814"/>
      <listitem open="0" id="u0qQXcHUQisFB" type="815"/>
      <listitem open="0" id="uLUR16hTynZ8e" type="815"/>
      <listitem open="0" id="uFmwhYtloUfIi" type="814"/>
     </listitem>
     <listitem open="0" id="uvGIb48jM9sj3" type="813">
      <listitem open="0" id="uBw7AUzya1ZNn" type="814"/>
      <listitem open="0" id="uFh2dhvt5wc5L" type="815"/>
      <listitem open="0" id="uhCeBum171ZR9" type="814"/>
      <listitem open="0" id="uaaW56A426eHk" type="814"/>
      <listitem open="0" id="uxFUhJjqj5o0M" type="813">
       <listitem open="0" id="uI5gsr4n3JfMi" type="815"/>
       <listitem open="0" id="uHvUufCMegMdg" type="814"/>
       <listitem open="0" id="uD5CeEJvsBeau" type="814"/>
       <listitem open="0" id="uhEcvm75nbE3A" type="814"/>
      </listitem>
      <listitem open="0" id="uVTeXt4nsd9J6" type="813">
       <listitem open="0" id="uNnucWWX7moWJ" type="815"/>
       <listitem open="0" id="uofCu86erNlHd" type="815"/>
       <listitem open="0" id="uT33saVnV2kK4" type="815"/>
       <listitem open="0" id="uli05kg5b4XAU" type="815"/>
       <listitem open="0" id="u0oJwrg435es7" type="815"/>
       <listitem open="0" id="uxDOPx6eiesZf" type="815"/>
       <listitem open="0" id="uEA00gxszFaAY" type="815"/>
       <listitem open="0" id="ulwoOHGGl25aY" type="815"/>
       <listitem open="0" id="uKAGOwKXPsc2v" type="815"/>
       <listitem open="0" id="uCdOtjkIv5xP1" type="815"/>
       <listitem open="0" id="uIP09hqInetYu" type="814"/>
       <listitem open="0" id="uPEFiwMrw1ZzI" type="814"/>
       <listitem open="0" id="u13EgEa2wnZ5R" type="814"/>
       <listitem open="0" id="ujxc7wvBOmTYt" type="814"/>
       <listitem open="0" id="u0H4lWtKWFQcb" type="814"/>
       <listitem open="0" id="upL57ZoC72smP" type="814"/>
       <listitem open="0" id="u8pnuM9zwAkX6" type="814"/>
       <listitem open="0" id="u4Cji8PDgmqhC" type="814"/>
       <listitem open="0" id="uYq3LtDGnHQff" type="815"/>
       <listitem open="0" id="uEE6Cclm2Co54" type="815"/>
       <listitem open="0" id="u3ktuQWZ5sOQJ" type="815"/>
       <listitem open="0" id="uLoqTRGEkvIZJ" type="815"/>
       <listitem open="0" id="u8TdyGXSpWx51" type="815"/>
       <listitem open="0" id="uBkTqYCSsO4vc" type="815"/>
       <listitem open="0" id="uE4gDMvrPNhEI" type="815"/>
       <listitem open="0" id="ukrYyqPvIG4D8" type="815"/>
       <listitem open="0" id="ujdkMFmGSQqhp" type="815"/>
       <listitem open="0" id="uzw2PlTWlxenR" type="815"/>
      </listitem>
      <listitem open="0" id="uVmiBPxJA6fPs" type="813">
       <listitem open="0" id="uoIkFz2M5Mtnn" type="814"/>
       <listitem open="0" id="uRhUZNEzjq93N" type="815"/>
       <listitem open="0" id="uNRWVR1LIR8tS" type="815"/>
       <listitem open="0" id="uGetpZ2rZEgmO" type="815"/>
       <listitem open="0" id="uTl3vlwNeOGRX" type="815"/>
       <listitem open="0" id="u2egsVQO0kewF" type="815"/>
       <listitem open="0" id="uK2RGdCWb11xv" type="815"/>
       <listitem open="0" id="uD3cYGmLdgEUc" type="815"/>
       <listitem open="0" id="ukJJg6iwD6i1P" type="815"/>
      </listitem>
      <listitem open="0" id="u4FeXqNNHtJeB" type="813">
       <listitem open="0" id="utg3KGxNqf4RX" type="815"/>
       <listitem open="0" id="u1JrgLjtrKsCz" type="815"/>
       <listitem open="0" id="u42Te4P3DD27j" type="815"/>
       <listitem open="0" id="uNaV4UZqlaelc" type="815"/>
       <listitem open="0" id="uDPE6yMvMWWq6" type="815"/>
       <listitem open="0" id="uaRXM98R7jPmb" type="815"/>
       <listitem open="0" id="uer23V4BFlquv" type="815"/>
       <listitem open="0" id="uuZlP1Yze6vSP" type="815"/>
       <listitem open="0" id="uBN3mtWlWoiuB" type="815"/>
       <listitem open="0" id="ucdOduOX4aIWA" type="815"/>
       <listitem open="0" id="un8Zj3x0yVaBW" type="815"/>
       <listitem open="0" id="ut2ektTG4ofUI" type="815"/>
       <listitem open="0" id="uEiNrTgGu4l62" type="815"/>
      </listitem>
      <listitem open="0" id="upgtj9i1L1n6B" type="814"/>
     </listitem>
     <listitem open="0" id="u1bPnOfI1336n" type="813"/>
     <listitem open="0" id="u1GpxzbLkdUgW" type="813">
      <listitem open="0" id="uaqfPhIFUeOb3" type="815"/>
      <listitem open="0" id="u3CUNoNBwbxi2" type="815"/>
      <listitem open="0" id="uOfQKtI4Gk28P" type="815"/>
     </listitem>
     <listitem open="0" id="u0E9WXYp3MGzx" type="813">
      <listitem open="0" id="u9Ysf0VNdrals" type="815"/>
      <listitem open="0" id="ut5jEvL3LjOEv" type="815"/>
     </listitem>
     <listitem open="0" id="usi3m0ODGV64x" type="813">
      <listitem open="0" id="uENNlHrmYacQH" type="815"/>
     </listitem>
     <listitem open="0" id="uJyktRpLyea2G" type="813">
      <listitem open="0" id="u1oc3YLIZZBBm" type="815"/>
      <listitem open="0" id="u5ET7ivulOCh1" type="815"/>
      <listitem open="0" id="uYiXhg7dVWLuO" type="815"/>
      <listitem open="0" id="u1T2RHTxIsMid" type="815"/>
      <listitem open="0" id="u50pH3d2kq12u" type="815"/>
      <listitem open="0" id="uYFY2KlYItClv" type="815"/>
      <listitem open="0" id="u3LWxL8aRceJM" type="815"/>
      <listitem open="0" id="uGRSBeOVABmUO" type="815"/>
      <listitem open="0" id="usPtAR3nedkTy" type="815"/>
      <listitem open="0" id="uiz5YoL8S9bym" type="815"/>
      <listitem open="0" id="u1GZesj7WJqEQ" type="814"/>
      <listitem open="0" id="uiikCU3zn9WEd" type="814"/>
      <listitem open="0" id="u7A84nlPWd4E7" type="815"/>
     </listitem>
     <listitem open="0" id="uVHfv95dFAu0I" type="813">
      <listitem open="0" id="uUeW6VlA3qELB" type="815"/>
      <listitem open="0" id="ulEFT2H2k76Gq" type="815"/>
      <listitem open="0" id="ujxt47PgxHw8m" type="815"/>
      <listitem open="0" id="uD3EmK58EFqbn" type="815"/>
      <listitem open="0" id="uvSbCy4Kc8QEM" type="815"/>
      <listitem open="0" id="uiprie9pnPdYW" type="815"/>
      <listitem open="0" id="u9Yh7xMhQmRsa" type="815"/>
      <listitem open="0" id="uZiTRn5YmC4k0" type="815"/>
      <listitem open="0" id="uuq0MgchZyQtJ" type="815"/>
      <listitem open="0" id="uLAe20GIgOfeT" type="815"/>
      <listitem open="0" id="ugBNuQK1nueBc" type="815"/>
      <listitem open="0" id="uRhMjZ2Axsrvb" type="815"/>
      <listitem open="0" id="u4skh5Qp53VpQ" type="815"/>
      <listitem open="0" id="ut4WOV70YlCCn" type="815"/>
      <listitem open="0" id="urxNTaAr5kxf7" type="815"/>
      <listitem open="0" id="uG5YJASU7tA7Y" type="815"/>
      <listitem open="0" id="ucGfMbfKW3KEq" type="815"/>
      <listitem open="0" id="u23w4BYWbzZGM" type="815"/>
      <listitem open="0" id="usi1f2A0v1DMr" type="815"/>
      <listitem open="0" id="uhItUWUuL2DXe" type="815"/>
      <listitem open="0" id="uFTh1tby5st5f" type="815"/>
      <listitem open="0" id="uBnhbGVtR11yG" type="815"/>
      <listitem open="0" id="u4DLvunRyciLR" type="815"/>
      <listitem open="0" id="u3lP5DAe87bmT" type="815"/>
      <listitem open="0" id="ub2mNR8BxjZIb" type="815"/>
      <listitem open="0" id="uQViKiEgI0sGb" type="815"/>
      <listitem open="0" id="uJa3fV8J4TBMY" type="815"/>
      <listitem open="0" id="uq9uukR4RGIHT" type="815"/>
      <listitem open="0" id="u5yzDNZnIjN0S" type="815"/>
      <listitem open="0" id="uZT1VEW9l7LCA" type="815"/>
      <listitem open="0" id="u6M2wllWPu3Iy" type="815"/>
      <listitem open="0" id="ueqv1lBMwqZSq" type="815"/>
      <listitem open="0" id="uugfUyI1iVQP1" type="814"/>
      <listitem open="0" id="uzOQ9SNJaeCEm" type="814"/>
      <listitem open="0" id="uGUFG2QiYo2t6" type="814"/>
      <listitem open="0" id="ubgOFMdLSMGit" type="814"/>
      <listitem open="0" id="uwojC9kHx17Er" type="814"/>
      <listitem open="0" id="uEfS3pxXp6cdX" type="814"/>
      <listitem open="0" id="u0YyoTmRJs3iR" type="814"/>
      <listitem open="0" id="uCcMo6IYLLYpu" type="814"/>
      <listitem open="0" id="uU0LbXgxf4Zcl" type="814"/>
      <listitem open="0" id="uW2TCFTpbjm5g" type="814"/>
      <listitem open="0" id="ueHig5neWISlv" type="814"/>
      <listitem open="0" id="unG5CIwHsqbgG" type="814"/>
      <listitem open="0" id="uN3NyxvL239gI" type="814"/>
      <listitem open="0" id="u25Yf2JFJpjhw" type="814"/>
      <listitem open="0" id="u93iKB5weaxnx" type="814"/>
      <listitem open="0" id="uJ7heWE4ba0cM" type="815"/>
      <listitem open="0" id="udcfxwArxFpAR" type="815"/>
      <listitem open="0" id="ujcRVWKTkKelr" type="815"/>
      <listitem open="0" id="u5qh0pksh2vCE" type="815"/>
      <listitem open="0" id="u7BsUjxCXMIAm" type="815"/>
      <listitem open="0" id="uwDKaZZxVkWaB" type="815"/>
      <listitem open="0" id="uBmtbNYPDMxW0" type="815"/>
      <listitem open="0" id="ufptkmkjue9BC" type="815"/>
      <listitem open="0" id="uiqk30Z4Qrrho" type="815"/>
      <listitem open="0" id="uj674BWPFZdiY" type="815"/>
      <listitem open="0" id="uhwoobIf2Gdnp" type="815"/>
      <listitem open="0" id="ulspURS86nomb" type="815"/>
      <listitem open="0" id="uL9JTg2U5elLg" type="815"/>
      <listitem open="0" id="u335DgTACeRGX" type="815"/>
      <listitem open="0" id="u77oNDJmhM8nv" type="815"/>
      <listitem open="0" id="u23Nrta20LSmE" type="815"/>
      <listitem open="0" id="uHwLeCRIO0jx6" type="815"/>
      <listitem open="0" id="uwpbIopVKDUDL" type="815"/>
      <listitem open="0" id="uoHK4nKzWcqxC" type="815"/>
      <listitem open="0" id="u408s8Di8AJur" type="815"/>
      <listitem open="0" id="udtZ5HQ0VcZhj" type="815"/>
      <listitem open="0" id="uxJIw4zwuduyo" type="815"/>
      <listitem open="0" id="uoZxo3VRNNWTO" type="815"/>
      <listitem open="0" id="uxuh5KtDuJamR" type="815"/>
      <listitem open="0" id="u0GiOA4jHWrAL" type="815"/>
      <listitem open="0" id="u7AClX0D36zJg" type="815"/>
      <listitem open="0" id="uPXivOt48JUYd" type="815"/>
      <listitem open="0" id="u0CKdtcAArCiR" type="815"/>
      <listitem open="0" id="u1B2iXaGxUEii" type="815"/>
      <listitem open="0" id="uNTyMfxY1X1n1" type="815"/>
      <listitem open="0" id="uCu6wpjW0ikD6" type="815"/>
      <listitem open="0" id="uSSf9oqZNCzDt" type="815"/>
      <listitem open="0" id="uBM5pZ68moclf" type="815"/>
      <listitem open="0" id="uAsJnbz6KvaEy" type="815"/>
     </listitem>
     <listitem open="0" id="uMFxLQJg04J4c" type="813">
      <listitem open="0" id="uZPbByBYHb6rE" type="815"/>
      <listitem open="0" id="uGVu43indyhrn" type="815"/>
      <listitem open="0" id="uggAFs3kUzUwr" type="815"/>
      <listitem open="0" id="uU3mcSlZl5jVm" type="815"/>
      <listitem open="0" id="uEkDI8f6uzpal" type="815"/>
      <listitem open="0" id="ufZvMWZOWSZPm" type="815"/>
      <listitem open="0" id="uRjxekiJjuaMf" type="815"/>
      <listitem open="0" id="ubNpXS95eEcm1" type="815"/>
      <listitem open="0" id="uXT2b173TpuTw" type="815"/>
      <listitem open="0" id="u5EuXvS965BpP" type="815"/>
      <listitem open="0" id="u2ziG3XVdzKN3" type="815"/>
      <listitem open="0" id="uThjYVhOpmT46" type="815"/>
      <listitem open="0" id="up0oH9JMPPEre" type="815"/>
      <listitem open="0" id="u1Qpok6TUKLHP" type="815"/>
      <listitem open="0" id="ulrC3wZgPIIAP" type="815"/>
      <listitem open="0" id="udLNWYuFLmNda" type="815"/>
      <listitem open="0" id="uhqPGhbr4yoe4" type="815"/>
      <listitem open="0" id="uvF999Do7Fy4n" type="815"/>
      <listitem open="0" id="uoz1d09Sp3iDR" type="815"/>
      <listitem open="0" id="urjkSpDnQbYAg" type="815"/>
      <listitem open="0" id="uu7rDqI4W6GkG" type="815"/>
      <listitem open="0" id="uUkostC91i2Ls" type="815"/>
      <listitem open="0" id="ulNraFxp6Tdp9" type="815"/>
      <listitem open="0" id="uyyK8FWybxqxo" type="815"/>
      <listitem open="0" id="uWRm726SzuVgH" type="815"/>
      <listitem open="0" id="utbTn8J0TF24e" type="815"/>
      <listitem open="0" id="uRiadMrg9Wiq3" type="815"/>
      <listitem open="0" id="usmW0H0Kbjk0T" type="815"/>
      <listitem open="0" id="uT1OqKMTArXG5" type="815"/>
      <listitem open="0" id="uCfdilz5mb7Ps" type="815"/>
      <listitem open="0" id="uMgz8oIj8I6h9" type="815"/>
      <listitem open="0" id="ue6qmWDTqbs5R" type="815"/>
      <listitem open="0" id="u4Lh4jpvh9vC0" type="815"/>
      <listitem open="0" id="uJ8aOYBbRfUTa" type="815"/>
      <listitem open="0" id="u3zpulAWu36ST" type="815"/>
      <listitem open="0" id="uOxvqfbDevXe9" type="815"/>
      <listitem open="0" id="uRGOFTsM9bSS8" type="815"/>
      <listitem open="0" id="uvRyTtLJLZiI5" type="815"/>
      <listitem open="0" id="uZC2igx0TaPRr" type="815"/>
      <listitem open="0" id="ullDVhGAPhLVw" type="815"/>
      <listitem open="0" id="ucXFA1qoF6WvR" type="815"/>
      <listitem open="0" id="ur6qsMCTA0m8h" type="815"/>
      <listitem open="0" id="uRamJ0WxrcQbU" type="815"/>
      <listitem open="0" id="uGa9mfu1Ot1TN" type="815"/>
      <listitem open="0" id="uOghKV1oGisaC" type="815"/>
      <listitem open="0" id="uG7RBlyn2Opaa" type="815"/>
      <listitem open="0" id="ubMmUcJ4hSAb9" type="815"/>
      <listitem open="0" id="u5SuLjrgSZMiQ" type="815"/>
      <listitem open="0" id="uE5RNHYz9eUrr" type="815"/>
      <listitem open="0" id="undDmqwCn5Bh1" type="815"/>
      <listitem open="0" id="uc7pFyFvDpsJK" type="815"/>
      <listitem open="0" id="uSkD2oY68YGrr" type="815"/>
      <listitem open="0" id="uhuW3xhdj58SR" type="815"/>
      <listitem open="0" id="uMpRh5NEtGPf8" type="815"/>
      <listitem open="0" id="utORtOZ2cZ0FV" type="815"/>
      <listitem open="0" id="uFpMJEo2JvPpX" type="815"/>
      <listitem open="0" id="u4iuxd102I2jX" type="815"/>
      <listitem open="0" id="u3Ph8OONoPQ4Z" type="815"/>
      <listitem open="0" id="uehQPpfn23EDR" type="815"/>
      <listitem open="0" id="uomitAmzisCHD" type="815"/>
      <listitem open="0" id="uSikH2TzVCIJK" type="815"/>
      <listitem open="0" id="uNW0mNbIoNxva" type="815"/>
      <listitem open="0" id="u34AEqeW8ZeHs" type="815"/>
      <listitem open="0" id="ueTSa8Ixl9VN8" type="815"/>
      <listitem open="0" id="uG3m21EVNZZDN" type="815"/>
      <listitem open="0" id="uGUiLN2HicQQO" type="815"/>
      <listitem open="0" id="u6tSv69buBT4q" type="815"/>
      <listitem open="0" id="uTTn7CzpE2FrD" type="815"/>
      <listitem open="0" id="utgn6XeVopuDB" type="815"/>
      <listitem open="0" id="uIYeQ5uEc3FGQ" type="815"/>
      <listitem open="0" id="uOXslV6K01NL6" type="815"/>
      <listitem open="0" id="uVXNxvgCDEgUA" type="815"/>
      <listitem open="0" id="uyd37XtLJEE2p" type="815"/>
      <listitem open="0" id="uKnVQUit9p3yD" type="815"/>
      <listitem open="0" id="ucSiL2WpQXinI" type="815"/>
      <listitem open="0" id="u6Josjuk4hDUn" type="815"/>
      <listitem open="0" id="uqpaeoy8GxEVa" type="815"/>
      <listitem open="0" id="ubsOQaaW0bw8H" type="815"/>
      <listitem open="0" id="uZrIxrJtgreGE" type="815"/>
      <listitem open="0" id="uU2tBPPKrkQ87" type="815"/>
      <listitem open="0" id="u2JgkAnZUpVUd" type="815"/>
      <listitem open="0" id="un30ZJAO6LmGc" type="815"/>
      <listitem open="0" id="u95JFaCN2Bk2i" type="815"/>
      <listitem open="0" id="uUfqvLJVycq7T" type="815"/>
      <listitem open="0" id="u2MA4ASc7ZomA" type="815"/>
      <listitem open="0" id="uBZxn28EsIffF" type="815"/>
      <listitem open="0" id="uU324BaIIBesW" type="814"/>
      <listitem open="0" id="uH3KalzhzBge1" type="815"/>
      <listitem open="0" id="uNZXQVId9vHZ0" type="815"/>
      <listitem open="0" id="uRAxEN4lebMZf" type="815"/>
      <listitem open="0" id="ukKrZeOuwVhmN" type="815"/>
      <listitem open="0" id="uv8pl3Qge5FFz" type="815"/>
      <listitem open="0" id="uT6BnNsJw7DqS" type="815"/>
      <listitem open="0" id="uptK8N0FILpcC" type="815"/>
      <listitem open="0" id="u38UmWCwQ3LEB" type="815"/>
      <listitem open="0" id="uHL4IBER3bbAe" type="815"/>
      <listitem open="0" id="uz8iqweWJkCru" type="815"/>
      <listitem open="0" id="uIBfT6vSp0D8c" type="815"/>
      <listitem open="0" id="ugZ9M60nevUzR" type="815"/>
      <listitem open="0" id="uIYxwN2vqZZQB" type="815"/>
      <listitem open="0" id="uGgGAH2I571b8" type="814"/>
      <listitem open="0" id="u74UisKDra0Iw" type="814"/>
      <listitem open="0" id="uvtzQLznFBxTO" type="815"/>
      <listitem open="0" id="u1GNH9p6kWvqi" type="815"/>
      <listitem open="0" id="uLD4cta6TwjeH" type="815"/>
      <listitem open="0" id="uuOwm0LkURnKS" type="815"/>
      <listitem open="0" id="urHWhIMKTXsqt" type="815"/>
      <listitem open="0" id="uFQ2qF5X1kPVb" type="815"/>
      <listitem open="0" id="ulmqj3fjhWjpF" type="815"/>
      <listitem open="0" id="u6gica6M8m9mT" type="815"/>
      <listitem open="0" id="uuEjSDoewyLo3" type="815"/>
      <listitem open="0" id="uEnNMAxlS2y1N" type="815"/>
      <listitem open="0" id="uULwaDdekerto" type="815"/>
      <listitem open="0" id="ubKc3BTx3O3Jm" type="815"/>
      <listitem open="0" id="uLwO46myAK6IJ" type="814"/>
      <listitem open="0" id="uvnIhYo3IRjJO" type="814"/>
      <listitem open="0" id="uZScZGov0JR0R" type="814"/>
      <listitem open="0" id="uao2IohJhFwcR" type="814"/>
      <listitem open="0" id="uhQ7hHqOGQBhF" type="814"/>
      <listitem open="0" id="uEc243MBqBhHm" type="815"/>
      <listitem open="0" id="uggODQfjC1JAh" type="815"/>
      <listitem open="0" id="ufiYxplm7HVM5" type="815"/>
      <listitem open="0" id="uBYjjBQMaHxg8" type="815"/>
      <listitem open="0" id="uRSQRck0hqXBG" type="815"/>
      <listitem open="0" id="u0oyf7wEXh6pe" type="815"/>
      <listitem open="0" id="uzS8XtUuaM69e" type="815"/>
      <listitem open="0" id="uNHXV506fTBZ0" type="815"/>
      <listitem open="0" id="uaZ3dlLE58rLj" type="815"/>
      <listitem open="0" id="uKJOdheoVjeBY" type="814"/>
      <listitem open="0" id="u3edXua4tXnvR" type="815"/>
      <listitem open="0" id="uEmMSsgQ6w1tO" type="815"/>
      <listitem open="0" id="uzH3H5EchyL3D" type="815"/>
      <listitem open="0" id="uQqidcgRsScA2" type="815"/>
      <listitem open="0" id="un4sYeKFjBg2D" type="815"/>
      <listitem open="0" id="ubxtmPhtdpL0Z" type="815"/>
      <listitem open="0" id="u9KysSpNhWsUA" type="815"/>
      <listitem open="0" id="upGyHiBrxDeF3" type="815"/>
      <listitem open="0" id="uACaGvBcHz238" type="815"/>
      <listitem open="0" id="uKDHDrEinkR6J" type="815"/>
      <listitem open="0" id="u3XtV0F5fL43b" type="815"/>
      <listitem open="0" id="umn4FMRVN8imZ" type="815"/>
      <listitem open="0" id="uFA5AO9EVBWTj" type="815"/>
      <listitem open="0" id="ufVZ2hc1zQMV0" type="815"/>
      <listitem open="0" id="u3XL28Cpyxqy5" type="815"/>
      <listitem open="0" id="uTwQfC4Crk8fE" type="815"/>
      <listitem open="0" id="uyMjdwlfxU5Bv" type="815"/>
     </listitem>
     <listitem open="0" id="uICuisVy6uW5x" type="813">
      <listitem open="0" id="uQ1q5YuRIllbZ" type="814"/>
      <listitem open="0" id="uDYvY8yRAvumB" type="814"/>
      <listitem open="0" id="uReOH0ieXSej8" type="814"/>
      <listitem open="0" id="uypenXBM2jsfR" type="814"/>
      <listitem open="0" id="uXytngOxTXDoO" type="814"/>
      <listitem open="0" id="uovBMXxDvjnT3" type="814"/>
      <listitem open="0" id="uD8Lto3oE8eub" type="814"/>
      <listitem open="0" id="u2JU9jm2FfHk6" type="814"/>
      <listitem open="0" id="uuTogVlEuXw1j" type="814"/>
      <listitem open="0" id="uDB7mJ0DPmWIm" type="814"/>
      <listitem open="0" id="uZHmvdQj7i8sc" type="814"/>
      <listitem open="0" id="ul4VAWRZhtJPk" type="814"/>
      <listitem open="0" id="upJVtvDAr0YE3" type="814"/>
      <listitem open="0" id="umRlhTkHGtQbm" type="814"/>
      <listitem open="0" id="uKfjWrc5sg8i8" type="814"/>
      <listitem open="0" id="uWoSZ0YgzTeB2" type="814"/>
      <listitem open="0" id="uyrFfa5k7kd6o" type="814"/>
      <listitem open="0" id="umaWBbYk3z4sR" type="814"/>
      <listitem open="0" id="uq3wHHdxIADo2" type="814"/>
      <listitem open="0" id="uWerf30S1XGsN" type="814"/>
      <listitem open="0" id="uQlnuo06pP0V2" type="814"/>
      <listitem open="0" id="uFnOuHDfhrKiz" type="814"/>
      <listitem open="0" id="uRe65LF2XLueQ" type="814"/>
      <listitem open="0" id="uOlbGlsqKvgND" type="814"/>
      <listitem open="0" id="u8mbMqgie7RCg" type="814"/>
      <listitem open="0" id="uICmXGbm4E9iu" type="814"/>
      <listitem open="0" id="utJNOYACqmv0a" type="814"/>
      <listitem open="0" id="uIV8DYUucToS5" type="814"/>
      <listitem open="0" id="uyhaubJUJesU0" type="814"/>
      <listitem open="0" id="uFAcrgGJNFoFJ" type="814"/>
     </listitem>
     <listitem open="0" id="uI29uPaawjAEq" type="813">
      <listitem open="0" id="uDgfMcTnShv86" type="815"/>
      <listitem open="0" id="uJYyRgL1gF1zo" type="815"/>
     </listitem>
     <listitem open="0" id="uR98rfuYUT5QF" type="813">
      <listitem open="0" id="uHpmmfAhSdLWY" type="814"/>
      <listitem open="0" id="uTL9iEqKLUz1H" type="814"/>
      <listitem open="0" id="uxeq58s9MbCiD" type="814"/>
     </listitem>
     <listitem open="0" id="ulJBJAx5u7yWK" type="813">
      <listitem open="0" id="ujek1AJ0sFcwt" type="815"/>
     </listitem>
     <listitem open="0" id="uiuBnqKx7BzWY" type="813">
      <listitem open="0" id="uzLhbt30QVmSD" type="815"/>
     </listitem>
     <listitem open="0" id="uUHmzyXFhbBCo" type="813">
      <listitem open="0" id="uV24KPlbVbgAR" type="815"/>
      <listitem open="0" id="u6xD6cJaKOOwe" type="814"/>
      <listitem open="0" id="uaemriwVze5X7" type="814"/>
      <listitem open="0" id="uywHq6cGrGfRn" type="814"/>
      <listitem open="0" id="ud1ftsn7ERJwj" type="814"/>
      <listitem open="0" id="u1ATPlnyuM64D" type="814"/>
      <listitem open="0" id="u66CzQoHjYQik" type="814"/>
      <listitem open="0" id="udml2ODm17zhl" type="815"/>
      <listitem open="0" id="uRrn6nggNQbGN" type="815"/>
      <listitem open="0" id="uG3FVMa8IE4fz" type="815"/>
      <listitem open="0" id="uxio5LagHMu3v" type="815"/>
      <listitem open="0" id="ucQg76aHA83Nd" type="815"/>
      <listitem open="0" id="uRvGu3DdBdAYr" type="815"/>
      <listitem open="0" id="uFO9LhvCmo5OO" type="815"/>
      <listitem open="0" id="uKATWmjJN7pp0" type="815"/>
      <listitem open="0" id="uW9PB5tcqMApc" type="815"/>
     </listitem>
     <listitem open="0" id="uuOVuuTtIHR7o" type="813">
      <listitem open="0" id="upBiyypHkSzBn" type="815"/>
      <listitem open="0" id="uPK1Fu1yNCbao" type="814"/>
      <listitem open="0" id="ubeZaX7KggzIV" type="815"/>
      <listitem open="0" id="uJJdOYAStppmb" type="815"/>
      <listitem open="0" id="u0a4O1i9Wvztu" type="815"/>
      <listitem open="0" id="uRJdPMzgiFKTa" type="815"/>
      <listitem open="0" id="ubPPHRKlXQHNe" type="815"/>
      <listitem open="0" id="uFVRAVjNWfVyo" type="815"/>
      <listitem open="0" id="ubElKUyN2QxXz" type="815"/>
      <listitem open="0" id="uAasQ6oPtxwvG" type="815"/>
      <listitem open="0" id="u6y1EUGcC3iH8" type="815"/>
      <listitem open="0" id="uKcXCRda4Ibqm" type="815"/>
      <listitem open="0" id="uZzR5SrJfHr4d" type="815"/>
      <listitem open="0" id="uKHN0Sx5fSVER" type="815"/>
      <listitem open="0" id="usLmJzqz7IKKo" type="815"/>
      <listitem open="0" id="uN1bDwRu9O3Tn" type="815"/>
      <listitem open="0" id="u6FMF34zNhte0" type="815"/>
      <listitem open="0" id="uZtk3DDfYuT2G" type="815"/>
      <listitem open="0" id="uu5nAhlb29JcL" type="815"/>
      <listitem open="0" id="uqYNKnsjTujMg" type="815"/>
      <listitem open="0" id="u1ckNPdsYAQDr" type="815"/>
      <listitem open="0" id="uUejwlXwgyL6g" type="815"/>
      <listitem open="0" id="u4xBFglqhYQGR" type="815"/>
      <listitem open="0" id="ut9JSHIont3gG" type="815"/>
      <listitem open="0" id="uxQSrdQcB3CYx" type="815"/>
      <listitem open="0" id="u1zsgWg45bJH4" type="815"/>
      <listitem open="0" id="uvQ4BXGii1gXd" type="815"/>
      <listitem open="0" id="utXKf21SBWSBO" type="815"/>
      <listitem open="0" id="uqkiyKwH9Pukg" type="815"/>
      <listitem open="0" id="uOpaR10BDUU4F" type="815"/>
      <listitem open="0" id="uXCdnlhaPpYPw" type="815"/>
      <listitem open="0" id="uHmrh8JlCAUnx" type="815"/>
      <listitem open="0" id="uRxd13hnWECHR" type="815"/>
      <listitem open="0" id="u5oPx5V6iSFfA" type="815"/>
      <listitem open="0" id="ugZ3sBGeZrKAm" type="815"/>
      <listitem open="0" id="uoDc5PQhlL0iw" type="815"/>
      <listitem open="0" id="uFQGAOzmVNvu2" type="815"/>
      <listitem open="0" id="urcXIRHiuEjkJ" type="814"/>
      <listitem open="0" id="uaNe1o7FIglrB" type="814"/>
      <listitem open="0" id="u2KpODy1VXi0j" type="814"/>
      <listitem open="0" id="uS5ckgJJGTl9A" type="814"/>
      <listitem open="0" id="uxLdhOimxhfHf" type="814"/>
      <listitem open="0" id="uUoduB565viSY" type="815"/>
      <listitem open="0" id="uwvWe1mrrLsPB" type="815"/>
      <listitem open="0" id="u3x4WzrtA6xLt" type="815"/>
      <listitem open="0" id="ubDll0hTTvDRg" type="815"/>
      <listitem open="0" id="uJQZtCnveisG5" type="815"/>
      <listitem open="0" id="ungLP0wS7YHHZ" type="815"/>
      <listitem open="0" id="uY3EYOb3ajhP4" type="815"/>
      <listitem open="0" id="ubgphQgmKSyij" type="815"/>
      <listitem open="0" id="u0r4vpZ9YRMqj" type="815"/>
      <listitem open="0" id="u6kNdXKyXVuTS" type="815"/>
      <listitem open="0" id="uq35iuNa1OvZ8" type="815"/>
      <listitem open="0" id="u8RJ5mEMzOVXF" type="815"/>
      <listitem open="0" id="ud5Coe73p0chL" type="815"/>
      <listitem open="0" id="uhIBX8btU1cFh" type="815"/>
      <listitem open="0" id="ujSGIZoxaOj5K" type="815"/>
      <listitem open="0" id="ueWJNweyaF82Z" type="815"/>
      <listitem open="0" id="urAaFGRl5u4o6" type="815"/>
      <listitem open="0" id="u2H06hDvg4AMh" type="815"/>
      <listitem open="0" id="ufCpus5UbDPyO" type="815"/>
      <listitem open="0" id="uff5UvHBeJ94O" type="815"/>
      <listitem open="0" id="uSVLubZotyboU" type="815"/>
      <listitem open="0" id="u5P5NacRJG8dJ" type="815"/>
      <listitem open="0" id="uSX7dUEoO2YYY" type="815"/>
      <listitem open="0" id="ugLeUHuQ71e06" type="815"/>
      <listitem open="0" id="uIi518qdmXtFi" type="815"/>
      <listitem open="0" id="uKOgh8E9yXWQw" type="815"/>
      <listitem open="0" id="ualgrgKByGPi4" type="815"/>
      <listitem open="0" id="uDrCVl45tbDrO" type="815"/>
      <listitem open="0" id="uj8WjKbqRLjNh" type="815"/>
      <listitem open="0" id="uq3YxWKfCE6l9" type="815"/>
      <listitem open="0" id="u4sBwl1QumwgQ" type="815"/>
      <listitem open="0" id="uhRaOWhFXL8Zt" type="815"/>
      <listitem open="0" id="uZvY27x7oeu7o" type="814"/>
      <listitem open="0" id="uJKdDwlO3ytwv" type="815"/>
      <listitem open="0" id="uuYovm57lbZAA" type="815"/>
     </listitem>
     <listitem open="0" id="uJeT2th1v2L4e" type="813">
      <listitem open="0" id="uQPDD9u1rxVtu" type="815"/>
      <listitem open="0" id="uQFskaXhMcR5b" type="815"/>
      <listitem open="0" id="uXpHZVhR5bx7z" type="815"/>
     </listitem>
     <listitem open="0" id="uO0i0KRRWIWHs" type="813">
      <listitem open="0" id="uNxhXL5Q6PU1k" type="815"/>
     </listitem>
     <listitem open="0" id="uQr2x6tTmAqZh" type="813">
      <listitem open="0" id="unGeoHFqk7Iew" type="815"/>
     </listitem>
     <listitem open="0" id="u9bmWVRTqayT0" type="813"/>
     <listitem open="0" id="urcCZk2SPclwo" type="813">
      <listitem open="0" id="uZHhxpTaQh8jy" type="815"/>
     </listitem>
     <listitem open="0" id="uHJDjScV7qP2b" type="813">
      <listitem open="0" id="uDQDyus9o0BRq" type="815"/>
      <listitem open="0" id="uMgJlZbcBXsf2" type="814"/>
      <listitem open="0" id="u4UZ8a2vXiSGn" type="815"/>
      <listitem open="0" id="u6udzdnTd1Wa5" type="815"/>
      <listitem open="0" id="ufKNkd3OFFJD4" type="815"/>
      <listitem open="0" id="utu9jpHn9B6g6" type="815"/>
      <listitem open="0" id="uXzLErCuzRlcc" type="815"/>
      <listitem open="0" id="uLLVIeKAF6AI5" type="815"/>
      <listitem open="0" id="uiuIKCM2layrU" type="815"/>
      <listitem open="0" id="uDxZPDMmiB9C6" type="815"/>
     </listitem>
     <listitem open="0" id="uzSXt7iceDSPR" type="813">
      <listitem open="0" id="ud6ZxuWYHfb8I" type="814"/>
      <listitem open="0" id="ueFo8Dawu4koc" type="815"/>
      <listitem open="0" id="uu1qtqarRpt3F" type="814"/>
      <listitem open="0" id="uaYs5BakeJ5JZ" type="815"/>
      <listitem open="0" id="u6baWfnVZBynW" type="814"/>
     </listitem>
     <listitem open="0" id="ubVMIsXeZTzL3" type="813"/>
     <listitem open="0" id="uOwMotFKyDQMO" type="813">
      <listitem open="0" id="un9OPCLOMjecj" type="815"/>
      <listitem open="0" id="uJeUguvY2s4ta" type="815"/>
      <listitem open="0" id="uelIR5YmIVZu9" type="815"/>
      <listitem open="0" id="u476e5QBJVLaC" type="815"/>
      <listitem open="0" id="uP0lM9DEEdqpQ" type="815"/>
      <listitem open="0" id="u4i1VxfDHuu8T" type="815"/>
      <listitem open="0" id="uF9w6LiQkIhWL" type="815"/>
      <listitem open="0" id="uZNBjI4UiPGqO" type="815"/>
      <listitem open="0" id="uViCEAY3zZ6XA" type="815"/>
      <listitem open="0" id="uYzfM8cVQK76h" type="814"/>
      <listitem open="0" id="uxYxoDHjEETMG" type="814"/>
      <listitem open="0" id="u0hSVvqFAqxe1" type="815"/>
     </listitem>
     <listitem open="0" id="u7ivkp0gFefKv" type="813">
      <listitem open="0" id="uQqN2vRTZRrBf" type="815"/>
      <listitem open="0" id="udW4vSWavmjo5" type="815"/>
      <listitem open="0" id="uBFcCjE7jau6m" type="815"/>
     </listitem>
     <listitem open="0" id="u0DZsX8x6tBfj" type="813">
      <listitem open="0" id="uy37lOWUA0qLO" type="815"/>
      <listitem open="0" id="upwWNaoLhT99r" type="815"/>
     </listitem>
     <listitem open="0" id="u4RrB3UMIXgVE" type="813">
      <listitem open="0" id="uct22wUgCFRGI" type="814"/>
      <listitem open="0" id="uBqZdDAIaZpUq" type="815"/>
      <listitem open="0" id="umOjahVR5ln61" type="814"/>
      <listitem open="0" id="uJ3FL0ag4kApd" type="815"/>
      <listitem open="0" id="uZzkZKFh4vCqC" type="815"/>
      <listitem open="0" id="ubpLcbegEIiRu" type="815"/>
      <listitem open="0" id="urYSDoevJZmhu" type="814"/>
     </listitem>
     <listitem open="1" id="ubge0kexwrzQa" type="813"/>
     <listitem open="0" id="udf4UFGE0Jity" type="813">
      <listitem open="0" id="ulUsDeN9pdt4p" type="814"/>
      <listitem open="0" id="uWYdhPr7pKz7Q" type="814"/>
      <listitem open="0" id="ufg04Cg8u0d7t" type="814"/>
     </listitem>
     <listitem open="0" id="uW15xZpGffUdU" type="813">
      <listitem open="0" id="um3OGDoCrsfFV" type="814"/>
      <listitem open="0" id="uhYXaunqVjMsZ" type="814"/>
      <listitem open="0" id="u3z9nPL4ttE6v" type="814"/>
     </listitem>
     <listitem open="0" id="u9BE3YCkjlMVJ" type="813">
      <listitem open="0" id="u81gnUrkL1QhS" type="815"/>
      <listitem open="0" id="uJO6EjS44unMc" type="815"/>
      <listitem open="0" id="ugLfYAEcKLXbs" type="815"/>
      <listitem open="0" id="uY1Z19Ld0gyNr" type="815"/>
      <listitem open="0" id="uQqaqQDYBudth" type="815"/>
     </listitem>
     <listitem open="0" id="uzqQqdwGP0i2y" type="813">
      <listitem open="0" id="uLGfacuoouwbL" type="815"/>
      <listitem open="0" id="u313toaO7cHuJ" type="815"/>
      <listitem open="0" id="uACDBZuoGTWTN" type="815"/>
     </listitem>
     <listitem open="0" id="uEFtNmx8d5KVg" type="813">
      <listitem open="0" id="u3gNnCm2rbzoZ" type="815"/>
      <listitem open="0" id="u5JCcY0Ac4zfE" type="815"/>
      <listitem open="0" id="ustkAKE7S4qHU" type="815"/>
      <listitem open="0" id="unhSUEScPFQyY" type="815"/>
      <listitem open="0" id="uf3CApYr2tIeN" type="815"/>
      <listitem open="0" id="uV6r7NBtxF9W1" type="815"/>
      <listitem open="0" id="uMq39KdbLu13W" type="815"/>
      <listitem open="0" id="u8GI1ZsaIrF4x" type="815"/>
      <listitem open="0" id="u2jdQ8ID5S0Ac" type="815"/>
      <listitem open="0" id="uocfSMLoRVUZS" type="815"/>
      <listitem open="0" id="unNQXpSaWyqjO" type="815"/>
      <listitem open="0" id="u3C4cNQIJBeJ0" type="815"/>
      <listitem open="0" id="u7JOTU5Lle5Fy" type="815"/>
      <listitem open="0" id="uWgjZWkfOWmXG" type="815"/>
      <listitem open="0" id="ucT25faSWnsbe" type="815"/>
      <listitem open="0" id="uKh4OAhpEGHRm" type="815"/>
      <listitem open="0" id="uaXI3kTkAz5fU" type="815"/>
      <listitem open="0" id="urRd4cqQpBaBN" type="815"/>
      <listitem open="0" id="uSo9mNjTpWKBR" type="815"/>
      <listitem open="0" id="ujXYXbrmjR16v" type="815"/>
      <listitem open="0" id="usRah521zlGbO" type="815"/>
      <listitem open="0" id="uWSuqaNh3sy6y" type="815"/>
      <listitem open="0" id="u58K3Si8c8S6e" type="815"/>
      <listitem open="0" id="upTfOOi0o2WWU" type="815"/>
      <listitem open="0" id="uUYf7dqutfdFK" type="815"/>
      <listitem open="0" id="uXnwp0GTkgjNk" type="815"/>
      <listitem open="0" id="uYmw9Vk6SurA1" type="815"/>
      <listitem open="0" id="u7nGTSfF4Dzko" type="815"/>
      <listitem open="0" id="ur2i9fpdNkoD5" type="815"/>
      <listitem open="0" id="ubM8B5TslzKab" type="815"/>
      <listitem open="0" id="uCkyXblMLrShj" type="814"/>
      <listitem open="0" id="u5Yy5kRp3zom8" type="815"/>
      <listitem open="0" id="urMFi6ArMOVV4" type="815"/>
      <listitem open="0" id="u2WL0Rwr22xRl" type="815"/>
      <listitem open="0" id="uDLL2kZqwIBNi" type="815"/>
      <listitem open="0" id="uQ9fU68WhTFH5" type="815"/>
      <listitem open="0" id="uqSGKyz02fOFe" type="815"/>
      <listitem open="0" id="u6m1bIhwQl8dV" type="815"/>
      <listitem open="0" id="uNJVYKbYUm10y" type="815"/>
      <listitem open="0" id="utG3PE2xagiEL" type="815"/>
      <listitem open="0" id="uqHt1Oi8wHKGC" type="815"/>
      <listitem open="0" id="uncFb1x79BcRJ" type="815"/>
      <listitem open="0" id="uUfhpZuVGeMQp" type="815"/>
      <listitem open="0" id="u2c3aOUAKnnju" type="815"/>
      <listitem open="0" id="uKHvmGo9cnEmQ" type="815"/>
      <listitem open="0" id="ubmk92txCUHUq" type="815"/>
      <listitem open="0" id="uuuMvdWdEwZfZ" type="814"/>
      <listitem open="0" id="u9NUgqgufW2Ka" type="815"/>
      <listitem open="0" id="uLVi8Eo0Xq4Gc" type="815"/>
      <listitem open="0" id="umW79jtLdxzLV" type="815"/>
      <listitem open="0" id="uzrZfvktxzenW" type="815"/>
      <listitem open="0" id="ucP1rbQY9fYqx" type="815"/>
      <listitem open="0" id="uy3GmaLgmGg6y" type="815"/>
      <listitem open="0" id="uDWPlPXzQf4H9" type="814"/>
      <listitem open="0" id="uSF5BHal4KWdU" type="815"/>
      <listitem open="0" id="utwoFYWxdWn6i" type="815"/>
      <listitem open="0" id="u4A8b7GecZSOL" type="815"/>
      <listitem open="0" id="uD27nw4wpvGZx" type="815"/>
      <listitem open="0" id="ubYJ1I2URkVmn" type="815"/>
      <listitem open="0" id="uGFPQcZglTKPK" type="814"/>
      <listitem open="0" id="ubQk895ybLNNB" type="815"/>
      <listitem open="0" id="uXxnZ9aTpppbE" type="815"/>
      <listitem open="0" id="uEw5BCqApUkRx" type="815"/>
      <listitem open="0" id="u0J70zG5jik7G" type="815"/>
      <listitem open="0" id="uxTFfKRZIDhvi" type="815"/>
      <listitem open="0" id="ujfJNihtqSZmz" type="815"/>
      <listitem open="0" id="uLLWMy51loyUh" type="815"/>
      <listitem open="0" id="uz4kIsLA9spQD" type="815"/>
      <listitem open="0" id="ubQ9qQUNEL496" type="815"/>
      <listitem open="0" id="ukT1s9JMNQOLj" type="815"/>
      <listitem open="0" id="uKaatAqEfRJq2" type="815"/>
      <listitem open="0" id="uC4HtsTxU1GRV" type="815"/>
      <listitem open="0" id="uwQnKUOQ2q0f6" type="815"/>
      <listitem open="0" id="uKrvs2qdDX4wW" type="815"/>
      <listitem open="0" id="uBPkeOfg30ya8" type="815"/>
      <listitem open="0" id="u0yFgLjteKWVv" type="815"/>
     </listitem>
     <listitem open="0" id="uq6woPgCNDhTA" type="813">
      <listitem open="0" id="uZdX2oz1leUsF" type="813"/>
     </listitem>
     <listitem open="0" id="u2KTZQ9kGWsS6" type="813">
      <listitem open="0" id="um1QMOC8j1dP2" type="813">
       <listitem open="0" id="uJwotBFXkT4TA" type="813"/>
      </listitem>
     </listitem>
     <listitem open="0" id="upzLgNZSMlGGa" type="813">
      <listitem open="0" id="ulU1I4vvdW0bo" type="815"/>
     </listitem>
     <listitem open="0" id="uxQtMu7ru4jOB" type="813">
      <listitem open="0" id="uPJVA8AIDA7DC" type="815"/>
      <listitem open="0" id="u4zoEHOOx2Wdv" type="815"/>
      <listitem open="0" id="uLYfH5c1G0QRD" type="815"/>
      <listitem open="0" id="u8svvLNRgN4aL" type="815"/>
      <listitem open="0" id="uJKUUd63MRmgu" type="814"/>
      <listitem open="0" id="uTXQkk6oIZWXI" type="815"/>
     </listitem>
     <listitem open="0" id="u422jGAiZc4xx" type="813">
      <listitem open="0" id="u7epFYwTFra1Y" type="814"/>
      <listitem open="0" id="u0PPnPWgbYOoe" type="814"/>
      <listitem open="0" id="u9JSh2JlHBOCh" type="814"/>
      <listitem open="0" id="uMZ8YrIiSO9mk" type="814"/>
      <listitem open="0" id="uC7nf5csj3NKe" type="815"/>
     </listitem>
     <listitem open="0" id="us4UwMQuWvowJ" type="813">
      <listitem open="0" id="udqhIcPO1LB79" type="815"/>
      <listitem open="0" id="u6rIlVxMLcyuP" type="815"/>
     </listitem>
     <listitem open="0" id="uDEuivPMxotSI" type="813">
      <listitem open="0" id="uLZViNgQ9E2je" type="814"/>
      <listitem open="0" id="ujzQOBOFYGgz3" type="814"/>
      <listitem open="0" id="uXSbbOVJvOvqO" type="814"/>
      <listitem open="0" id="uuxYXZaXKhiVg" type="814"/>
      <listitem open="0" id="uCzKfcYvVYCyV" type="814"/>
     </listitem>
     <listitem open="0" id="ud3yEVK8vtvhN" type="813"/>
     <listitem open="0" id="us9YseioI9TgM" type="813"/>
     <listitem open="0" id="uyQnH1v8ZlFKH" type="813"/>
     <listitem open="0" id="ucXsHb6NzgfI1" type="813"/>
     <listitem open="0" id="uKogmcaEsYQlW" type="813"/>
     <listitem open="0" id="ueK15ZEdyD9QS" type="813">
      <listitem open="0" id="uEEMyH6rTeT4L" type="813"/>
     </listitem>
     <listitem open="0" id="uFBH0trH87hes" type="813">
      <listitem open="0" id="uouWhaK9Lo2sM" type="813"/>
      <listitem open="0" id="ugnrRc9W0YXIf" type="813"/>
     </listitem>
     <listitem open="0" id="uT4IjZUUKCyF3" type="813">
      <listitem open="0" id="uMKlw12GXcn3O" type="813"/>
      <listitem open="0" id="ugVIFdQmdEuKU" type="813"/>
      <listitem open="0" id="uU2mj5qTdb8Ho" type="813"/>
      <listitem open="0" id="uhcNwtwE0S19l" type="813"/>
      <listitem open="0" id="usbTh2Q76qi5B" type="813"/>
      <listitem open="0" id="udUqjDFHYGnpC" type="813"/>
      <listitem open="0" id="ut4ge5Dgls3YX" type="813"/>
      <listitem open="0" id="utD0IyH1dg8ml" type="813"/>
     </listitem>
     <listitem open="1" id="uXsdnaKA3zdwu" type="813"/>
     <listitem open="0" id="u2YDb6O6k5qf6" type="813">
      <listitem open="0" id="utsLXc79HfFOJ" type="815"/>
      <listitem open="0" id="uXzBVZtCmdUQN" type="815"/>
      <listitem open="0" id="ugknBaKFC4Mfh" type="815"/>
      <listitem open="0" id="uLBTRYwSGPHCM" type="814"/>
      <listitem open="0" id="umHBGOE1dwiXG" type="815"/>
      <listitem open="0" id="uudACdbs14uLJ" type="815"/>
      <listitem open="0" id="ugA51VElGPkdI" type="814"/>
      <listitem open="0" id="uIaUZXhU10mKL" type="815"/>
      <listitem open="0" id="u6Tu41zEZHK9Z" type="814"/>
      <listitem open="0" id="ubhqmDzWn7rbP" type="815"/>
     </listitem>
     <listitem open="0" id="uDDesxnuMaWqW" type="813">
      <listitem open="0" id="uHyKU2xRUVxyJ" type="815"/>
      <listitem open="0" id="uh3ejQUPAWCE5" type="815"/>
      <listitem open="0" id="uiwvVJrV4qmuQ" type="815"/>
      <listitem open="0" id="ud25fAyABicLQ" type="815"/>
      <listitem open="0" id="uP04JkeryxVIo" type="815"/>
      <listitem open="0" id="uIYRjEtT4V6fP" type="815"/>
      <listitem open="0" id="uX5k2LiLXYeqq" type="815"/>
      <listitem open="0" id="uqdlSntGnoOhN" type="815"/>
     </listitem>
     <listitem open="0" id="uB68wDksp88F1" type="813">
      <listitem open="0" id="u7NV4SawTw8bP" type="815"/>
      <listitem open="0" id="uZXCEOHb3yAGo" type="815"/>
      <listitem open="0" id="uFSRfJdGLFmSB" type="815"/>
      <listitem open="0" id="ukUCS3cWBbuTL" type="815"/>
      <listitem open="0" id="u1OdqcMD7lDyY" type="815"/>
      <listitem open="0" id="up1Dn58pWEoTN" type="815"/>
      <listitem open="0" id="uM84kDuctoOjb" type="815"/>
      <listitem open="0" id="uNhlSy2qb09gL" type="815"/>
      <listitem open="0" id="uWg0bIOYeGip8" type="815"/>
      <listitem open="0" id="uh4GH31yJkGJI" type="815"/>
     </listitem>
     <listitem open="0" id="u0jsR8jy67Rfo" type="813"/>
     <listitem open="0" id="uoRoS02AXpUhj" type="813">
      <listitem open="0" id="uRjabANSHqaDR" type="815"/>
      <listitem open="0" id="uzFqelaCSpZEl" type="815"/>
      <listitem open="0" id="ucDuKOwlyoJHV" type="815"/>
      <listitem open="0" id="uQAtgDXmSMLrA" type="815"/>
      <listitem open="0" id="uKFlFuzUqAxCK" type="815"/>
      <listitem open="0" id="uAmr2KeDRSE1b" type="815"/>
      <listitem open="0" id="uLbsDA3ZQUCzW" type="814"/>
      <listitem open="0" id="uRNvGWUyXt3qm" type="815"/>
      <listitem open="0" id="uPTlmUGL5b2R0" type="814"/>
      <listitem open="0" id="uf9xHPLlh8qtJ" type="815"/>
      <listitem open="0" id="uil3oixY0Q9gd" type="815"/>
      <listitem open="0" id="u2TIoWMUT6Kjy" type="814"/>
     </listitem>
     <listitem open="0" id="udtlXeClGQczR" type="813"/>
     <listitem open="0" id="uQdQqyD0urQhR" type="813">
      <listitem open="0" id="urDimXiBwlYHr" type="815"/>
      <listitem open="0" id="urEPF9ujlU08n" type="815"/>
      <listitem open="0" id="u7z8ZEHHnu63N" type="815"/>
      <listitem open="0" id="uQitjQOZAdUo2" type="815"/>
      <listitem open="0" id="uYu5m9i5FZd1R" type="814"/>
      <listitem open="0" id="udQqmx5i2hxJ9" type="815"/>
      <listitem open="0" id="uXn7pLXQzknq4" type="815"/>
      <listitem open="0" id="uUsUWZSzt7qCk" type="815"/>
      <listitem open="0" id="usT1FNE3geT2I" type="815"/>
      <listitem open="0" id="uETZYAhXnw1t7" type="815"/>
      <listitem open="0" id="ukjt1wxWpujxS" type="815"/>
      <listitem open="0" id="ubrQ00hcNRKUr" type="815"/>
      <listitem open="0" id="uzYjcvcTD271H" type="815"/>
      <listitem open="0" id="ufGB9nXNnlrgK" type="815"/>
     </listitem>
     <listitem open="0" id="uM950Y2KPpRlV" type="807" label="ScipyenViewer"/>
     <listitem open="1" id="uatorjw59LS9K" type="813">
      <listitem open="0" id="uzNu1Keo6fhQf" type="815"/>
      <listitem open="0" id="uECiOUNCiFE0o" type="815"/>
      <listitem open="0" id="uPW1gXy8it8FU" type="815"/>
      <listitem open="0" id="ufAL7Xz1zsvlm" type="815"/>
      <listitem open="0" id="uzpBB3QlysINO" type="815"/>
      <listitem open="0" id="uRdTxWLGrHT8n" type="815"/>
      <listitem open="0" id="u6xJj770bhbK6" type="815"/>
      <listitem open="0" id="u2uBNtXHQ71PC" type="815"/>
      <listitem open="0" id="u2BZPqBlxbJeK" type="815"/>
      <listitem open="0" id="uykxoNBvxPOdd" type="815"/>
      <listitem open="0" id="uxLzM7BYY4B3m" type="815"/>
      <listitem open="0" id="uPUKaJUTnLryL" type="815"/>
      <listitem open="0" id="ufK3KCFMWWaEl" type="815"/>
      <listitem open="0" id="u1zD7aVXjKvkH" type="815"/>
      <listitem open="0" id="udwnuTenKjX9f" type="815"/>
      <listitem open="0" id="ut06BMRmOsMtV" type="815"/>
      <listitem open="0" id="uOHxgFdwhwdGP" type="815"/>
      <listitem open="0" id="ukXlwKABbYhoB" type="814"/>
      <listitem open="0" id="u5o4pMVem52ji" type="815"/>
      <listitem open="0" id="uiWS8i4EjfY9L" type="814"/>
      <listitem open="0" id="uVquFOtDXWrZ3" type="815"/>
      <listitem open="0" id="uZfBPHzpOoauO" type="815"/>
      <listitem open="0" id="uPoF0l9I3N7Nf" type="814"/>
      <listitem open="0" id="ufG2NzwkGb7Wy" type="814"/>
      <listitem open="0" id="uPmC5gsNAxnPd" type="815"/>
      <listitem open="0" id="u8NAkT3tUAVnk" type="815"/>
      <listitem open="0" id="uoi46LlCOcgDy" type="815"/>
     </listitem>
     <listitem open="0" id="uBbXToV1Clxpg" type="813">
      <listitem open="0" id="u7tS15yz3CqVG" type="815"/>
      <listitem open="0" id="uKRoHLEw5TCUo" type="814"/>
      <listitem open="0" id="uPqoAMIylPRmL" type="815"/>
     </listitem>
     <listitem open="0" id="uCPiwu64w67a9" type="813">
      <listitem open="0" id="uEMRiQGwTwffv" type="814"/>
      <listitem open="0" id="uEF2LV4jOFtvV" type="814"/>
      <listitem open="0" id="uK0qgrKGnbezY" type="815"/>
      <listitem open="0" id="ufaMorxE94u5s" type="814"/>
      <listitem open="0" id="urjXJIQhepNQc" type="814"/>
     </listitem>
     <listitem open="1" id="u3U6lbQZ91x1m" type="813"/>
     <listitem open="0" id="uP9AVZNgRYEUu" type="813">
      <listitem open="0" id="umA0URd0ZOt7j" type="815"/>
      <listitem open="0" id="uPWukG6XDmtEP" type="815"/>
     </listitem>
     <listitem open="0" id="uQVbTqhbrZBb7" type="813">
      <listitem open="0" id="u5rCe5W5WcxDx" type="815"/>
      <listitem open="0" id="uDgWBclcwZLt8" type="815"/>
      <listitem open="0" id="uDQxFaKLiwhYJ" type="814"/>
      <listitem open="0" id="uTCHNPjfOVp26" type="815"/>
      <listitem open="0" id="uEWOl3wOFFkGy" type="815"/>
      <listitem open="0" id="uLA4uIjDOIyMN" type="815"/>
      <listitem open="0" id="umQXc61vDPI5A" type="815"/>
      <listitem open="0" id="uojmfVPL9v7OT" type="815"/>
      <listitem open="0" id="uZ1lS8cV1VfVx" type="815"/>
      <listitem open="0" id="uZhlqHAg2iQIN" type="815"/>
      <listitem open="0" id="uBIJSJGKgE4r2" type="815"/>
      <listitem open="0" id="uArdMGmMAlcSe" type="815"/>
      <listitem open="0" id="uq1xws9tCTb9n" type="815"/>
      <listitem open="0" id="ukAQTq28ne84R" type="815"/>
      <listitem open="0" id="uGleblJ5WOyJ5" type="815"/>
      <listitem open="0" id="u5lU6kGlSvmIr" type="814"/>
      <listitem open="0" id="usE9yKa7fdnN2" type="814"/>
      <listitem open="0" id="unEJd7tCmdDVb" type="815"/>
      <listitem open="0" id="ua8cpuqTJNK23" type="815"/>
      <listitem open="0" id="u3pO5zfOZTNoC" type="815"/>
      <listitem open="0" id="uG7QaPYGGos6H" type="815"/>
      <listitem open="0" id="uduJUCZgsCYC6" type="815"/>
      <listitem open="0" id="uzGnXTcMDZjJj" type="815"/>
      <listitem open="0" id="unOVkzDZ7Uhun" type="815"/>
      <listitem open="0" id="uO59isKHiKJKi" type="815"/>
      <listitem open="0" id="ukeix6WL7jJ2E" type="815"/>
      <listitem open="0" id="uJoVTJfhZyy6B" type="815"/>
      <listitem open="0" id="uvClKe1eow1qU" type="815"/>
      <listitem open="0" id="uefLKEqYNMvpA" type="815"/>
      <listitem open="0" id="uuEdfaUVNCuHT" type="815"/>
      <listitem open="0" id="uAKrdon5lR6RS" type="815"/>
      <listitem open="0" id="uCLK63Nz8w2oO" type="815"/>
      <listitem open="0" id="ud0KDSayDn93D" type="815"/>
      <listitem open="0" id="uLjFbfRCakHc4" type="815"/>
      <listitem open="0" id="u6Tmcah76P476" type="814"/>
      <listitem open="0" id="u869JzwIB59ge" type="815"/>
      <listitem open="0" id="uBq7zXUQ1LIMf" type="815"/>
      <listitem open="0" id="uaS8jUMsNTzgT" type="815"/>
     </listitem>
     <listitem open="0" id="uYdAcSttImQco" type="813">
      <listitem open="0" id="uZWnNYVlh7FLl" type="815"/>
      <listitem open="0" id="uaGdtZSxR3WZz" type="815"/>
      <listitem open="0" id="uRQstCw4T5vtn" type="814"/>
      <listitem open="0" id="uuGoOjKiGv0mz" type="815"/>
      <listitem open="0" id="uicpxvmc116nc" type="815"/>
      <listitem open="0" id="u5ryLbVV60pwU" type="815"/>
      <listitem open="0" id="ubX02zmEgglhQ" type="815"/>
      <listitem open="0" id="ujqblzLa0kc8G" type="815"/>
      <listitem open="0" id="uJcg8ZNVAwX1y" type="815"/>
      <listitem open="0" id="u9qbVvXYZguRg" type="815"/>
      <listitem open="0" id="uiimiC6TvzMUD" type="815"/>
      <listitem open="0" id="ud4ww6CJMB50h" type="815"/>
      <listitem open="0" id="uUqrykeQHSbuu" type="814"/>
      <listitem open="0" id="uTiJ0ixp33iag" type="814"/>
      <listitem open="0" id="ulEMK3Ug11DZX" type="815"/>
     </listitem>
     <listitem open="0" id="uWddJW35Y56dy" type="813">
      <listitem open="0" id="ul7f5Tl7zDjm2" type="815"/>
      <listitem open="0" id="uFHriqu3a9Oib" type="815"/>
      <listitem open="0" id="ublc9SIesZLTn" type="815"/>
      <listitem open="0" id="uMqLNuj46aDLW" type="815"/>
      <listitem open="0" id="uM7yEgAKTmGPN" type="815"/>
      <listitem open="0" id="uOvRVizhlsw5X" type="815"/>
      <listitem open="0" id="uIQR4J9jk0dEl" type="814"/>
      <listitem open="0" id="uRb8ZICu3ixSS" type="815"/>
      <listitem open="0" id="uZxxhxR4m21ac" type="814"/>
      <listitem open="0" id="uyisQ9wtRqiw4" type="815"/>
      <listitem open="0" id="ulHIi5pPw2OCh" type="814"/>
      <listitem open="0" id="uqfZUTwm934K2" type="814"/>
     </listitem>
     <listitem open="1" id="uGTuNDzJmSqEf" type="813"/>
     <listitem open="0" id="umiCcfpr3ScaM" type="813"/>
     <listitem open="0" id="uThKo9lcolh9F" type="813"/>
     <listitem open="0" id="udWnkWaKWhRI0" type="813"/>
     <listitem open="0" id="ufs1BhCTRb9Ie" type="813"/>
     <listitem open="0" id="uoqlsPm2MZSEK" type="813"/>
     <listitem open="0" id="uWxSlnj58Zu4c" type="813"/>
     <listitem open="0" id="uOC1NQlx4hAmm" type="813"/>
     <listitem open="0" id="upT7msOGGtCQ9" type="813"/>
     <listitem open="0" id="uaBeLBvPyQNKP" type="813">
      <listitem open="0" id="ugn7c8OYqLYdL" type="815"/>
      <listitem open="0" id="ulc9OJIBrkxMU" type="815"/>
      <listitem open="0" id="uoza88MnpTKSY" type="813">
       <listitem open="0" id="uAeoV5kLFcgML" type="815"/>
       <listitem open="0" id="u20kBax7jTzgt" type="815"/>
       <listitem open="0" id="uepp4HRgdXL3k" type="815"/>
      </listitem>
     </listitem>
     <listitem open="0" id="uDAzkx47H2HUX" type="813">
      <listitem open="0" id="ul1UBeTx8NMTq" type="815"/>
     </listitem>
     <listitem open="0" id="uuSfpnDAuxIzw" type="813">
      <listitem open="0" id="uy0b6T8kXvNq0" type="815"/>
     </listitem>
     <listitem open="0" id="uhUloQKUJ0rxk" type="813"/>
     <listitem open="0" id="u7FhyqmYHacXS" type="813">
      <listitem open="0" id="uF2LqsgUhaSBM" type="815"/>
      <listitem open="0" id="uUY7m6dD5ZdGm" type="815"/>
      <listitem open="0" id="uu7StT4iJnsPb" type="815"/>
      <listitem open="0" id="usInQo5Q78UW1" type="815"/>
      <listitem open="0" id="uxSUWbDSYJdou" type="815"/>
      <listitem open="0" id="uS0lMse0YyC6F" type="815"/>
      <listitem open="0" id="uL4vUtIICM8Bw" type="815"/>
      <listitem open="0" id="uEYCOl65wROHn" type="815"/>
      <listitem open="0" id="u3bKDRMEoyZ1A" type="815"/>
      <listitem open="0" id="utZPVquY4K5If" type="815"/>
      <listitem open="0" id="u9YVdRubZEgvY" type="815"/>
      <listitem open="0" id="uVdQpSSFZlnwB" type="815"/>
      <listitem open="0" id="ugcjhtFpADLNe" type="815"/>
      <listitem open="0" id="uhYDlSCdN0GWg" type="815"/>
      <listitem open="0" id="unfM46e7j4g8a" type="815"/>
      <listitem open="0" id="u4wWM0IoxK8D5" type="815"/>
      <listitem open="0" id="uggt4LpjP4Ex0" type="814"/>
     </listitem>
     <listitem open="0" id="uDeiQRNgvwIFC" type="813">
      <listitem open="0" id="u5GIwBg33930f" type="815"/>
      <listitem open="0" id="ui2FX60i7jKFz" type="815"/>
      <listitem open="0" id="uHnB52akrTTe3" type="815"/>
      <listitem open="0" id="uqs5D2S8VWkbS" type="815"/>
     </listitem>
    </listitem>
    <listitem open="1" id="Use_Case_View" type="802"/>
   </listitem>
  </listview>
  <codegeneration>
   <codegenerator language="Python">
    <sourcecode value="super().__init__(parent)&#xa;self._scipyenWindow_=None&#xa;self._docTitle_=None&#xa;self._winTitle_=None&#xa;self._viewer_class_name_=type(self).__name__&#xa;self._custom_viewer_name_=None&#xa;self._linkedViewers_=list()&#xa;self._data_=None&#xa;self._data_var_name_=None&#xa;self._ID_=self.winId()&#xa;if isinstance(pWin,QtWidgets.QMainWindow)and type(pWin).__name__==&quot;ScipyenWindow&quot;:&#xa;  self._scipyenWindow_=pWin&#xa;&#xa;else:&#xa;  if parent is not None and type(parent).__name__==&quot;ScipyenWindow&quot;:&#xa;    self._scipyenWindow_=parent&#xa;&#xa;&#xa;self._gui_client_=asGUIClient&#xa;if isinstance(doc_title,str)and len(doc_title.strip()):&#xa;  self._docTitle_=doc_title&#xa;&#xa;if isinstance(varname,str)and len(varname.strip()):&#xa;  self._data_var_name_=varname&#xa;&#xa;if isinstance(win_title,str)and len(win_title.strip()):&#xa;  self._custom_viewer_name_=win_title&#xa;  self._winTitle_=self._custom_viewer_name_&#xa;&#xa;else:&#xa;  if self._scipyenWindow_ is not None:&#xa;    viewerVarName=[k for k in self._scipyenWindow_.workspace.keys()if\&#xa;    type(self._scipyenWindow_.workspace[k]).__name__==type(self).__name__ and\self._scipyenWindow_.workspace[k].ID==self._scipyenWindow_.currentImageViewerWindowID]if len(viewerVarName):&#xa;      self._custom_viewer_name_=viewerVarName[-1]&#xa;      self._winTitle_=self._custom_viewer_name_&#xa;&#xa;    else:&#xa;      self._winTitle_=&quot;%s%d&quot;%(self._viewer_class_name_,self._ID_)&#xa;&#xa;&#xa;  else:&#xa;    self._winTitle_=&quot;%s%d&quot;%(self._viewer_class_name_,self._ID_)&#xa;&#xa;&#xa;if isinstance(self._docTitle_,str)and len(self._docTitle_.strip())>0:&#xa;  self.setWindowTitle(&quot;%s - %s&quot;%(self._docTitle_,self._winTitle_))&#xa;&#xa;else:&#xa;  self.setWindowTitle(self._winTitle_)&#xa;&#xa;" id="ufK3KCFMWWaEl"/>
    <sourcecode value="pass&#xa;" id="uzpBB3QlysINO"/>
    <sourcecode value="pass&#xa;" id="ut06BMRmOsMtV"/>
    <sourcecode value="pass&#xa;" id="u1zD7aVXjKvkH"/>
    <sourcecode value="self.setData(*args,**kwargs)&#xa;" id="uPmC5gsNAxnPd"/>
    <sourcecode value="pass&#xa;" id="uOHxgFdwhwdGP"/>
    <sourcecode value="return self._ID_&#xa;" id="uxLzM7BYY4B3m"/>
    <sourcecode value="self._ID_=val&#xa;if isinstance(self._custom_viewer_name_,str)and len(self._custom_viewer_name_.strip())>0:&#xa;  self._winTitle_=self._custom_viewer_name_&#xa;&#xa;else:&#xa;  self._winTitle_=&quot;%s%d&quot;%(self._viewer_class_name_,self._ID_)&#xa;&#xa;if isinstance(self._docTitle_,str)and len(self._docTitle_.strip())>0:&#xa;  self.setWindowTitle(&quot;%s - %s&quot;%(self._docTitle_,self._winTitle_))&#xa;&#xa;else:&#xa;  self.setWindowTitle(self._winTitle_)&#xa;&#xa;" id="uPUKaJUTnLryL"/>
    <sourcecode value="return self._scipyenWindow_&#xa;&#xa;" id="uECiOUNCiFE0o"/>
    <sourcecode value="if type(val).__name__==&quot;ScipyenWindow&quot;:&#xa;  self._scipyenWindow_=val&#xa;&#xa;else:&#xa;  raise TypeError(&quot;Unexpected type for appWindow setter argument; a ScipyenWindow is required with attribute 'workspace'; instead we've got %s&quot;%type(val).__name__)&#xa;&#xa;" id="uPW1gXy8it8FU"/>
    <sourcecode value="return self._gui_client_&#xa;" id="u2BZPqBlxbJeK"/>
    <sourcecode value="if not isinstance(value,bool):&#xa;  raise TypeError(&quot;Expecting a bool; got %s instead&quot;%type(value).__name__)&#xa;&#xa;self._gui_client_=value&#xa;" id="uykxoNBvxPOdd"/>
    <sourcecode value="return self._winTitle_&#xa;" id="u8NAkT3tUAVnk"/>
    <sourcecode value="if not isinstance(value,(str,type(None))):&#xa;  raise TypeError(&quot;Expecting a str, or None; got %s instead&quot;%type(value.__name__))&#xa;&#xa;if isinstance(value,str)and len(value.strip()):&#xa;  self._winTitle_=value&#xa;&#xa;else:&#xa;  if self._scipyenWindow_ is not None:&#xa;    viewerVarName=[k for k in self._scipyenWindow_.workspace.keys()if\&#xa;    type(self._scipyenWindow_.workspace[k]).__name__==type(self).__name__ and\self._scipyenWindow_.workspace[k].ID==self._scipyenWindow_.currentSignalViewerWindowID]&#xa;&#xa;if isinstance(self._docTitle_,str)and len(self._docTitle_.strip()):&#xa;  self.setWindowTitle(&quot;%s - %s&quot;%(self._winTitle_,self._docTitle_))&#xa;&#xa;else:&#xa;  self.setWindowTitle(self._winTitle_)&#xa;&#xa;" id="uoi46LlCOcgDy"/>
    <sourcecode value="return self._docTitle_&#xa;" id="uRdTxWLGrHT8n"/>
    <sourcecode value="if not isinstance(value,(str,type(None))):&#xa;  raise TypeError(&quot;Expecting a str, or None; got %s instead&quot;%type(value.__name__))&#xa;&#xa;if isinstance(value,str)and len(value.strip()):&#xa;  self._docTitle_=value&#xa;&#xa;else:&#xa;  self._docTitle_=None&#xa;&#xa;if isinstance(self._docTitle_,str)and len(self._docTitle_.strip()):&#xa;  self.setWindowTitle(&quot;%s - %s&quot;%(self._winTitle_,self._docTitle_))&#xa;&#xa;else:&#xa;  self.setWindowTitle(self._winTitle_)&#xa;&#xa;" id="u6xJj770bhbK6"/>
    <sourcecode value="if self._winTitle_ is None or(isinstance(self._winTitle_,str)and len(self._winTitle_)==0):&#xa;  self._winTitle_=type(self).__name__&#xa;&#xa;if isinstance(self._docTitle_,str)and len(self._docTitle_):&#xa;  self.setWindowTitle(&quot;%s - %s&quot;%(self._winTitle_,self._docTitle_))&#xa;&#xa;else:&#xa;  self.setWindowTitle(self._winTitle_)&#xa;&#xa;" id="udwnuTenKjX9f"/>
    <sourcecode value="self._save_settings_()&#xa;evt.accept()&#xa;self.close()&#xa;" id="ufAL7Xz1zsvlm"/>
    <sourcecode value="evt.accept()&#xa;if evt.type()in(QtCore.QEvent.FocusIn,QtCore.QEvent.WindowActivate):&#xa;  self.sig_activated.emit(self.ID)&#xa;  return True&#xa;&#xa;return super().event(evt)&#xa;" id="u2uBNtXHQ71PC"/>
    <sourcecode value="pass&#xa;" id="uZfBPHzpOoauO"/>
    <sourcecode value="super(InteractiveTreeWidget,self).__init__(*args,**kwargs)&#xa;self.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)&#xa;" id="uZHhxpTaQh8jy"/>
    <sourcecode value="super().__init__(**kwargs)&#xa;self.settings=QtCore.QSettings()&#xa;self.treeWidget=InteractiveTreeWidget(parent=self)&#xa;self.treeWidget.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)&#xa;self.treeWidget.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)&#xa;self.treeWidget.setDragEnabled(True)&#xa;self.treeWidget.customContextMenuRequested[QtCore.QPoint].connect(self.slot_customContextMenuRequested)&#xa;self.treeWidget.itemDoubleClicked[QtWidgets.QTreeWidgetItem,int].connect(self.slot_itemDoubleClicked)&#xa;self.setCentralWidget(self.treeWidget)&#xa;self.toolBar=QtWidgets.QToolBar(&quot;Main&quot;,self)&#xa;self.toolBar.setObjectName(&quot;DataViewer_Main_Toolbar&quot;)&#xa;refreshAction=self.toolBar.addAction(QtGui.QIcon(&quot;:/images/view-refresh.svg&quot;),&quot;Refresh&quot;)&#xa;refreshAction.triggered.connect(self.slot_refreshDataDisplay)&#xa;self.addToolBar(QtCore.Qt.TopToolBarArea,self.toolBar)&#xa;self._load_settings_()&#xa;self._data_=data&#xa;self._data_var_name_=None&#xa;if isinstance(self._data_,(dict,tuple,list)):&#xa;  self.setData(self._data_,docTitle=self._docTitle_)&#xa;&#xa;elif data is not None:&#xa;  warnings.warn(&quot;Expecting a dict, tuple, or list; got %s instead&quot;%type(data).__name__)&#xa;&#xa;" id="uZFYexDVjy4d2"/>
    <sourcecode value="if not self._gui_client_:&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowSize&quot;]),self.size())&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowPos&quot;]),self.pos())&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowState&quot;]),self.saveState())&#xa;&#xa;" id="uMhtz0ZS0V2eq"/>
    <sourcecode value="if not self._gui_client_:&#xa;  windowSize=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowSize&quot;]),None)&#xa;  if windowSize is not None:&#xa;    self.resize(windowSize)&#xa;&#xa;  windowPos=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowPos&quot;]),None)&#xa;  if windowPos is not None:&#xa;    self.move(windowPos)&#xa;&#xa;  windowState=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowState&quot;]),None)&#xa;  if windowState is not None:&#xa;    self.restoreState(windowState)&#xa;&#xa;&#xa;" id="uKyqlTM4yHfHt"/>
    <sourcecode value="self._save_settings_()&#xa;evt.accept()&#xa;self.close()&#xa;" id="ufywipW04Q0Ph"/>
    <sourcecode value="if self._scipyenWindow_ is None:&#xa;  return&#xa;&#xa;if self._data_var_name_ is not None and self._data_var_name_ in self._scipyenWindow_.workspace.keys():&#xa;  self.setData(self._scipyenWindow_.workspace[self._data_var_name_],self._data_var_name_)&#xa;&#xa;" id="uolsgilrYEvC8"/>
    <sourcecode value="if self._scipyenWindow_ is None:&#xa;  return&#xa;&#xa;item_path=list()&#xa;item_path.append(item.text(0))&#xa;parent=item.parent()&#xa;while parent is not None:&#xa;  item_path.append(parent.text(0))&#xa;  parent=parent.parent()&#xa;&#xa;item_path.reverse()&#xa;obj=get_nested_value(self._data_,item_path[1:])&#xa;objname=&quot; > &quot;.join(item_path)&#xa;newWindow=bool(QtWidgets.QApplication.keyboardModifiers()&amp;QtCore.Qt.ShiftModifier)&#xa;useSignalViewerForNdArrays=bool(QtWidgets.QApplication.keyboardModifiers()&amp;QtCore.Qt.ControlModifier)&#xa;self._scipyenWindow_.viewObject(obj,objname,&#xa;newWindow=newWindow,useSignalViewerForNdArrays=useSignalViewerForNdArrays)" id="uhiICRznNRpns"/>
    <sourcecode value="if self._scipyenWindow_ is None:&#xa;return indexList=self.treeWidget.selectedIndexes()&#xa;if len(indexList)==0:&#xa;  return&#xa;&#xa;cm=QtWidgets.QMenu(&quot;Data operations&quot;,self)&#xa;cm.setToolTipsVisible(True)&#xa;copyItemData=cm.addAction(&quot;Copy to workspace&quot;)&#xa;copyItemData.setToolTip(&quot;Copy item data to workspace (SHIFT to assign full path as name)&quot;)&#xa;copyItemData.setStatusTip(&quot;Copy item data to workspace (SHIFT to assign full path as name)&quot;)&#xa;copyItemData.setWhatsThis(&quot;Copy item data to workspace (SHIFT to assign full path as name)&quot;)&#xa;copyItemData.triggered.connect(self.slot_exportItemDataToWorkspace)&#xa;copyItemPath=cm.addAction(&quot;Copy path(s)&quot;)&#xa;copyItemPath.triggered.connect(self.slot_copyPaths)&#xa;sendToConsole=cm.addAction(&quot;Send data path to console&quot;)&#xa;sendToConsole.triggered.connect(self.slot_exportItemPathToConsole)&#xa;viewItemData=cm.addAction(&quot;View&quot;)&#xa;viewItemData.setToolTip(&quot;View item in a separate window (SHIFT for a new window)&quot;)&#xa;viewItemData.setStatusTip(&quot;View item in a separate window (SHIFT for a new window)&quot;)&#xa;viewItemData.setWhatsThis(&quot;View item in a separate window (SHIFT for a new window)&quot;)&#xa;viewItemData.triggered.connect(self.slot_viewItemDataInNewWindow)&#xa;cm.popup(self.treeWidget.mapToGlobal(point),copyItemData)&#xa;" id="udpPb6R7uE5SK"/>
    <sourcecode value="if self._data_var_name_ is None:&#xa;  return&#xa;&#xa;items=self.treeWidget.selectedItems()&#xa;if len(items)==0:&#xa;  return&#xa;&#xa;if isinstance(self._data_,(dict,tuple,list)):&#xa;  item_paths=list()&#xa;  for item in items:&#xa;    item_path=self._get_path_for_item_(item)&#xa;    path_element_strings=[item_path[0]]&#xa;    for ipath in item_path[1:]:&#xa;      path_element_strings.append(&quot;['&quot;+ipath+&quot;']&quot;)&#xa;&#xa;    item_paths.append(&quot;&quot;.join(path_element_strings))&#xa;&#xa;&#xa;return item_paths&#xa;" id="uIUPyS0kKRjMu"/>
    <sourcecode value="if self._scipyenWindow_ is None:&#xa;  return&#xa;&#xa;if len(item_paths)>1:&#xa;  if bool(QtWidgets.QApplication.keyboardModifiers()&amp;QtCore.Qt.ControlModifier):&#xa;    self._scipyenWindow_.app.clipboard().setText(&quot;,\n&quot;.join(item_paths))&#xa;&#xa;  else:&#xa;    self._scipyenWindow_.app.clipboard().setText(&quot;, &quot;.join(item_paths))&#xa;&#xa;&#xa;elif len(item_paths)==1:&#xa;  self._scipyenWindow_.app.clipboard().setText(item_paths[0])&#xa;&#xa;" id="uKfFm8hhyDqMP"/>
    <sourcecode value="if self._scipyenWindow_ is None:&#xa;  return&#xa;&#xa;item_paths=self.getSelectedPaths()&#xa;self.exportPathsToClipboard(item_paths)&#xa;" id="updVcZ1oGSsMt"/>
    <sourcecode value="if self._scipyenWindow_ is None:&#xa;  return&#xa;&#xa;item_paths=self.getSelectedPaths()&#xa;self.exportPathsToClipboard(item_paths)&#xa;self._scipyenWindow_.console.paste()&#xa;" id="u2alT3HsEIpdf"/>
    <sourcecode value="fullPathAsName=bool(QtWidgets.QApplication.keyboardModifiers()&amp;QtCore.Qt.ShiftModifier)&#xa;if self._scipyenWindow_ is None:&#xa;  return&#xa;&#xa;items=self.treeWidget.selectedItems()&#xa;if len(items)==0:&#xa;  return&#xa;&#xa;self._export_data_items_(items,fullPathAsName=fullPathAsName)&#xa;" id="uV3gWu5B0l6vT"/>
    <sourcecode value="if self._scipyenWindow_ is None:&#xa;  return&#xa;&#xa;items=self.treeWidget.selectedItems()&#xa;if len(items)==0:&#xa;  return&#xa;&#xa;values=list()&#xa;item_paths=list()&#xa;full_item_paths=list()&#xa;useSignalViewerForNdArrays=bool(QtWidgets.QApplication.keyboardModifiers()&amp;QtCore.Qt.ControlModifier)&#xa;if isinstance(self._data_,(dict,tuple,list)):&#xa;  for item in items:&#xa;    item_path=list()&#xa;    item_path.append(item.text(0))&#xa;    parent=item.parent()&#xa;    while parent is not None:&#xa;      item_path.append(parent.text(0))&#xa;      parent=parent.parent()&#xa;&#xa;    item_path.reverse()&#xa;    value=get_nested_value(self._data_,item_path[1:])&#xa;    values.append(value)&#xa;    item_paths.append(item_path[-1])&#xa;    full_item_paths.append(item_path)&#xa;&#xa;  if len(values):&#xa;    if len(values)==1:&#xa;      obj=values[0]&#xa;      newWindow=bool(QtWidgets.QApplication.keyboardModifiers()&amp;QtCore.Qt.ShiftModifier)&#xa;      objname=&quot; \u3009&quot;.join(full_item_paths[0])&#xa;      self._scipyenWindow_.viewObject(obj,objname,&#xa;      newWindow=newWindow,useSignalViewerForNdArrays=useSignalViewerForNdArrays)&#xa;    else:&#xa;      for name,path,obj in zip(item_paths,full_item_paths,values):&#xa;        objname=&quot; > &quot;.join(path)&#xa;        self._scipyenWindow_.viewObject(obj,objname,&#xa;        newWindow=True,useSignalViewerForNdArrays=useSignalViewerForNdArrays)&#xa;&#xa;&#xa;&#xa;" id="uOdXQ5FI1mCL7"/>
    <sourcecode value="item_path=list()&#xa;item_path.append(item.text(0))&#xa;parent=item.parent()&#xa;while parent is not None:&#xa;  item_path.append(parent.text(0))&#xa;  parent=parent.parent()&#xa;&#xa;item_path.reverse()&#xa;return item_path&#xa;" id="uRCY0uLQWEgsO"/>
    <sourcecode value="if self._scipyenWindow_ is None:&#xa;  return&#xa;&#xa;values=list()&#xa;item_names=list()&#xa;item_path_names=list()&#xa;if isinstance(self._data_,(dict,tuple,list)):&#xa;  for item in items:&#xa;    item_path=self._get_path_for_item_(item)&#xa;    value=get_nested_value(self._data_,item_path[1:])&#xa;    values.append(value)&#xa;    item_names.append(item_path[-1])&#xa;    item_path_names.append(&quot;_&quot;.join(item_path))&#xa;&#xa;  if len(values):&#xa;    if len(values)==1:&#xa;      dlg=quickdialog.QuickDialog(self,&quot;Copy to workspace&quot;)&#xa;      namePrompt=quickdialog.StringInput(dlg,&quot;Data name:&quot;)&#xa;      if fullPathAsName:&#xa;        newVarName=strutils.string_to_valid_identifier(item_path_names[0])&#xa;&#xa;      else:&#xa;        newVarName=strutils.string_to_valid_identifier(item_names[0])&#xa;&#xa;      namePrompt.variable.setClearButtonEnabled(True)&#xa;      namePrompt.variable.redoAvailable=True&#xa;      namePrompt.variable.undoAvailable=True&#xa;      namePrompt.setText(newVarName)&#xa;      if dlg.exec()==QtWidgets.QDialog.Accepted:&#xa;        newVarName=validateVarName(namePrompt.text(),self._scipyenWindow_.workspace)&#xa;        self._scipyenWindow_.assignToWorkspace(newVarName,values[0])&#xa;&#xa;&#xa;    else:&#xa;      for name,full_path,value in zip(item_names,item_path_names,values):&#xa;        if fullPathAsName:&#xa;          newVarName=validateVarName(full_path,self._scipyenWindow_.workspace)&#xa;&#xa;        else:&#xa;          newVarName=validateVarName(name,self._scipyenWindow_.workspace)&#xa;&#xa;        self._scipyenWindow_.assignToWorkspace(newVarName,value)&#xa;&#xa;&#xa;&#xa;&#xa;" id="u5KekChfeUUrz"/>
    <sourcecode value="if item.childCount():&#xa;  for k in range(item.childCount()):&#xa;    self.collapseRecursive(item.child(k))&#xa;&#xa;&#xa;if collapseCurrent:&#xa;  self.treeWidget.collapseItem(item)&#xa;&#xa;" id="urqTsnWZqvh2V"/>
    <sourcecode value="if not isinstance(data,(dict,tuple,list)):&#xa;  data=:&#xa;    &quot;Type&quot;:type(data).__name__,&quot;__dict__&quot;:data.__dict__&#xa;&#xa;&#xa;if data is not self._data_:&#xa;  if isinstance(docTitle,str)and len(docTitle)>0:&#xa;    self._docTitle_=docTitle&#xa;&#xa;  else:&#xa;    self._docTitle_=None&#xa;&#xa;  self._data_=data&#xa;  self._data_var_name_=self._docTitle_&#xa;  self.treeWidget.setData(self._data_)&#xa;  if self._docTitle_ is not None:&#xa;    if self.treeWidget.topLevelItemCount()==1:&#xa;      self.treeWidget.topLevelItem(0).setText(0,self._docTitle_)&#xa;&#xa;    self.setWindowTitle(&quot;%s - %s&quot;%(self._winTitle_,self._docTitle_))&#xa;&#xa;  else:&#xa;    self.setWindowTitle(self._winTitle_)&#xa;&#xa;  for k in range(self.treeWidget.topLevelItemCount()):&#xa;    self.collapseRecursive(self.treeWidget.topLevelItem(k),collapseCurrent=False)&#xa;&#xa;&#xa;self.setVisible(True)&#xa;self.show()&#xa;" id="ui3gBGLIzPGkd"/>
    <sourcecode value="evt.accept()&#xa;if evt.type()in(QtCore.QEvent.FocusIn,QtCore.QEvent.WindowActivate):&#xa;  self.sig_activated.emit(self.ID)&#xa;  return True&#xa;&#xa;return super(DataViewer,self).event(evt)&#xa;" id="uuMZR0RONLbEo"/>
    <sourcecode value="self.setData(doc,title)&#xa;" id="uhUJELiz03iRx"/>
    <sourcecode value="super(ColorMapEditor,self).__init__(parent)&#xa;&#xa;self.setupUi(self)&#xa;&#xa;self.colormapeditor=VigraQt.ColorMapEditor(EditColorMapWidget)&#xa;&#xa;self.colormapeditor.setObjectName(_fromUtf8(&quot;ColorMapEditor&quot;))&#xa;&#xa;self.verticalLayout.addWidget(self.colormapeditor)&#xa;&#xa;" id="uZlzR0OYlp6Hq"/>
    <sourcecode value="GraphicsWidget.__init__(self)&#xa;if not isinstance(image,vigra.VigraArray):&#xa;  raise TypeError(&quot;Expectign a VigraArray; got %s instead&quot;%type(image).__name__)&#xa;&#xa;w=image.width&#xa;h=image.height&#xa;self.layout=QtGui.QGraphicsGridLayout()&#xa;self.setLayout(self.layout)&#xa;self.layout.setSpacing(0)&#xa;self.vb=pgraph.ViewBox(parent=self)&#xa;self.vb.setMaximumWidth(w)&#xa;self.vb.setMinimumWidth(w)&#xa;self.vb.setMaximumHeight(h)&#xa;self.vb.setMinimumHeight(h)&#xa;self.axis=AxisItem('left',linkView=self.vb,maxTickLength=-10,parent=self)&#xa;self.layout.addItem(self.vb,0,0)&#xa;self.layout.addItem(self.axis,0,1)&#xa;" id="unGeoHFqk7Iew"/>
    <sourcecode value="super(ImageBrightnessDialog,self).__init__(parent)&#xa;self.setupUi(self)&#xa;self.factorLabel.setText(&quot;Brightness&quot;)&#xa;if title is None:&#xa;  self.setWindowTitle(&quot;Adjust Brightness&quot;)&#xa;&#xa;else:&#xa;  self.setWindowTitle(&quot;Adjust Brightness for %s&quot;%title)&#xa;&#xa;self.autoRangePushButton.clicked.connect(self.slot_requestAutoRange)&#xa;self.defaultRangePushButton.clicked.connect(self.slot_requestDefaultRange)&#xa;self.applyPushButton.clicked.connect(self.slot_requestApplyToData)&#xa;self.factorSpinBox.valueChanged[float].connect(self.slot_sendNewFactorValue)&#xa;self.rangeMinSpinBox.valueChanged[float].connect(self.slot_sendNewRangeMinValue)&#xa;self.rangeMaxSpinBox.valueChanged[float].connect(self.slot_sendNewRangeMaxValue)&#xa;" id="uV24KPlbVbgAR"/>
    <sourcecode value="self.signalAutoRange.emit()&#xa;" id="ucQg76aHA83Nd"/>
    <sourcecode value="self.signalDefaultRange.emit()&#xa;" id="uRvGu3DdBdAYr"/>
    <sourcecode value="self.signalApply.emit()&#xa;" id="uxio5LagHMu3v"/>
    <sourcecode value="self.signalFactorValueChanged.emit(val)&#xa;" id="uFO9LhvCmo5OO"/>
    <sourcecode value="self.signalMinRangeValueChanged.emit(val)&#xa;" id="uW9PB5tcqMApc"/>
    <sourcecode value="self.signalMaxRangeValueChanged.emit(val)&#xa;" id="uKATWmjJN7pp0"/>
    <sourcecode value="self.factorSpinBox.setValue(val)&#xa;" id="udml2ODm17zhl"/>
    <sourcecode value="self.rangeMinSpinBox.setValue(val)&#xa;" id="uG3FVMa8IE4fz"/>
    <sourcecode value="self.rangeMaxSpinBox.setValue(val)&#xa;" id="uRrn6nggNQbGN"/>
    <sourcecode value="super(AxesCalibrationDialog,self).__init__(parent)&#xa;self.arrayshape=None&#xa;self._data_=None&#xa;if isinstance(image,vigra.AxisTags):&#xa;  self.axistags=image&#xa;  self._data_=None&#xa;&#xa;elif isinstance(image,vigra.VigraArray):&#xa;  self.axistags=image.axistags&#xa;  self.arrayshape=image.shape&#xa;  self._data_=image&#xa;&#xa;else:&#xa;  raise TypeError(&quot;A VigraArray instance was expected; got %d instead&quot;%(type(image).__name__))&#xa;&#xa;self.resolution=1.0&#xa;self.origin=0.0&#xa;self.units=dt.pixel_unit&#xa;self.selectedAxisIndex=0&#xa;self.axisMetaData=dict()&#xa;for axisInfo in self.axistags:&#xa;  self.axisMetaData[axisInfo.key][&quot;calibration&quot;]=dt.AxisCalibration(axisInfo)&#xa;  self.axisMetaData[axisInfo.key][&quot;description&quot;]=dt.AxisCalibration.removeCalibrationFromString(axisInfo.description)&#xa;&#xa;self.units=self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;calibration&quot;].units&#xa;self.origin=self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;calibration&quot;].origin&#xa;self.resolution=self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;calibration&quot;].resolution&#xa;self.description=self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;description&quot;]&#xa;self._configureGUI_()&#xa;" id="ufEdGw2bMWOuI"/>
    <sourcecode value="self.setupUi(self)&#xa;self.setWindowTitle(&quot;Calibrate axes&quot;)&#xa;self.axisIndexSpinBox.setMaximum(len(self.axistags)-1)&#xa;self.axisIndexSpinBox.setValue(self.selectedAxisIndex)&#xa;if self.arrayshape is None:&#xa;  self.axisInfoLabel.setText(&quot;Axis key: %s, type: %s&quot;%(self.axistags[self.selectedAxisIndex].key,dt.defaultAxisTypeName(self.axistags[self.selectedAxisIndex])))&#xa;&#xa;else:&#xa;  self.axisInfoLabel.setText(&quot;Axis key: %s, type: %s, length: %d&quot;%(self.axistags[self.selectedAxisIndex].key,dt.defaultAxisTypeName(self.axistags[self.selectedAxisIndex]),self.arrayshape[self.selectedAxisIndex]))&#xa;&#xa;self.unitsLineEdit.setClearButtonEnabled(True)&#xa;self.unitsLineEdit.undoAvailable=True&#xa;self.unitsLineEdit.redoAvailable=True&#xa;self.unitsLineEdit.setText(self.units.__str__().split()[1])&#xa;self.unitsLineEdit.editingFinished.connect(self.slot_unitsChanged)&#xa;self.axisIndexSpinBox.valueChanged[int].connect(self.slot_axisIndexChanged)&#xa;self.originSpinBox.setValue(self.origin)&#xa;self.originSpinBox.valueChanged[float].connect(self.slot_originChanged)&#xa;self.resolutionRadioButton.setDown(True)&#xa;self.resolutionRadioButton.toggled[bool].connect(self.slot_resolutionChecked)&#xa;self.resolutionSpinBox.setValue(self.resolution)&#xa;self.resolutionSpinBox.setReadOnly(True)&#xa;self.pixelsDistanceRadioButton.toggled[bool].connect(self.slot_pixelsDistanceChecked)&#xa;self.calibratedDistanceRadioButton.toggled[bool].connect(self.slot_calibratedDistanceChecked)&#xa;self.resolutionSpinBox.valueChanged[float].connect(self.slot_resolutionChanged)&#xa;self.pixelsDistanceSpinBox.valueChanged[int].connect(self.slot_pixelDistanceChanged)&#xa;self.calibratedDistanceSpinBox.valueChanged[float].connect(self.slot_calibratedDistanceChanged)&#xa;self.axisDescriptionEdit.plainText=self.description&#xa;self.axisDescriptionEdit.textChanged.connect(self.slot_descriptionChanged)&#xa;" id="u2epDB3dzd1nt"/>
    <sourcecode value="self.units=self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;calibration&quot;].units&#xa;self.origin=self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;calibration&quot;].origin&#xa;self.resolution=self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;calibration&quot;].resolution&#xa;self.description=self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;description&quot;]&#xa;if self.arrayshape is None:&#xa;  self.axisInfoLabel.setText(&quot;Axis key: %s, type: %s&quot;%(self.axistags[self.selectedAxisIndex].key,dt.defaultAxisTypeName(self.axistags[self.selectedAxisIndex])))&#xa;&#xa;else:&#xa;  self.axisInfoLabel.setText(&quot;Axis key: %s, type: %s, length: %d&quot;%(self.axistags[self.selectedAxisIndex].key,dt.defaultAxisTypeName(self.axistags[self.selectedAxisIndex]),self.arrayshape[self.selectedAxisIndex]))&#xa;&#xa;self.unitsLineEdit.setText(self.units.__str__().split()[1])&#xa;self.originSpinBox.setValue(self.origin)&#xa;self.resolutionSpinBox.setValue(self.resolution)&#xa;if self.resolutionRadioButton.isChecked():&#xa;  self.calibratedDistanceSpinBox.setValue(self.resolution*self.pixelsDistanceSpinBox.value())&#xa;&#xa;else:&#xa;  self.slot_resolutionChanged(self.resolution)&#xa;&#xa;self.axisDescriptionEdit.clear()&#xa;self.axisDescriptionEdit.plainText=self.description&#xa;" id="u6oOCjwbFyYA9"/>
    <sourcecode value="self.selectedAxisIndex=value&#xa;self.updateFieldsFromAxis()&#xa;" id="uJiqXaGJlIkyL"/>
    <sourcecode value="try:&#xa;  self.units=eval(&quot;1*%s&quot;%(self.unitsLineEdit.text()),pq.__dict__)&#xa;&#xa;except:&#xa;  pass&#xa;&#xa;self.slot_generateCalibration()&#xa;" id="umm21kNJFzaB7"/>
    <sourcecode value="self.resolutionSpinBox.setReadOnly(value)&#xa;self.pixelsDistanceSpinBox.setReadOnly(not value)&#xa;self.calibratedDistanceSpinBox.setReadOnly(not value)&#xa;" id="ukGuCHAFP44mR"/>
    <sourcecode value="self.pixelsDistanceSpinBox.setReadOnly(value)&#xa;self.resolutionSpinBox.setReadOnly(not value)&#xa;self.calibratedDistanceSpinBox.setReadOnly(not value)&#xa;" id="uWuVCLpMS2bXe"/>
    <sourcecode value="self.calibratedDistanceSpinBox.setReadOnly(value)&#xa;self.pixelsDistanceSpinBox.setReadOnly(not value)&#xa;self.resolutionSpinBox.setReadOnly(value)&#xa;" id="uKOGhJ954fjbq"/>
    <sourcecode value="self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;calibration&quot;].units=\&#xa;eval(&quot;1*%s&quot;%(self.unitsLineEdit.text()),pq.__dict__)self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;calibration&quot;].origin=\&#xa;self.origin self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;calibration&quot;].resolution=\&#xa;self.resolution self.axisMetaData[self.axistags[self.selectedAxisIndex].key][&quot;description&quot;]=\&#xa;self.description" id="u3AIS8ZF6LnOk"/>
    <sourcecode value="self.origin=value&#xa;self.slot_generateCalibration()&#xa;" id="unBWSQOby1yBv"/>
    <sourcecode value="if self.pixelsDistanceRadioButton.isChecked():&#xa;  self.pixelsDistanceSpinBox.setValue(int(self.calibratedDistanceSpinBox.value()//value))&#xa;&#xa;elif self.calibratedDistanceRadioButton.isChecked():&#xa;  self.calibratedDistanceSpinBox.setValue(value*self.pixelsDistanceSpinBox.value())&#xa;&#xa;self.resolution=value&#xa;self.slot_generateCalibration()&#xa;" id="u0dpmjjjVh9Zd"/>
    <sourcecode value="if self.resolutionRadioButton.isChecked():&#xa;  self.resolutionSpinBox.setValue(self.calibratedDistanceSpinBox.value()/value)&#xa;  self.resolution=self.resolutionSpinBox.value()&#xa;&#xa;elif self.calibratedDistanceRadioButton.isChecked():&#xa;  self.calibratedDistanceSpinBox.setValue(self.resolutionSpinBox.value()*value)&#xa;&#xa;self.slot_generateCalibration()&#xa;" id="uxbL1cqZQJGx7"/>
    <sourcecode value="if self.resolutionRadioButton.isChecked():&#xa;  self.resolutionSpinBox.setValue(value/self.pixelsDistanceSpinBox.value())&#xa;  self.resolution=self.resolutionSpinBox.value()&#xa;&#xa;elif self.pixelsDistanceSpinBox.isChecked():&#xa;  self.pixelsDistanceSpinBox.setValue(int(value//self.resolutionSpinBox.value()))&#xa;&#xa;self.slot_generateCalibration()&#xa;" id="uHkOxuqMJmSqM"/>
    <sourcecode value="self.description=self.axisDescriptionEdit.toPlainText()&#xa;self.slot_generateCalibration()&#xa;" id="uEH2o6YEHqDk1"/>
    <sourcecode value="if pixels is None:&#xa;  pixels=self.pixelsDistanceSpinBox.value()&#xa;&#xa;if distance is None:&#xa;  distance=self.calibratedDistanceSpinBox.value()&#xa;&#xa;self.resolution=distance/pixels&#xa;self.resolutionSpinBox.setValue(self.resolution)&#xa;self.slot_generateCalibration()&#xa;" id="ujSZMY1n8EBvh"/>
    <sourcecode value="if rect is not None:&#xa;  super(GraphicsImageViewerScene,self).__init__(rect=rect,**args)&#xa;&#xa;else:&#xa;  super(GraphicsImageViewerScene,self).__init__(**args)&#xa;&#xa;self.__gpixitem__=None&#xa;self.graphicsItemDragMode=False&#xa;" id="u1T2RHTxIsMid"/>
    <sourcecode value="return self.__gpixitem__&#xa;" id="uGRSBeOVABmUO"/>
    <sourcecode value="if gpix is None:&#xa;  return&#xa;&#xa;if self.__gpixitem__ is not None:&#xa;  super().removeItem(self.__gpixitem__)&#xa;&#xa;nItems=len(self.items())&#xa;super().addItem(gpix)&#xa;if nItems>0:&#xa;  gpix.setZValue(-nItems-1)&#xa;&#xa;self.setSceneRect(gpix.boundingRect())&#xa;gpix.setVisible(True)&#xa;self.__gpixitem__=gpix&#xa;" id="usPtAR3nedkTy"/>
    <sourcecode value="super(GraphicsImageViewerScene,self).clear()&#xa;self.__gpixitem__=None&#xa;" id="u5ET7ivulOCh1"/>
    <sourcecode value="self.rootImage=gpix&#xa;" id="uiz5YoL8S9bym"/>
    <sourcecode value="if isinstance(item,QtWidgets.QGraphicsPixmapItem)and picAsRoot:&#xa;  self.rootImage=item&#xa;&#xa;else:&#xa;  super().addItem(item)&#xa;  item.setVisible(True)&#xa;&#xa;" id="u1oc3YLIZZBBm"/>
    <sourcecode value="if self.__gpixitem__ is None:&#xa;  return&#xa;&#xa;if self.sceneRect().contains(evt.scenePos().x(),evt.scenePos().y()):&#xa;  self.signalMouseAt.emit(int(evt.scenePos().x()),int(evt.scenePos().y()))&#xa;&#xa;else:&#xa;  self.signalMouseLeave.emit()&#xa;&#xa;super().mouseMoveEvent(evt)&#xa;evt.accept()&#xa;" id="u50pH3d2kq12u"/>
    <sourcecode value="super().mousePressEvent(evt)&#xa;evt.accept()&#xa;" id="uYFY2KlYItClv"/>
    <sourcecode value="super().mouseReleaseEvent(evt)&#xa;evt.accept()&#xa;" id="u3LWxL8aRceJM"/>
    <sourcecode value="if self.__gpixitem__ is None:&#xa;  return&#xa;&#xa;super().event(evt)&#xa;if self.sceneRect().contains(evt.pos().x(),evt.pos().y()):&#xa;  self.signalMouseAt.emit(int(evt.pos().x()),int(evt.pos().y()))&#xa;&#xa;" id="uYiXhg7dVWLuO"/>
    <sourcecode value="evt.ignore()&#xa;" id="u7A84nlPWd4E7"/>
    <sourcecode value="super(GraphicsImageViewerWidget,self).__init__(parent=parent)&#xa;self._configureGUI_()&#xa;self.__zoomVal__=1.0&#xa;self._minZoom__=0.1&#xa;self.__maxZoom__=100&#xa;self.__escape_pressed___=False&#xa;self.__mouse_pressed___=False&#xa;self.__last_mouse_click_lmb__=None&#xa;self.__interactiveZoom__=False&#xa;self.__defaultCursorWindow__=10.0&#xa;self.__defaultCursorRadius__=0.5&#xa;self.__cursorWindow__=self.__defaultCursorWindow__&#xa;self.__cursorRadius__=self.__defaultCursorRadius__&#xa;self.__graphicsObjects__=dict([(k.value,dict())for k in pgui.GraphicsObjectType])&#xa;cursorTypeInts=[t.value for t in pgui.GraphicsObjectType if\&#xa;t.value&lt;pgui.GraphicsObjectType.allCursorTypes]self.__cursors__=ChainMap()&#xa;self.__cursors__.maps.clear()&#xa;for k in cursorTypeInts:&#xa;  self.__cursors__.maps.append(self.__graphicsObjects__[k])&#xa;&#xa;roiTypeInts=[t.value for t in pgui.GraphicsObjectType if\&#xa;t.value>pgui.GraphicsObjectType.allCursorTypes]self.__rois__=ChainMap()&#xa;self.__rois__.maps.clear()&#xa;for k in roiTypeInts:&#xa;  self.__rois__.maps.append(self.__graphicsObjects__[k])&#xa;&#xa;self.selectedCursor=None&#xa;self.selectedRoi=None&#xa;self._cursorContextMenuSourceId=None&#xa;self.__scene__=GraphicsImageViewerScene(parent=self)&#xa;self.__scene__.setItemIndexMethod(QtWidgets.QGraphicsScene.NoIndex)&#xa;self._imageGraphicsView.setScene(self.__scene__)&#xa;if img is not None:&#xa;  if isinstance(img,QtGui.QImage):&#xa;    self.__scene__.rootImage=QtWidgets.QGraphicsPixmapItem(QtGui.QPixmap.fromImage(img))&#xa;&#xa;  elif isinstance(img,QtGui.QPixmap):&#xa;    self.__scene__.rootImage=QtWidgets.QGraphicsPixmapItem(img)&#xa;&#xa;&#xa;self.__image_viewer__=imageViewer&#xa;" id="uG5YJASU7tA7Y"/>
    <sourcecode value="self.setupUi(self)&#xa;self._imageGraphicsView.setViewportUpdateMode(QtWidgets.QGraphicsView.FullViewportUpdate)&#xa;self._imageGraphicsView.setResizeAnchor(QtWidgets.QGraphicsView.AnchorUnderMouse)&#xa;self._topLabel.clear()&#xa;" id="uvSbCy4Kc8QEM"/>
    <sourcecode value="self._imageGraphicsView.resetTransform()&#xa;self._imageGraphicsView.scale(val,val)&#xa;self.__zoomVal__=val&#xa;self.signalZoomChanged[float].emit(self.__zoomVal__)&#xa;" id="uAsJnbz6KvaEy"/>
    <sourcecode value="if len(self.__cursors__)==0:&#xa;  return&#xa;&#xa;if crsId is None:&#xa;  cselectDlg=pgui.ItemsListDialog(self,sorted([cId for cId in self.__cursors__.keys()]),&quot;Select cursor&quot;)&#xa;  a=cselectDlg.exec_()&#xa;  if a==QtWidgets.QDialog.Accepted:&#xa;    crsId=cselectDlg.selectedItemText&#xa;&#xa;  else:&#xa;    return&#xa;&#xa;&#xa;cursor=self.__cursors__[crsId]&#xa;cursor_type=cursor.objectType&#xa;cDict=self.__graphicsObjects__[cursor_type]&#xa;d=quickdialog.QuickDialog(self,&quot;Edit cursor %s&quot;%cursor.name)&#xa;d.promptWidgets=list()&#xa;namePrompt=quickdialog.StringInput(d,&quot;New label:&quot;)&#xa;namePrompt.variable.setClearButtonEnabled(True)&#xa;namePrompt.variable.redoAvailable=True&#xa;namePrompt.variable.undoAvailable=True&#xa;namePrompt.setText(cursor.ID)&#xa;d.promptWidgets.append(namePrompt)&#xa;showsPositionCheckBox=quickdialog.CheckBox(d,&quot;Label shows position&quot;)&#xa;showsPositionCheckBox.setChecked(cursor.labelShowsPosition)&#xa;d.promptWidgets.append(showsPositionCheckBox)&#xa;showsOpaqueLabel=quickdialog.CheckBox(d,&quot;Opaque label&quot;)&#xa;showsOpaqueLabel.setChecked(not cursor.hasTransparentLabel)&#xa;d.promptWidgets.append(showsOpaqueLabel)&#xa;if cursor.isVerticalCursor:&#xa;  promptX=quickdialog.FloatInput(d,&quot;X coordinate (pixels):&quot;)&#xa;  promptX.variable.setClearButtonEnabled(True)&#xa;  promptX.variable.redoAvailable=True&#xa;  promptX.variable.undoAvailable=True&#xa;  promptX.setValue(cursor.x)&#xa;  d.promptWidgets.append(promptX)&#xa;  promptXWindow=quickdialog.FloatInput(d,&quot;Horizontal window size (pixels):&quot;)&#xa;  promptXWindow.variable.setClearButtonEnabled(True)&#xa;  promptXWindow.variable.redoAvailable=True&#xa;  promptXWindow.variable.undoAvailable=True&#xa;  promptXWindow.setValue(cursor.xwindow)&#xa;  d.promptWidgets.append(promptXWindow)&#xa;&#xa;elif cursor.isHorizontalCursor:&#xa;  promptY=quickdialog.FloatInput(d,&quot;Y coordinate (pixels):&quot;)&#xa;  promptY.variable.setClearButtonEnabled(True)&#xa;  promptY.variable.redoAvailable=True&#xa;  promptY.variable.undoAvailable=True&#xa;  promptY.setValue(cursor.y)&#xa;  d.promptWidgets.append(promptY)&#xa;  promptYWindow=quickdialog.FloatInput(d,&quot;Vertical window size (pixels):&quot;)&#xa;  promptYWindow.variable.setClearButtonEnabled(True)&#xa;  promptYWindow.variable.redoAvailable=True&#xa;  promptYWindow.variable.undoAvailable=True&#xa;  promptYWindow.setValue(cursor.ywindow)&#xa;  d.promptWidgets.append(promptYWindow)&#xa;&#xa;else:&#xa;  promptX=quickdialog.FloatInput(d,&quot;X coordinate:&quot;)&#xa;  promptX.variable.setClearButtonEnabled(True)&#xa;  promptX.variable.redoAvailable=True&#xa;  promptX.variable.undoAvailable=True&#xa;  promptX.setValue(cursor.x)&#xa;  d.promptWidgets.append(promptX)&#xa;  promptXWindow=quickdialog.FloatInput(d,&quot;Horizontal window size:&quot;)&#xa;  promptXWindow.variable.setClearButtonEnabled(True)&#xa;  promptXWindow.variable.redoAvailable=True&#xa;  promptXWindow.variable.undoAvailable=True&#xa;  promptXWindow.setValue(cursor.xwindow)&#xa;  d.promptWidgets.append(promptXWindow)&#xa;  promptY=quickdialog.FloatInput(d,&quot;Y coordinate:&quot;)&#xa;  promptY.variable.setClearButtonEnabled(True)&#xa;  promptY.variable.redoAvailable=True&#xa;  promptY.variable.undoAvailable=True&#xa;  promptY.setValue(cursor.y)&#xa;  d.promptWidgets.append(promptY)&#xa;  promptYWindow=quickdialog.FloatInput(d,&quot;Vertical window size:&quot;)&#xa;  promptYWindow.variable.setClearButtonEnabled(True)&#xa;  promptYWindow.variable.redoAvailable=True&#xa;  promptYWindow.variable.undoAvailable=True&#xa;  promptYWindow.setValue(cursor.ywindow)&#xa;  d.promptWidgets.append(promptYWindow)&#xa;&#xa;framesWhereVisible=quickdialog.StringInput(d,&quot;Visible frames:&quot;)&#xa;framesWhereVisible.setToolTip(&quot;Enter comma-separated list of visible frames, the keyword 'all', or 'range(start,[stop,[step]]')&quot;)&#xa;framesWhereVisible.setWhatsThis(&quot;Enter comma-separated list of visible frames, the keyword 'all', or 'range(start,[stop,[step]]')&quot;)&#xa;if len(cursor.frameVisibility)==0:&#xa;  framesWhereVisible.setText(&quot;all&quot;)&#xa;&#xa;else:&#xa;  b=&quot;&quot;&#xa;  if len(cursor.frameVisibility):&#xa;    for f in cursor.frameVisibility[:-1]:&#xa;      if f is None:&#xa;        continue&#xa;&#xa;      b+=&quot;%d, &quot;%f&#xa;&#xa;    f=cursor.frameVisibility[-1]&#xa;    if f is not None:&#xa;      b+=&quot;%d&quot;%cursor.frameVisibility[-1]&#xa;&#xa;&#xa;  if len(b.strip())==0:&#xa;    b=&quot;all&quot;&#xa;&#xa;  framesWhereVisible.setText(b)&#xa;&#xa;d.promptWidgets.append(framesWhereVisible)&#xa;linkToFramesCheckBox=quickdialog.CheckBox(d,&quot;Link position to frame number&quot;)&#xa;linkToFramesCheckBox.setChecked(len(cursor.backend.states)>1)&#xa;d.promptWidgets.append(linkToFramesCheckBox)&#xa;for w in d.promptWidgets:&#xa;  if not isinstance(w,quickdialog.CheckBox):&#xa;    w.variable.setClearButtonEnabled(True)&#xa;    w.variable.redoAvailable=True&#xa;    w.variable.undoAvailable=True&#xa;&#xa;&#xa;if d.exec()==QtWidgets.QDialog.Accepted:&#xa;  old_name=cursor.name&#xa;  newName=namePrompt.text()&#xa;  if newName is not None and len(newName.strip())>0:&#xa;    if newName!=old_name:&#xa;      if newName in cDict:&#xa;        QtWidgets.QMessageBox.critical(self,&quot;Cursor name clash&quot;,&quot;A cursor named %s already exists&quot;%newName)&#xa;        return&#xa;&#xa;&#xa;&#xa;  if cursor.isVerticalCursor:&#xa;    cursor.x=promptX.value()&#xa;    cursor.xwindow=promptXWindow.value()&#xa;&#xa;  elif cursor.isHorizontalCursor:&#xa;    cursor.y=promptY.value()&#xa;    cursor.ywindow=promptYWindow.value()&#xa;&#xa;  else:&#xa;    cursor.x=promptX.value()&#xa;    cursor.y=promptY.value()&#xa;    cursor.xwindow=promptXWindow.value()&#xa;    cursor.ywindow=promptYWindow.value()&#xa;&#xa;  cursor.labelShowsPosition=showsPositionCheckBox.selection()&#xa;  cursor.setTransparentLabel(not showsOpaqueLabel.selection())&#xa;  newFrames=[]&#xa;  txt=framesWhereVisible.text()&#xa;  if len(txt.strip())==0:&#xa;    newFrames=[]&#xa;&#xa;  elif txt.strip().lower()==&quot;all&quot;:&#xa;    if self.__image_viewer__ is not None:&#xa;      newFrames=[f for f in range(self.__image_viewer__.nFrames)]&#xa;&#xa;    else:&#xa;      newFrames=[]&#xa;&#xa;&#xa;  elif txt.find(&quot;range&quot;)==0:&#xa;    val=eval(txt)&#xa;    newFrames=[f for f in val]&#xa;&#xa;  elif txt.find(&quot;:&quot;)>0:&#xa;    try:&#xa;      newFrames=[int(f_)for f_ in txt.split(&quot;:&quot;)]&#xa;      if len(newFrames)>3:&#xa;        newFrames=[]&#xa;&#xa;      else:&#xa;        newFrames=range(*newFrames)&#xa;&#xa;&#xa;    except Exception as e:&#xa;      traceback_print_exc()&#xa;&#xa;&#xa;  else:&#xa;    try:&#xa;      newFrames=[int(f_)for f_ in txt.split(&quot;,&quot;)]&#xa;&#xa;    except Exception as e:&#xa;      traceback.print_exc()&#xa;&#xa;&#xa;  linkToFrames=linkToFramesCheckBox.selection()&#xa;  if linkToFrames:&#xa;    cursor.frameVisibility=newFrames&#xa;    cursor.__backend__.linkFrames(newFrames)&#xa;&#xa;  else:&#xa;    cursor.frameVisibility=[]&#xa;&#xa;  cursor.__backend__.name=newName&#xa;  if old_name!=cursor.name:&#xa;    cDict=self.__graphicsObjects__[cursor.objectType]&#xa;    cDict.pop(old_name,None)&#xa;    cDict[cursor.name]=cursor&#xa;&#xa;  self.signalCursorChanged.emit(cursor.backend)&#xa;&#xa;self._cursorContextMenuSourceId=None&#xa;" id="uuq0MgchZyQtJ"/>
    <sourcecode value="params=None&#xa;pos=QtCore.QPointF(0,0)&#xa;p=self.parent()&#xa;while p is not None and not isinstance(p,ImageViewer):&#xa;  p=p.parent()&#xa;&#xa;if p is not None and isinstance(p,ImageViewer):&#xa;  frame=p.currentFrame&#xa;&#xa;else:&#xa;  frame=0&#xa;&#xa;newROI=pgui.GraphicsObject(params,&#xa;pos=pos,objectType=pgui.GraphicsObjectType.allShapeTypes,visibleFrames=[],label=None,currentFrame=frame,parentWidget=self)self.__scene__.addItem(newROI)&#xa;newROI.signalROIConstructed.connect(self.slot_newROIConstructed)&#xa;return newROI&#xa;" id="uUeW6VlA3qELB"/>
    <sourcecode value="if self.__scene__.rootImage is None:&#xa;  return&#xa;&#xa;if parentWidget is None:&#xa;  if isinstance(self.__image_viewer__,ImageViewer):&#xa;    parentWidget=self.__image_viewer__&#xa;&#xa;  else:&#xa;    parentWidget=self&#xa;&#xa;&#xa;if roiType is None or params is None:&#xa;  self.buildROI()&#xa;&#xa;rTypeStr=&quot;&quot;&#xa;if isinstance(params,pgui.PlanarGraphics):&#xa;  if params.type&amp;pgui.GraphicsObjectType.allShapeTypes:&#xa;    roiType=params.type&#xa;&#xa;  else:&#xa;    raise TypeError(&quot;Cannot build a ROI with this PlanarGraphics type: %s&quot;%params.type)&#xa;&#xa;&#xa;if roiType&amp;pgui.GraphicsObjectType.point:&#xa;  rTypeStr=&quot;p&quot;&#xa;&#xa;elif roiType&amp;pgui.GraphicsObjectType.line:&#xa;  rTypeStr=&quot;l&quot;&#xa;&#xa;elif roiType&amp;pgui.GraphicsObjectType.rectangle:&#xa;  rTypeStr=&quot;r&quot;&#xa;&#xa;elif roiType&amp;pgui.GraphicsObjectType.ellipse:&#xa;  rTypeStr=&quot;e&quot;&#xa;&#xa;elif roiType&amp;pgui.GraphicsObjectType.polygon:&#xa;  rTypeStr=&quot;pg&quot;&#xa;&#xa;elif roiType&amp;(pgui.GraphicsObjectType.path|pgui.GraphicsObjectType.polyline):&#xa;  rTypeStr=&quot;pt&quot;&#xa;&#xa;else:&#xa;  return&#xa;&#xa;if frame is None:&#xa;  if isinstance(parentWidget,ImageViewer):&#xa;    frame=parentWidget.currentFrame&#xa;&#xa;  else:&#xa;    frame=0&#xa;&#xa;&#xa;nFrames=1&#xa;if isinstance(parentWidget,ImageViewer):&#xa;  nFrames=parentWidget.nFrames&#xa;  if frame&lt;0:&#xa;    frame=nFrames&#xa;&#xa;  if frame>=nFrames:&#xa;    frame=nFrames-1&#xa;&#xa;&#xa;if frameVisibility is None:&#xa;  if isinstance(params,pgui.PlanarGraphics)and params.type&amp;pgui.GraphicsObjectType.allShapeTypes:&#xa;    if not isinstance(params,pgui.Path):&#xa;      frameVisibility=params.frameIndices&#xa;&#xa;    else:&#xa;      frameVisibility=[]&#xa;&#xa;    if len(frameVisibility)==1 and frameVisibility[0]is None:&#xa;      frameVisibility.clear()&#xa;&#xa;&#xa;  else:&#xa;    frameVisibility=[f for f in range(nFrames)]&#xa;&#xa;&#xa;else:&#xa;  if not isinstance(params,pgui.Path):&#xa;    if not isinstance(frameVisibility,(tuple,list))or not all([isinstance(f,int)for f in frameVisibility]):&#xa;      raise TypeError(&quot;frame visibility must be specified as a list of ints or an empty list, or None; got %s instead&quot;%frameVisibility)&#xa;&#xa;    elif len(frameVisibility)==0:&#xa;      frameVisibility=[0]&#xa;&#xa;&#xa;&#xa;if isinstance(roiType,int):&#xa;  rDict=self.__graphicsObjects__[roiType]&#xa;&#xa;else:&#xa;  rDict=self.__graphicsObjects__[roiType.value]&#xa;&#xa;if label is None or(isinstance(label,str)and len(label)==0):&#xa;  if isinstance(params,pgui.PlanarGraphics)and(isinstance(params.name,str)and len(params.name)>0):&#xa;    tryName=params.name&#xa;    if tryName in rDict.keys():&#xa;      tryName=utilities.counterSuffix(tryName,[s for s in rDict.keys()])&#xa;&#xa;    roiId=tryName&#xa;&#xa;  else:&#xa;    roiId=&quot;%s%d&quot;%(rTypeStr,len(rDict))&#xa;&#xa;&#xa;elif isinstance(label,str)and len(label):&#xa;  roiId=&quot;%s%d&quot;%(label,len(rDict))&#xa;&#xa;if roiId in rDict.keys():&#xa;  roiId+=&quot;%d&quot;%len(rDict)&#xa;&#xa;if pos is not None and not isinstance(pos,(QtCore.QPoint,QtCore.QPointF)):&#xa;  raise TypeError(&quot;pos must be a QPoint or QPointF; got %s instead&quot;%(type(pos).__name__))&#xa;&#xa;if pos is None:&#xa;  pos=QtCore.QPointF(0,0)&#xa;&#xa;if parentWidget is None:&#xa;  parentWidget=self&#xa;&#xa;roi=pgui.GraphicsObject(parameters=params,&#xa;pos=pos,objectType=roiType,currentFrame=frame,visibleFrames=frameVisibility,label=roiId,showLabel=showLabel,labelShowsPosition=labelShowsPosition,parentWidget=parentWidget)roi.canMove=movable&#xa;roi.canEdit=editable&#xa;if isinstance(parentWidget,ImageViewer)and not parentWidget.guiClient:&#xa;  parentWidget.frameChanged[int].connect(roi.slotFrameChanged)&#xa;&#xa;if autoSelect:&#xa;  for r in self.__rois__.values():&#xa;    r.setSelected(False)&#xa;&#xa;  roi.setSelected(True)&#xa;&#xa;self.__scene__.addItem(roi)&#xa;roi.signalPosition.connect(self.slot_reportCursorPos)&#xa;roi.selectMe[str,bool].connect(self.slot_setSelectedRoi)&#xa;roi.requestContextMenu.connect(self.slot_graphicsObjectMenuRequested)&#xa;roi.signalBackendChanged[object].connect(self.slot_roiChanged)&#xa;rDict[roiId]=roi&#xa;self.scene.update(self.scene.sceneRect().x(),\&#xa;self.scene.sceneRect().y(),\self.scene.sceneRect().width(),\self.scene.sceneRect().height())self.signalRoiAdded.emit(roi.backend)&#xa;return roi&#xa;" id="u9Yh7xMhQmRsa"/>
    <sourcecode value="if self.__scene__.rootImage is None:&#xa;  return&#xa;&#xa;if parentWidget is None:&#xa;  if isinstance(self.__image_viewer__,ImageViewer):&#xa;    parentWidget=self.__image_viewer__&#xa;&#xa;  else:&#xa;    parentWidget=self&#xa;&#xa;&#xa;if window is None:&#xa;  window=self.__cursorWindow__&#xa;&#xa;if radius is None:&#xa;  radius=self.__cursorRadius__&#xa;&#xa;if frame is None:&#xa;  if isinstance(parentWidget,ImageViewer):&#xa;    frame=parentWidget.currentFrame&#xa;&#xa;  else:&#xa;    frame=0&#xa;&#xa;&#xa;nFrames=1&#xa;if isinstance(parentWidget,ImageViewer):&#xa;  nFrames=parentWidget.nFrames&#xa;  if frame&lt;0:&#xa;    frame=nFrames&#xa;&#xa;  if frame>=nFrames:&#xa;    frame=nFrames-1&#xa;&#xa;&#xa;if isinstance(cType,pgui.Cursor):&#xa;  cDict=self.__graphicsObjects__[cType.type.value]&#xa;  valx=np.floor(self.__scene__.rootImage.boundingRect().center().x())&#xa;  valy=np.floor(self.__scene__.rootImage.boundingRect().center().y())&#xa;  if cType.xwindow is None:&#xa;    cType.xwindow=window&#xa;&#xa;  if cType.ywindow is None:&#xa;    cType.ywindow=window&#xa;&#xa;  if isinstance(pos,(tuple,list))and\&#xa;  len(pos)==2 and all([isinstance(a,(numbers.Real,pq.Quantity))for a in pos]):&#xa;    cType.x=pos[0]&#xa;    cType.y=pos[1]&#xa;&#xa;  elif isinstance(pos,(QtCore.QPoint,QtCore.QPointF)):&#xa;    cType.x=pos.x()&#xa;    cType.y=pos.y()&#xa;&#xa;  else:&#xa;    if cType.x is None or cType.y is None:&#xa;      if len(cDict)>0:&#xa;        if cType.type&amp;pgui.GraphicsObjectType.vertical_cursor or\&#xa;        cType.type&amp;pgui.GraphicsObjectType.crosshair_cursor or\cType.type&amp;pgui.GraphicsObjectType.point_cursor:&#xa;          max_x=max([o.x for o in cDict.values()])&#xa;          min_x=min([o.x for o in cDict.values()])&#xa;          valx=(self.__scene__.rootImage.boundingRect().width()+max_x)/2&#xa;&#xa;        if cType.type&amp;pgui.GraphicsObjectType.horizontal_cursor or\&#xa;        cType.type&amp;pgui.GraphicsObjectType.crosshair_cursor or\cType.type&amp;pgui.GraphicsObjectType.point_cursor:&#xa;          max_y=max([o.y for o in cDict.values()])&#xa;          valy=(self.__scene__.rootImage.boundingRect().height()+max_y)/2&#xa;&#xa;&#xa;      if cType.x is None:&#xa;        cType.x=valx&#xa;&#xa;      if cType.y is None:&#xa;        cType.y=valy&#xa;&#xa;&#xa;&#xa;  if cType.width is None:&#xa;    cType.width=self.__scene__.sceneRect().width()&#xa;&#xa;  if cType.height is None:&#xa;    cType.height=self.__scene__.sceneRect().height()&#xa;&#xa;  if cType.radius is None:&#xa;    cType.radius=self.__cursorRadius__&#xa;&#xa;  if isinstance(label,str)and len(label)>0:&#xa;    crsId=label&#xa;&#xa;  else:&#xa;    tryName=cType.name&#xa;    if tryName in cDict.keys():&#xa;      tryName=utilities.counterSuffix(tryName,[s for s in cDict.keys()])&#xa;&#xa;    crsId=tryName&#xa;&#xa;  if crsId in self.__cursors__.keys():&#xa;    crsId+=&quot;%d&quot;%len(cDict)&#xa;&#xa;  if frameVisibility is None:&#xa;    if len(cType.frameIndices)==0:&#xa;      frameVisibility=[f for f in range(nFrames)]&#xa;&#xa;    else:&#xa;      frameVisibility=cType.frameIndices&#xa;&#xa;&#xa;  else:&#xa;    if isinstance(frameVisibility,(tuple,list)):&#xa;      if len(frameVisibility):&#xa;        if len(frameVisibility)==1 and frameVisibility[0]is None:&#xa;          frameVisibility.clear()&#xa;&#xa;        else:&#xa;          if not all([isinstance(f,int)for f in frameVisibility]):&#xa;            raise TypeError(&quot;frameVisibility expected to be a sequence of int, an empty sequence, the sequence [None], or just None; got %s instead&quot;%frameVisibility)&#xa;&#xa;&#xa;&#xa;      else:&#xa;        frameVisibility=[0]&#xa;&#xa;&#xa;    else:&#xa;      raise TypeError(&quot;frame visibility must be specified as a list of ints or an empty list, or None; got %s instead&quot;%frameVisibility)&#xa;&#xa;&#xa;  cursor=pgui.GraphicsObject(parameters=cType,&#xa;  currentFrame=frame,visibleFrames=frameVisibility,label=crsId,showLabel=showLabel,labelShowsPosition=labelShowsPosition,parentWidget=parentWidget)&#xa;else:&#xa;  cTypeStr=&quot;&quot;&#xa;  if cType&amp;pgui.GraphicsObjectType.vertical_cursor:&#xa;    cTypeStr=&quot;v&quot;&#xa;&#xa;  elif cType&amp;pgui.GraphicsObjectType.horizontal_cursor:&#xa;    cTypeStr=&quot;h&quot;&#xa;&#xa;  elif cType&amp;pgui.GraphicsObjectType.point_cursor:&#xa;    cTypeStr=&quot;p&quot;&#xa;&#xa;  elif cType&amp;pgui.GraphicsObjectType.crosshair_cursor:&#xa;    cTypeStr=&quot;c&quot;&#xa;&#xa;  else:&#xa;    return&#xa;&#xa;  if isinstance(cType,int):&#xa;    cDict=self.__graphicsObjects__[cType]&#xa;&#xa;  else:&#xa;    cDict=self.__graphicsObjects__[cType.value]&#xa;&#xa;  if label is None or(isinstance(label,str)and len(label)==0):&#xa;    crsId=&quot;%s%d&quot;%(cTypeStr,len(cDict))&#xa;&#xa;  elif instance(label,str)and len(label):&#xa;    crsId=&quot;%s%d&quot;%(label,len(cDict))&#xa;&#xa;  else:&#xa;    raise TypeError(&quot;label expected to be a non-empty str or None; got %s instead&quot;%type(name).__name__)&#xa;&#xa;  if isinstance(pos,(tuple,list))and\&#xa;  len(pos)==2 and all([isinstance(a,(numbers.Real,pq.Quantity))for a in pos]):&#xa;    point=QtCore.QPointF(pos[0],pos[1])&#xa;&#xa;  elif isinstance(pos,(QtCore.QPoint,QtCore.QPointF)):&#xa;    point=QtCore.QPointF(pos)&#xa;&#xa;  else:&#xa;    currentTopLabelText=self._topLabel.text()&#xa;    self._topLabel.setText(currentTopLabelText+&quot; Double-click left mouse button for cursor position&quot;)&#xa;    currentCursor=self._imageGraphicsView.viewport().cursor()&#xa;    self._imageGraphicsView.viewport().setCursor(QtCore.Qt.CrossCursor)&#xa;    mouseEventFilters=[pgui.MouseEventSink(c)for c in cDict.values()]&#xa;    if len(cDict)>0:&#xa;      for ck,c in enumerate(cDict.values()):&#xa;        c.installEventFilter(mouseEventFilters[ck])&#xa;&#xa;&#xa;    while not self.__escape_pressed___ and not self.__mouse_pressed___:&#xa;      QtCore.QCoreApplication.processEvents()&#xa;&#xa;    self.__escape_pressed___=False&#xa;    self.__mouse_pressed___=False&#xa;    if len(cDict)>0:&#xa;      for ck,c in enumerate(cDict.values()):&#xa;        c.removeEventFilter(mouseEventFilters[ck])&#xa;&#xa;&#xa;    self._imageGraphicsView.viewport().setCursor(currentCursor)&#xa;    self._topLabel.setText(currentTopLabelText)&#xa;    if isinstance(self.__last_mouse_click_lmb__,(QtCore.QPoint,QtCore.QPointF)):&#xa;      point=QtCore.QPointF(self.__last_mouse_click_lmb__)&#xa;&#xa;    else:&#xa;      valx=np.floor(self.__scene__.rootImage.boundingRect().center().x())&#xa;      valy=np.floor(self.__scene__.rootImage.boundingRect().center().y())&#xa;      if len(cDict)>0:&#xa;        if cType&amp;pgui.GraphicsObjectType.vertical_cursor or\&#xa;        cType&amp;pgui.GraphicsObjectType.crosshair_cursor or\cType&amp;pgui.GraphicsObjectType.point_cursor:&#xa;          max_x=max([o.x for o in cDict.values()])&#xa;          valx=(self.__scene__.rootImage.boundingRect().width()+max_x)/2&#xa;&#xa;        if cType&amp;pgui.GraphicsObjectType.horizontal_cursor or\&#xa;        cType&amp;pgui.GraphicsObjectType.crosshair_cursor or\cType&amp;pgui.GraphicsObjectType.point_cursor:&#xa;          max_y=max([o.y for o in cDict.values()])&#xa;          valy=(self.__scene__.rootImage.boundingRect().height()+max_y)/2&#xa;&#xa;&#xa;      point=QtCore.QPointF(valx,valy)&#xa;&#xa;&#xa;  if not self.__scene__.sceneRect().contains(point)or point==QtCore.QPointF(0,0):&#xa;    point.setX(np.floor(self.__scene__.rootImage.boundingRect().center().x()))&#xa;    point.setY(np.floor(self.__scene__.rootImage.boundingRect().center().y()))&#xa;&#xa;  width=self.__scene__.sceneRect().width()&#xa;  height=self.__scene__.sceneRect().height()&#xa;  if frameVisibility is None:&#xa;    frameVisibility=[]&#xa;&#xa;  elif isinstance(frameVisibility,(tuple,list)):&#xa;    if len(frameVisibility):&#xa;      if len(frameVisibility)==1 and frameVisibility[0]is None:&#xa;        frameVisibility.clear()&#xa;&#xa;      else:&#xa;        if not all([isinstance(f,int)for f in frameVisibility]):&#xa;          raise TypeError(&quot;frameVisibility expected a sequence of int, [], or [None], or just None; got %s instead&quot;%frameVisibility)&#xa;&#xa;&#xa;&#xa;&#xa;  cursor=pgui.GraphicsObject(parameters=(width,height,window,window,radius),&#xa;  pos=point,objectType=cType,currentFrame=frame,visibleFrames=frameVisibility,label=crsId,showLabel=showLabel,labelShowsPosition=labelShowsPosition,parentWidget=parentWidget)&#xa;cursor.canMove=movable&#xa;if isinstance(parentWidget,ImageViewer)and not parentWidget.guiClient:&#xa;  parentWidget.frameChanged[int].connect(cursor.slotFrameChanged)&#xa;&#xa;self.__scene__.addItem(cursor)&#xa;if autoSelect:&#xa;  for c in self.__cursors__.values():&#xa;    c.setSelected(False)&#xa;&#xa;  cursor.setSelected(True)&#xa;&#xa;cursor.signalPosition.connect(self.slot_reportCursorPos)&#xa;cursor.selectMe[str,bool].connect(self.slot_setSelectedCursor)&#xa;cursor.requestContextMenu.connect(self.slot_graphicsObjectMenuRequested)&#xa;cursor.signalBackendChanged.connect(self.slot_cursorChanged)&#xa;cDict[crsId]=cursor&#xa;self.scene.update(self.scene.sceneRect().x(),\&#xa;self.scene.sceneRect().y(),\self.scene.sceneRect().width(),\self.scene.sceneRect().height())if cursor.__backend__.hasStateForFrame(cursor.currentFrame):&#xa;  cursor.show()&#xa;&#xa;self.signalCursorAdded.emit(cursor.backend)&#xa;return cursor&#xa;" id="uiprie9pnPdYW"/>
    <sourcecode value="for d in self.__graphicsObjects__.values():&#xa;  d.clear()&#xa;&#xa;for d in self.__cursors__.values():&#xa;  d.clear()&#xa;&#xa;self.selectedCursor=None&#xa;self.selectedRoi=None&#xa;self._cursorContextMenuSourceId=None&#xa;self.__scene__.clear()&#xa;" id="ulEFT2H2k76Gq"/>
    <sourcecode value="sender=self.sender()&#xa;if roiType&amp;pgui.GraphicsObjectType.point:&#xa;  rTypeStr=&quot;p&quot;&#xa;&#xa;elif roiType&amp;pgui.GraphicsObjectType.line:&#xa;  rTypeStr=&quot;l&quot;&#xa;&#xa;elif roiType&amp;pgui.GraphicsObjectType.rectangle:&#xa;  rTypeStr=&quot;r&quot;&#xa;&#xa;elif roiType&amp;pgui.GraphicsObjectType.ellipse:&#xa;  rTypeStr=&quot;e&quot;&#xa;&#xa;elif roiType&amp;pgui.GraphicsObjectType.polygon:&#xa;  rTypeStr=&quot;pg&quot;&#xa;&#xa;elif roiType&amp;pgui.GraphicsObjectType.path:&#xa;  rTypeStr=&quot;pt&quot;&#xa;&#xa;elif roiType==0:&#xa;  sender.signalROIConstructed.disconnect()&#xa;  self.__scene__.removeItem(sender)&#xa;  return&#xa;&#xa;else:&#xa;  return&#xa;&#xa;sender.signalPosition.connect(self.slot_reportCursorPos)&#xa;sender.selectMe.connect(self.slot_setSelectedRoi)&#xa;sender.requestContextMenu.connect(self.slot_graphicsObjectMenuRequested)&#xa;rDict=self.__graphicsObjects__[roiType]&#xa;roiId=&quot;%s%d&quot;%(rTypeStr,len(rDict))&#xa;sender.name=roiId&#xa;rDict[roiId]=sender&#xa;self.selectedRoi=sender&#xa;" id="ulspURS86nomb"/>
    <sourcecode value="self.signalCursorChanged.emit(obj)&#xa;" id="uJ7heWE4ba0cM"/>
    <sourcecode value="self.signalRoiChanged.emit(obj)&#xa;" id="u7AClX0D36zJg"/>
    <sourcecode value="self._zoomView(val)&#xa;" id="uNTyMfxY1X1n1"/>
    <sourcecode value="newZoom=self.__zoomVal__+val&#xa;if newZoom&lt;self._minZoom__:&#xa;  newZoom=self._minZoom__&#xa;&#xa;elif newZoom>self.__maxZoom__:&#xa;  newZoom=self.__maxZoom__&#xa;&#xa;self._zoomView(newZoom)&#xa;" id="u23Nrta20LSmE"/>
    <sourcecode value="self._cursorEditor()&#xa;return&#xa;" id="udcfxwArxFpAR"/>
    <sourcecode value="if self.selectedCursor is not None:&#xa;  self._cursorEditor(self.selectedCursor.ID)&#xa;&#xa;return&#xa;" id="uBmtbNYPDMxW0"/>
    <sourcecode value="if self._cursorContextMenuSourceId is not None and self._cursorContextMenuSourceId in self.__cursors__.keys():&#xa;  self._cursorEditor(self._cursorContextMenuSourceId)&#xa;&#xa;return&#xa;" id="ujcRVWKTkKelr"/>
    <sourcecode value="if self._cursorContextMenuSourceId is not None and self._cursorContextMenuSourceId in self.__cursors__.keys():&#xa;  cursor=self.__cursors__[self._cursorContextMenuSourceId]&#xa;  if cursor.__backend__.hasHardFrameAssociations and cursor.__backend__.hasStateForCurrentFrame:&#xa;    cursor.__backend__.propagateFrameState(cursor.__backend__.currentFrame,cursor.__backend__.frameIndices)&#xa;    cursor.__backend__.updateFrontends()&#xa;&#xa;&#xa;" id="ub2mNR8BxjZIb"/>
    <sourcecode value="pass&#xa;" id="u5qh0pksh2vCE"/>
    <sourcecode value="pass&#xa;" id="u7BsUjxCXMIAm"/>
    <sourcecode value="if self.selectedRoi is not None:&#xa;  self.selectedRoi.editMode=True&#xa;&#xa;" id="uwDKaZZxVkWaB"/>
    <sourcecode value="if crsId in self.__cursors__.keys()and self.__cursors__[crsId].objectType&amp;pgui.GraphicsObjectType.allCursorTypes:&#xa;  self._cursorContextMenuSourceId=crsId&#xa;  cm=QtWidgets.QMenu(&quot;Cursor Menu&quot;,self)&#xa;  crsEditAction=cm.addAction(&quot;Edit properties for %s cursor&quot;%crsId)&#xa;  crsEditAction.triggered.connect(self.slot_editCursor)&#xa;  crsPropagateStateToAllFrames=cm.addAction(&quot;Propagate current state to all frames&quot;)&#xa;  crsPropagateStateToAllFrames.triggered.connect(self.propagateCursorState)&#xa;  crsLinkCursorAction=cm.addAction(&quot;Link...&quot;)&#xa;  crsUnlinkCursorAction=cm.addAction(&quot;Unlink...&quot;)&#xa;  crsRemoveAction=cm.addAction(&quot;Remove %s cursor&quot;%crsId)&#xa;  crsRemoveAction.triggered.connect(self.slot_removeCursor)&#xa;  cm.exec(pos)&#xa;&#xa;elif crsId in self.__rois__.keys()and self.__rois__[crsId].objectType&amp;pgui.GraphicsObjectType.allObjectTypes:&#xa;  self._roiContextMenuSourceId=crsId&#xa;  cm=QtWidgets.QMenu(&quot;ROI Menu&quot;,self)&#xa;  crsEditAction=cm.addAction(&quot;Edit properties for %s ROI&quot;%crsId)&#xa;  crsEditAction.triggered.connect(self.slot_editRoi)&#xa;  pathEditAction=cm.addAction(&quot;Edit path for %s&quot;%crsId)&#xa;  pathEditAction.triggered.connect(self.slot_editRoiShape)&#xa;  crsLinkCursorAction=cm.addAction(&quot;Link...&quot;)&#xa;  crsUnlinkCursorAction=cm.addAction(&quot;Unlink...&quot;)&#xa;  crsRemoveAction=cm.addAction(&quot;Remove %s ROI&quot;%crsId)&#xa;  crsRemoveAction.triggered.connect(self.slot_removeRoi)&#xa;  cm.exec(pos)&#xa;&#xa;" id="ufptkmkjue9BC"/>
    <sourcecode value="if len(self.__cursors__)==0 or cId not in self.__cursors__.keys():&#xa;  self.selectedCursor=None&#xa;  self.signalGraphicsDeselected.emit()&#xa;  return&#xa;&#xa;if sel:&#xa;  self.selectedCursor=self.__cursors__[cId]&#xa;  self.signalCursorSelected.emit(self.selectedCursor.backend)&#xa;&#xa;else:&#xa;  self.selectedCursor=None&#xa;  self.signalGraphicsDeselected.emit()&#xa;&#xa;" id="u0CKdtcAArCiR"/>
    <sourcecode value="if len(self.__rois__)==0 or rId not in self.__rois__.keys():&#xa;  self.selectedRoi=None&#xa;  self.signalGraphicsDeselected.emit()&#xa;  return&#xa;&#xa;if sel:&#xa;  self.selectedRoi=self.__rois__[rId]&#xa;  self.signalCursorSelected.emit(self.selectedRoi.backend)&#xa;&#xa;else:&#xa;  self.selectedRoi=None&#xa;  self.signalGraphicsDeselected.emit()&#xa;&#xa;" id="u1B2iXaGxUEii"/>
    <sourcecode value="self.createNewCursor(pgui.GraphicsObjectType.horizontal_cursor)&#xa;" id="uj674BWPFZdiY"/>
    <sourcecode value="self.createNewCursor(pgui.GraphicsObjectType.point_cursor)&#xa;" id="uhwoobIf2Gdnp"/>
    <sourcecode value="self.createNewCursor(pgui.GraphicsObjectType.vertical_cursor)&#xa;" id="uL9JTg2U5elLg"/>
    <sourcecode value="self.createNewCursor(pgui.GraphicsObjectType.crosshair_cursor)&#xa;" id="uiqk30Z4Qrrho"/>
    <sourcecode value="if crsId in self.__cursors__.keys():&#xa;  self.slot_setSelectedCursor(crsId,True)&#xa;&#xa;" id="uPXivOt48JUYd"/>
    <sourcecode value="pass&#xa;" id="u77oNDJmhM8nv"/>
    <sourcecode value="pass&#xa;" id="u335DgTACeRGX"/>
    <sourcecode value="obj=self.__cursors__.get(crsId,None)&#xa;if obj is not None:&#xa;  if cType&amp;pgui.GraphicsObjectType.vertical_cursor:&#xa;    self.signalCursorAt[str,list].emit(crsId,\&#xa;    [np.floor(pos.x()),None,obj.xwindow])&#xa;  elif cType&amp;pgui.GraphicsObjectType.horizontal_cursor:&#xa;    self.signalCursorAt[str,list].emit(crsId,\&#xa;    [None,np.floor(pos.y()),self.__cursors__[crsId].ywindow])&#xa;  elif cType&amp;(pgui.GraphicsObjectType.crosshair_cursor|pgui.GraphicsObjectType.point_cursor):&#xa;    self.signalCursorAt[str,list].emit(crsId,\&#xa;    [np.floor(pos.x()),np.floor(pos.y()),self.__cursors__[crsId].xwindow,self.__cursors__[crsId].ywindow])&#xa;&#xa;" id="u0GiOA4jHWrAL"/>
    <sourcecode value="if len(self.__cursors__)==0:&#xa;  return&#xa;&#xa;cursors=[c for c in self.__cursors__.values()]&#xa;for crs in cursors:&#xa;  self.scene.removeItem(crs)&#xa;  if crs in crs.backend.frontends:&#xa;    crs.backend.frontends.remove(crs)&#xa;&#xa;&#xa;cursorTypeInts=[t.value for t in pgui.GraphicsObjectType if\&#xa;t.value&lt;pgui.GraphicsObjectType.allCursorTypes]for k in cursorTypeInts:&#xa;  self.__graphicsObjects__[k].clear()&#xa;&#xa;self.selectedCursor=None&#xa;self.__cursors__.clear()&#xa;self.update(self._imageGraphicsView.childrenRegion())&#xa;self.scene.update(self.scene.sceneRect().x(),\&#xa;self.scene.sceneRect().y(),\self.scene.sceneRect().width(),\self.scene.sceneRect().height())" id="uoHK4nKzWcqxC"/>
    <sourcecode value="if self.selectedCursor is None:&#xa;  return&#xa;&#xa;self.slot_removeCursorByName(self.selectedCursor.name)&#xa;" id="uoZxo3VRNNWTO"/>
    <sourcecode value="if len(self.__cursors__)==0:&#xa;  return&#xa;&#xa;if self._cursorContextMenuSourceId is not None and self._cursorContextMenuSourceId in self.__cursors__.keys():&#xa;  self.slot_removeCursorByName(self._cursorContextMenuSourceId)&#xa;&#xa;" id="uHwLeCRIO0jx6"/>
    <sourcecode value="if len(self.__cursors__)==0:&#xa;  return&#xa;&#xa;if crsId in self.__cursors__.keys():&#xa;  cursor=self.__cursors__[crsId]&#xa;  self.scene.removeItem(cursor)&#xa;  if self.selectedCursor==cursor:&#xa;    self.selectedCursor=None&#xa;&#xa;  if isinstance(cursor.objectType,pgui.GraphicsObjectType):&#xa;    cType=cursor.objectType.value&#xa;&#xa;  else:&#xa;    cType=cursor.objectType&#xa;&#xa;  self.__graphicsObjects__[cType].pop(crsId,None)&#xa;  if cursor in cursor.backend.frontends:&#xa;    cursor.backend.frontends.remove(cursor)&#xa;&#xa;  self.signalCursorRemoved.emit(cursor.backend)&#xa;&#xa;self.update(self._imageGraphicsView.childrenRegion())&#xa;self.scene.update(self.scene.sceneRect().x(),\&#xa;self.scene.sceneRect().y(),\self.scene.sceneRect().width(),\self.scene.sceneRect().height())" id="uwpbIopVKDUDL"/>
    <sourcecode value="if len(self.__rois__)==0:&#xa;  return&#xa;&#xa;rois=[r for r in self.__rois__.values()]&#xa;for roi in rois:&#xa;  self.scene.removeItem(roi)&#xa;  if roi in roi.backend.frontends:&#xa;    roi.backend.frontends.remove(roi)&#xa;&#xa;&#xa;roiTypeInts=[t.value for t in pgui.GraphicsObjectType if\&#xa;t.value>pgui.GraphicsObjectType.allCursorTypes]for k in roiTypeInts:&#xa;  self.__graphicsObjects__[k].clear()&#xa;&#xa;self.__rois__.clear()&#xa;self.selectedRoi=None&#xa;self.update(self._imageGraphicsView.childrenRegion())&#xa;self.scene.update(self.scene.sceneRect().x(),\&#xa;self.scene.sceneRect().y(),\self.scene.sceneRect().width(),\self.scene.sceneRect().height())" id="uxJIw4zwuduyo"/>
    <sourcecode value="if self.selectedRoi is None:&#xa;  return&#xa;&#xa;self.slot_removeRoiByName(self.selectedRoi.name)&#xa;" id="uxuh5KtDuJamR"/>
    <sourcecode value="if len(self.__rois__)==0:&#xa;  return&#xa;&#xa;if roiId in self.__rois__.keys():&#xa;  roi=self.__rois__[roiId]&#xa;  self.scene.removeItem(roi)&#xa;  if self.selectedRoi==roi:&#xa;    self.selectedRoi=None&#xa;&#xa;  if isinstance(roi.objectType,pgui.GraphicsObjectType):&#xa;    rType=roi.objectType.value&#xa;&#xa;  else:&#xa;    rType=roi.objectType&#xa;&#xa;  self.__graphicsObjects__[rType].pop(roiId,None)&#xa;  if roi in roi.backend.frontends:&#xa;    roi.backend.frontends.remove(roi)&#xa;&#xa;  self.signalRoiRemoved.emit(roi.backend)&#xa;&#xa;self.update(self._imageGraphicsView.childrenRegion())&#xa;self.scene.update(self.scene.sceneRect().x(),\&#xa;self.scene.sceneRect().y(),\self.scene.sceneRect().width(),\self.scene.sceneRect().height())" id="udtZ5HQ0VcZhj"/>
    <sourcecode value="if len(self.__rois__)==0:&#xa;  return&#xa;&#xa;if self._roiContextMenuSourceId is not None and self._roiContextMenuSourceId in self.__rois__.keys():&#xa;  self.slot_removeRoiByName(self._roiContextMenuSourceId)&#xa;&#xa;" id="u408s8Di8AJur"/>
    <sourcecode value="if not isinstance(roiId,str):&#xa;  raise TypeError(&quot;Expecting a str; got %s instead&quot;%type(roiId).__name__)&#xa;&#xa;if len(self.__rois__)==0:&#xa;  return False&#xa;&#xa;if not roiId in self.__rois__.keys():&#xa;  roi_id_Label=[(rid,r.name)for(rid,r)in self.__rois__.items()if r.name==roiId]&#xa;  return len(roi_id_Label)>0&#xa;&#xa;else:&#xa;  return True&#xa;&#xa;" id="ut4WOV70YlCCn"/>
    <sourcecode value="return self._minZoom__&#xa;" id="uFTh1tby5st5f"/>
    <sourcecode value="self._minZoom__=val&#xa;" id="uBnhbGVtR11yG"/>
    <sourcecode value="return self.__maxZoom__&#xa;" id="usi1f2A0v1DMr"/>
    <sourcecode value="self.__maxZoom__=val&#xa;" id="uhItUWUuL2DXe"/>
    <sourcecode value="return self.__scene__&#xa;" id="uq9uukR4RGIHT"/>
    <sourcecode value="return self._imageGraphicsView&#xa;" id="uRhMjZ2Axsrvb"/>
    <sourcecode value="return self.__cursors__&#xa;" id="uLAe20GIgOfeT"/>
    <sourcecode value="return self.__image_viewer__&#xa;" id="urxNTaAr5kxf7"/>
    <sourcecode value="return self.__rois__&#xa;" id="uJa3fV8J4TBMY"/>
    <sourcecode value="return self.__graphicsObjects__&#xa;" id="ugBNuQK1nueBc"/>
    <sourcecode value="if not isinstance(value,str):&#xa;  raise TypeError(&quot;Expecting a str; got %s instead&quot;%type(value).__name__)&#xa;&#xa;if len(self.__rois__):&#xa;  if value in self.__rois__.keys():&#xa;    return self.__rois__[value]&#xa;&#xa;  else:&#xa;    roi_id_Label=[(r,rid,r.label)for(rid,r)in self.__rois__.items()if r.label==value]&#xa;    if len(roi_id_Label):&#xa;      return[self.__rois__[i[0]]for i in roi_id_Label]&#xa;&#xa;&#xa;&#xa;" id="uQViKiEgI0sGb"/>
    <sourcecode value="if len(self.__cursors__):&#xa;  if not isinstance(value,str):&#xa;    raise TypeError(&quot;Expecting a str; gt %s instead&quot;%type(value).__name__)&#xa;&#xa;  if value in self.__cursors__.keys():&#xa;    return self.__cursors__[value]&#xa;&#xa;&#xa;" id="uZiTRn5YmC4k0"/>
    <sourcecode value="if not isinstance(crsid,str):&#xa;  raise TypeError(&quot;Expecting a str; got %s instead&quot;%type(crsid).__name__)&#xa;&#xa;if len(self.__cursors__)==0:&#xa;  return False&#xa;&#xa;if not crsid in self.__cursors__.keys():&#xa;  cid_label=[(cid,c.label)for(cid,c)in self.__cursors__.items()if c.label==crsid]&#xa;  return len(cid_label)>0&#xa;&#xa;else:&#xa;  return True&#xa;&#xa;" id="u4skh5Qp53VpQ"/>
    <sourcecode value="pass&#xa;" id="u6M2wllWPu3Iy"/>
    <sourcecode value="if evt.modifiers()and QtCore.Qt.ShiftModifier:&#xa;  step=1&#xa;  nDegrees=evt.angleDelta().y()*step/8&#xa;  nSteps=nDegrees/15&#xa;  zoomChange=nSteps*0.1&#xa;  self.slot_relativeZoom(zoomChange)&#xa;&#xa;evt.accept()&#xa;" id="uBM5pZ68moclf"/>
    <sourcecode value="evt.ignore()&#xa;" id="uCu6wpjW0ikD6"/>
    <sourcecode value="if evt.key()==QtCore.Qt.Key_Escape:&#xa;  self.__escape_pressed___=True&#xa;&#xa;evt.accept()&#xa;" id="u23w4BYWbzZGM"/>
    <sourcecode value="self.__mouse_pressed___=True&#xa;if evt.button()==QtCore.Qt.LeftButton:&#xa;  self.__last_mouse_click_lmb__=evt.pos()&#xa;&#xa;elif evt.button()==QtCore.Qt.RightButton:&#xa;  self.__last_mouse_click_lmb__=None&#xa;&#xa;evt.accept()&#xa;" id="u4DLvunRyciLR"/>
    <sourcecode value="self.__mouse_pressed___=True&#xa;if evt.button()==QtCore.Qt.LeftButton:&#xa;  self.__last_mouse_click_lmb__=evt.pos()&#xa;&#xa;elif evt.button()==QtCore.Qt.RightButton:&#xa;  self.__last_mouse_click_lmb__=None&#xa;&#xa;evt.accept()&#xa;" id="u3lP5DAe87bmT"/>
    <sourcecode value="self.view(img)&#xa;" id="uZT1VEW9l7LCA"/>
    <sourcecode value="if isinstance(a,QtGui.QPixmap):&#xa;  self.__scene__.rootImage=QtWidgets.QGraphicsPixmapItem(a)&#xa;&#xa;elif isinstance(a,QtGui.QImage):&#xa;  self.__scene__.rootImage=QtWidgets.QGraphicsPixmapItem(QtGui.QPixmap.fromImage(a))&#xa;&#xa;else:&#xa;  return&#xa;&#xa;" id="uSSf9oqZNCzDt"/>
    <sourcecode value="self.__interactiveZoom__=not self.__interactiveZoom__&#xa;" id="ucGfMbfKW3KEq"/>
    <sourcecode value="self.__scene__.setBackground(brush)&#xa;" id="u5yzDNZnIjN0S"/>
    <sourcecode value="self._topLabel.setText(value)&#xa;" id="ueqv1lBMwqZSq"/>
    <sourcecode value="self._topLabel.clear()&#xa;" id="uD3EmK58EFqbn"/>
    <sourcecode value="self.clearTopLabel()&#xa;" id="ujxt47PgxHw8m"/>
    <sourcecode value="super().__init__(**kwargs)&#xa;self._configureGUI_()&#xa;self._data_=None&#xa;self.imageNormalize=None&#xa;self.imageGamma=None&#xa;self.colorMap=None&#xa;self.prevColorMap=None&#xa;self.colorTable=None&#xa;self.colorbar=None&#xa;self._colorbar_width_=20&#xa;self.cursorsColor=None&#xa;self.roisColor=None&#xa;self.sharedCursorsColor=None&#xa;self.sharedRoisColor=None&#xa;if displayChannel is None:&#xa;  self._displayedChannel_=&quot;all&quot;&#xa;&#xa;else:&#xa;  if isinstance(displayChannel,str):&#xa;    if displayChannel.lower().strip()!=&quot;all&quot;:&#xa;      raise ValueError(&quot;When a str, displayChannel must be 'all'; got %s instead&quot;%displayChannel)&#xa;&#xa;&#xa;  elif isinstance(displayChannel,int):&#xa;    if displayChannel&lt;0:&#xa;      raise ValueError(&quot;When an int, display channel must be >= 0&quot;)&#xa;&#xa;&#xa;  self._displayedChannel_=displayChannel&#xa;&#xa;self.tStride=0&#xa;self.zStride=0&#xa;self.frameAxisInfo=None&#xa;self.userFrameAxisInfo=None&#xa;self.widthAxisInfo=None&#xa;self.heightAxisInfo=None&#xa;self._currentZoom_=0&#xa;self._currentFrameData_=None&#xa;self._scaleBarColor_=QtGui.QColor(255,255,255)&#xa;self._xScaleBar_=None&#xa;self._xScaleBarTextItem_=None&#xa;self._yScaleBar_=None&#xa;self._yScaleBarTextItem_=None&#xa;self._scaleBarTextPen_=QtGui.QPen(QtCore.Qt.SolidLine)&#xa;self._scaleBarPen_=QtGui.QPen(QtGui.QBrush(self._scaleBarColor_,&#xa;QtCore.Qt.SolidPattern),2.0,cap=QtCore.Qt.RoundCap,join=QtCore.Qt.RoundJoin)self.settings=QtCore.QSettings()&#xa;self._display_horizontal_scalebar_=True&#xa;self._display_vertical_scalebar_=True&#xa;self._showsScaleBars_=True&#xa;self._showsIntensityCalibration_=False&#xa;self._scaleBarOrigin_=(0,0)&#xa;self._scaleBarLength_=(10,10)&#xa;self._load_settings_()&#xa;if isinstance(data,ImageViewer.supported_types)or any([t in type(data).mro()for t in ImageViewer.supported_types]):&#xa;  self.setData(data,doc_title=self._docTitle_)&#xa;&#xa;" id="ut9JSHIont3gG"/>
    <sourcecode value="return self._current_frame_index_&#xa;" id="uRJdPMzgiFKTa"/>
    <sourcecode value="if not isinstance(val,int)or val>=self._number_of_frames_ or val&lt;0:&#xa;return signalBlockers=[QtCore.QSignalBlocker(widget)for widget in\&#xa;(self.framesQSpinBox,self.framesQSlider)]self.framesQSpinBox.setValue(val)&#xa;self.framesQSlider.setValue(val)&#xa;self._current_frame_index_=val&#xa;self.displayFrame()&#xa;if not self._gui_client_:&#xa;  for obj_dict in self.graphicsObjects().values():&#xa;    for obj in obj_dict.values():&#xa;      if obj.backend.currentFrame!=self._current_frame_index_:&#xa;        obj.backend.currentFrame=self._current_frame_index_&#xa;&#xa;&#xa;&#xa;  self.frameChanged.emit(self.currentFrame)&#xa;&#xa;" id="ubPPHRKlXQHNe"/>
    <sourcecode value="return self.viewerWidget.cursors&#xa;" id="ubElKUyN2QxXz"/>
    <sourcecode value="return self.viewerWidget.cursor(value)&#xa;" id="uFVRAVjNWfVyo"/>
    <sourcecode value="return self.viewerWidget.hasCursor(value)&#xa;" id="u1ckNPdsYAQDr"/>
    <sourcecode value="return self.viewerWidget.rois&#xa;" id="uqkiyKwH9Pukg"/>
    <sourcecode value="return self.viewerWidget.roi(roiId)&#xa;" id="utXKf21SBWSBO"/>
    <sourcecode value="return self.viewerWidget.hasRoi(roiId)&#xa;" id="u4xBFglqhYQGR"/>
    <sourcecode value="return self._colorbar_width_&#xa;" id="ubeZaX7KggzIV"/>
    <sourcecode value="if not isinstance(value,int):&#xa;  raise TypeError(&quot;Expecting an int; got %s instead&quot;%type(value).__name__)&#xa;&#xa;if value&lt;=0:&#xa;  raise ValueError(&quot;Expecting a strictly positive value (>=0); got %d instead&quot;%value)&#xa;&#xa;self._colorbar_width_=value&#xa;" id="uJJdOYAStppmb"/>
    <sourcecode value="return self.viewerWidget&#xa;" id="uuYovm57lbZAA"/>
    <sourcecode value="return self.viewer.scene&#xa;" id="uXCdnlhaPpYPw"/>
    <sourcecode value="return self.viewer.selectedRoi&#xa;" id="uRxd13hnWECHR"/>
    <sourcecode value="return self.viewer.selectedCursor&#xa;" id="uHmrh8JlCAUnx"/>
    <sourcecode value="if not isinstance(file_format,str)or file_format.strip().lower()not in(&quot;svg&quot;,&quot;tiff&quot;,&quot;png&quot;):&#xa;  raise ValueError(&quot;Unsupported export file format %s&quot;%file_format)&#xa;&#xa;if file_format.strip().lower()==&quot;svg&quot;:&#xa;  file_filter=&quot;Scalable Vector Graphics Files (*.svg)&quot;&#xa;  caption_suffix=&quot;SVG&quot;&#xa;&#xa;elif file_format.strip().lower()==&quot;tiff&quot;:&#xa;  file_filter=&quot;TIFF Files (*.tif)&quot;&#xa;  caption_suffix=&quot;TIFF&quot;&#xa;  qimg_format=QtGui.QImage.Format_ARGB32&#xa;&#xa;elif file_format.strip().lower()==&quot;png&quot;:&#xa;  file_filter=&quot;Portable Network Graphics Files (*.png)&quot;&#xa;  caption_suffix=&quot;PNG&quot;&#xa;  qimg_format=QtGui.QImage.Format_ARGB32&#xa;&#xa;else:&#xa;  raise ValueError(&quot;Unsupported export file format %s&quot;%file_format)&#xa;&#xa;if self._scipyenWindow_ is not None:&#xa;  targetDir=self._scipyenWindow_.currentDir&#xa;  fileName,_=QtWidgets.QFileDialog.getSaveFileName(self,&#xa;  caption=&quot;Export figure as %s&quot;%caption_suffix,filter=file_filter,directory=targetDir)&#xa;else:&#xa;  fileName,_=QtWidgets.QFileDialog.getSaveFileName(self,&#xa;  caption=&quot;Export figure as %s&quot;%caption_suffix,filter=file_filter)&#xa;if len(fileName)==0:&#xa;  return&#xa;&#xa;if file_format.strip().lower()==&quot;svg&quot;:&#xa;  generator=QtSvg.QSvgGenerator()&#xa;  generator.setFileName(fileName)&#xa;  generator.setSize(QtCore.QSize(int(self.viewerWidget.scene.width()),&#xa;  int(self.viewerWidget.scene.height())))generator.setViewBox(QtCore.QRect(0,0,&#xa;  int(self.viewerWidget.scene.width()),int(self.viewerWidget.scene.height())))generator.setResolution(300)&#xa;  font=QtGui.QGuiApplication.font()&#xa;  painter=QtGui.QPainter()&#xa;  painter.begin(generator)&#xa;  painter.setFont(font)&#xa;  self.viewerWidget.scene.render(painter)&#xa;  painter.end()&#xa;&#xa;else:&#xa;  out=QtGui.QImage(int(self.viewerWidget.scene.width()),&#xa;  int(self.viewerWidget.scene.height()),qimg_format)out.fill(QtCore.Qt.black)&#xa;  painter=QtGui.QPainter(out)&#xa;  self.viewerWidget.scene.render(painter)&#xa;  painter.end()&#xa;  out.save(fileName,file_format.strip().lower(),100)&#xa;&#xa;" id="u6FMF34zNhte0"/>
    <sourcecode value="if self._data_ is None:&#xa;  return&#xa;&#xa;self._export_scene_helper_(&quot;png&quot;)&#xa;" id="u6kNdXKyXVuTS"/>
    <sourcecode value="if self._data_ is None:&#xa;  return&#xa;&#xa;self._export_scene_helper_(&quot;svg&quot;)&#xa;" id="uq35iuNa1OvZ8"/>
    <sourcecode value="if self._data_ is None:&#xa;  return&#xa;&#xa;self._export_scene_helper_(&quot;tiff&quot;)&#xa;" id="u8RJ5mEMzOVXF"/>
    <sourcecode value="if self._data_ is None:&#xa;  return&#xa;&#xa;if self._scipyenWindow_ is not None:&#xa;  targetDir=self._scipyenWindow_.currentDir&#xa;  fileName,_=QtWidgets.QFileDialog.getSaveFileName(self,&#xa;  caption=&quot;Save image data as TIFF&quot;,filter=&quot;TIFF Files (*.tif)&quot;,directory=targetDir)&#xa;else:&#xa;  fileName,_=QtWidgets.QFileDialog.getSaveFileName(self,&#xa;  caption=&quot;Save image data as TIFF&quot;,filter=&quot;TIFF Files (*.tif)&quot;)&#xa;if len(fileName)==0:&#xa;  return&#xa;&#xa;pio.saveImageFile(self._data_,fileName)&#xa;" id="ualgrgKByGPi4"/>
    <sourcecode value="self.viewerWidget.slot_editAnyCursor()&#xa;" id="ubgphQgmKSyij"/>
    <sourcecode value="self.viewerWidget.slot_editSelectedCursor()&#xa;" id="u0r4vpZ9YRMqj"/>
    <sourcecode value="self.viewerWidget.slot_removeCursors()&#xa;" id="uSVLubZotyboU"/>
    <sourcecode value="self.viewerWidget.slot_removeSelectedCursor()&#xa;" id="uIi518qdmXtFi"/>
    <sourcecode value="self.viewerWidget.slot_removeRois()&#xa;" id="ugLeUHuQ71e06"/>
    <sourcecode value="self.viewerWidget.slot_removeRoiByName(roiId)&#xa;" id="u5P5NacRJG8dJ"/>
    <sourcecode value="self.viewerWidget.slot_removeSelectedRoi()&#xa;" id="uKOgh8E9yXWQw"/>
    <sourcecode value="self._currentZoom_+=1&#xa;self.viewerWidget.slot_zoom(2**self._currentZoom_)&#xa;" id="uq3YxWKfCE6l9"/>
    <sourcecode value="self._currentZoom_=0&#xa;self.viewerWidget.slot_zoom(2**self._currentZoom_)&#xa;" id="u4sBwl1QumwgQ"/>
    <sourcecode value="if self._scipyenWindow_ is None:&#xa;  return&#xa;&#xa;if self._data_var_name_ is not None and self._data_var_name_ in self._scipyenWindow_.workspace.keys():&#xa;  self.setData(self._scipyenWindow_.workspace[self._data_var_name_],doc_title=self._data_var_name_)&#xa;&#xa;" id="ufCpus5UbDPyO"/>
    <sourcecode value="self._currentZoom_-=1&#xa;self.viewerWidget.slot_zoom(2**self._currentZoom_)&#xa;" id="uhRaOWhFXL8Zt"/>
    <sourcecode value="self.viewerWidget.interactiveZoom()&#xa;" id="uDrCVl45tbDrO"/>
    <sourcecode value="if value:&#xa;  self._setup_color_bar_()&#xa;&#xa;else:&#xa;  if self.colorbar is not None:&#xa;    self.viewerWidget.scene.removeItem(self.colorbar)&#xa;&#xa;&#xa;" id="ubDll0hTTvDRg"/>
    <sourcecode value="if isinstance(self._data_,vigra.VigraArray):&#xa;  self._currentFrameData_,_=self._generate_frame_view_(self._displayedChannel_)&#xa;  imax=self._currentFrameData_.max()&#xa;  imin=self._currentFrameData_.min()&#xa;  imin,imax=sorted((imin,imax))&#xa;  image_range=abs(imax-imin)&#xa;  bar_x=self._currentFrameData_.shape[0]&#xa;  bar_height=self._currentFrameData_.shape[1]&#xa;  if image_range==0:&#xa;    return&#xa;&#xa;  bar_column=np.linspace(self._currentFrameData_.max(),&#xa;  self._currentFrameData_.min(),bar_height)bar_image=vigra.VigraArray(np.concatenate([bar_column[:,np.newaxis]for k in range(self._colorbar_width_)],&#xa;  axis=1).T,axistags=vigra.VigraArray.defaultAxistags(&quot;xy&quot;))if self.colorMap is None or self._currentFrameData_.channels>1:&#xa;    bar_qimage=bar_image.qimage(normalize=self.imageNormalize)&#xa;&#xa;  else:&#xa;    bar_qimage=self._applyColorTable_(bar_image).qimage(normalize=self.imageNormalize)&#xa;&#xa;  if self.colorbar is None:&#xa;    self.colorbar=QtWidgets.QGraphicsItemGroup()&#xa;    self.viewerWidget.scene.addItem(self.colorbar)&#xa;&#xa;  else:&#xa;    for item in self.colorbar.childItems():&#xa;      self.colorbar.removeFromGroup(item)&#xa;&#xa;&#xa;  cbar_pixmap_item=QtWidgets.QGraphicsPixmapItem(QtGui.QPixmap.fromImage(bar_qimage))&#xa;  cbar_pixmap_item.setPos(bar_x,0)&#xa;  cbar_rect=QtWidgets.QGraphicsRectItem(bar_x,0,self._colorbar_width_,bar_height)&#xa;  cbar_rect.setPen(pgraph.mkPen(pgraph.mkColor(&quot;k&quot;)))&#xa;  optNTicks=max(2.,np.log(bar_height))&#xa;  optTickSpc=image_range/optNTicks&#xa;  max_p10_spacing=10**np.floor(np.log10(optTickSpc))&#xa;  intervals=np.array([1.,2.,10,20.,100.])*max_p10_spacing&#xa;  minorIndex=0&#xa;  while intervals[minorIndex+1]&lt;=optTickSpc:&#xa;    minorIndex+=1&#xa;&#xa;  levels=[(intervals[minorIndex+2],0),&#xa;  (intervals[minorIndex+1],0)]minSpc=min(bar_height/20.,30.)&#xa;  maxNTicks=bar_height/minSpc&#xa;  if image_range/intervals[minorIndex]&lt;=maxNTicks:&#xa;    levels.append((intervals[minorIndex],0))&#xa;&#xa;  tick_values=np.array([])&#xa;  ticks=[]&#xa;  for k in range(len(levels)):&#xa;    spacing,offset=levels[k]&#xa;    start=np.ceil((imin-offset)/spacing)*spacing+offset&#xa;    nticks=int((imax-start)/spacing)+1&#xa;    values=np.arange(nticks)*spacing+start&#xa;    values=list(filter(lambda x:all(np.abs(tick_values-x)>spacing*0.01),values))&#xa;    tick_values=np.concatenate([tick_values,values])&#xa;    ticks.append((spacing,values))&#xa;&#xa;  final_tick_values=ticks[-1][1]&#xa;  tick_strings=[&quot;%d&quot;%value for value in final_tick_values]&#xa;  tick_y_positions=[(bar_height-((value-imin)*bar_height)/image_range)for value in final_tick_values]&#xa;  tick_labels_width=[]&#xa;  font=QtGui.QGuiApplication.font()&#xa;  font_metrics=QtGui.QFontMetrics(font)&#xa;  tick_lines=[]&#xa;  tick_labels=[]&#xa;  for k,tick_y in enumerate(tick_y_positions):&#xa;    tick_line=QtWidgets.QGraphicsLineItem(bar_x,tick_y,self._colorbar_width_+bar_x,tick_y)&#xa;    tick_line.setPen(pgraph.mkPen(pgraph.mkColor(&quot;k&quot;)))&#xa;    tick_text=QtWidgets.QGraphicsTextItem(tick_strings[k])&#xa;    tick_text.setFont(font)&#xa;    font_rect=font_metrics.boundingRect(tick_strings[k])&#xa;    tick_labels_width.append(font_rect.width())&#xa;    tick_text.setPos(self._colorbar_width_+bar_x,tick_y+font_rect.y())&#xa;    tick_lines.append(tick_line)&#xa;    tick_labels.append(tick_text)&#xa;&#xa;  back_rect=QtWidgets.QGraphicsRectItem(bar_x,0,(self._colorbar_width_+max(tick_labels_width))*1.2,bar_height)&#xa;  back_rect.setPen(pgraph.mkPen(pgraph.mkColor(&quot;w&quot;)))&#xa;  back_rect.setBrush(pgraph.mkBrush(&quot;w&quot;))&#xa;  self.colorbar.addToGroup(back_rect)&#xa;  self.colorbar.addToGroup(cbar_pixmap_item)&#xa;  self.colorbar.addToGroup(cbar_rect)&#xa;  for k,l in enumerate(tick_lines):&#xa;    self.colorbar.addToGroup(l)&#xa;    self.colorbar.addToGroup(tick_labels[k])&#xa;&#xa;&#xa;elif isinstance(self._data_,(QtGui.QImage,QtGui.QPixmap)):&#xa;  return&#xa;&#xa;else:&#xa;  return&#xa;&#xa;" id="uFQGAOzmVNvu2"/>
    <sourcecode value="if value:&#xa;  if self._data_ is None:&#xa;    return&#xa;&#xa;  xcal=None&#xa;  ycal=None&#xa;  x_units=dt.pixel_unit&#xa;  y_units=dt.pixel_unit&#xa;  if isinstance(self._data_,vigra.VigraArray):&#xa;    w=self._data_.shape[0]&#xa;    h=self._data_.shape[1]&#xa;    if self.frameAxisInfo is not None:&#xa;      if isinstance(self.frameAxisInfo,tuple)and len(self.frameAxisInfo)==2:&#xa;        ndx1=self._current_frame_index_//self._data_.shape[self._data_.axistags.index(self.frameAxisInfo[0].key)]&#xa;        ndx0=self._current_frame_index_-ndx1*self._data_.shape[self._data_.axistags.index(self.frameAxisInfo[0].key)]&#xa;        img=self._data_.bindAxis(self.frameAxisInfo[0].key,ndx0).bindAxis(self.frameAxisInfo[1].key,ndx1)&#xa;&#xa;      else:&#xa;        img=self._data_.bindAxis(self.frameAxisInfo.key,self._current_frame_index_)&#xa;&#xa;&#xa;    else:&#xa;      img=self._data_&#xa;&#xa;    xcal=dt.AxisCalibration(img.axistags[0])&#xa;    ycal=dt.AxisCalibration(img.axistags[1])&#xa;    x_units=xcal.getUnits(img.axistags[0])&#xa;    y_units=ycal.getUnits(img.axistags[1])&#xa;&#xa;  elif isinstance(self._data_,(QtGui.QImage,QtGui.QPixmap)):&#xa;    w=self._data_.width()&#xa;    h=self._data_.height()&#xa;&#xa;  else:&#xa;    return&#xa;&#xa;  def_x=self._scaleBarOrigin_[0]&#xa;  def_x_len=self._scaleBarLength_[0]&#xa;  if xcal is not None:&#xa;    def_x=float(xcal.getCalibratedAxialDistance(def_x,img.axistags[0]).magnitude)&#xa;    def_x_len=float(xcal.getCalibratedAxialDistance(def_x_len,img.axistags[0]).magnitude)&#xa;&#xa;  def_y=self._scaleBarOrigin_[1]&#xa;  def_y_len=self._scaleBarLength_[1]&#xa;  if ycal is not None:&#xa;    def_y=float(ycal.getCalibratedAxialDistance(def_y,img.axistags[1]).magnitude)&#xa;    def_y_len=float(ycal.getCalibratedAxialDistance(def_y_len,img.axistags[1]).magnitude)&#xa;&#xa;  dlg=quickdialog.QuickDialog(self,&quot;Display scale bars&quot;)&#xa;  display_group=quickdialog.HDialogGroup(dlg)&#xa;  show_x=quickdialog.CheckBox(display_group,&quot;Horizontal&quot;)&#xa;  show_x.setToolTip(&quot;Show horizontal scalebar&quot;)&#xa;  show_x.setChecked(self._display_horizontal_scalebar_)&#xa;  show_y=quickdialog.CheckBox(display_group,&quot;Vertical&quot;)&#xa;  show_y.setToolTip(&quot;Show vertical scalebar&quot;)&#xa;  show_y.setChecked(self._display_vertical_scalebar_)&#xa;  x_prompt=quickdialog.FloatInput(dlg,&quot;X coordinate (in %s)&quot;%x_units)&#xa;  x_prompt.variable.setClearButtonEnabled(True)&#xa;  x_prompt.variable.redoAvailable=True&#xa;  x_prompt.variable.undoAvailable=True&#xa;  x_prompt.setValue(def_x)&#xa;  y_prompt=quickdialog.FloatInput(dlg,&quot;Y coordinate (in %s)&quot;%y_units)&#xa;  y_prompt.variable.setClearButtonEnabled(True)&#xa;  y_prompt.variable.redoAvailable=True&#xa;  y_prompt.variable.undoAvailable=True&#xa;  y_prompt.setValue(def_y)&#xa;  x_len_prompt=quickdialog.FloatInput(dlg,&quot;Length on X axis (in %s)&quot;%x_units)&#xa;  x_len_prompt.variable.setClearButtonEnabled(True)&#xa;  x_len_prompt.variable.redoAvailable=True&#xa;  x_len_prompt.variable.undoAvailable=True&#xa;  x_len_prompt.setValue(def_x_len)&#xa;  y_len_prompt=quickdialog.FloatInput(dlg,&quot;Length on Y axis (in %s)&quot;%y_units)&#xa;  y_len_prompt.variable.setClearButtonEnabled(True)&#xa;  y_len_prompt.variable.redoAvailable=True&#xa;  y_len_prompt.variable.undoAvailable=True&#xa;  y_len_prompt.setValue(def_y_len)&#xa;  if dlg.exec()==QtWidgets.QDialog.Accepted:&#xa;    self._display_horizontal_scalebar_=show_x.selection()&#xa;    self._display_vertical_scalebar_=show_y.selection()&#xa;    if xcal is not None:&#xa;      cal_x=x_prompt.value()*xcal.getUnits(img.axistags[0].key)&#xa;      cal_x_len=x_len_prompt.value()*xcal.getUnits(img.axistags[0].key)&#xa;      x=xcal.getDistanceInSamples(cal_x,img.axistags[0].key)&#xa;      x_len=xcal.getDistanceInSamples(cal_x_len,img.axistags[0].key)&#xa;&#xa;    else:&#xa;      x=int(x_prompt.value())&#xa;      x_len=int(x_len_prompt.value())&#xa;      cal_x=x&#xa;      cal_x_len=y_len&#xa;&#xa;    if ycal is not None:&#xa;      cal_y=y_prompt.value()*ycal.getUnits(img.axistags[1].key)&#xa;      cal_y_len=y_len_prompt.value()*ycal.getUnits(img.axistags[1].key)&#xa;      y=ycal.getDistanceInSamples(cal_y,img.axistags[1].key)&#xa;      y_len=ycal.getDistanceInSamples(cal_y_len,img.axistags[1].key)&#xa;&#xa;    else:&#xa;      y=int(y_prompt.value())&#xa;      y_len=int(y_len_prompt.value())&#xa;      cal_y=y&#xa;      cal_y_len=y_len&#xa;&#xa;    self._scaleBarOrigin_=(x,y)&#xa;    self._scaleBarLength_=(x_len,y_len)&#xa;    self.showScaleBars(calibrated_length=(cal_x_len,cal_y_len))&#xa;&#xa;&#xa;else:&#xa;  if self._xScaleBar_ is not None:&#xa;    self._xScaleBar_.setVisible(False)&#xa;&#xa;  if self._yScaleBar_ is not None:&#xa;    self._yScaleBar_.setVisible(False)&#xa;&#xa;&#xa;" id="uY3EYOb3ajhP4"/>
    <sourcecode value="if isinstance(self._data_,vigra.VigraArray):&#xa;  if self._data_.channels>1:&#xa;    for channel in range(self._data_.channels):&#xa;      action=self.channelsMenu.addAction(&quot;%d&quot;%channel)&#xa;      action.setCheckable(True)&#xa;      action.setChecked(False)&#xa;      action.triggered.connect(self.slot_displayChannel)&#xa;      self.displayIndividualChannelActions.append(&quot;Channel %d&quot;%channel)&#xa;&#xa;&#xa;  else:&#xa;    self.channelsMenu.clear()&#xa;    self.displayIndividualChannelActions.clear()&#xa;&#xa;&#xa;else:&#xa;  pass&#xa;&#xa;" id="uoDc5PQhlL0iw"/>
    <sourcecode value="sender=self.sender()&#xa;if sender in self.displayIndividualChannelActions:&#xa;  text=sender.text()&#xa;  try:&#xa;    channel_index=int(eval(text))&#xa;    self.displayChannel(channel_index)&#xa;&#xa;  except:&#xa;    return&#xa;&#xa;&#xa;" id="u3x4WzrtA6xLt"/>
    <sourcecode value="from workspacefunctions import getvarsbytype&#xa;if self._scipyenWindow_ is None:&#xa;  return&#xa;&#xa;img_vars=dict(getvarsbytype(vigra.VigraArray,ws=self._scipyenWindow_.workspace))&#xa;if len(img_vars)==0:&#xa;  return&#xa;&#xa;name_list=sorted([name for name in img_vars.keys()])&#xa;choiceDialog=pgui.ItemsListDialog(parent=self,itemsList=name_list)&#xa;ans=choiceDialog.exec()&#xa;if ans==QtWidgets.QDialog.Accepted and choiceDialog.selectedItem is not None:&#xa;  image=img_vars[choiceDialog.selectedItem]&#xa;  image_title=choiceDialog.selectedItem&#xa;  self._data_var_name_=choiceDialog.selectedItem&#xa;  if isinstance(self._displayedChannel_,int):&#xa;    if self._displayedChannel_>=image.channels:&#xa;      self._displayedChannel_=&quot;all&quot;&#xa;&#xa;&#xa;  self.view(image,title=image_title,displayChannel=self._displayedChannel_)&#xa;&#xa;" id="u2H06hDvg4AMh"/>
    <sourcecode value="if value:&#xa;  self.displayAllChannels()&#xa;&#xa;" id="uwvWe1mrrLsPB"/>
    <sourcecode value="self._displayValueAtCoordinates(coords,value)&#xa;" id="uJQZtCnveisG5"/>
    <sourcecode value="self._displayValueAtCoordinates((x,y))&#xa;" id="ungLP0wS7YHHZ"/>
    <sourcecode value="self.signal_graphicsObjectAdded.emit(obj)&#xa;" id="ud5Coe73p0chL"/>
    <sourcecode value="self.signal_graphicsObjectChanged.emit(obj)&#xa;" id="uhIBX8btU1cFh"/>
    <sourcecode value="self.signal_graphicsObjectRemoved.emit(obj)&#xa;" id="ueWJNweyaF82Z"/>
    <sourcecode value="self.signal_graphicsObjectSelected.emit(obj)&#xa;" id="urAaFGRl5u4o6"/>
    <sourcecode value="self.signal_graphicsObjectDeselected.emit()&#xa;" id="ujSGIZoxaOj5K"/>
    <sourcecode value="import io&#xa;if img is None:&#xa;  return False&#xa;&#xa;try:&#xa;  (nFrames,frameAxisInfo,widthAxisInfo,heightAxisInfo)=dt.getFrameLayout(img,userFrameAxis=self.userFrameAxisInfo)&#xa;&#xa;except Exception as e:&#xa;  s=io.StringIO()&#xa;  sei=sys.exc_info()&#xa;  traceback.print_exception(file=s,*sei)&#xa;  msgbox=QtWidgets.QMessageBox()&#xa;  msgbox.setSizeGripEnabled(True)&#xa;  msgbox.setIcon(QtWidgets.QMessageBox.Critical)&#xa;  msgbox.setWindowTitle(type(e).__name__)&#xa;  msgbox.setText(sei[0].__class__.__name__)&#xa;  msgbox.setDetailedText(s.getvalue())&#xa;  msgbox.exec()&#xa;  return False&#xa;&#xa;if np.any(np.iscomplex(img)):&#xa;  QtWidgets.QMessageBox.critical(self,&quot;Error&quot;,&quot;ImageViewer cannot display complex-valued data&quot;)&#xa;  return False&#xa;&#xa;try:&#xa;  if self._data_ is not None and len(self.viewerWidget.cursors)>0:&#xa;    if self._data_.shape[self._data_.axistags.index(self.widthAxisInfo.key)]!=img.shape[img.axistags.index(widthAxisInfo.key)]or\&#xa;    self._data_.shape[self._data_.axistags.index(self.heightAxisInfo.key)]!=img.shape[img.axistags.index(heightAxisInfo.key)]:&#xa;      msgBox=QtWidgets.QMessageBox()&#xa;      msgBox.setText(&quot;New image frame geometry will invalidate existing cursors.&quot;)&#xa;      msgBox.setInformativeText(&quot;Load image and bring all cursors to center?&quot;)&#xa;      msgBox.setStandardButtons(QtWidgets.QMessageBox.Ok|QtWidgets.QMessageBox.Cancel)&#xa;      msgBox.setDefaultButton(QtWidgets.QMessageBox.Cancel)&#xa;      msgBox.setIcon(QtWidgets.QMessageBox.Warning)&#xa;      ret=msgBox.exec()&#xa;      if ret==QtWidgets.QMessageBox.Cancel:&#xa;        return False&#xa;&#xa;      for c in self.viewerWidget.cursors.values():&#xa;        widthAxisNdx=img.axistags.index(widthAxisInfo.key)&#xa;        heightAxisNdx=img.axistags.index(heightAxisInfo.key)&#xa;        c.rangeX=img.shape[widthAxisNdx]&#xa;        c.rangeY=img.shape[heightAxisNdx]&#xa;        c.setPos(img.shape[widthAxisNdx]/2,img.shape[heightAxisNdx]/2)&#xa;&#xa;&#xa;&#xa;  self._number_of_frames_=nFrames&#xa;  self.frameAxisInfo=frameAxisInfo&#xa;  self.widthAxisInfo=widthAxisInfo&#xa;  self.heightAxisInfo=heightAxisInfo&#xa;  self.framesQSlider.setMaximum(self._number_of_frames_-1)&#xa;  self.framesQSlider.setToolTip(&quot;Select frame.&quot;)&#xa;  self.framesQSpinBox.setMaximum(self._number_of_frames_-1)&#xa;  self.framesQSpinBox.setToolTip(&quot;Select frame .&quot;)&#xa;  self.nFramesLabel.setText(&quot;of %d&quot;%self._number_of_frames_)&#xa;  return True&#xa;&#xa;except Exception as e:&#xa;  traceback.print_exc()&#xa;  return False&#xa;&#xa;" id="u1zsgWg45bJH4"/>
    <sourcecode value="if isinstance(image,vigra.VigraArray):&#xa;  if np.isnan(image).any():&#xa;    return image&#xa;&#xa;  if not isinstance(self.colorMap,colors.Colormap):&#xa;    return image&#xa;&#xa;  if image.min()==image.max():&#xa;    return image&#xa;&#xa;  lrMapImage=vigra.colors.linearRangeMapping(image)&#xa;  nMap=colors.Normalize(vmin=0,vmax=255)&#xa;  sMap=cm.ScalarMappable(norm=nMap,cmap=self.colorMap)&#xa;  sMap.set_array(range(256))&#xa;  cTable=sMap.to_rgba(range(256),bytes=True)&#xa;  if image.ndim>2:&#xa;    if image.channelIndex&lt;image.ndim and image.channels>1:&#xa;      return image&#xa;&#xa;    else:&#xa;      cFrame=vigra.colors.applyColortable(lrMapImage.astype('uint32'),cTable)&#xa;&#xa;&#xa;  else:&#xa;    cFrame=vigra.colors.applyColortable(lrMapImage.astype('uint32'),cTable)&#xa;&#xa;  return cFrame&#xa;&#xa;elif isinstance(image,(QtGui.QImage,QtGui.QPixmap)):&#xa;  return image&#xa;&#xa;" id="upBiyypHkSzBn"/>
    <sourcecode value="if not isinstance(self._data_,vigra.VigraArray):&#xa;  raise RuntimeError(&quot;Wrong function call for a non-vigra array image&quot;)&#xa;&#xa;if self.frameAxisInfo is not None:&#xa;  if isinstance(self.frameAxisInfo,(tuple,list)):&#xa;    dimindices=list()&#xa;    frameAxisDims=[self._data_.shape[self._data_.axistags.index[ax.key]]for ax in self.frameAxisInfo]&#xa;    premultipliers=[1]&#xa;    premultipliers+=list(np.cumprod([self._data_.shape[self._data_.axistags.index[ax.key]]for ax in self.frameAxisInfo])[:-1])&#xa;    frame=self._current_frame_index_&#xa;    for k in range(len(premultipliers)-1,-1,-1):&#xa;      ndx=frame//premultipliers[k]&#xa;      frame=frame%premultipliers[k]&#xa;      dimindices.append(ndx)&#xa;&#xa;    dimindices.reverse()&#xa;    img_view=self._data_.bindAxis(self.frameAxisInfo[0].key,dimindices[0])&#xa;    for k in range(1,len(dimindices)):&#xa;      img_view=img_view.bindAxis(self.frameAxisInfo[k].key,dimindices[k])&#xa;&#xa;&#xa;  else:&#xa;    img_view=self._data_.bindAxis(self.frameAxisInfo.key,self._current_frame_index_)&#xa;    dimindices=[self._current_frame_index_]&#xa;&#xa;&#xa;else:&#xa;  img_view=self._data_&#xa;  dimindices=[]&#xa;&#xa;if isinstance(channel,int)and&quot;c&quot;in self._currentFrameData_.axistags and channel_index in range(self._currentFrameData_.channels):&#xa;  img_view=img_view.bindAxis(&quot;c&quot;,channel)&#xa;&#xa;if np.isnan(img_view).any():&#xa;  img_view=img.view.copy()&#xa;  img_view[np.isnan(img_view)]=0.0&#xa;&#xa;return img_view,dimindices&#xa;" id="uZtk3DDfYuT2G"/>
    <sourcecode value="x=None&#xa;y=None&#xa;if channel_index is None:&#xa;  channel_index=self._displayedChannel_&#xa;&#xa;if isinstance(channel_index,str):&#xa;  if channel_index.lower().strip()!=&quot;all&quot;:&#xa;    raise ValueError(&quot;When a string, channel_index must be 'all' -- case-insensitive; got %s instead&quot;%channel_index)&#xa;&#xa;&#xa;elif isinstance(channel_index,int):&#xa;  if channel_index&lt;0:&#xa;    raise ValueError(&quot;When an int, channel_index must be >= 0; got %d instead&quot;%channel_index)&#xa;&#xa;  if isinstance(self._data_,vigra.VigraArray):&#xa;    if channel_index>=self._data_.channels:&#xa;      raise ValueError(&quot;Invalid channel_index %d for an image with %d channels&quot;%(channel_index,self._data_.channels))&#xa;&#xa;&#xa;&#xa;if channel_index is not self._displayedChannel_:&#xa;  self._displayedChannel_=channel_index&#xa;&#xa;try:&#xa;  if isinstance(self._data_,vigra.VigraArray):&#xa;    self._currentFrameData_,_=self._generate_frame_view_(channel_index)&#xa;    if self.colorMap is None:&#xa;      self.viewerWidget.view(self._currentFrameData_.qimage(normalize=self.imageNormalize))&#xa;&#xa;    else:&#xa;      if self._currentFrameData_.channels==1:&#xa;        if self._currentFrameData_.channelIndex&lt;self._currentFrameData_.ndim:&#xa;          self._currentFrameData_=self._currentFrameData_.squeeze()&#xa;&#xa;        cFrame=self._applyColorTable_(self._currentFrameData_)&#xa;        self.viewerWidget.view(cFrame.qimage(normalize=self.imageNormalize))&#xa;&#xa;      else:&#xa;        self._currentFrameData_=self._currentFrameData_.squeeze().copy()&#xa;        self.viewerWidget.view(self._currentFrameData_.qimage(normalize=self.imageNormalize))&#xa;&#xa;&#xa;    w=self._data_.shape[self._data_.axistags.index(self.widthAxisInfo.key)]&#xa;    h=self._data_.shape[self._data_.axistags.index(self.heightAxisInfo.key)]&#xa;    cals=&quot;(%s x %s)&quot;%\&#xa;    (strutils.print_scalar_quantity(dt.getCalibratedAxisSize(self._data_,self.widthAxisInfo.key)),\strutils.print_scalar_quantity(dt.getCalibratedAxisSize(self._data_,self.heightAxisInfo.key)))shapeTxt=&quot;%s x %s: %d x %d %s&quot;%\&#xa;    (dt.defaultAxisTypeName(self.widthAxisInfo),\dt.defaultAxisTypeName(self.heightAxisInfo),\w,h,cals)self.slot_displayColorBar(self.displayColorBarAction.isChecked())&#xa;&#xa;  elif isinstance(self._data_,(QtGui.QImage,QtGui.QPixmap)):&#xa;    self.viewerWidget.view(self._data_)&#xa;    w=self._data_.width()&#xa;    h=self._data_.height()&#xa;    shapeTxt=&quot;W x H: %d x %d &quot;%(w,h)&#xa;&#xa;  else:&#xa;    return&#xa;&#xa;  self.viewerWidget.setTopLabelText(shapeTxt)&#xa;&#xa;except Exception as e:&#xa;  traceback.print_exc()&#xa;  self._currentFrameData_=None&#xa;&#xa;" id="uKcXCRda4Ibqm"/>
    <sourcecode value="self.setupUi(self)&#xa;self.setWindowTitle(&quot;Image Viewer&quot;)&#xa;if self.viewerWidgetContainer.layout()is None:&#xa;  self.viewerWidgetContainer.setLayout(QtWidgets.QGridLayout(self.viewerWidgetContainer))&#xa;&#xa;self.viewerWidgetContainer.layout().setSpacing(0)&#xa;self.viewerWidgetContainer.layout().setContentsMargins(0,0,0,0)&#xa;self.intensityCalibrationWidget=None&#xa;self.viewerWidget=GraphicsImageViewerWidget(parent=self.viewerWidgetContainer,imageViewer=self)&#xa;self.viewerWidgetContainer.layout().setHorizontalSpacing(0)&#xa;self.viewerWidgetContainer.layout().setVerticalSpacing(0)&#xa;self.viewerWidgetContainer.layout().contentsMargins().setLeft(0)&#xa;self.viewerWidgetContainer.layout().contentsMargins().setRight(0)&#xa;self.viewerWidgetContainer.layout().contentsMargins().setTop(0)&#xa;self.viewerWidgetContainer.layout().contentsMargins().setBottom(0)&#xa;self.viewerWidgetContainer.layout().addWidget(self.viewerWidget,0,0)&#xa;self.viewerWidget.signalCursorAt[str,list].connect(self.slot_displayCursorPos)&#xa;self.viewerWidget.scene.signalMouseAt[int,int].connect(self.slot_displayMousePos)&#xa;self.viewerWidget.signalCursorAdded[object].connect(self.slot_graphicsObjectAdded)&#xa;self.viewerWidget.signalCursorChanged[object].connect(self.slot_graphicsObjectChanged)&#xa;self.viewerWidget.signalCursorRemoved[object].connect(self.slot_graphicsObjectRemoved)&#xa;self.viewerWidget.signalCursorSelected[object].connect(self.slot_graphicsObjectSelected)&#xa;self.viewerWidget.signalRoiAdded[object].connect(self.slot_graphicsObjectAdded)&#xa;self.viewerWidget.signalRoiChanged[object].connect(self.slot_graphicsObjectChanged)&#xa;self.viewerWidget.signalRoiRemoved[object].connect(self.slot_graphicsObjectRemoved)&#xa;self.viewerWidget.signalRoiSelected[object].connect(self.slot_graphicsObjectSelected)&#xa;self.viewerWidget.signalGraphicsDeselected.connect(self.slot_graphicsObjectDeselected)&#xa;self.actionView.triggered.connect(self.slot_loadImageFromWorkspace)&#xa;self.actionRefresh.triggered.connect(self.slot_refreshDataDisplay)&#xa;self.actionExportAsPNG.triggered.connect(self.slot_exportSceneAsPNG)&#xa;self.actionExportAsSVG.triggered.connect(self.slot_exportSceneAsSVG)&#xa;self.actionExportAsTIFF.triggered.connect(self.slot_exportSceneAsTIFF)&#xa;self.actionSaveTIFF.triggered.connect(self.slot_saveTIFF)&#xa;self.displayMenu=QtWidgets.QMenu(&quot;Display&quot;,self)&#xa;self.menubar.addMenu(self.displayMenu)&#xa;self.channelsMenu=QtWidgets.QMenu(&quot;Channels&quot;,self)&#xa;self.displayMenu.addMenu(self.channelsMenu)&#xa;self.showAllChannelsAction=self.channelsMenu.addAction(&quot;All channels&quot;)&#xa;self.showAllChannelsAction.setCheckable(True)&#xa;self.showAllChannelsAction.setChecked(True)&#xa;self.showAllChannelsAction.toggled[bool].connect(self.slot_displayAllChannels)&#xa;self.displayIndividualChannelActions=list()&#xa;self.colorMapMenu=QtWidgets.QMenu(&quot;Color Map&quot;,self)&#xa;self.displayMenu.addMenu(self.colorMapMenu)&#xa;self.cursorsRoisColorMenu=QtWidgets.QMenu(&quot;Colors for Cursor and Rois&quot;,self)&#xa;self.displayMenu.addMenu(self.cursorsRoisColorMenu)&#xa;self.colorMapAction=self.colorMapMenu.addAction(&quot;Choose Color Map&quot;)&#xa;self.editColorMapAction=self.colorMapMenu.addAction(&quot;Edit Color Map&quot;)&#xa;self.chooseCursorColorAction=self.cursorsRoisColorMenu.addAction(&quot;Set cursors color&quot;)&#xa;self.chooseCursorColorAction.triggered.connect(self.slot_chooseCursorsColor)&#xa;self.chooseCBCursorColorAction=self.cursorsRoisColorMenu.addAction(&quot;Set color for shared cursors&quot;)&#xa;self.chooseCBCursorColorAction.triggered.connect(self.slot_chooseCBCursorsColor)&#xa;self.chooseRoiColorAction=self.cursorsRoisColorMenu.addAction(&quot;Set rois color&quot;)&#xa;self.chooseRoiColorAction.triggered.connect(self.slot_chooseRoisColor)&#xa;self.chooseCBRoiColorAction=self.cursorsRoisColorMenu.addAction(&quot;Set color for shared rois&quot;)&#xa;self.chooseCBRoiColorAction.triggered.connect(self.slot_chooseCBRoisColor)&#xa;self.brightContrastGammaMenu=QtWidgets.QMenu(&quot;Brightness Contrast Gamma&quot;,self)&#xa;self.displayMenu.addMenu(self.brightContrastGammaMenu)&#xa;self.displayScaleBarAction=self.displayMenu.addAction(&quot;Scale bar&quot;)&#xa;self.displayScaleBarAction.setCheckable(True)&#xa;self.displayScaleBarAction.setChecked(False)&#xa;self.displayScaleBarAction.toggled[bool].connect(self.slot_displayScaleBar)&#xa;self.displayColorBarAction=self.displayMenu.addAction(&quot;Intensity Scale&quot;)&#xa;self.displayColorBarAction.setCheckable(True)&#xa;self.displayColorBarAction.setChecked(False)&#xa;self.displayColorBarAction.toggled[bool].connect(self.slot_displayColorBar)&#xa;self.imageBrightnessAction=self.brightContrastGammaMenu.addAction(&quot;Brightness&quot;)&#xa;self.imageGammaAction=self.brightContrastGammaMenu.addAction(&quot;Gamma&quot;)&#xa;self.framesQSlider.setMinimum(0)&#xa;self.framesQSlider.setMaximum(0)&#xa;self.framesQSlider.valueChanged.connect(self.slot_setFrameNumber)&#xa;self._frames_slider_=self.framesQSlider&#xa;self.framesQSpinBox.setKeyboardTracking(False)&#xa;self.framesQSpinBox.setMinimum(0)&#xa;self.framesQSpinBox.setMaximum(0)&#xa;self.framesQSpinBox.valueChanged.connect(self.slot_setFrameNumber)&#xa;self._frames_spinner_=self.framesQSpinBox&#xa;self.editColorMapAction.triggered.connect(self._editColorMap)&#xa;self.colorMapAction.triggered.connect(self.slot_chooseColorMap)&#xa;self.imageBrightnessAction.triggered.connect(self._editImageBrightness)&#xa;self.imageGammaAction.triggered.connect(self._editImageGamma)&#xa;self.cursorsMenu=QtWidgets.QMenu(&quot;Cursors&quot;,self)&#xa;self.menubar.addMenu(self.cursorsMenu)&#xa;self.addCursorsMenu=QtWidgets.QMenu(&quot;Add Cursors&quot;,self)&#xa;self.cursorsMenu.addMenu(self.addCursorsMenu)&#xa;self.addVerticalCursorAction=self.addCursorsMenu.addAction(&quot;Vertical Cursor&quot;)&#xa;self.addVerticalCursorAction.triggered.connect(self.viewerWidget.slot_newVerticalCursor)&#xa;self.addHorizontalCursorAction=self.addCursorsMenu.addAction(&quot;Horizontal Cursor&quot;)&#xa;self.addHorizontalCursorAction.triggered.connect(self.viewerWidget.slot_newHorizontalCursor)&#xa;self.addCrosshairCursorAction=self.addCursorsMenu.addAction(&quot;Crosshair Cursor&quot;)&#xa;self.addCrosshairCursorAction.triggered.connect(self.viewerWidget.slot_newCrosshairCursor)&#xa;self.addPointCursorAction=self.addCursorsMenu.addAction(&quot;Point Cursor&quot;)&#xa;self.addPointCursorAction.triggered.connect(self.viewerWidget.slot_newPointCursor)&#xa;self.editCursorsMenu=QtWidgets.QMenu(&quot;Edit cursors&quot;,self)&#xa;self.cursorsMenu.addMenu(self.editCursorsMenu)&#xa;self.editCursorAction=self.editCursorsMenu.addAction(&quot;Edit Properties for Selected Cursor...&quot;)&#xa;self.editCursorAction.triggered.connect(self.viewerWidget.slot_editSelectedCursor)&#xa;self.editAnyCursorAction=self.editCursorsMenu.addAction(&quot;Edit Cursor Properties...&quot;)&#xa;self.editAnyCursorAction.triggered.connect(self.viewerWidget.slot_editAnyCursor)&#xa;self.removeCursorsMenu=QtWidgets.QMenu(&quot;Remove Cursors&quot;)&#xa;self.removeCursorAction=self.removeCursorsMenu.addAction(&quot;Remove Selected Cursor&quot;)&#xa;self.removeCursorAction.triggered.connect(self.viewerWidget.slot_removeSelectedCursor)&#xa;self.removeAllCursorsAction=self.removeCursorsMenu.addAction(&quot;Remove All Cursors&quot;)&#xa;self.removeAllCursorsAction.triggered.connect(self.viewerWidget.slot_removeCursors)&#xa;self.cursorsMenu.addMenu(self.removeCursorsMenu)&#xa;self.roisMenu=QtWidgets.QMenu(&quot;ROIs&quot;,self)&#xa;self.menubar.addMenu(self.roisMenu)&#xa;self.addROIsMenu=QtWidgets.QMenu(&quot;Add ROIs&quot;,self)&#xa;self.roisMenu.addMenu(self.addROIsMenu)&#xa;self.newROIAction=self.addROIsMenu.addAction(&quot;New ROI&quot;)&#xa;self.newROIAction.triggered.connect(self.viewerWidget.buildROI)&#xa;self.editRoisMenu=QtWidgets.QMenu(&quot;Edit ROIs&quot;)&#xa;self.roisMenu.addMenu(self.editRoisMenu)&#xa;self.editSelectedRoiShapeAction=self.editRoisMenu.addAction(&quot;Selected ROI shape&quot;)&#xa;self.editSelectedRoiShapeAction.triggered.connect(self.viewerWidget.slot_editRoiShape)&#xa;self.editSelectedRoiPropertiesAction=self.editRoisMenu.addAction(&quot;Selected ROI Properties&quot;)&#xa;self.editSelectedRoiPropertiesAction.triggered.connect(self.viewerWidget.slot_editRoiProperties)&#xa;self.editRoiAction=self.editRoisMenu.addAction(&quot;Edit ROI...&quot;)&#xa;self.editRoiAction.triggered.connect(self.viewerWidget.slot_editRoi)&#xa;self.removeRoisMenu=QtWidgets.QMenu(&quot;Remove ROIs&quot;)&#xa;self.roisMenu.addMenu(self.removeRoisMenu)&#xa;self.removeSelectedRoiAction=self.removeRoisMenu.addAction(&quot;Remove Selected ROI&quot;)&#xa;self.removeSelectedRoiAction.triggered.connect(self.viewerWidget.slot_removeSelectedRoi)&#xa;self.removeAllRoisAction=self.removeRoisMenu.addAction(&quot;Remove All ROIS&quot;)&#xa;self.removeAllRoisAction.triggered.connect(self.viewerWidget.slot_removeRois)&#xa;self.toolBar=QtWidgets.QToolBar(&quot;Main&quot;,self)&#xa;self.toolBar.setObjectName(&quot;DataViewer_Main_Toolbar&quot;)&#xa;refreshAction=self.toolBar.addAction(QtGui.QIcon(&quot;:/images/view-refresh.svg&quot;),&quot;Refresh&quot;)&#xa;refreshAction.triggered.connect(self.slot_refreshDataDisplay)&#xa;self.addToolBar(QtCore.Qt.TopToolBarArea,self.toolBar)&#xa;self.zoomToolBar=QtWidgets.QToolBar(&quot;Zoom Toolbar&quot;,self)&#xa;self.zoomToolBar.setObjectName(&quot;ImageViewerZoomToolBar&quot;)&#xa;self.zoomOutAction=self.zoomToolBar.addAction(QtGui.QIcon.fromTheme(&quot;zoom-out&quot;),&quot;Zoom Out&quot;)&#xa;self.zoomOriginalAction=self.zoomToolBar.addAction(QtGui.QIcon.fromTheme(&quot;zoom-original&quot;),&quot;Original Zoom&quot;)&#xa;self.zoomInAction=self.zoomToolBar.addAction(QtGui.QIcon.fromTheme(&quot;zoom-in&quot;),&quot;Zoom In&quot;)&#xa;self.zoomAction=self.zoomToolBar.addAction(QtGui.QIcon.fromTheme(&quot;zoom&quot;),&quot;Zoom&quot;)&#xa;self.zoomOutAction.triggered.connect(self.slot_zoomOut)&#xa;self.zoomOriginalAction.triggered.connect(self.slot_zoomOriginal)&#xa;self.zoomInAction.triggered.connect(self.slot_zoomIn)&#xa;self.zoomAction.triggered.connect(self.slot_selectZoom)&#xa;self.addToolBar(QtCore.Qt.TopToolBarArea,self.zoomToolBar)&#xa;" id="u0a4O1i9Wvztu"/>
    <sourcecode value="pass&#xa;&#xa;" id="uKHN0Sx5fSVER"/>
    <sourcecode value="self.colorMap=colormaps.get(item,None)&#xa;self.displayFrame()&#xa;" id="uj8WjKbqRLjNh"/>
    <sourcecode value="if self._data_ is None:&#xa;  return&#xa;&#xa;self.prevColorMap=self.colorMap&#xa;colormapnames=sorted([n for n in colormaps.keys()])&#xa;if isinstance(self.colorMap,colors.Colormap):&#xa;  d=pgui.ItemsListDialog(self,itemsList=colormapnames,title=&quot;Select color map&quot;,preSelected=self.colorMap.name)&#xa;&#xa;else:&#xa;  d=pgui.ItemsListDialog(self,itemsList=colormapnames,title=&quot;Select color map&quot;,preSelected=&quot;None&quot;)&#xa;&#xa;d.itemSelected.connect(self.slot_testColorMap)&#xa;a=d.exec_()&#xa;if a==QtWidgets.QDialog.Accepted:&#xa;  self.displayFrame()&#xa;&#xa;else:&#xa;  self.colorMap=self.prevColorMap&#xa;  self.displayFrame()&#xa;&#xa;" id="uUoduB565viSY"/>
    <sourcecode value="dlg=pgui.ImageBrightnessDialog(self)&#xa;dlg.show()&#xa;" id="usLmJzqz7IKKo"/>
    <sourcecode value="pass&#xa;&#xa;" id="uN1bDwRu9O3Tn"/>
    <sourcecode value="if self._data_ is None:&#xa;  return&#xa;&#xa;if coords[0]is not None:&#xa;  x=int(coords[0])&#xa;&#xa;else:&#xa;  x=None&#xa;&#xa;if coords[1]is not None:&#xa;  y=int(coords[1])&#xa;&#xa;else:&#xa;  y=None&#xa;&#xa;if len(coords)==3:&#xa;  wx=coords[2]&#xa;&#xa;else:&#xa;  wx=None&#xa;&#xa;if len(coords)==4:&#xa;  wy=coords[3]&#xa;&#xa;else:&#xa;  wy=None&#xa;&#xa;if isinstance(self._data_,vigra.VigraArray):&#xa;  widthAxisIndex=self._data_.axistags.index(self.widthAxisInfo.key)&#xa;  heightAxisIndex=self._data_.axistags.index(self.heightAxisInfo.key)&#xa;  w=self._data_.shape[widthAxisIndex]&#xa;  h=self._data_.shape[heightAxisIndex]&#xa;  img,dimindices=self._generate_frame_view_(self._displayedChannel_)&#xa;  viewWidthAxisIndex=img.axistags.index(self.widthAxisInfo.key)&#xa;  viewHeightAxisIndex=img.axistags.index(self.heightAxisInfo.key)&#xa;  if wx is not None:&#xa;    cwx=dt.AxisCalibration(img.axistags[viewWidthAxisIndex]).getCalibratedAxialDistance(wx,img.axistags[viewWidthAxisIndex])&#xa;    swx=&quot; +/- %d (%.2f) &quot;%(wx//2,cwx/2)&#xa;&#xa;  else:&#xa;    swx=&quot;&quot;&#xa;&#xa;  if wy is not None:&#xa;    cwy=dt.AxisCalibration(img.axistags[viewHeightAxisIndex]).getCalibratedAxialDistance(wy,img.axistags[viewHeightAxisIndex])&#xa;    swy=&quot; +/- %d (%.2f) &quot;%(wy//2,cwy/2)&#xa;&#xa;  else:&#xa;    swy=&quot;&quot;&#xa;&#xa;  if crsId is not None:&#xa;    crstxt=&quot;%s &quot;%(crsId)&#xa;&#xa;  else:&#xa;    crstxt=&quot;&quot;&#xa;&#xa;  if x is not None and x>=w:&#xa;    x=w-1&#xa;&#xa;  if x is not None and x&lt;0:&#xa;    x=0&#xa;&#xa;  if y is not None and y>=h:&#xa;    y=h-1&#xa;&#xa;  if y is not None and y&lt;0:&#xa;    y=0&#xa;&#xa;  if all([val is not None for val in(x,y)]):&#xa;    if img.ndim>=2:&#xa;      cx=dt.AxisCalibration(img.axistags[viewWidthAxisIndex]).getCalibratedAxisCoordinate(x,img.axistags[viewWidthAxisIndex].key)&#xa;      cy=dt.AxisCalibration(img.axistags[viewHeightAxisIndex]).getCalibratedAxisCoordinate(y,img.axistags[viewHeightAxisIndex].key)&#xa;      scx=&quot;%.2f %s&quot;%(cx.magnitude,cx.units.dimensionality.string)&#xa;      scy=&quot;%.2f %s&quot;%(cy.magnitude,cy.units.dimensionality.string)&#xa;      sx=img.axistags[viewWidthAxisIndex].key&#xa;      sy=img.axistags[viewHeightAxisIndex].key&#xa;      if img.ndim>2:&#xa;        if img.channels>1:&#xa;          val=[float(img.bindAxis(&quot;c&quot;,k)[x,y,...])for k in range(img.channels)]&#xa;&#xa;        else:&#xa;          val=float(img[x,y])&#xa;&#xa;        if self.frameAxisInfo is not None:&#xa;          if isinstance(self.frameAxisInfo,vigra.AxisInfo):&#xa;            if self.frameAxisInfo not in self._data_.axistags:&#xa;              raise RuntimeError(&quot;frame axis %s not found in the image&quot;%self.frameAxisInfo.key)&#xa;&#xa;            cz=dt.AxisCalibration(self.frameAxisInfo).getCalibratedAxisCoordinate(self._current_frame_index_,self.frameAxisInfo.key)&#xa;            sz=self.frameAxisInfo.key&#xa;            if isinstance(val,float):&#xa;              coordTxt=&quot;%s&lt;X: %d (%s: %s)%s, Y: %d (%s: %s)%s, Z: %d (%s: %.2f %s)> %.2f&quot;%\&#xa;              (crstxt,\x,sx,scx,swx,\y,sy,scy,swy,\self._current_frame_index_,sz,cz.magnitude,cz.units.dimensionality.string,\val)&#xa;            elif isinstance(val,(tuple,list)):&#xa;              valstr=&quot;(&quot;+&quot; &quot;.join([&quot;%.2f&quot;%v for v in val])+&quot;)&quot;&#xa;              coordTxt=&quot;%s&lt;X: %d (%s: %s)%s, Y: %d (%s: %s)%s, Z: %d (%s: %.2f %s)> %s&quot;%\&#xa;              (crstxt,\x,sx,scx,swx,\y,sy,scy,swy,\self._current_frame_index_,sz,cz.magnitude,cz.units.dimensionality.string,\valstr)&#xa;&#xa;          else:&#xa;            sz_cz=&quot;, &quot;.join([&quot;%s: %s&quot;%(ax.key,strutils.print_scalar_quantity(dt.AxisCalibration(ax).getCalibratedAxisCoordinate(self._current_frame_index_,ax.key)))for ax in self.frameAxisInfo])&#xa;            if isinstance(val,float):&#xa;              coordTxt=&quot;%s&lt;X: %d (%s: %s)%s, Y: %d (%s: %s)%s, Z: %d (%s)> %s&quot;%\&#xa;              (crstxt,\x,sx,scx,swx,\y,sy,scy,swy,\self._current_frame_index_,sz_cz,\val)&#xa;            elif isinstance(val,(tuple,list)):&#xa;              valstr=&quot;(&quot;+&quot; &quot;.join([&quot;%.2f&quot;%v for v in val])+&quot;)&quot;&#xa;              coordTxt=&quot;%s&lt;X: %d (%s: %s)%s, Y: %d (%s: %s)%s, Z: %d (%s)> %s&quot;%\&#xa;              (crstxt,\x,sx,scx,swx,\y,sy,scy,swy,\self._current_frame_index_,sz_cz,\valstr)&#xa;&#xa;&#xa;        else:&#xa;          if isinstance(val,float):&#xa;            coordTxt=&quot;%s&lt;X: %d (%s: %s)%s, Y: %d (%s: %s)%s> %s&quot;%\&#xa;            (crstxt,\x,sx,scx,swx,\y,sy,scy,swy,\val)&#xa;          elif isinstance(val,(tuple,list)):&#xa;            valstr=&quot;(&quot;+&quot; &quot;.join([&quot;%.2f&quot;%v for v in val])+&quot;)&quot;&#xa;            coordTxt=&quot;%s&lt;X: %d (%s: %s)%s, Y: %d (%s: %s)%s> %s&quot;%\&#xa;            (crstxt,\x,sx,scx,swx,\y,sy,scy,swy,\valstr)&#xa;&#xa;&#xa;      else:&#xa;        val=float(np.squeeze(img[x,y]))&#xa;        coordTxt=&quot;%s&lt;X: %d (%s: %s)%s, Y: %d (%s: %s)%s> %.2f&quot;%\&#xa;        (crstxt,\x,sx,scx,swx,\y,sy,scy,swy,\val)&#xa;&#xa;    else:&#xa;      val=float(img[x])&#xa;      cx=dt.AxisCalibration(img.axistags[viewWidthAxisIndex]).getCalibratedAxisCoordinate(x,img.axistags[viewWidthAxisIndex].key)&#xa;      sx=img.axistags[viewWidthAxisIndex].key&#xa;      scx=&quot;%.2f %s&quot;%(cx.magnitude,cx.units.dimensionality.string)&#xa;      coordTxt=&quot;%s&lt;X: %d (%s: %s)%s> %.2f&quot;%\&#xa;      (crstxt,x,sx,scx,swx,val)&#xa;&#xa;  else:&#xa;    c_list=list()&#xa;    if y is None:&#xa;      cx=dt.AxisCalibration(img.axistags[viewWidthAxisIndex]).getCalibratedAxisCoordinate(x,img.axistags[viewWidthAxisIndex])&#xa;      sx=img.axistags[viewWidthAxisIndex].key&#xa;      scx=&quot;%.2f %s&quot;%(cx.magnitude,cx.units.dimensionality.string)&#xa;      c_list.append(&quot;%s&lt;X: %d (%s: %s)%s&quot;%((crstxt,x,sx,scx,swx)))&#xa;&#xa;    elif x is None:&#xa;      cy=dt.AxisCalibration(img.axistags[viewHeightAxisIndex]).getCalibratedAxisCoordinate(y,img.axistags[viewHeightAxisIndex])&#xa;      sy=img.axistags[viewHeightAxisIndex].key&#xa;      scy=&quot;%.2f %s&quot;%(cy.magnitude,cy.units.dimensionality.string)&#xa;      c_list.append(&quot;%s&lt;Y: %d (%s: %s)%s&quot;%((crstxt,y,sy,scy,swy)))&#xa;&#xa;    if img.ndim>2:&#xa;      if self.frameAxisInfo is not None:&#xa;        if isinstance(self.frameAxisInfo,vigra.AxisInfo):&#xa;          if self.frameAxisInfo not in self._data_.axistags:&#xa;            raise RuntimeError(&quot;frame axis intfo %s not found in the image&quot;%self.frameAxisInfo.key)&#xa;&#xa;          cz=dt.AxisCalibration(self.frameAxisInfo).getCalibratedAxisCoordinate(self._current_frame_index_,self.frameAxisInfo)&#xa;          sz=self.frameAxisInfo.key&#xa;          c_list.append(&quot;, Z: %d (%s: %s)>&quot;%(self._current_frame_index_,sz,cz))&#xa;&#xa;        else:&#xa;          sz_cz=&quot;, &quot;.join([&quot;%s: %s&quot;%(ax.key,dt.AxisCalibration(ax).getCalibratedAxisCoordinate(self._current_frame_index_,ax.key))for ax in self.frameAxisInfo])&#xa;          c_list.append(&quot;(%s)&quot;%sz_cz)&#xa;&#xa;&#xa;      else:&#xa;        c_list.append(&quot;>&quot;)&#xa;&#xa;&#xa;    else:&#xa;      c_list.append(&quot;>&quot;)&#xa;&#xa;    coordTxt=&quot;&quot;.join(c_list)&#xa;&#xa;  self.statusBar().showMessage(coordTxt)&#xa;&#xa;elif isinstance(self._data_,(QtGui.QImage,QtGui.QPixmap)):&#xa;  w=self._data_.width()&#xa;  h=self._data_.height()&#xa;  if wx is not None:&#xa;    swx=&quot; +/- %d &quot;%(wx//2)&#xa;&#xa;  else:&#xa;    swx=&quot;&quot;&#xa;&#xa;  if wy is not None:&#xa;    swy=&quot; +/- %d &quot;%(wy//2)&#xa;&#xa;  else:&#xa;    swy=&quot;&quot;&#xa;&#xa;  if crsId is not None:&#xa;    crstxt=&quot;%s &quot;%(crsId)&#xa;&#xa;  else:&#xa;    crstxt=&quot;&quot;&#xa;&#xa;  if isinstance(self._data_,QtGui.QImage):&#xa;    if self._data_.isGrayscale():&#xa;      val=self._data_.pixel(x,y)&#xa;&#xa;    else:&#xa;      pval=self._data_.pixelColor(x,y)&#xa;      val=&quot;R: %d, G: %d, B: %d, A: %d&quot;%(pval.red(),pval.green(),pval.blue(),pval.alpha())&#xa;&#xa;    msg=&quot;%s&lt;X %d%s, Y %d%s> : %s&quot;%\&#xa;    (crstxt,x,swx,y,swy,val)&#xa;  elif isinstance(self._data_,QtGui.QPixmap):&#xa;    pix=self._data_.toImage()&#xa;    if pix.isGrayscale():&#xa;      val=pix.pixel(x,y)&#xa;&#xa;    else:&#xa;      pval=pix.pixelColor(x,y)&#xa;      val=&quot;R: %d, G: %d, B: %d, A: %d&quot;%(pval.red(),pval.green(),pval.blue(),pval.alpha())&#xa;&#xa;    msg=&quot;%s&lt;X %d%s, Y %d%s> : %s&quot;%\&#xa;    (crstxt,x,swx,y,swy,val)&#xa;  else:&#xa;    val=None&#xa;&#xa;  self.statusBar().showMessage(msg)&#xa;&#xa;else:&#xa;  return&#xa;&#xa;" id="uZzR5SrJfHr4d"/>
    <sourcecode value="if rois is None:&#xa;  return self.viewer.__graphicsObjects__&#xa;&#xa;elif rois is True:&#xa;  return self.viewer.rois&#xa;&#xa;else:&#xa;  return self.viewer.cursors&#xa;&#xa;" id="uqYNKnsjTujMg"/>
    <sourcecode value="if name in self.graphicsObjects(rois=True):&#xa;  return self.roi(name)&#xa;&#xa;if name in self.graphicsObjects(rois=False):&#xa;  return self.cursor(name)&#xa;&#xa;" id="uu5nAhlb29JcL"/>
    <sourcecode value="return name in self.rois or name in self.cursors&#xa;" id="uUejwlXwgyL6g"/>
    <sourcecode value="if crsId in self.graphicsObjects(rois=False):&#xa;  self.viewerWidget.slot_removeCursorByName(crsId)&#xa;&#xa;" id="uff5UvHBeJ94O"/>
    <sourcecode value="if crsId in self.graphicsObjects(rois=True):&#xa;  self.viewerWidget.slot_removeRoiByName(crsId)&#xa;&#xa;" id="uSX7dUEoO2YYY"/>
    <sourcecode value="if name in self.graphicsObjects(rois=True):&#xa;  self.viewerWidget.slot_removeRoiByName(name)&#xa;&#xa;elif name in self.graphicsObjects(rois=False):&#xa;  self.viewerWidget.slot_removeCursorByName(name)&#xa;&#xa;" id="uvQ4BXGii1gXd"/>
    <sourcecode value="if not self._gui_client_:&#xa;  windowSize=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowSize&quot;]),None)&#xa;  if windowSize is not None:&#xa;    self.resize(windowSize)&#xa;&#xa;  windowPos=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowPos&quot;]),None)&#xa;  if windowPos is not None:&#xa;    self.move(windowPos)&#xa;&#xa;  windowState=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowState&quot;]),None)&#xa;  if windowState is not None:&#xa;    self.restoreState(windowState)&#xa;&#xa;  colorMapName=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;ColorMap&quot;]),None)&#xa;  if isinstance(colorMapName,str):&#xa;    self.colorMap=colormaps.get(colorMapName,None)&#xa;&#xa;  elif isinstance(colorMapName,mpl.colors.Colormap):&#xa;    self.colorMap=colorMapName&#xa;&#xa;  else:&#xa;    self.colorMap=None&#xa;&#xa;  color=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;CursorColor&quot;]),None)&#xa;  if isinstance(color,QtGui.QColor)and color.isValid():&#xa;    self.cursorsColor=color&#xa;&#xa;  color=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;RoisColor&quot;]),None)&#xa;  if isinstance(color,QtGui.QColor)and color.isValid():&#xa;    self.roisColor=color&#xa;&#xa;  color=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;SharedCursorsColor&quot;]),None)&#xa;  if isinstance(color,QtGui.QColor)and color.isValid():&#xa;    self.sharedCursorsColor=color&#xa;&#xa;  color=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;SharedRoisColor&quot;]),None)&#xa;  if isinstance(color,QtGui.QColor)and color.isValid():&#xa;    self.sharedRoisColor=roiscolor&#xa;&#xa;&#xa;" id="uxQSrdQcB3CYx"/>
    <sourcecode value="if not self._gui_client_:&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowSize&quot;]),self.size())&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowPos&quot;]),self.pos())&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowState&quot;]),self.saveState())&#xa;  if isinstance(self.colorMap,mpl.colors.Colormap):&#xa;    self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;ColorMap&quot;]),self.colorMap.name)&#xa;&#xa;  else:&#xa;    self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;ColorMap&quot;]),None)&#xa;&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;CursorColor&quot;]),self.cursorsColor)&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;RoisColor&quot;]),self.roisColor)&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;SharedCursorsColor&quot;]),self.sharedCursorsColor)&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;SharedRoisColor&quot;]),self.sharedRoisColor)&#xa;&#xa;" id="uOpaR10BDUU4F"/>
    <sourcecode value="self.view(image,x,y,normalize,title,colormap)&#xa;" id="ugZ3sBGeZrKAm"/>
    <sourcecode value="if isinstance(self._data_,vigra.VigraArray):&#xa;  if channel_index&lt;0 or channel_index>=self._data_.channels:&#xa;    raise ValueError(&quot;channel_index must be in the semi-open interval [0, %d); got %s instead&quot;%(self._data_.channels,channel_index))&#xa;&#xa;&#xa;sigBlock=QtCore.QSignalBlocker(self.showAllChannelsAction)&#xa;self.showAllChannelsAction.setChecked(False)&#xa;self.displayFrame(channel_index)&#xa;self._displayedChannel_=channel_index&#xa;" id="u6y1EUGcC3iH8"/>
    <sourcecode value="signalBlockers=[QtCore.QSignalBlocker(widget)for widget in self.displayIndividualChannelActions]&#xa;for action in self.displayIndividualChannelActions:&#xa;  action.setChecked(False)&#xa;&#xa;self.displayFrame(&quot;all&quot;)&#xa;self._displayedChannel_=&quot;all&quot;&#xa;" id="uAasQ6oPtxwvG"/>
    <sourcecode value="self.setData(image,doc_title=doc_title,normalize=normalize,colortable=colortable,gamma=gamma,&#xa;frameAxis=frameAxis,displayChannel=displayChannel,varname=varname)" id="uJKdDwlO3ytwv"/>
    <sourcecode value="''';SYNTAX:self.view(image,title=None,normalize=True,colortable=None,gamma=None,separateChannels=False,frameAxis=None)&#xa;Parameters:&#xa;  ============&#xa;  image:a vigra.VigraArray object with up to 4 dimensions(for now)or a QImage or QPixmap title:a str,default None normalize:bool,default True colortable:default None gamma:float scalar or None(default)frameAxis:int,str,vigra.AxisInfo or None(default)displaychannel:int,&quot;all&quot;,or None(default)''';if not isinstance(image,self.supported_types):&#xa;    raise TypeError(&quot;Unsuppported data type %s; expecting one of %s&quot;%(type(image).__name__,supported_types))&#xa;&#xa;  if isinstance(doc_title,str)and len(doc_title.strip()):&#xa;    self._docTitle_=title&#xa;&#xa;  if isinstance(varname,str)and len(varname.strip()):&#xa;    self._data_var_name_=varname&#xa;&#xa;  self.colorTable=colortable&#xa;  self.imageNormalize=normalize&#xa;  self.imageGamma=gamma&#xa;  if self.colorbar is not None:&#xa;    self.viewerWidget.scene.removeItem(self.colorbar)&#xa;&#xa;  self.colorbar=None&#xa;  if displayChannel is None:&#xa;    self._displayedChannel_=&quot;all&quot;&#xa;&#xa;  else:&#xa;    if isinstance(displayChannel,str):&#xa;      if displayChannel.lower().strip()!=&quot;all&quot;:&#xa;        raise ValueError(&quot;When a str, displayChannel must be 'all'; got %s instead&quot;%displayChannel)&#xa;&#xa;&#xa;    elif isinstance(displayChannel,int):&#xa;      if displayChannel&lt;0:&#xa;        raise ValueError(&quot;When an int, display channel must be >= 0&quot;)&#xa;&#xa;&#xa;    self._displayedChannel_=displayChannel&#xa;&#xa;  if isinstance(image,vigra.VigraArray):&#xa;    if isinstance(frameAxis,(int,str,vigra.AxisInfo)):&#xa;      self.userFrameAxisInfo=frameAxis&#xa;&#xa;&#xa;  if isinstance(image,vigra.VigraArray):&#xa;    if self._parseVigraArrayData_(image):&#xa;      self._data_=image&#xa;      self._setup_channels_display_actions_()&#xa;      self.displayFrame()&#xa;&#xa;&#xa;  elif isinstance(image,(QtGui.QImage,QtGui.QPixmap)):&#xa;    self._number_of_frames_=1&#xa;    self._data_=image&#xa;    self.displayFrame()&#xa;&#xa;  else:&#xa;    raise TypeError(&quot;First argument must be a VigraArray&quot;)&#xa;&#xa;  if title is not None and isinstance(title,str):&#xa;    self.setWindowTitle(&quot;%s - %s&quot;%(self._winTitle_,title))&#xa;&#xa;  self.show()&#xa;&#xa;def clear(self):&#xa;  self._number_of_frames_=0&#xa;  self._current_frame_index_=0&#xa;  self.framesQSlider.setMaximum(0)&#xa;  self.framesQSpinBox.setMaximum(0)&#xa;  self._data_=None&#xa;  self._separateChannels=False&#xa;  self.tStride=0&#xa;  self.zStride=0&#xa;  self.frameAxisInfo=None&#xa;  self.userFrameAxisInfo=None&#xa;  self.widthAxisInfo=None&#xa;  self.heightAxisInfo=None&#xa;  self._currentZoom_=0&#xa;  self._currentFrameData_=None&#xa;  self._xScaleBar_=None&#xa;  self._xScaleBarTextItem_=None&#xa;  self._yScaleBar_=None&#xa;  self._yScaleBarTextItem_=None&#xa;  sigBlock=QtCore.QSignalBlocker(self.displayScaleBarAction)&#xa;  self.displayScaleBarAction.setChecked(False)&#xa;  if self.colorbar is not None:&#xa;    self.viewerWidget.scene.removeItem(self.colorbar)&#xa;    self.colorbar=None&#xa;&#xa;  self.viewerWidget.clear()&#xa;&#xa;def setColorMap(self,value):&#xa;  if isinstance(value,str):&#xa;    self.colorMap=colormaps.get(value,None)&#xa;&#xa;  elif isinstance(value,colors.Colormap):&#xa;    self.colorMap=value&#xa;&#xa;  else:&#xa;    return&#xa;&#xa;  self.displayFrame()&#xa;&#xa;def showScaleBars(self,origin=None,length=None,calibrated_length=None,pen=None,units=None):&#xa;  if self._data_ is None:&#xa;    return&#xa;&#xa;  if isinstance(self._data_,vigra.VigraArray):&#xa;    w=self._data_.shape[0]&#xa;    h=self._data_.shape[1]&#xa;&#xa;  elif isinstance(self._data_,(QtGui.QImage,QtGui.QPixmap)):&#xa;    w=self._data_.width()&#xa;    h=self._data_.height()&#xa;&#xa;  else:&#xa;    return&#xa;&#xa;  if origin is None:&#xa;    origin=self._scaleBarOrigin_&#xa;&#xa;  if length is None:&#xa;    length=self._scaleBarLength_&#xa;&#xa;  if calibrated_length is not None:&#xa;    cal_x=calibrated_length[0]&#xa;    cal_y=calibrated_length[1]&#xa;&#xa;  else:&#xa;    cal_x=None&#xa;    cal_y=None&#xa;&#xa;  if pen is None:&#xa;    pen=self._scaleBarPen_&#xa;&#xa;  elif not isinstance(pen,QtGui.QPen):&#xa;    raise TypeError(&quot;Expecting a QtGui.QPen or None; got %s instead&quot;%type(pen).__name__)&#xa;&#xa;  if isinstance(pen,QtGui.QPen):&#xa;    self._scaleBarPen_=pen&#xa;&#xa;  if isinstance(units,tuple)and len(units)==2\&#xa;  and all([isinstance(u,(pq.Quantity,pq.UnitQuantity))for u in units]):&#xa;    units_x=str(units[0].dimensionality)&#xa;    units_y=str(units[1].dimensionality)&#xa;&#xa;  else:&#xa;    units_x=None&#xa;    units_y=None&#xa;&#xa;  if self._display_horizontal_scalebar_:&#xa;    if self._xScaleBar_ is None:&#xa;      self._xScaleBar_=QtWidgets.QGraphicsLineItem()&#xa;      self._xScaleBar_.setFlag(QtWidgets.QGraphicsItem.ItemIsMovable,True)&#xa;      self._xScaleBar_.setPen(self._scaleBarPen_)&#xa;      if self._xScaleBarTextItem_ is None:&#xa;        self._xScaleBarTextItem_=QtWidgets.QGraphicsTextItem(self._xScaleBar_)&#xa;        self._xScaleBarTextItem_.setDefaultTextColor(self._scaleBarColor_)&#xa;        self._xScaleBarTextItem_.setFont(QtGui.QFont(&quot;sans-serif&quot;))&#xa;        self._xScaleBarTextItem_.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)&#xa;        self._xScaleBarTextItem_.setFlag(QtWidgets.QGraphicsItem.ItemIsMovable,True)&#xa;&#xa;      self.scene.addItem(self._xScaleBar_)&#xa;&#xa;    self._xScaleBar_.setLine(origin[0],origin[1],&#xa;    origin[0]+length[0],origin[1])if cal_x is not None:&#xa;      self._xScaleBarTextItem_.setPlainText(&quot;%s&quot;%cal_x)&#xa;&#xa;    else:&#xa;      if units_x is not None:&#xa;        self._xScaleBarTextItem_.setPlainText(&quot;%d %s&quot;%(length[0],units_x))&#xa;&#xa;      else:&#xa;        self._xScaleBarTextItem_.setPlainText(&quot;%d&quot;%length[0])&#xa;&#xa;&#xa;    self._xScaleBarTextItem_.setPos(length[0]-self._xScaleBarTextItem_.textWidth(),&#xa;    3*self._xScaleBar_.pen().width())self._xScaleBar_.setVisible(True)&#xa;&#xa;  if self._display_vertical_scalebar_:&#xa;    if self._yScaleBar_ is None:&#xa;      self._yScaleBar_=QtWidgets.QGraphicsLineItem()&#xa;      self._yScaleBar_.setFlag(QtWidgets.QGraphicsItem.ItemIsMovable,True)&#xa;      self._yScaleBar_.setPen(self._scaleBarPen_)&#xa;      if self._yScaleBarTextItem_ is None:&#xa;        self._yScaleBarTextItem_=QtWidgets.QGraphicsTextItem(self._yScaleBar_)&#xa;        self._yScaleBarTextItem_.setDefaultTextColor(self._scaleBarColor_)&#xa;        self._yScaleBarTextItem_.setFont(QtGui.QFont(&quot;sans-serif&quot;))&#xa;        self._yScaleBarTextItem_.setTextInteractionFlags(QtCore.Qt.TextSelectableByMouse)&#xa;        self._yScaleBarTextItem_.setFlag(QtWidgets.QGraphicsItem.ItemIsMovable,True)&#xa;&#xa;      self.scene.addItem(self._yScaleBar_)&#xa;&#xa;    self._yScaleBar_.setLine(origin[0],origin[1],&#xa;    origin[0],origin[1]+length[1])if cal_y is not None:&#xa;      self._yScaleBarTextItem_.setPlainText(&quot;%s&quot;%cal_y)&#xa;&#xa;    else:&#xa;      if units_y is not None:&#xa;        self._yScaleBarTextItem_.setPlainText(&quot;%d %s&quot;%(length[1],units_y))&#xa;&#xa;      else:&#xa;        self._yScaleBarTextItem_.setPlainText(&quot;%d&quot;%length[1])&#xa;&#xa;&#xa;    self._yScaleBarTextItem_.setPos(3*self._yScaleBar_.pen().width(),&#xa;    0)self._yScaleBarTextItem_.setRotation(-90)&#xa;    self._yScaleBar_.setVisible(True)&#xa;&#xa;  self._scaleBarLength_=length&#xa;  self._scaleBarOrigin_=origin&#xa;&#xa;def addGraphicsObject(self,item,pos=None,movable=True,editable=True,&#xa;label=None,window=None,radius=None,frame=None,framesVisible=None,showLabel=True,labelShowsPosition=True):&#xa;  if isinstance(item,pgui.Cursor):&#xa;    if framesVisible is None:&#xa;      framesVisible=item.frameIndices&#xa;&#xa;    obj=self.viewerWidget.createNewCursor(item,&#xa;    pos=pos,movable=movable,editable=editable,frame=frame,label=label,frameVisibility=framesVisible,showLabel=showLabel,labelShowsPosition=labelShowsPosition,parentWidget=self)&#xa;  elif isinstance(item,(int,pgui.GraphicsObjectType))and\&#xa;  item&amp;pgui.GraphicsObjectType.allCursorTypes:&#xa;    obj=self.viewerWidget.createNewCursor(item,&#xa;    window=window,radius=radius,pos=pos,movable=movable,editable=editable,frame=frame,label=label,frameVisibility=framesVisible,showLabel=showLabel,labelShowsPosition=labelShowsPosition,parentWidget=self)&#xa;  elif isinstance(item,pgui.PlanarGraphics):&#xa;    roiType=item.type&#xa;    if framesVisible is None:&#xa;      framesVisible=item.frameIndices&#xa;&#xa;    obj=self.viewerWidget.createNewRoi(params=item,&#xa;    roiType=roiType,label=label,frame=frame,pos=pos,movable=movable,editable=editable,frameVisibility=framesVisible,showLabel=showLabel,labelShowsPosition=labelShowsPosition,parentWidget=self)&#xa;  else:&#xa;    raise TypeError(&quot;Unexpected item parameter: %s&quot;%type(item).__name__)&#xa;&#xa;  if isinstance(obj,pgui.PlanarGraphics)and obj.objectType&amp;pgui.GraphicsObjectType.allCursorTypes:&#xa;    if isinstance(self.cursorsColor,QtGui.QColor)and self.cursorsColor.isValid():&#xa;      obj.color=self.cursorsColor&#xa;&#xa;&#xa;  else:&#xa;    if isinstance(self.roisColor,QtGui.QColor)and self.roisColor.isValid():&#xa;      obj.color=self.roisColor&#xa;&#xa;&#xa;  return obj&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_chooseCursorsColor(self):&#xa;  if isinstance(self.cursorsColor,QtGui.QColor):&#xa;    initial=self.cursorsColor&#xa;&#xa;  else:&#xa;    initial=QtCore.Qt.white&#xa;&#xa;  color=QtWidgets.QColorDialog.getColor(initial=initial,&#xa;  title=&quot;Choose cursors color&quot;,options=QtWidgets.QColorDialog.ShowAlphaChannel)self.setCursorsColor(color)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_chooseRoisColor(self):&#xa;  if isinstance(self.roisColor,QtGui.QColor):&#xa;    initial=self.roisColor&#xa;&#xa;  else:&#xa;    initial=QtCore.Qt.white&#xa;&#xa;  color=QtWidgets.QColorDialog.getColor(initial=initial,&#xa;  title=&quot;Choose cursors color&quot;,options=QtWidgets.QColorDialog.ShowAlphaChannel)self.setRoisColor(color)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_chooseCBCursorsColor(self):&#xa;  if isinstance(self.cursorsColor,QtGui.QColor):&#xa;    initial=self.cursorsColor&#xa;&#xa;  else:&#xa;    initial=QtCore.Qt.white&#xa;&#xa;  color=QtWidgets.QColorDialog.getColor(initial=initial,&#xa;  title=&quot;Choose cursors color&quot;,options=QtWidgets.QColorDialog.ShowAlphaChannel)self.setSharedCursorsColor(color)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_chooseCBRoisColor(self):&#xa;  if isinstance(self.sharedRoisColor,QtGui.QColor):&#xa;    initial=self.sharedRoisColor&#xa;&#xa;  else:&#xa;    initial=QtCore.Qt.white&#xa;&#xa;  color=QtWidgets.QColorDialog.getColor(initial=initial,&#xa;  title=&quot;Choose cursors color&quot;,options=QtWidgets.QColorDialog.ShowAlphaChannel)self.setSharedRoisColor(color)&#xa;&#xa;def setCursorsColor(self,color):&#xa;  if isinstance(color,QtGui.QColor)and color.isValid():&#xa;    self.cursorsColor=color&#xa;    for obj in self.graphicsObjects(rois=False).values():&#xa;      obj.color=self.cursorsColor&#xa;&#xa;&#xa;&#xa;def setRoisColor(self,color):&#xa;  if isinstance(color,QtGui.QColor)and color.isValid():&#xa;    self.roisColor=color&#xa;    for obj in self.graphicsObjects(rois=True).values():&#xa;      obj.color=self.roisColor&#xa;&#xa;&#xa;&#xa;def setSharedCursorsColor(self,color):&#xa;  if isinstance(color,QtGui.QColor)and color.isValid():&#xa;    self.sharedCursorsColor=color&#xa;    for obj in self.graphicsObjects(rois=False).values():&#xa;      obj.colorForSharedBackend=self.sharedCursorsColor&#xa;&#xa;&#xa;&#xa;def setSharedRoisColor(self,color):&#xa;  if isinstance(color,QtGui.QColor)and color.isValid():&#xa;    self.sharedRoisColor=color&#xa;    for obj in self.graphicsObjects(rois=True).values():&#xa;      obj.colorForSharedBackend=self.sharedRoisColor" id="u5oPx5V6iSFfA"/>
    <sourcecode value="super().__init__(**kwargs)&#xa;self._current_frame_index_=0&#xa;self._number_of_frames_=1&#xa;self._frames_spinner_=None&#xa;self._frames_slider_=None&#xa;" id="uUsUWZSzt7qCk"/>
    <sourcecode value="pass&#xa;" id="uQitjQOZAdUo2"/>
    <sourcecode value="return self._number_of_frames_&#xa;" id="u7z8ZEHHnu63N"/>
    <sourcecode value="return self._number_of_frames_&#xa;" id="ukjt1wxWpujxS"/>
    <sourcecode value="return self._current_frame_index_&#xa;" id="urDimXiBwlYHr"/>
    <sourcecode value="if not isinstance(value,int)or value>=self._number_of_frames_ or value&lt;0:&#xa;  return&#xa;&#xa;self._current_frame_index_=value&#xa;widgets_to_block=list()&#xa;if isinstance(self._frames_slider_,QtWidgets.QSlider):&#xa;  widgets_to_block.append(self._frames_slider_)&#xa;&#xa;if isinstance(self._frames_spinner_,QtWidgets.QSpinBox):&#xa;  widgets_to_block.append(self._frames_spinner_)&#xa;&#xa;if len(widgets_to_block):&#xa;  signalBlockers=[QtCore.QSignalBlocker(w)for w in widgets_to_block]&#xa;  if isinstance(self._frames_slider_,QtWidgets.QSlider):&#xa;    self._frames_slider_.setValue(value)&#xa;&#xa;  if isinstance(self._frames_spinner_,QtWidgets.QSpinBox):&#xa;    self._frames_spinner_.setValue(value)&#xa;&#xa;&#xa;self.displayFrame()&#xa;" id="urEPF9ujlU08n"/>
    <sourcecode value="return self._linkedViewers_&#xa;" id="usT1FNE3geT2I"/>
    <sourcecode value="return self._frames_slider_&#xa;" id="udQqmx5i2hxJ9"/>
    <sourcecode value="return self._frames_spinner_&#xa;" id="uXn7pLXQzknq4"/>
    <sourcecode value="if len(viewers)==0:&#xa;  return&#xa;&#xa;for viewer in viewers:&#xa;  if isinstance(viewer,ScipyenFrameViewer):&#xa;    self._linkedViewers_.append(viewer)&#xa;    if self not in viewer.linkedViewers:&#xa;      viewer.linkedViewers.append(self)&#xa;&#xa;&#xa;  if broadcast:&#xa;    for v in viewers:&#xa;      if v is not viewer and viewer not in v.linkedViewers:&#xa;        v.linkedViewers.append(viewer)&#xa;&#xa;&#xa;&#xa;&#xa;" id="uETZYAhXnw1t7"/>
    <sourcecode value="if isinstance(other,ScipyenFrameViewer)and other in self._linkedViewers_:&#xa;  if self in other.linkedViewers:&#xa;    other.linkedViewers.remove(self)&#xa;&#xa;  if other in self._linkedViewers_:&#xa;    self._linkedViewers_.remove(other)&#xa;&#xa;&#xa;" id="ufGB9nXNnlrgK"/>
    <sourcecode value="if len(others):&#xa;  for viewer in others:&#xa;    if isinstance(viewer,ScipyenFrameViewer)and viewer in self._linkedViewers_:&#xa;      self.unlinkViewer(others)&#xa;&#xa;&#xa;&#xa;else:&#xa;  for viewer in self._linkedViewers_:&#xa;    if self in viewer.linkedViewers:&#xa;      viewer.unlinkViewer(self)&#xa;&#xa;&#xa;  self._linkedViewers_.clear()&#xa;&#xa;" id="uzYjcvcTD271H"/>
    <sourcecode value="if value>=self._number_of_frames_ or value&lt;0:&#xa;  return&#xa;&#xa;self.currentFrame=value&#xa;for viewer in self.linkedViewers:&#xa;  viewer.currentFrame=value" id="ubrQ00hcNRKUr"/>
    <sourcecode value="if&quot;mainWindow&quot;in local_ns and isinstance(local_ns[&quot;mainWindow&quot;],ScipyenWindow):&#xa;  local_ns[&quot;mainWindow&quot;].slot_pictQuit()&#xa;&#xa;return line&#xa;" id="ulU1I4vvdW0bo"/>
    <sourcecode value="super(FileSystemModel,self).__init__(parent)&#xa;" id="ut5jEvL3LjOEv"/>
    <sourcecode value="if ndx.column()==0:&#xa;  mimeType=QtCore.QMimeDatabase().mimeTypeForFile(self.fileInfo(ndx))&#xa;  if role==QtCore.Qt.DecorationRole:&#xa;    if self.isDir(ndx):&#xa;      return QtGui.QIcon.fromTheme(mimeType.iconName(),QtGui.QIcon.fromTheme(&quot;folder&quot;))&#xa;&#xa;    else:&#xa;      return QtGui.QIcon.fromTheme(mimeType.iconName(),QtGui.QIcon.fromTheme(&quot;unknown&quot;))&#xa;&#xa;&#xa;&#xa;return super(FileSystemModel,self).data(ndx,role)&#xa;" id="u9Ysf0VNdrals"/>
    <sourcecode value="super(WorkspaceModel,self).__init__(parent)&#xa;self.abbrevs=:&#xa;  'IPython.core.macro.Macro':'Macro'&#xa;&#xa;self.seq_types=['list','tuple',&quot;deque&quot;]&#xa;self.set_types=[&quot;set&quot;,&quot;frozenset&quot;]&#xa;self.dict_types=[&quot;dict&quot;]&#xa;self.ndarray_type=np.ndarray.__name__&#xa;self.setColumnCount(11)&#xa;self.currentVarItem=None&#xa;self.shell=shell&#xa;self.cached_vars=dict()&#xa;self.modified_vars=dict()&#xa;self.new_vars=dict()&#xa;self.deleted_vars=dict()&#xa;self.hidden_vars=dict(hidden_vars)&#xa;self.currentVarName=&quot;&quot;&#xa;self.setHorizontalHeaderLabels([&quot;Name&quot;,&quot;Type&quot;,&quot;Data type&quot;,&quot;Min Value&quot;,&quot;Max Value&quot;,&quot;Size&quot;,&quot;Dimensions&quot;,&quot;Shape&quot;,&quot;Axes&quot;,&quot;Array order&quot;,&quot;Memory size&quot;])&#xa;" id="u3bKDRMEoyZ1A"/>
    <sourcecode value="self.cached_vars=dict([item for item in self.shell.user_ns.items()if item[0]not in self.hidden_vars and not item[0].startswith(&quot;_&quot;)])&#xa;self.modified_vars.clear()&#xa;self.new_vars.clear()&#xa;self.deleted_vars.clear()&#xa;" id="ugcjhtFpADLNe"/>
    <sourcecode value="self.cached_vars.clear()&#xa;self.modified_vars.clear()&#xa;self.new_vars.clear()&#xa;self.deleted_vars.clear()&#xa;self.hidden_vars.clear()&#xa;" id="uUY7m6dD5ZdGm"/>
    <sourcecode value="self.cached_vars=dict([item for item in self.shell.user_ns.items()if item[0]not in self.hidden_vars and not item[0].startswith(&quot;_&quot;)])&#xa;self.modified_vars.clear()&#xa;self.new_vars.clear()&#xa;self.deleted_vars.clear()&#xa;" id="u9YVdRubZEgvY"/>
    <sourcecode value="try:&#xa;  mpl_figs_in_pyplot=[plt.figure(i)for i in plt.get_fignums()]&#xa;  mpl_figs_in_ns=[item[1]for item in self.cached_vars.items()if isinstance(item[1],mpl.figure.Figure)]&#xa;  dict_of_mpl_figs_in_ns=dict([item for item in self.cached_vars.items()if isinstance(item[1],mpl.figure.Figure)])&#xa;  self.deleted_vars.update([item for item in self.cached_vars.items()if item[0]not in self.shell.user_ns])&#xa;  dict_of_mpl_figs_deleted_in_ns=[item for item in dict_of_mpl_figs_in_ns.items()if item[1]not in mpl_figs_in_pyplot]&#xa;  self.deleted_vars.update(dict_of_mpl_figs_deleted_in_ns)&#xa;  new_mpl_figs=[fig for fig in mpl_figs_in_pyplot if fig not in dict_of_mpl_figs_in_ns.values()]&#xa;  new_vars=[item for item in self.shell.user_ns.items()if item[0]not in self.cached_vars.keys()and item[0]not in self.hidden_vars and not item[0].startswith(&quot;_&quot;)]&#xa;  self.new_vars.update(new_vars)&#xa;  existing_vars=[item for item in self.shell.user_ns.items()if item[0]in self.cached_vars.keys()]&#xa;  for fig in new_mpl_figs:&#xa;    self.new_vars[&quot;Figure%d&quot;%fig.number]=fig&#xa;    self.shell.user_ns[&quot;Figure%d&quot;%fig.number]=fig&#xa;&#xa;  self.modified_vars.update([item for item in existing_vars if not safe_identity_test(item[1],self.cached_vars[item[0]])])&#xa;  self.cached_vars.update(self.new_vars)&#xa;  self.cached_vars.update(self.modified_vars)&#xa;  for item in self.deleted_vars.items():&#xa;    self.cached_vars.pop(item[0],None)&#xa;    if isinstance(item[1],QtWidgets.QWidget)and hasattr(item[1],&quot;winId&quot;):&#xa;      item[1].close()&#xa;      self.windowVariableDeleted.emit(int(item[1].winId()))&#xa;&#xa;&#xa;&#xa;except Exception as e:&#xa;  pass&#xa;&#xa;self.updateTable(from_console=True)&#xa;" id="utZPVquY4K5If"/>
    <sourcecode value="'''   Generates a row in the workspace table view.;NOTE:memory size is reported as follows:&#xa;  result of obj.nbytes,for object types derived from numpy ndarray&#xa;  result of total_size(obj)for python containers&#xa;  by default,and as currently implemented,this is limited to python container classes(tuple,list,deque,dict,set and frozenset)result of sys.getsizeof(obj)for any other python object&#xa;  TODO construct handlers for other object types as well including&#xa;  PyQt5 objects&#xa;''';from numbers import Number&#xa;self.currentVarName=dataname&#xa;row=[]&#xa;dtypestr=&quot;&quot;&#xa;dtypetip=&quot;&quot;&#xa;datamin=&quot;&quot;&#xa;mintip=&quot;&quot;&#xa;datamax=&quot;&quot;&#xa;maxtip=&quot;&quot;&#xa;sz=&quot;&quot;&#xa;sizetip=&quot;&quot;&#xa;ndims=&quot;&quot;&#xa;dimtip=&quot;&quot;&#xa;shp=&quot;&quot;&#xa;shapetip=&quot;&quot;&#xa;axes=&quot;&quot;&#xa;axestip=&quot;&quot;&#xa;arrayorder=&quot;&quot;&#xa;ordertip=&quot;&quot;&#xa;memsz=&quot;&quot;&#xa;memsztip=&quot;&quot;&#xa;vname=QtGui.QStandardItem(dataname)&#xa;vname.setToolTip(dataname)&#xa;vname.setStatusTip(dataname)&#xa;vname.setWhatsThis(dataname)&#xa;vname.setEditable(True)&#xa;row.append(vname)&#xa;tt=type(data).__name__&#xa;tt=self.abbrevs.get(tt,tt)&#xa;if tt=='instance':&#xa;  tt=self.abbrevs.get(str(data.__class__),&#xa;  str(data.__class__))&#xa;vtype=QtGui.QStandardItem(tt)&#xa;vtype.setToolTip(&quot;type: %s&quot;%tt)&#xa;vtype.setStatusTip(&quot;type: %s&quot;%tt)&#xa;vtype.setWhatsThis(&quot;type: %s&quot;%tt)&#xa;vtype.setEditable(False)&#xa;row.append(vtype)&#xa;try:&#xa;  if tt in self.seq_types:&#xa;    if len(data)and all([isinstance(v,numbers.Number)for v in data]):&#xa;      datamin=str(min(data))&#xa;      mintip=&quot;min: &quot;&#xa;      datamax=str(max(data))&#xa;      maxtip=&quot;max: &quot;&#xa;&#xa;    sz=str(len(data))&#xa;    sizetip=&quot;length: &quot;&#xa;    memsz=str(sys.getsizeof(data))&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  elif tt in self.set_types:&#xa;    if len(data)and all([isinstance(v,numbers.Number)for v in data]):&#xa;      datamin=str(min([v for v in data]))&#xa;      mintip=&quot;min: &quot;&#xa;      datamax=str(max([v for v in data]))&#xa;      maxtip=&quot;max: &quot;&#xa;&#xa;    sz=str(len(data))&#xa;    sizetip=&quot;length: &quot;&#xa;    memsz=str(sys.getsizeof(data))&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  elif tt in self.dict_types:&#xa;    sz=str(len(data))&#xa;    sizetip=&quot;length: &quot;&#xa;    memsz=str(sys.getsizeof(data))&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  elif tt in('VigraArray',&quot;PictArray&quot;):&#xa;    dtypestr=str(data.dtype)&#xa;    dtypetip=&quot;dtype: &quot;&#xa;    if data.size>0:&#xa;      try:&#xa;        datamin=str(np.nanmin(data))&#xa;&#xa;      except:&#xa;        pass&#xa;&#xa;      mintip=&quot;min: &quot;&#xa;      try:&#xa;        datamax=str(np.nanmax(data))&#xa;&#xa;      except:&#xa;        pass&#xa;&#xa;      maxtip=&quot;max: &quot;&#xa;&#xa;    sz=str(data.size)&#xa;    sizetip=&quot;size: &quot;&#xa;    ndims=str(data.ndim)&#xa;    dimtip=&quot;dimensions: &quot;&#xa;    shp=str(data.shape)&#xa;    shapetip=&quot;shape: &quot;&#xa;    axes=repr(data.axistags)&#xa;    axestip=&quot;axes: &quot;&#xa;    arrayorder=str(data.order)&#xa;    ordertip=&quot;array order: &quot;&#xa;    memsz=str(data.nbytes)&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  elif tt in('Quantity','AnalogSignal','IrregularlySampledSignal','SpikeTrain',&quot;DataSignal&quot;,&quot;IrregularlySampledDataSignal&quot;):&#xa;    dtypestr=str(data.dtype)&#xa;    dtypetip=&quot;dtype: &quot;&#xa;    if data.size>0:&#xa;      try:&#xa;        datamin=str(np.nanmin(data))&#xa;&#xa;      except:&#xa;        pass&#xa;&#xa;      mintip=&quot;min: &quot;&#xa;      try:&#xa;        datamax=str(np.nanmax(data))&#xa;&#xa;      except:&#xa;        pass&#xa;&#xa;      maxtip=&quot;max: &quot;&#xa;&#xa;    sz=str(data.size)&#xa;    sizetip=&quot;size: &quot;&#xa;    ndims=str(data.ndim)&#xa;    dimtip=&quot;dimensions: &quot;&#xa;    shp=str(data.shape)&#xa;    shapetip=&quot;shape: &quot;&#xa;    memsz=str(data.nbytes)&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  elif tt in('Block','Segment'):&#xa;    sz=str(data.size)&#xa;    sizetip=&quot;size: &quot;&#xa;    memsz=str(sys.getsizeof(data))&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  elif tt=='str':&#xa;    sz=str(len(data))&#xa;    sizetip=&quot;size: &quot;&#xa;    ndims=&quot;1&quot;&#xa;    dimtip=&quot;dimensions &quot;&#xa;    shp='('+str(len(data))+',)'&#xa;    shapetip=&quot;shape: &quot;&#xa;    memsz=str(sys.getsizeof(data))&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  elif isinstance(data,Number):&#xa;    dtypestr=tt&#xa;    datamin=str(data)&#xa;    mintip=&quot;min: &quot;&#xa;    datamax=str(data)&#xa;    maxtip=&quot;max: &quot;&#xa;    sz=&quot;1&quot;&#xa;    sizetip=&quot;size: &quot;&#xa;    ndims=&quot;1&quot;&#xa;    dimtip=&quot;dimensions: &quot;&#xa;    shp='(1,)'&#xa;    shapetip=&quot;shape: &quot;&#xa;    memsz=str(sys.getsizeof(data))&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  elif tt==&quot;Series&quot;:&#xa;    dtypestr=&quot;%s&quot;%data.dtype&#xa;    dtypetip=&quot;dtype: &quot;&#xa;    sz=&quot;%s&quot;%data.size&#xa;    sizetip=&quot;size: &quot;&#xa;    ndims=&quot;%s&quot;%data.ndim&#xa;    dimtip=&quot;dimensions: &quot;&#xa;    shp=str(data.shape)&#xa;    shapetip=&quot;shape: &quot;&#xa;    memsz=str(sys.getsizeof(data))&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  elif tt==&quot;DataFrame&quot;:&#xa;    sz=&quot;%s&quot;%data.size&#xa;    sizetip=&quot;size: &quot;&#xa;    ndims=&quot;%s&quot;%data.ndim&#xa;    dimtip=&quot;dimensions: &quot;&#xa;    shp=str(data.shape)&#xa;    shapetip=&quot;shape: &quot;&#xa;    memsz=str(sys.getsizeof(data))&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  elif tt==self.ndarray_type:&#xa;    dtypestr=str(data.dtype)&#xa;    dtypetip=&quot;dtype: &quot;&#xa;    if data.size>0:&#xa;      try:&#xa;        datamin=str(np.nanmin(data))&#xa;&#xa;      except:&#xa;        pass&#xa;&#xa;      mintip=&quot;min: &quot;&#xa;      try:&#xa;        datamax=str(np.nanmax(data))&#xa;&#xa;      except:&#xa;        pass&#xa;&#xa;      maxtip=&quot;max: &quot;&#xa;&#xa;    sz=str(data.size)&#xa;    sizetip=&quot;size: &quot;&#xa;    ndims=str(data.ndim)&#xa;    dimtip=&quot;dimensions: &quot;&#xa;    shp=str(data.shape)&#xa;    shapetip=&quot;shape: &quot;&#xa;    memsz=str(data.nbytes)&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  else:&#xa;    vmemsize=QtGui.QStandardItem(str(sys.getsizeof(data)))&#xa;    memsz=str(sys.getsizeof(data))&#xa;    memsztip=&quot;memory size: &quot;&#xa;&#xa;  vdtype=QtGui.QStandardItem(dtypestr)&#xa;  vdtype.setToolTip(&quot;%s%s&quot;%(dtypetip,dtypestr))&#xa;  vdtype.setStatusTip(&quot;%s%s&quot;%(dtypetip,dtypestr))&#xa;  vdtype.setWhatsThis(&quot;%s%s&quot;%(dtypetip,dtypestr))&#xa;  vdtype.setEditable(False)&#xa;  vmin=QtGui.QStandardItem(datamin)&#xa;  vmin.setToolTip(&quot;%s%s&quot;%(mintip,datamin))&#xa;  vmin.setStatusTip(&quot;%s%s&quot;%(mintip,datamin))&#xa;  vmin.setWhatsThis(&quot;%s%s&quot;%(mintip,datamin))&#xa;  vmin.setEditable(False)&#xa;  vmax=QtGui.QStandardItem(datamax)&#xa;  vmax.setToolTip(&quot;%s%s&quot;%(maxtip,datamax))&#xa;  vmax.setStatusTip(&quot;%s%s&quot;%(maxtip,datamax))&#xa;  vmax.setWhatsThis(&quot;%s%s&quot;%(maxtip,datamax))&#xa;  vmax.setEditable(False)&#xa;  vsize=QtGui.QStandardItem(sz)&#xa;  vsize.setToolTip(&quot;%s%s&quot;%(sizetip,sz))&#xa;  vsize.setStatusTip(&quot;%s%s&quot;%(sizetip,sz))&#xa;  vsize.setWhatsThis(&quot;%s%s&quot;%(sizetip,sz))&#xa;  vsize.setEditable(False)&#xa;  vndims=QtGui.QStandardItem(ndims)&#xa;  vndims.setToolTip(&quot;%s%s&quot;%(dimtip,ndims))&#xa;  vndims.setStatusTip(&quot;%s%s&quot;%(dimtip,ndims))&#xa;  vndims.setWhatsThis(&quot;%s%s&quot;%(dimtip,ndims))&#xa;  vndims.setEditable(False)&#xa;  vshape=QtGui.QStandardItem(shp)&#xa;  vshape.setToolTip(&quot;%s%s&quot;%(shapetip,shp))&#xa;  vshape.setStatusTip(&quot;%s%s&quot;%(shapetip,shp))&#xa;  vshape.setWhatsThis(&quot;%s%s&quot;%(shapetip,shp))&#xa;  vshape.setEditable(False)&#xa;  vaxes=QtGui.QStandardItem(axes)&#xa;  vaxes.setToolTip(&quot;%s%s&quot;%(axestip,axes))&#xa;  vaxes.setStatusTip(&quot;%s%s&quot;%(axestip,axes))&#xa;  vaxes.setWhatsThis(&quot;%s%s&quot;%(axestip,axes))&#xa;  vaxes.setEditable(False)&#xa;  vorder=QtGui.QStandardItem(arrayorder)&#xa;  vorder.setToolTip(&quot;%s%s&quot;%(ordertip,arrayorder))&#xa;  vorder.setStatusTip(&quot;%s%s&quot;%(ordertip,arrayorder))&#xa;  vorder.setWhatsThis(&quot;%s%s&quot;%(ordertip,arrayorder))&#xa;  vorder.setEditable(False)&#xa;  vmemsize=QtGui.QStandardItem(memsz)&#xa;  vmemsize.setToolTip(&quot;%s%s&quot;%(memsztip,memsz))&#xa;  vmemsize.setStatusTip(&quot;%s%s&quot;%(memsztip,memsz))&#xa;  vmemsize.setWhatsThis(&quot;%s%s&quot;%(memsztip,memsz))&#xa;  vmemsize.setEditable(False)&#xa;  row+=[vdtype,vmin,vmax,vsize,vndims,vshape,vaxes,vorder,vmemsize]&#xa;&#xa;except Exception as e:&#xa;  traceback.print_exc()&#xa;&#xa;return row&#xa;" id="usInQo5Q78UW1"/>
    <sourcecode value="''';Returns a list of QStandardItem(or their display text,if strings is True)&#xa;for the given row.&#xa;If row index is not valid,returns the empty string(if strings is True)&#xa;or None&#xa;''';if row is None or row>=self.rowCount()or row&lt;0:&#xa;  return&quot;&quot;if asStrings else None&#xa;&#xa;ret=[]&#xa;for col in range(self.columnCount()):&#xa;  ret.append(self.item(row,col).text()if asStrings else self.item(row,col))&#xa;&#xa;return ret&#xa;" id="uL4vUtIICM8Bw"/>
    <sourcecode value="if regVarNames is None:&#xa;  regVarNames=self.getDisplayedVariableNames()&#xa;&#xa;ndx=None&#xa;if len(regVarNames)==0:&#xa;  return ndx&#xa;&#xa;if varname in regVarNames:&#xa;  ndx=regVarNames.index(varname)&#xa;&#xa;return ndx&#xa;" id="uEYCOl65wROHn"/>
    <sourcecode value="if self.currentVarItem is None:&#xa;  return None&#xa;&#xa;else:&#xa;  try:&#xa;    self.currentVarName=self.currentVarItem.text()&#xa;    return str(self.currentVarName)&#xa;&#xa;  except Exception as e:&#xa;    traceback.print_exc()&#xa;&#xa;&#xa;" id="uxSUWbDSYJdou"/>
    <sourcecode value="row=self.indexFromItem(items[0]).row()&#xa;originalRow=self.getRowContents(row,asStrings=False)&#xa;v_row=self.generateRowContents(dataname,data)&#xa;for col in range(1,self.columnCount()):&#xa;  if originalRow is not None and col&lt;len(originalRow)and originalRow[col]!=v_row[col]:&#xa;    self.setItem(row,col,v_row[col])&#xa;&#xa;&#xa;" id="uhYDlSCdN0GWg"/>
    <sourcecode value="items=self.findItems(dataname)&#xa;if len(items)>0:&#xa;  row=self.indexFromItem(items[0]).row()&#xa;  originalRow=self.getRowContents(row,asStrings=False)&#xa;  v_row=self.generateRowContents(dataname,data)&#xa;  for col in range(1,self.columnCount()):&#xa;    if originalRow is not None and col&lt;len(originalRow)and originalRow[col]!=v_row[col]:&#xa;      self.setItem(row,col,v_row[col])&#xa;&#xa;&#xa;&#xa;" id="unfM46e7j4g8a"/>
    <sourcecode value="items=self.findItems(dataname)&#xa;if len(items)>0:&#xa;  row=self.indexFromItem(items[0]).row()&#xa;  self.removeRow(row)&#xa;&#xa;" id="uVdQpSSFZlnwB"/>
    <sourcecode value="v_row=self.generateRowContents(dataname,data)&#xa;self.appendRow(v_row)&#xa;" id="uF2LqsgUhaSBM"/>
    <sourcecode value="self.removeRows(0,self.rowCount())&#xa;" id="uu7StT4iJnsPb"/>
    <sourcecode value="try:&#xa;  if from_console:&#xa;    for varname in self.deleted_vars.keys():&#xa;      self.removeRowForVariable(varname)&#xa;&#xa;    for item in self.modified_vars.items():&#xa;      self.updateRowForVariable(item[0],item[1])&#xa;&#xa;    for item in self.new_vars.items():&#xa;      self.addRowForVariable(item[0],item[1])&#xa;&#xa;    self.cached_vars=dict([item for item in self.shell.user_ns.items()if item[0]not in self.hidden_vars and not item[0].startswith(&quot;_&quot;)])&#xa;&#xa;  else:&#xa;    self.pre_execute()&#xa;    displayed_vars=self.getDisplayedVariableNames(asStrings=True)&#xa;    for varname in displayed_vars:&#xa;      if varname not in self.shell.user_ns:&#xa;        self.removeRowForVariable(varname)&#xa;&#xa;      elif varname in self.cached_vars:&#xa;        if not safe_identity_test(self.shell.user_ns[varname],self.cached_vars[varname]):&#xa;          self.updateRowForVariable(varname,self.shell.user_ns[varname])&#xa;&#xa;&#xa;&#xa;    for item in self.shell.user_ns.items():&#xa;      if item[0]not in displayed_vars and item[0]not in self.hidden_vars and not item[0].startswith(&quot;_&quot;):&#xa;        self.addRowForVariable(item[0],item[1])&#xa;&#xa;&#xa;    self.cached_vars=dict([item for item in self.shell.user_ns.items()if item[0]not in self.hidden_vars and not item[0].startswith(&quot;_&quot;)])&#xa;&#xa;&#xa;except Exception as e:&#xa;  traceback.print_exc()&#xa;  print(&quot;Exception in updateTable&quot;)&#xa;&#xa;self.modelContentsChanged.emit()&#xa;" id="u4wWM0IoxK8D5"/>
    <sourcecode value="''';Returns variable names currently registered with the model.&#xa;Parameter:strings(boolean,optional,default True)variable names are&#xa;returned as(a Python list of)strings,otherwise they are returned as Python list of QStandardItems''';ret=[self.item(row).text()if asStrings else self.item(row)for row in range(self.rowCount())]&#xa;return ret&#xa;" id="uS0lMse0YyC6F"/>
    <sourcecode value="super().__init__(parent=parent)&#xa;self.dragStartPosition=QtCore.QPoint()&#xa;self.mainWindow=mainWindow&#xa;" id="ui2FX60i7jKFz"/>
    <sourcecode value="print(&quot;WorkspaceViewer.mousePressEvent&quot;)&#xa;if event.button()==QtCore.Qt.LeftButton:&#xa;  self.dragStartPosition=event.pos()&#xa;&#xa;event.accept()&#xa;" id="uqs5D2S8VWkbS"/>
    <sourcecode value="print(&quot;WorkspaceViewer.contextMenuEvent&quot;)&#xa;self.customContextMenuRequested.emit(event.pos())&#xa;" id="u5GIwBg33930f"/>
    <sourcecode value="print(&quot;WorkspaceViewer.mouseMoveEvent&quot;)&#xa;if event.buttons()&amp;QtCore.Qt.LeftButton:&#xa;  if(event.pos()-self.dragStartPosition).manhattanLength()>=QtWidgets.QApplication.startDragDistance():&#xa;    indexList=[i for i in self.selectedIndexes()if i.column()==0]&#xa;    if len(indexList)==0:&#xa;      return&#xa;&#xa;    if not isinstance(self.mainWindow,ScipyenWindow):&#xa;      return&#xa;&#xa;    varNames=[self.mainWindow.workspaceModel.item(index.row(),0).text()for index in indexList]&#xa;    for varName in varNames:&#xa;      drag=QtGui.QDrag(self)&#xa;      mimData=QtCore.QMimeData()&#xa;      mimeData.setText(varName)&#xa;      drag.setMimeData(mimeData)&#xa;      dropAction=drag.exec(QtCore.Qt.CopyAction)&#xa;&#xa;&#xa;&#xa;" id="uHnB52akrTTe3"/>
    <sourcecode value="''' EmbedIPython constructor;Using Qt5 gui by default&#xa;NOTE:&#xa;  Since August 2016--using Jupyter/IPython 4.x and qtconsole&#xa;  ''';super(RichJupyterWidget,self).__init__()&#xa;  if isinstance(mainWindow,(ScipyenWindow,type(None))):&#xa;    self.mainWindow=mainWindow&#xa;&#xa;  self.kernel_manager=QtInProcessKernelManager()&#xa;  self.kernel_manager.start_kernel()&#xa;  self.ipkernel=self.kernel_manager.kernel&#xa;  self.kernel_client=self.kernel_manager.client()&#xa;  self.kernel_client.start_channels()&#xa;  self.ipkernel.gui=&quot;qt&quot;&#xa;  self.ipkernel.shell.run_line_magic(&quot;matplotlib&quot;,&quot;qt5&quot;)&#xa;  self.settings=QtCore.QSettings()&#xa;  self._load_settings_()&#xa;  self.clear_shortcut=QtWidgets.QShortcut(QtGui.QKeySequence(QtCore.Qt.CTRL+QtCore.Qt.SHIFT+QtCore.Qt.Key_X),self)&#xa;  self.clear_shortcut.activated.connect(self.slot_clearConsole)&#xa;&#xa;def closeEvent(self,evt):&#xa;  self._save_settings_()&#xa;  evt.accept()&#xa;&#xa;def _save_settings_(self):&#xa;  self.settings.setValue(&quot;PictConsole/Size&quot;,self.size())&#xa;  self.settings.setValue(&quot;PictConsole/Position&quot;,self.pos())&#xa;&#xa;def _load_settings_(self):&#xa;  winSize=self.settings.value(&quot;PictConsole/Size&quot;,QtCore.QSize(600,350))&#xa;  winPos=self.settings.value(&quot;PictConsole/Position&quot;,QtCore.QPoint(0,0))&#xa;  self.move(winPos)&#xa;  self.resize(winSize)&#xa;  self.setAcceptDrops(True)&#xa;&#xa;def dragEnterEvent(self,evt):&#xa;  mimeData=evt.mimeData()&#xa;  if evt.mimeData().hasText():&#xa;    evt.acceptProposedAction()&#xa;&#xa;&#xa;  evt.accept()&#xa;&#xa;@safeWrapper&#xa;def __write_text_in_console_buffer__(self,text):&#xa;  from textwrap import dedent&#xa;  if isinstance(text,str):&#xa;    self._keep_cursor_in_buffer()&#xa;    cursor=self._control.textCursor()&#xa;    self._insert_plain_text_into_buffer(cursor,dedent(text))&#xa;&#xa;&#xa;@safeWrapper&#xa;def writeText(self,text):&#xa;  if isinstance(text,str):&#xa;    self.__write_text_in_console_buffer__(text)&#xa;&#xa;  elif isinstance(text,(tuple,list)and all([isinstance(s,str)for s in text])):&#xa;    self.__write_text_in_console_buffer__(&quot;\n&quot;.join(text))&#xa;&#xa;&#xa;@safeWrapper&#xa;def dropEvent(self,evt):&#xa;  from textwrap import dedent&#xa;  src=evt.source()&#xa;  if isinstance(self.mainWindow,ScipyenWindow)and src is self.mainWindow.workspaceView:&#xa;    self.workspaceItemsDropped.emit()&#xa;&#xa;  elif isinstance(self.mainWindow,ScipyenWindow)and src is self.mainWindow.historyTreeWidget:&#xa;    self.historyItemsDropped.emit()&#xa;&#xa;  elif isinstance(self.mainWindow,ScipyenWindow)and src is self.mainWindow.fileSystemTreeView:&#xa;    pass&#xa;&#xa;  else:&#xa;    if evt.mimeData().hasUrls():&#xa;      urls=evt.mimeData().urls()&#xa;      if len(urls)==1 and(urls[0].isRelative()or urls[0].isLocalFile())and os.path.isfile(urls[0].path()):&#xa;        mimeType=QtCore.QMimeDatabase().mimeTypeForFile(QtCore.QFileInfo(urls[0].path()))&#xa;        if all([s in mimeType.name()for s in(&quot;text&quot;,&quot;python&quot;)]):&#xa;          self.pythonFileReceived.emit(urls[0].path(),evt.pos())&#xa;          return&#xa;&#xa;&#xa;      self.loadUrls.emit(urls,evt.keyboardModifiers()==QtCore.Qt.ShiftModifier,evt.pos())&#xa;&#xa;    elif evt.mimeData().hasText():&#xa;      if evt.proposedAction()==QtCore.Qt.CopyAction:&#xa;        text=evt.mimeData().text()&#xa;        echoing=not bool(evt.keyboardModifiers()&amp;QtCore.Qt.ShiftModifier)&#xa;        store=bool(evt.keyboardModifiers()&amp;QtCore.Qt.ControlModifier)&#xa;        if echoing:&#xa;          self.writeText(text)&#xa;&#xa;        else:&#xa;          wintitle=self.windowTitle()&#xa;          self.setWindowTitle(&quot;%s;self.ipkernel.shell.run_cell(text,store_history=False,silent=True,shell_futures=True)&#xa;          self.setWindowTitle(wintitle)&#xa;&#xa;&#xa;&#xa;&#xa;  evt.accept()&#xa;&#xa;@safeWrapper&#xa;def slot_clearConsole(self):&#xa;  print(&quot;clear console&quot;)&#xa;  self.ipkernel.shell.run_line_magic(&quot;clear&quot;,&quot;&quot;,2)&#xa;&#xa;" id="uFh2dhvt5wc5L"/>
    <sourcecode value="super(MatrixViewer,self).__init__(parent)&#xa;self.settings=QtCore.QSettings()&#xa;self.__gui_client__=asGUIClient&#xa;self._ID=None&#xa;self._scipyenWindow_=pWin&#xa;if isinstance(doc_title,str)and len(doc_title.strip()):&#xa;  self._docTitle_=doc_title&#xa;&#xa;else:&#xa;  self._docTitle_=None&#xa;&#xa;if isinstance(doc_title,str)and len(doc_title.strip()):&#xa;  self._docTitle_=doc_title&#xa;&#xa;else:&#xa;  self._docTitle_=None&#xa;&#xa;if isinstance(win_title,str)and len(win_title.strip()):&#xa;  userWinTitle=win_title&#xa;&#xa;else:&#xa;  if self.__scipyenWindow___ is not None:&#xa;    viewerVarName=[k for k in self.__scipyenWindow___.workspace.keys()if\&#xa;    type(self.__scipyenWindow___.workspace[k]).__name__==&quot;SignalViewer&quot;and\self.__scipyenWindow___.workspace[k].ID==self.__scipyenWindow___.currentSignalViewerWindowID]if len(viewerVarName):&#xa;      userWinTitle=viewerVarName[-1]&#xa;&#xa;    else:&#xa;      userWinTitle=&quot;%s%d&quot;%(type(self).__name__,self._ID)&#xa;&#xa;&#xa;  else:&#xa;    userWinTitle=&quot;%s%d&quot;%(type(self).__name__,self._ID)&#xa;&#xa;&#xa;self.__winTitle__=userWinTitle&#xa;if self._docTitle_ is None:&#xa;  super().setWindowTitle(self.__winTitle__)&#xa;&#xa;else:&#xa;  super().setWindowTitle(self._docTitle_+&quot; - &quot;+self.__winTitle__)&#xa;&#xa;if data is not None:&#xa;  if isinstance(data,np.ndarray)and data.ndim in(1,2):&#xa;    self._array=data&#xa;&#xa;  else:&#xa;    raise ValueError(&quot;When given, data must be a 1D or 2D numpy array&quot;)&#xa;&#xa;&#xa;else:&#xa;  self._array=data&#xa;&#xa;self.fileMenu=self.menuBar().addMenu(&quot;&amp;File&quot;)&#xa;self.fileMenu.addAction(&quot;&amp;Save As...&quot;,self.saveAsFile,&quot;Ctrl+Sift+S&quot;)&#xa;self._tableWidget=QtWidgets.QTableWidget(self)&#xa;self.setCentralWidget(self._tableWidget)&#xa;if not self.__gui_client__:&#xa;  windowSize=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowSize&quot;]),None)&#xa;  if windowSize is not None:&#xa;    self.resize(windowSize)&#xa;&#xa;  windowPos=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowPos&quot;]),None)&#xa;  if windowPos is not None:&#xa;    self.move(windowPos)&#xa;&#xa;  windowState=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowState&quot;]),None)&#xa;  if windowState is not None:&#xa;    self.restoreState(windowState)&#xa;&#xa;&#xa;self._setupView()&#xa;self.show()&#xa;" id="u476e5QBJVLaC"/>
    <sourcecode value="if not self.__gui_client__:&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowSize&quot;]),self.size())&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowPos&quot;]),self.pos())&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowState&quot;]),self.saveState())&#xa;&#xa;evt.accept()&#xa;self.close()&#xa;" id="un9OPCLOMjecj"/>
    <sourcecode value="if self._array is None:&#xa;  return&#xa;&#xa;if self._array.ndim==2:&#xa;  self._tableWidget.setRowCount(self._array.shape[0])&#xa;  self._tableWidget.setVerticalHeaderLabels([&quot;%d&quot;%r for r in range(self._array.shape[0])])&#xa;  self._tableWidget.setColumnCount(self._array.shape[1])&#xa;  self._tableWidget.setHorizontalHeaderLabels([&quot;%d&quot;%c for c in range(self._array.shape[1])])&#xa;  for c in range(self._array.shape[1]):&#xa;    for r in range(self._array.shape[0]):&#xa;      self._tableWidget.setItem(r,c,QtWidgets.QTableWidgetItem(&quot;%f&quot;%self._array[r,c]))&#xa;&#xa;&#xa;&#xa;elif self._array.ndim==1:&#xa;  self._tableWidget.setRowCount(self._array.size)&#xa;  self._tableWidget.setVerticalHeaderLabels([&quot;%d&quot;%r for r in range(self._array.size)])&#xa;  self._tableWidget.setColumnCount(1)&#xa;  self._tableWidget.setHorizontalHeaderLabels([&quot;0&quot;])&#xa;  for r in range(self._array.size):&#xa;    self._tableWidget.setItem(r,0,QtWidgets.QTableWidgetItem(&quot;%f&quot;%self._array[r]))&#xa;&#xa;&#xa;" id="uViCEAY3zZ6XA"/>
    <sourcecode value="if isinstance(data,np.ndarray)and data.ndim in(1,2):&#xa;  self._array=data&#xa;&#xa;else:&#xa;  raise ValueError(&quot;Array data must be a 1D or 2D numpy array&quot;)&#xa;&#xa;if isinstance(doc_title,str)and len(doc_title.strip()):&#xa;  self._docTitle_=doc_title&#xa;&#xa;if isinstance(varname,str)and len(varname.strip()):&#xa;  self._data_var_name_=varname&#xa;&#xa;self._setupView()&#xa;self.show()&#xa;" id="u4i1VxfDHuu8T"/>
    <sourcecode value="self.setData(data,doc_title=doc_title,varname=varname)&#xa;" id="u0hSVvqFAqxe1"/>
    <sourcecode value="if isinstance(value,str)and len(value.strip()):&#xa;  self.__winTitle__=value&#xa;&#xa;" id="uZNBjI4UiPGqO"/>
    <sourcecode value="if isinstance(prefix,str)and len(prefix.strip()):&#xa;  self.__winTitle__=prefix&#xa;&#xa;if isinstance(value,str)and len(value.strip()):&#xa;  self._docTitle_=value&#xa;  self.setWindowTitle(&quot;%s - %s&quot;%(self.__winTitle__,self._docTitle_))&#xa;&#xa;else:&#xa;  self._docTitle_=&quot;&quot;&#xa;  self.setWindowTitle(self.__winTitle__)&#xa;&#xa;" id="uF9w6LiQkIhWL"/>
    <sourcecode value="if self._array is None:&#xa;  return&#xa;&#xa;filePath,_=QtWidgets.QFileDialog.getSaveFileName(self,&quot;Save CSV Document&quot;,filter=&quot;CSV files (*.csv)&quot;)&#xa;if len(filePath)>0:&#xa;  pio.writeCsv(self._array,filePath)&#xa;&#xa;" id="uP0lM9DEEdqpQ"/>
    <sourcecode value="return self._ID&#xa;" id="uJeUguvY2s4ta"/>
    <sourcecode value="self._ID=val" id="uelIR5YmIVZu9"/>
    <sourcecode value="super(SelectablePlotItem,self).__init__(**kwargs)&#xa;" id="u7tS15yz3CqVG"/>
    <sourcecode value="super(SelectablePlotItem,self).mousePressEvent(ev)&#xa;self.itemClicked.emit()&#xa;" id="uPqoAMIylPRmL"/>
    <sourcecode value="QtWidgets.QFrame.__init__(self,parent)&#xa;parent.addWidget(self)&#xa;self.label=QtWidgets.QLabel(label)&#xa;self.variable=QtWidgets.QComboBox()&#xa;self._layout=QtWidgets.QHBoxLayout()&#xa;self._layout.setSpacing(5)&#xa;self._layout.addWidget(self.label)&#xa;self._layout.addWidget(self.variable,1)&#xa;self.setLayout(self._layout)&#xa;" id="ukUCS3cWBbuTL"/>
    <sourcecode value="self.variable.setFocus()&#xa;" id="u1OdqcMD7lDyY"/>
    <sourcecode value="if not isinstance(textList,(tuple,list)):&#xa;  raise TypeError(&quot;Expecting a sequence; got %s instead&quot;%type(textList).__name__)&#xa;&#xa;if not all([isinstance(v,str)for v in textList]):&#xa;  raise TypeError(&quot;Expecting a sequence of strings&quot;)&#xa;&#xa;self.variable.clear()&#xa;for text in textList:&#xa;  self.variable.addItem(text)&#xa;&#xa;" id="up1Dn58pWEoTN"/>
    <sourcecode value="if isinstance(index,int)and index>=-1 and index&lt;self.variable.model().rowCount():&#xa;  self.variable.setCurrentIndex(index)&#xa;&#xa;" id="uNhlSy2qb09gL"/>
    <sourcecode value="if isinstance(text,str):&#xa;  self.variable.setCurrentText(text)&#xa;&#xa;" id="uM84kDuctoOjb"/>
    <sourcecode value="return self.variable.currentIndex()&#xa;" id="uh4GH31yJkGJI"/>
    <sourcecode value="return self.variable.currentText()&#xa;" id="uWg0bIOYeGip8"/>
    <sourcecode value="self.currentTextChanged[str].connect(slot)&#xa;" id="uZXCEOHb3yAGo"/>
    <sourcecode value="self.variable.currentIndexChanged[str].connect(slot)&#xa;" id="u7NV4SawTw8bP"/>
    <sourcecode value="self.variable.currentIndexChanged[str].disconnect()&#xa;" id="uFSRfJdGLFmSB"/>
    <sourcecode value="super(GuiWorker,self).__init__()&#xa;self.fn=fn&#xa;self.args=args&#xa;self.kwargs=kwargs&#xa;self.signals=GuiWorkerSignals()&#xa;" id="uDgfMcTnShv86"/>
    <sourcecode value="try:&#xa;  result=self.fn(*self.args,**self.kwargs)&#xa;&#xa;except:&#xa;  traceback.print_exc()&#xa;  exc_type,value=sys.exc_info()[:2]&#xa;  self.signals.sig_error.emit((exc_type,value,traceback.format_exc()))&#xa;&#xa;else:&#xa;  self.signals.signal_result.emit(result)&#xa;  self.signals.signal_finished.emit()&#xa;&#xa;finally:&#xa;  self.signals.signal_finished.emit()&#xa;&#xa;" id="uJYyRgL1gF1zo"/>
    <sourcecode value="super(ProgressWorker,self).__init__()&#xa;self.fn=fn&#xa;self.args=args&#xa;self.kwargs=kwargs&#xa;self.signals=ProgressWorkerSignals()&#xa;self.pd=progressDialog&#xa;if isinstance(self.pd,QtWidgets.QProgressDialog):&#xa;  self.pd.setValue(0)&#xa;  self.signals.signal_progress.connect(self.pd.setValue)&#xa;  self.signals.signal_setMaximum.connect(self.pd.setMaximum)&#xa;  self.kwargs['progressSignal']=self.signals.signal_progress&#xa;  self.kwargs[&quot;setMaxSignal&quot;]=self.signals.signal_setMaximum&#xa;&#xa;" id="udqhIcPO1LB79"/>
    <sourcecode value="''';Initialise the runner function with passed args,kwargs.&#xa;''';try:&#xa;  result=self.fn(*self.args,**self.kwargs)&#xa;&#xa;except:&#xa;  traceback.print_exc()&#xa;  exctype,value=sys.exc_info()[:2]&#xa;  self.signals.sig_error.emit((exctype,value,traceback.format_exc()))&#xa;&#xa;else:&#xa;  self.signals.signal_result.emit(result)&#xa;&#xa;finally:&#xa;  self.signals.signal_finished.emit()&#xa;&#xa;" id="u6rIlVxMLcyuP"/>
    <sourcecode value="needs_must=False&#xa;if not hasattr(self,new_name):&#xa;  needs_must=True&#xa;&#xa;else:&#xa;  attribute=getattr(self,new_name)&#xa;  if not isinstance(attribute,attr_type):&#xa;    needs_must=True&#xa;&#xa;&#xa;if needs_must:&#xa;  if hasattr(self,old_name):&#xa;    old_attribute=getattr(self,old_name)&#xa;    if isinstance(old_attribute,attr_type):&#xa;      setattr(self,new_name,old_attribute)&#xa;      delattr(self,old_name)&#xa;&#xa;    else:&#xa;      setattr(self,new_name,default)&#xa;      delattr(self,old_name)&#xa;&#xa;&#xa;  else:&#xa;    setattr(self,new_name,default)&#xa;&#xa;&#xa;" id="uC7nf5csj3NKe"/>
    <sourcecode value="super().__init__(*args,name=name,frameindex=frameindex,currentframe=currentframe,&#xa;graphicstype=GraphicsObjectType.point,closed=closed,linked_objects=linked_objects)" id="uBqZdDAIaZpUq"/>
    <sourcecode value="return[QtCore.QPointF(self.x,self.y)]&#xa;" id="uZzkZKFh4vCqC"/>
    <sourcecode value="return QtCore.QPointF(self.x,self.y)&#xa;" id="uJ3FL0ag4kApd"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  if not isinstance(frame,int):&#xa;    raise TypeError(&quot;frame expected to be an int or None; got %s instead&quot;%frame)&#xa;&#xa;  if frame in self.frameIndices:&#xa;    state=self.getState(frame)&#xa;&#xa;  else:&#xa;    warnings.warn(&quot;No state is associated with specified frame (%d)&quot;%frame)&#xa;    return&#xa;&#xa;&#xa;if state is None or len(state)==0:&#xa;  warnings.warn(&quot;undefined state&quot;)&#xa;  return&#xa;&#xa;return QtWidgets.QGraphicsEllipseItem(QtCore.QRectF(state.x-pointSize/2,&#xa;state.y-pointSize/2,pointSize,pointSize))" id="ubpLcbegEIiRu"/>
    <sourcecode value="super().__init__(*args,name=name,frameindex=frameindex,currentframe=currentframe,&#xa;graphicstype=GraphicsObjectType.point,closed=closed,linked_objects=linked_objects)" id="ueFo8Dawu4koc"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  if not isinstance(frame,int):&#xa;    raise TypeError(&quot;frame expected to be an int or None; got %s instead&quot;%frame)&#xa;&#xa;  if frame in self.frameIndices:&#xa;    state=self.getState(frame)&#xa;&#xa;  else:&#xa;    warnings.warn(&quot;No state is associated with specified frame (%d)&quot;%frame)&#xa;    return&#xa;&#xa;&#xa;if state is None or len(state)==0:&#xa;  warnings.warn(&quot;undefined state&quot;)&#xa;  return&#xa;&#xa;return QtWidgets.QGraphicsLineItem(QtCore.QLineF(QtCore.QPointF(0,0),&#xa;QtCore.QPointF(state.x,state.y)))" id="uaYs5BakeJ5JZ"/>
    <sourcecode value="super().__init__(*args,name=name,frameindex=frameindex,currentframe=currentframe,&#xa;graphicstype=GraphicsObjectType.cubic,closed=closed,linked_objects=linked_objects)" id="ua1Imn8lJUNdI"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return tuple()&#xa;&#xa;return((state.x,state.y),(state.c1x,state.c1y),(state.c2x,state.c2y))&#xa;" id="utTmCVzwdgGAi"/>
    <sourcecode value="ret=Path()&#xa;cp=self.controlPoints(frame)&#xa;for k,p in enumerate(cp):&#xa;  if k==0:&#xa;    ret.append(Move(p[0],p[1]))&#xa;&#xa;  else:&#xa;    ret.append(Line(p[0],p[1]))&#xa;&#xa;&#xa;return ret&#xa;" id="uVreF63zb7k1m"/>
    <sourcecode value="if not isinstance(path,Path):&#xa;  raise TypeError(&quot;path expected ot be a pictgui.Path; got %s instead&quot;%type(path).__name__)&#xa;&#xa;if len(path)!=3:&#xa;  raise ValueError(&quot;path expected to have four elements; got %d instead&quot;%len(path))&#xa;&#xa;control_state=path.currentState&#xa;if control_state is None or len(control_state)==0:&#xa;  raise ValueError(&quot;path argument has undefined state&quot;)&#xa;&#xa;if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return&#xa;&#xa;state.x=path[0].x&#xa;state.y=path[0].y&#xa;state.c1x=path[1].x&#xa;state.c1y=path[1].y&#xa;state.c2x=path[2].x&#xa;state.c2y=path[2].y&#xa;self.updateFrontends()&#xa;" id="uWtTOVTOL9vWX"/>
    <sourcecode value="cp=self.controlPoints(frame)&#xa;if len(cp):&#xa;  return[QtCore.QPointF(cp[0][0],cp[0][1]),&#xa;  QtCore.QPointF(cp[1][0],cp[1][1]),QtCore.QPointF(cp[2][0],cp[2][1])]&#xa;else:&#xa;  return list()&#xa;&#xa;" id="uDKwFhRhBfK5Y"/>
    <sourcecode value="self.x+=dx&#xa;self.y+=dy&#xa;self.c1x+=dx&#xa;self.c1y+=dy&#xa;self.c2x+=dx&#xa;self.c2y+=dy&#xa;" id="ukQKavMtudYwk"/>
    <sourcecode value="from scipy.interpolate import BSpline&#xa;t=np.zeros((8,))&#xa;t[4:]=1.&#xa;c=np.array([[xy[0],xy[1]],[self.c1x,self.c1y],[self.c2x,self.c2y],[self.x,self.y]])&#xa;return BSpline(t,c,3,extrapolate=extrapolate)&#xa;" id="uDY4sOnhfN3lt"/>
    <sourcecode value="super().__init__(*args,name=name,frameindex=frameindex,currentframe=currentframe,&#xa;graphicstype=GraphicsObjectType.quad,closed=closed,linked_objects=linked_objects)" id="umHBGOE1dwiXG"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return tuple()&#xa;&#xa;return((state.x,state.y),(state.cx,state.cy))&#xa;" id="uXzBVZtCmdUQN"/>
    <sourcecode value="ret=Path()&#xa;cp=self.controlPoints(frame)&#xa;for k,p in enumerate(cp):&#xa;  if k==0:&#xa;    ret.append(Move(p[0],p[1]))&#xa;&#xa;  else:&#xa;    ret.append(Line(p[0],p[1]))&#xa;&#xa;&#xa;return ret&#xa;" id="utsLXc79HfFOJ"/>
    <sourcecode value="if not isinstance(path,Path):&#xa;  raise TypeError(&quot;path expected ot be a pictgui.Path; got %s instead&quot;%type(path).__name__)&#xa;&#xa;if len(path)!=2:&#xa;  raise ValueError(&quot;path expected to have four elements; got %d instead&quot;%len(path))&#xa;&#xa;control_state=path.currentState&#xa;if control_state is None or len(control_state)==0:&#xa;  raise ValueError(&quot;path argument has undefined state&quot;)&#xa;&#xa;if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return&#xa;&#xa;state.x=path[0].x&#xa;state.y=path[0].y&#xa;state.cx=path[1].x&#xa;state.cy=path[1].y&#xa;self.updateFrontends()&#xa;" id="ugknBaKFC4Mfh"/>
    <sourcecode value="self.x+=dx&#xa;self.y+=dy&#xa;self.cx+=dx&#xa;self.cy+=dy&#xa;" id="ubhqmDzWn7rbP"/>
    <sourcecode value="cp=self.controlPoints(frame)&#xa;if len(cp):&#xa;  return[QtCore.QPointF(cp[0][0],cp[0][1]),&#xa;  QtCore.QPointF(cp[1][0],cp[1][1])]&#xa;else:&#xa;  return list()&#xa;&#xa;" id="uIaUZXhU10mKL"/>
    <sourcecode value="from scipy.interpolate import BSpline&#xa;t=np.zeros((6,))&#xa;t[3:]=1.&#xa;c=np.array([[xy[0],xy[1]],[self.cx,self.cy],[self.x,self.y]])&#xa;return BSpline(t,c,2,extrapolate=extrapolate)&#xa;" id="uudACdbs14uLJ"/>
    <sourcecode value="super().__init__(*args,name=name,frameindex=frameindex,currentframe=currentframe,&#xa;graphicstype=GraphicsObjectType.arc,closed=closed,linked_objects=linked_objects)" id="uT3YTzWWLnWfc"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return tuple()&#xa;&#xa;if state.w>state.h:&#xa;  major_axis=state.w&#xa;  minor_axis=state.h&#xa;&#xa;else:&#xa;  major_axis=state.h&#xa;  minor_axis=state.w&#xa;&#xa;start_angle=state.s*np.pi/180&#xa;sweep_angle=state.l*np.pi/180&#xa;cp0=(state.x,state.y)&#xa;cp1=(major_axis*np.cos(start_angle),minor_axis*np.sin(start_angle))&#xa;cp2=(state.x+w/2,state.y+h/2)&#xa;cp3=(major_axis*np.cos(sweep_angle),minor_axis*np.sin(sweep_angle))&#xa;return(cp0,cp1,cp2,cp3)&#xa;" id="uyiSYQ8FyVovs"/>
    <sourcecode value="ret=Path()&#xa;cp=self.controlPoints(frame)&#xa;for k,p in enumerate(cp):&#xa;  if k==0:&#xa;    ret.append(Move(p[0],p[1]))&#xa;&#xa;  else:&#xa;    ret.append(Line(p[0],p[1]))&#xa;&#xa;&#xa;return ret&#xa;" id="uM9woTJCBtN6E"/>
    <sourcecode value="if not isinstance(path,Path):&#xa;  raise TypeError(&quot;path expected ot be a pictgui.Path; got %s instead&quot;%type(path).__name__)&#xa;&#xa;if len(path)!=4:&#xa;  raise ValueError(&quot;path expected to have four elements; got %d instead&quot;%len(path))&#xa;&#xa;control_state=path.currentState&#xa;if control_state is None or len(control_state)==0:&#xa;  raise ValueError(&quot;path argument has undefined state&quot;)&#xa;&#xa;if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return&#xa;&#xa;state.x=control_state[0].x&#xa;state.y=control_state[0].y&#xa;state.w=(control_state[2].x-state.x)*2&#xa;state.h=(control_state[2].y-state.y)*2&#xa;if state.w>state.h:&#xa;  major_axis=state.w&#xa;  minor_axis=state.h&#xa;&#xa;else:&#xa;  major_axis=state.h&#xa;  minor_axis=state.w&#xa;&#xa;state.s=np.arctan(control_state[1].y*major_axis/(control_state[1].x*minor_axis))*180/np.pi&#xa;state.l=np.arctan(control_state[3].y*major_axis/(control_state[3].x*minor_axis))*180/np.pi&#xa;self.updateFrontends()&#xa;" id="u1fFZD7yZuJWZ"/>
    <sourcecode value="super().__init__(*args,name=name,frameindex=frameindex,currentframe=currentframe,&#xa;graphicstype=GraphicsObjectType.arcmove,closed=closed,linked_objects=linked_objects)" id="uLlTR9PPC9ppx"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return tuple()&#xa;&#xa;if state.w>state.h:&#xa;  major_axis=state.w&#xa;  minor_axis=state.h&#xa;&#xa;else:&#xa;  major_axis=state.h&#xa;  minor_axis=state.w&#xa;&#xa;start_angle=state.a*np.pi/180&#xa;cp0=(state.x,state.y)&#xa;cp1=(major_axis*np.cos(start_angle),minor_axis*np.sin(start_angle))&#xa;cp2=(state.x+w/2,state.y+h/2)&#xa;return(cp0,cp1,cp2)&#xa;" id="ujBmLp5Xu91Yj"/>
    <sourcecode value="ret=Path()&#xa;cp=self.controlPoints(frame)&#xa;for k,p in enumerate(cp):&#xa;  if k==0:&#xa;    ret.append(Move(p[0],p[1]))&#xa;&#xa;  else:&#xa;    ret.append(Line(p[0],p[1]))&#xa;&#xa;&#xa;return ret&#xa;" id="u4oZjagTt2IZw"/>
    <sourcecode value="if not isinstance(path,Path):&#xa;  raise TypeError(&quot;path expected ot be a pictgui.Path; got %s instead&quot;%type(path).__name__)&#xa;&#xa;if len(path)!=3:&#xa;  raise ValueError(&quot;path expected to have four elements; got %d instead&quot;%len(path))&#xa;&#xa;control_state=path.currentState&#xa;if control_state is None or len(control_state)==0:&#xa;  raise ValueError(&quot;path argument has undefined state&quot;)&#xa;&#xa;if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return&#xa;&#xa;state.x=control_state[0].x&#xa;state.y=control_state[0].y&#xa;state.w=(control_state[2].x-state.x)*2&#xa;state.h=(control_state[2].y-state.y)*2&#xa;if state.w>state.h:&#xa;  major_axis=state.w&#xa;  minor_axis=state.h&#xa;&#xa;else:&#xa;  major_axis=state.h&#xa;  minor_axis=state.w&#xa;&#xa;state.a=np.arctan(control_state[1].y*major_axis/(control_state[1].x*minor_axis))*180/np.pi&#xa;self.updateFrontends()&#xa;" id="uoIcogbHE6T96"/>
    <sourcecode value="super().__init__(*args,name=name,frameindex=frameindex,currentframe=currentframe,&#xa;graphicstype=GraphicsObjectType.ellipse,closed=closed,linked_objects=linked_objects)" id="uTwVpe0YRXuEf"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return tuple()&#xa;&#xa;return((state.x,state.y),(state.x+state.w,state.y+state.h))&#xa;" id="uQH0kdO21W0ZN"/>
    <sourcecode value="ret=Path()&#xa;cp=self.controlPoints(frame)&#xa;for k,p in enumerate(cp):&#xa;  if k==0:&#xa;    ret.append(Move(p[0],p[1]))&#xa;&#xa;  else:&#xa;    ret.append(Line(p[0],p[1]))&#xa;&#xa;&#xa;return ret&#xa;" id="ujnPZOst9Lh8m"/>
    <sourcecode value="if not isinstance(path,Path):&#xa;  raise TypeError(&quot;path expected ot be a pictgui.Path; got %s instead&quot;%type(path).__name__)&#xa;&#xa;if len(path)!=2:&#xa;  raise ValueError(&quot;path expected to have four elements; got %d instead&quot;%len(path))&#xa;&#xa;control_state=path.currentState&#xa;if control_state is None or len(control_state)==0:&#xa;  raise ValueError(&quot;path argument has undefined state&quot;)&#xa;&#xa;if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return&#xa;&#xa;state.x=path[0].x&#xa;state.y=path[0].y&#xa;state.w=path[1].x-state.x&#xa;state.h=path[1].y-state.y&#xa;self.updateFrontends()&#xa;" id="uCErhr50Qvnvp"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return list()&#xa;&#xa;return[QtCore.QPointF(state.x,state.y),&#xa;QtCore.QPointF(state.x+state.w,state.y),QtCore.QPointF(state.x+state.w,state.y+state.h),QtCore.QPointF(state.x,state.y+state.h)]" id="uLUR16hTynZ8e"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  if not isinstance(frame,int):&#xa;    raise TypeError(&quot;frame expected to be an int or None; got %s instead&quot;%frame)&#xa;&#xa;  if frame in self.frameIndices:&#xa;    state=self.getState(frame)&#xa;&#xa;  else:&#xa;    warnings.warn(&quot;No state is associated with specified frame (%d)&quot;%frame)&#xa;    return&#xa;&#xa;&#xa;if state is None or len(state)==0:&#xa;  warnings.warn(&quot;undefined state&quot;)&#xa;  return&#xa;&#xa;return QtWidgets.QGraphicsEllipseItem(QtCore.QRectF(state.x,state.y,&#xa;state.w,state.h))" id="u0qQXcHUQisFB"/>
    <sourcecode value="super().__init__(*args,name=name,frameindex=frameindex,currentframe=currentframe,&#xa;graphicstype=GraphicsObjectType.rectangle,closed=closed,linked_objects=linked_objects)" id="uRNvGWUyXt3qm"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return tuple()&#xa;&#xa;return((state.x,state.y),(state.x+state.w,state.y+state.h))&#xa;" id="ucDuKOwlyoJHV"/>
    <sourcecode value="ret=Path()&#xa;cp=self.controlPoints(frame)&#xa;for k,p in enumerate(cp):&#xa;  if k==0:&#xa;    ret.append(Move(p[0],p[1]))&#xa;&#xa;  else:&#xa;    ret.append(Line(p[0],p[1]))&#xa;&#xa;&#xa;return ret&#xa;" id="uzFqelaCSpZEl"/>
    <sourcecode value="if not isinstance(path,Path):&#xa;  raise TypeError(&quot;path expected ot be a pictgui.Path; got %s instead&quot;%type(path).__name__)&#xa;&#xa;if len(path)!=2:&#xa;  raise ValueError(&quot;path expected to have four elements; got %d instead&quot;%len(path))&#xa;&#xa;control_state=path.currentState&#xa;if control_state is None or len(control_state)==0:&#xa;  raise ValueError(&quot;path argument has undefined state&quot;)&#xa;&#xa;if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return&#xa;&#xa;state.x=path[0].x&#xa;state.y=path[0].y&#xa;state.w=path[1].x-state.x&#xa;state.h=path[1].y-state.y&#xa;self.updateFrontends()&#xa;" id="uAmr2KeDRSE1b"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  warnings.warn(&quot;Rectangle: undefined state&quot;)&#xa;  return list()&#xa;&#xa;return[QtCore.QPointF(state.x,state.y),&#xa;QtCore.QPointF(state.x+state.w,state.y),QtCore.QPointF(state.x+state.w,state.y+state.h),QtCore.QPointF(state.x,state.y+state.h)]" id="uil3oixY0Q9gd"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  if not isinstance(frame,int):&#xa;    raise TypeError(&quot;frame expected to be an int or None; got %s instead&quot;%frame)&#xa;&#xa;  if frame in self.frameIndices:&#xa;    state=self.getState(frame)&#xa;&#xa;  else:&#xa;    warnings.warn(&quot;No state is associated with specified frame (%d)&quot;%frame)&#xa;    return&#xa;&#xa;&#xa;if state is None or len(state)==0:&#xa;  warnings.warn(&quot;undefined state&quot;)&#xa;  return&#xa;&#xa;return QtWidgets.QGraphicsRectItem(QtCore.QRectF(state.x,state.y,&#xa;state.w,state.h))" id="uf9xHPLlh8qtJ"/>
    <sourcecode value="ret=Path()&#xa;if frame is None:&#xa;  state=self.currentState&#xa;&#xa;elif isinstance(frame,int):&#xa;  state=self.getState(frame)&#xa;&#xa;else:&#xa;  raise TypeError(&quot;'frame' parameter expected to be an int or None; got %s instead&quot;%type(frame).__name__)&#xa;&#xa;if state is not None and len(state):&#xa;  ret.append(Move(state.x,state.y))&#xa;  ret.append(Line(state.x+state.w,state.y))&#xa;  ret.append(Line(state.x+state.w,state.y+state.h))&#xa;  ret.append(Line(state.x,state.y+state.h))&#xa;  if closed:&#xa;    ret.append(Line(state.x,state.y))&#xa;&#xa;&#xa;return ret&#xa;" id="uRjabANSHqaDR"/>
    <sourcecode value="frame_ndx=self.frameIndices()&#xa;ret=self.asPath(frame=frame_ndx[0],closed=True)&#xa;for f in frame_ndx[1:]:&#xa;  frame_path=self.asPath(frame=f,closed=True)&#xa;  ret.addState(frame_path.currentState,f)&#xa;&#xa;ret.currentFrame=self.currentFrame&#xa;return ret&#xa;" id="uKFlFuzUqAxCK"/>
    <sourcecode value="frame_ndx=self.frameIndices()&#xa;ret=self.asCanonicalPath(frame=frame_ndx[0],closed=True)&#xa;for f in frame_ndx[1:]:&#xa;  frame_path=self.asCanonicalPath(frame=f,closed=True)&#xa;  ret.addState(frame_path.currentState,f)&#xa;&#xa;ret.currentFrame=self.currentFrame&#xa;" id="uQAtgDXmSMLrA"/>
    <sourcecode value="super().__init__(*args,name=name,frameindex=frameindex,&#xa;currentframe=currentframe,graphicstype=graphicstype,closed=closed,linked_objects=linked_objects)if len(linked_objects):&#xa;  self._linked_objects_.update(linked_objects)&#xa;&#xa;" id="uqg35do72x7ra"/>
    <sourcecode value="x=int(self.x)&#xa;if x&lt;0:&#xa;  return&#xa;&#xa;cPath=path.asPath()&#xa;if all([isinstance(e,(Move,Line))for e in cPath]):&#xa;  if len(cPath)==2:&#xa;    dx=cPath[1].x-cPath[0].x&#xa;    dy=cPath[1].y-cPath[0].y&#xa;    l=math.sqrt(dx**2+dy**2)&#xa;    nx=self.x/l&#xa;    p.x=dx*nx+cPath[0].x&#xa;    p.y=dy*nx+cPath[0].y&#xa;&#xa;  elif len(cPath)>2:&#xa;    if len(cPath)==int(v.width):&#xa;      if x>=0 and x&lt;len(cPath):&#xa;        p.x=cPath[x].x&#xa;        p.y=cPath[x].y&#xa;&#xa;&#xa;&#xa;&#xa;" id="uB2XZ5rN43K1w"/>
    <sourcecode value="super(Cursor,self).__init__(parent=parent)&#xa;if not isinstance(parent,(SignalViewer,pg.PlotItem)):&#xa;  raise TypeError(&quot;parent object of a Cursor can only be a pyqtgraph PlotItem or a SignalViewer; got %s instead&quot;%type(parent).__name__)&#xa;&#xa;self._parent_plot_window_=None&#xa;self._host_graphics_item_=None&#xa;if not isinstance(plot_item,(pg.PlotItem,pg.GraphicsScene)):&#xa;  raise TypeError(&quot;plot_item expected to be a pyqtgraph.PlotItem object or a pyqtgraph.GraphicsScene object got %s instead&quot;%type(plot_items).__name__)&#xa;&#xa;self._host_graphics_item_=plot_item&#xa;if isinstance(parent,SignalViewer):&#xa;  self._parent_plot_window_=parent&#xa;&#xa;elif isinstance(parent,(pg.PlotItem,pg.GraphicsScene))and self._host_graphics_item_ is None:&#xa;  self._host_graphics_item_=parent&#xa;&#xa;self._cursorId_=None&#xa;self._follows_mouse_=False&#xa;self._is_selected_=False&#xa;self._hl_=None&#xa;self._vl_=None&#xa;self._x_=None&#xa;self._y_=None&#xa;self._hWin_=None&#xa;self._vWin_=None&#xa;self._cursor_type_=None&#xa;self._default_pen_=None&#xa;if isinstance(pen,QtGui.QPen):&#xa;  self._pen_=pen&#xa;&#xa;else:&#xa;  self._pen_=None&#xa;&#xa;if isinstance(hoverPen,QtGui.QPen):&#xa;  self._hoverPen_=hoverPen&#xa;&#xa;else:&#xa;  self._hoverPen_=None&#xa;&#xa;if isinstance(linkedPen,QtGui.QPen):&#xa;  self._linkedPen_=linkedPen&#xa;&#xa;else:&#xa;  self._linkedPen_=None&#xa;&#xa;self._x_range_=None&#xa;self._y_range_=None&#xa;if self._pen_ is None:&#xa;  self._pen_=kwargs.pop(&quot;pen&quot;,None)&#xa;&#xa;if self._linkedPen_ is None:&#xa;  self._linkedPen_=kwargs.pop(&quot;linkedPen&quot;,None)&#xa;&#xa;if self._hoverPen_ is None:&#xa;  self._hoverPen_=kwargs.pop(&quot;hoverPen&quot;,None)&#xa;&#xa;self._signal_proxy_=None&#xa;self._linked_cursors_=list()&#xa;self._linked_=False&#xa;self._dragging_=False&#xa;self._current_plot_item_=None&#xa;self._setup_cursor_(plot_item,x=x,y=y,hWin=hWin,vWin=vWin,&#xa;cursor_type=cursor_type,cursorID=cursorID,follower=follower,xBounds=xBounds,yBounds=yBounds,**kwargs)" id="uB6zOfdwERHRs"/>
    <sourcecode value="name=kwargs.get(&quot;name&quot;,self._cursor_type_)&#xa;kwargs.pop(&quot;name&quot;,None)&#xa;if self._follows_mouse_:&#xa;  pos=QtCore.QPointF()&#xa;  self._x_=pos.x()&#xa;  self._y_=pos.y()&#xa;&#xa;else:&#xa;  pos=QtCore.QPointF(self._x_,self._y_)&#xa;&#xa;scene=self.hostScene&#xa;if h:&#xa;  if not isinstance(self._hl_,pg.InfiniteLine):&#xa;    self._hl_=pg.InfiniteLine(pos=pos,&#xa;    angle=0,movable=not self._follows_mouse_,name=&quot;%s_h&quot;%name,label=self._cursorId_,pen=self._pen_,hoverPen=self._hoverPen_)if not self._follows_mouse_:&#xa;      if self._cursor_type_==&quot;horizontal&quot;:&#xa;        self._hl_.sigDragged.connect(self.slot_positionChanged)&#xa;        self._hl_.sigPositionChanged.connect(self.slot_positionChanged)&#xa;        self._hl_.sigPositionChangeFinished.connect(self.slot_positionChanged)&#xa;&#xa;&#xa;&#xa;  if isinstance(self._pen_,QtGui.QPen):&#xa;    self._hl_.setPen(self._pen_)&#xa;&#xa;  elif isinstance(self._default_pen_,QtGui.QPen):&#xa;    self._pen_=self._default_pen_&#xa;    self._hl_.setPen(self._pen_)&#xa;&#xa;  else:&#xa;    self._default_pen_=self._hl_.pen&#xa;    self._pen_=self._hl_.pen&#xa;&#xa;  if isinstance(self._hoverPen_,QtGui.QPen):&#xa;    self._hl_.setHoverPen(self._hoverPen_)&#xa;&#xa;  else:&#xa;    self._hoverPen_=self._hl_.hoverPen&#xa;&#xa;  self._hl_.setBounds(self._y_range_)&#xa;&#xa;else:&#xa;  self._hl_=None&#xa;&#xa;if v:&#xa;  if not isinstance(self._vl_,pg.InfiniteLine):&#xa;    self._vl_=pg.InfiniteLine(pos=pos,&#xa;    angle=90,movable=not self._follows_mouse_,name=&quot;%s_v&quot;%name,label=self._cursorId_,pen=self._pen_,hoverPen=self._hoverPen_)if not self._follows_mouse_:&#xa;    if self._cursor_type_==&quot;vertical&quot;:&#xa;      self._vl_.sigDragged.connect(self.slot_positionChanged)&#xa;      self._vl_.sigPositionChanged.connect(self.slot_positionChanged)&#xa;      self._vl_.sigPositionChangeFinished.connect(self.slot_positionChanged)&#xa;&#xa;&#xa;  if isinstance(self._pen_,QtGui.QPen):&#xa;    self._vl_.setPen(self._pen_)&#xa;&#xa;  elif isinstance(self._default_pen_,QtGui.QPen):&#xa;    self._pen_=self._default_pen_&#xa;    self._vl_.setPen(self._pen_)&#xa;&#xa;  else:&#xa;    self._default_pen_=self._vl_.pen&#xa;    self._pen_=self._vl_.pen&#xa;&#xa;  if isinstance(self._hoverPen_,QtGui.QPen):&#xa;    self._vl_.setHoverPen(self._hoverPen_)&#xa;&#xa;  else:&#xa;    self._hoverPen_=self._vl_.hoverPen&#xa;&#xa;  self._vl_.setBounds(self._x_range_)&#xa;&#xa;else:&#xa;  self._vl_=None&#xa;&#xa;if not isinstance(self._linkedPen_,QtGui.QPen):&#xa;  self._linkedPen_=self._default_pen_&#xa;&#xa;if not self._follows_mouse_:&#xa;  scene.sigMouseMoved.connect(self._slot_mouse_event_)&#xa;&#xa;" id="uTN9xRuaQlieK"/>
    <sourcecode value="plotDataItems=[i for i in item.listDataItems()if isinstance(i,pg.PlotDataItem)]&#xa;mfun=lambda x:-np.inf if x is None else x&#xa;pfun=lambda x:np.inf if x is None else x&#xa;xmin=min(map(mfun,[p.dataBounds(0)[0]for p in plotDataItems]))&#xa;xmax=max(map(pfun,[p.dataBounds(0)[1]for p in plotDataItems]))&#xa;ymin=min(map(mfun,[p.dataBounds(1)[0]for p in plotDataItems]))&#xa;ymax=max(map(pfun,[p.dataBounds(1)[1]for p in plotDataItems]))&#xa;return[[xmin,xmax],[ymin,ymax]]&#xa;" id="uGFiRYsojVY5J"/>
    <sourcecode value="if isinstance(host,pg.PlotItem):&#xa;  return self._get_plotitem_data_bounds_(host)&#xa;&#xa;elif isinstance(host,pg.GraphicsScene):&#xa;  pIs=[i for i in host.items()if isinstance(i,pg.PlotItem)]&#xa;  if len(pIs):&#xa;    min_x=np.min([p.vb.boundingRect().x()for p in pIs])&#xa;    max_x=np.max([p.vb.boundingRect().x()+p.sceneBoundingRect().width()for p in pIs])&#xa;    min_y=np.min([p.vb.boundingRect().y()for p in pIs])&#xa;    max_y=np.max([p.vb.boundingRect().y()+p.sceneBoundingRect().height()for p in pIs])&#xa;    min_point=QtCore.QPointF(min_x,min_y)&#xa;    max_point=QtCore.QPointF(max_x,max_y)&#xa;&#xa;  else:&#xa;    min_point=QtCore.QPointF(host.sceneRect().x(),host.sceneRect().y())&#xa;    max_point=QtCore.QPointF(host.sceneRect().x()+host.sceneRect().width(),&#xa;    host.sceneRect().y()+host.sceneRect().height())&#xa;  return[[min_point.x(),max_point.x()],[min_point.y(),max_point.y()]]&#xa;&#xa;else:&#xa;  raise TypeError(&quot;expecting a pyqtgraph.PlotItem or a pyqtgraph.GraphicsScene; got %s instead&quot;%type(host).__name__)&#xa;&#xa;" id="uCN9KegwP8jmM"/>
    <sourcecode value="if isinstance(self._host_graphics_item_,pg.PlotItem):&#xa;  self._hl_.setPos(val)&#xa;  self._y_=self._hl_.getYPos()&#xa;&#xa;else:&#xa;  if plotitem is None:&#xa;    plotitem=self._current_plot_item_&#xa;&#xa;  if self._current_plot_item_ is None:&#xa;    raise RuntimeError(&quot;Cannot determine the current plot item; consider calling self.setY(value, plotItem)&quot;)&#xa;&#xa;  new_Y=plotItem.vb.mapViewToScene(QtCore.QPointF(0.0,val)).y()&#xa;  if self._hl_ is not None:&#xa;    self._hl_.setYPos(new_Y)&#xa;    self._y_=self._hl_.getYPos()&#xa;&#xa;&#xa;" id="untdgLYFM5GnL"/>
    <sourcecode value="if isinstance(self._host_graphics_item_,pg.PlotItem):&#xa;  self._vl_.setPos(val)&#xa;  self._x_=self._vl_.getXPos()&#xa;&#xa;else:&#xa;  if plotitem is None:&#xa;    plotitem=self._current_plot_item_&#xa;&#xa;  if self._current_plot_item_ is None:&#xa;    raise RuntimeError(&quot;Cannot determine the current plot item; consider calling self.setX(value, plotItem&quot;)&#xa;&#xa;  new_X=plotItem.vb.mapViewToScene(QtCore.QPointF(val,0.0)).x()&#xa;  if self._vl_ is not None:&#xa;    self._vl_.setXPos(new_X)&#xa;    self._x_=self._vl_.getXPos()&#xa;&#xa;&#xa;" id="uQJtE4Ao0lasu"/>
    <sourcecode value="if self._cursor_type_==&quot;crosshair&quot;:&#xa;  pos=QtCore.QPointF(self._x_,self._y_)&#xa;&#xa;elif self._cursor_type_==&quot;horizontal&quot;:&#xa;  pos=QtCore.QPointF(0.0,self._y_)&#xa;&#xa;else:&#xa;  pos=QtCore.QPointF(self._x_,0.0)&#xa;&#xa;if self._hl_ is not None:&#xa;  if isinstance(self._host_graphics_item_,pg.PlotItem):&#xa;    self._host_graphics_item_.addItem(self._hl_,ignoreBounds=True)&#xa;&#xa;  else:&#xa;    self._host_graphics_item_.addItem(self._hl_)&#xa;&#xa;&#xa;if self._vl_ is not None:&#xa;  if isinstance(self._host_graphics_item_,pg.PlotItem):&#xa;    self._host_graphics_item_.addItem(self._vl_,ignoreBounds=True)&#xa;&#xa;  else:&#xa;    self._host_graphics_item_.addItem(self._vl_)&#xa;&#xa;&#xa;if self._follows_mouse_:&#xa;  if isinstance(self._host_graphics_item_,pg.PlotItem):&#xa;    sig=self._host_graphics_item_.scene().sigMouseMoved&#xa;&#xa;  else:&#xa;    sig=self._host_graphics_item_.sigMouseMoved&#xa;&#xa;  self._signal_proxy_=pg.SignalProxy(sig,rateLimit=60,slot=self._slot_mouse_moved_)&#xa;&#xa;else:&#xa;  if self._hl_ is not None:&#xa;    self._hl_.setPos(pos.y())&#xa;&#xa;  if self._vl_ is not None:&#xa;    self._vl_.setPos(pos.x())&#xa;&#xa;&#xa;" id="uZ5yv9kd5s6kP"/>
    <sourcecode value="self.sig_cursorSelected.emit(self._cursorId_)&#xa;if self._hl_ is not None:&#xa;  self._y_=self._hl_.getYPos()&#xa;&#xa;if self._vl_ is not None:&#xa;  self._x_=self._vl_.getXPos()&#xa;&#xa;if self._cursor_type_!=&quot;crosshair&quot;:&#xa;  self.sig_reportPosition.emit(self.ID)&#xa;&#xa;" id="ux5MwKIFumITu"/>
    <sourcecode value="signalBlockers=[QtCore.QSignalBlocker(c)for c in self._linked_cursors_]&#xa;self.x=pos[0]&#xa;self.y=pos[1]&#xa;" id="ugek45GCX2jzQ"/>
    <sourcecode value="if not self._follows_mouse_:&#xa;  self._is_selected_=True&#xa;  self.sig_cursorSelected.emit(self.ID)&#xa;&#xa;" id="u34BGCwcTPOfZ"/>
    <sourcecode value="if not self._follows_mouse_:&#xa;  if not isinstance(val,bool):&#xa;    self._is_selected_=False&#xa;&#xa;  else:&#xa;    self._is_selected_=val&#xa;&#xa;&#xa;" id="uMYnRju7OdyAy"/>
    <sourcecode value="if host is None:&#xa;  host=self._host_graphics_item_&#xa;&#xa;hostBounds=self._get_host_boundaries_(host)&#xa;if isinstance(xBounds,(tuple,list))and len(xBounds)==2 and all([isinstance(v,numbers.Number)for v in xBounds]):&#xa;  self._x_range_=xBounds&#xa;&#xa;else:&#xa;  self._x_range_=hostBounds[0]&#xa;&#xa;if self._vl_ is not None:&#xa;  self._vl_.setBounds(self._x_range_)&#xa;&#xa;if isinstance(yBounds,(tuple,list))and len(yBounds)==2 and all([isinstance(v,numbers.Number)for v in yBounds]):&#xa;  self._y_range_=yBounds&#xa;&#xa;else:&#xa;  self._y_range_=hostBounds[1]&#xa;&#xa;if self._hl_ is not None:&#xa;  self._hl_.setBounds(self._y_range_)&#xa;&#xa;" id="uI7hrYvFxqqpx"/>
    <sourcecode value="for c in other:&#xa;  if self.cursorType!=c.cursorType:&#xa;    print('Can link only to SignalCursor instance of the same type')&#xa;    return False&#xa;&#xa;  if c not in self._linked_cursors_:&#xa;    self._linked_cursors_.append(c)&#xa;    self.sig_axisPositionChanged[tuple].connect(c.slot_linkedPositionChanged)&#xa;&#xa;  if self not in c._linked_cursors_:&#xa;    c._linked_cursors_.append(self)&#xa;    s.sig_axisPositionChanged[tuple].connect(self.slot_linkedPositionChanged)&#xa;&#xa;  for cc in other:&#xa;    if cc is not c and c not in cc._linked_cursors_:&#xa;      cc._linked_cursors_.append(c)&#xa;      cc.sig_axisPositionChanged[tuple].connect(c.slot_linkedPositionChanged)&#xa;&#xa;    if len(cc._linked_cursors_)>0:&#xa;      cc.pen=self.linkedPen&#xa;&#xa;&#xa;  if len(c._linked_cursors_)>0:&#xa;    c.pen=c.linkedPen&#xa;&#xa;&#xa;if len(self._linked_cursors_)>0:&#xa;  self._linked_=True&#xa;&#xa;" id="uAl9noNFJzUE1"/>
    <sourcecode value="ret=False&#xa;if len(other)>0:&#xa;  for c in other:&#xa;    if self.cursorType!=c.cursorType:&#xa;      print('Can link only to SignalCursor instance of the same type')&#xa;      return ret&#xa;&#xa;    if self in c._linked_cursors_:&#xa;      c._linked_cursors_.remove(self)&#xa;      c.sig_axisPositionChanged[tuple].disconnect(self.slot_linkedPositionChanged)&#xa;      ret=True&#xa;&#xa;    if c in self._linked_cursors_:&#xa;      self._linked_cursors_.remove(c)&#xa;      self.sig_axisPositionChanged[tuple].disconnect(c.slot_linkedPositionChanged)&#xa;      ret=True&#xa;&#xa;    if len(c._linked_cursors_)==0:&#xa;      c.pen=c._default_pen_&#xa;      c._linked_=False&#xa;&#xa;&#xa;  if len(self._linkedCursors)==0:&#xa;    self.pen=self._default_pen_&#xa;    self._linked_=False&#xa;&#xa;  ret=len(self._linkedCursors)==0&#xa;&#xa;else:&#xa;  if len(self._linked_cursors_)>0:&#xa;    for c in self._linked_cursors_:&#xa;      if self in c._linked_cursors_:&#xa;        c._linked_cursors_.remove(self)&#xa;        c.sig_axisPositionChanged[tuple].disconnect(self.slot_linkedPositionChanged)&#xa;&#xa;      if len(c._linked_cursors_)==0:&#xa;        c.pen=c._default_pen_&#xa;        c._linked_=False&#xa;&#xa;&#xa;    self._linked_cursors_.clear()&#xa;    self.pen=self._default_pen_&#xa;    self._linked_=False&#xa;&#xa;  ret=True&#xa;&#xa;return ret&#xa;" id="u9BB1MumKHTMd"/>
    <sourcecode value="if self._hl_ is not None:&#xa;  self._host_graphics_item_.removeItem(self._hl_)&#xa;&#xa;if self._vl_ is not None:&#xa;  self._host_graphics_item_.removeItem(self._vl_)&#xa;&#xa;if isinstance(self._signal_proxy_,pg.SignalProxy):&#xa;  self._signal_proxy_.disconnect()&#xa;  self._signal_proxy_=None&#xa;&#xa;" id="uPhfSoncZ9PA0"/>
    <sourcecode value="self.setBounds(host,xBounds=xBounds,yBounds=yBounds)&#xa;if pos is None:&#xa;  if self._x_ is None:&#xa;    self._x_=0.0&#xa;&#xa;  if self._y_ is None:&#xa;    self._y_=0.0&#xa;&#xa;&#xa;elif isinstance(pos,(QtCore.QPoint,QtCore.QPointF)):&#xa;  self._x_=float(val.x())&#xa;  self._y_=float(val.y())&#xa;&#xa;elif isinstance(pos,(tuple,list))and len(val)==2 and all([isinstance(v,(number.Number,type(None)))for v in val]):&#xa;  self._x_=val[0]&#xa;  self._y_=val[1]&#xa;&#xa;else:&#xa;  raise TypeError(&quot;pos expected to be a QtCore.QPoint or QPointF or a pair of numbers or None&quot;)&#xa;&#xa;ctype_ndx=[v for v in Cursor._cursorTypes_.values()].index(self._cursor_type_)&#xa;keys=[k for k in Cursor._cursorTypes_.keys()]&#xa;show_lines=keys[ctype_ndx]&#xa;self._host_graphics_item_=host&#xa;self._setup_lines_(*show_lines)&#xa;self._add_lines_to_host_()&#xa;" id="uYJDFEjwLlOUH"/>
    <sourcecode value="show_lines=(False,False)&#xa;if isinstance(cursor_type,(tuple,list))and len(cursor_type)==2 and all([isinstance(c,bool)for c in cursor_type]):&#xa;  show_lines=cursor_type&#xa;  self._cursor_type_=_cursorTypes_[cursor_type]&#xa;&#xa;elif isinstance(cursor_type,str)and cursor_type in(&quot;crosshair&quot;,&quot;horizontal&quot;,&quot;vertical&quot;):&#xa;  self._cursor_type_=cursor_type&#xa;  show_lines=Cursor._cursorTypes_[cursor_type]&#xa;&#xa;else:&#xa;  return&#xa;&#xa;self.setBounds(host,xBounds=xBounds,yBounds=yBounds)&#xa;if isinstance(x,numbers.Number):&#xa;  self._x_=x&#xa;&#xa;elif isinstance(x,pq.Quantity):&#xa;  self._x_=x.magnitude.flatten()[0]&#xa;&#xa;elif x is None:&#xa;  self._x_=self._x_range_[0]+np.diff(self._x_range_)/2&#xa;&#xa;else:&#xa;  raise TypeError(&quot;x expected to be a number, python Quantity or None; got %s instead&quot;%type(x).__name__)&#xa;&#xa;if isinstance(y,numbers.Number):&#xa;  self._y_=y&#xa;&#xa;elif isinstance(y,pq.Quantity):&#xa;  self._y_=y.magnitude.flatten()[0]&#xa;&#xa;elif y is None:&#xa;  self._y_=self._y_range_[0]+np.diff(self._y_range_)/2&#xa;&#xa;else:&#xa;  raise TypeError(&quot;y expected to be a number, python Quantity or None; got %s instead&quot;%type(y).__name__)&#xa;&#xa;if isinstance(hWin,numbers.Number):&#xa;  self._hWin_=hWin&#xa;&#xa;elif isinstance(hWin,pq.Quantity):&#xa;  self._hWin_=hWin.magnitude.flatten()[0]&#xa;&#xa;elif hWin is None:&#xa;  self._hWin_=0.0&#xa;&#xa;else:&#xa;  raise TypeError(&quot;hWin expected to be a number, python Quantity or None; got %s instead&quot;%type(hWin).__name__)&#xa;&#xa;if isinstance(vWin,numbers.Number):&#xa;  self._vWin_=vWin&#xa;&#xa;elif isinstance(vWin,pq.Quantity):&#xa;  self._vWin_=vWin.magnitude.flatten()[0]&#xa;&#xa;elif vWin is None:&#xa;  self._vWin_=0.0&#xa;&#xa;else:&#xa;  raise TypeError(&quot;vWin expected to be a number, python Quantity or None; got %s instead&quot;%type(vWin).__name__)&#xa;&#xa;if follower:&#xa;  if cursorID is None:&#xa;    cursorID=&quot;d&quot;&#xa;&#xa;  elif isinstance(cursorID,str)and len(cursorID.strip())==0:&#xa;    cursorID=&quot;d&quot;&#xa;&#xa;&#xa;else:&#xa;  if cursor_type==&quot;crosshair&quot;:&#xa;    if cursorID is None:&#xa;      cursorID=&quot;c&quot;&#xa;&#xa;    elif isinstance(cursorID,str)and len(cursorID.strip())==0:&#xa;      cursorID=&quot;c&quot;&#xa;&#xa;&#xa;  elif cursor_type==&quot;horizontal&quot;:&#xa;    if cursorID is None:&#xa;      cursorID=&quot;h&quot;&#xa;&#xa;    elif isinstance(cursorID,str)and len(cursorID.strip())==0:&#xa;      cursorID=&quot;h&quot;&#xa;&#xa;&#xa;  elif cursor_type==&quot;vertical&quot;:&#xa;    if cursorID is None:&#xa;      cursorID=&quot;v&quot;&#xa;&#xa;    elif isinstance(cursorID,str)and len(cursorID.strip())==0:&#xa;      cursorID=&quot;v&quot;&#xa;&#xa;&#xa;&#xa;self._cursorId_=cursorID&#xa;self._follows_mouse_=follower&#xa;if isinstance(host,pg.GraphicsScene):&#xa;  kwargs[&quot;movable&quot;]=not self._follows_mouse_&#xa;&#xa;else:&#xa;  kwargs[&quot;movable&quot;]=False&#xa;&#xa;if&quot;name&quot;not in kwargs.keys():&#xa;  kwargs[&quot;name&quot;]=self._cursor_type_&#xa;&#xa;self._setup_lines_(*show_lines,**kwargs)&#xa;self._add_lines_to_host_()&#xa;" id="uifGD7zLiDcZO"/>
    <sourcecode value="if scene is None or not isinstance(scene,pg.GraphicsScene):&#xa;  scene=self.hostScene&#xa;&#xa;if scene is None:&#xa;  return&#xa;&#xa;self._dragging_=False&#xa;if scene.dragItem is not None:&#xa;  if all([l is not None for l in(self._vl_,self._hl_)]):&#xa;    if scene.dragItem in(self._vl_,self._hl_):&#xa;      self._dragging_=True&#xa;&#xa;&#xa;&#xa;" id="uDx7P8BW1vqFi"/>
    <sourcecode value="scene=self.hostScene&#xa;items=scene.items(evt.pos())&#xa;if(self.vline is not None and self.vline in items)or\&#xa;(self.hline is not None and self.hline in items):&#xa;  self.sig_cursorSelected.emit(self.ID)&#xa;&#xa;" id="uIXcoyMCAl8s1"/>
    <sourcecode value="scene=self.hostScene&#xa;self._interpret_scene_mouse_events_(scene)&#xa;if self._dragging_ and self._cursor_type_==&quot;crosshair&quot;:&#xa;  self.sig_cursorSelected.emit(self._cursorId_)&#xa;  if isinstance(evt,(tuple,list)):&#xa;    pos=evt[0]&#xa;&#xa;  else:&#xa;    pos=evt&#xa;&#xa;  if isinstance(pos,(QtCore.QPointF,QtCore.QPoint)):&#xa;    self._update_lines_from_pos_(pos)&#xa;&#xa;&#xa;else:&#xa;  if scene is not None and len(scene.clickEvents):&#xa;    if&quot;MouseClickEvent&quot;in str(scene.clickEvents[0]):&#xa;      items=scene.items(evt)&#xa;      if self.vline is not None and self.vline in items:&#xa;        self.sig_cursorSelected.emit(self.ID)&#xa;&#xa;      if self.hline is not None and self.hline in items:&#xa;        self.sig_cursorSelected.emit(self.ID)&#xa;&#xa;&#xa;&#xa;&#xa;" id="updJOcbzhDoKC"/>
    <sourcecode value="if not self._follows_mouse_:&#xa;  return&#xa;&#xa;if isinstance(evt,(tuple,list)):&#xa;  pos=evt[0]&#xa;&#xa;else:&#xa;  pos=evt&#xa;&#xa;self._update_lines_from_pos_(pos)&#xa;" id="uxYIZykQGzleF"/>
    <sourcecode value="if isinstance(self._host_graphics_item_,pg.PlotItem):&#xa;  self._current_plot_item_=self._host_graphics_item_&#xa;  if self._host_graphics_item_.sceneBoundingRect().contains(pos):&#xa;    mp=self._host_graphics_item_.vb.mapSceneToView(pos)&#xa;    di=[d for d in self._host_graphics_item_.items if isinstance(d,pg.PlotDataItem)]&#xa;    if len(di):&#xa;      d=di[0]&#xa;      if mp.x()>=d.xData[0]and mp.x()&lt;=d.xData[-1]:&#xa;        if self._hl_ is not None:&#xa;          self._hl_.setPos(mp.y())&#xa;          self._y_=mp.y()&#xa;&#xa;        if self._vl_ is not None:&#xa;          self._vl_.setPos(mp.x())&#xa;          self._x_=mp.x()&#xa;&#xa;&#xa;&#xa;    self.sig_reportPosition.emit(self.ID)&#xa;&#xa;&#xa;elif isinstance(self._host_graphics_item_,pg.GraphicsScene):&#xa;  if self._hl_ is not None:&#xa;    self._hl_.setPos(pos.y())&#xa;    self._y_=pos.y()&#xa;&#xa;  if self._vl_ is not None:&#xa;    self._vl_.setPos(pos.x())&#xa;    self._x_=pos.x()&#xa;&#xa;  self.sig_reportPosition.emit(self.ID)&#xa;&#xa;self.sig_axisPositionChanged.emit((self.x,self.y))&#xa;" id="uObdqjuopkRks"/>
    <sourcecode value="if isinstance(self._host_graphics_item_,pg.PlotItem):&#xa;  return self._host_graphics_item_.scene()&#xa;&#xa;else:&#xa;  return self._host_graphics_item_&#xa;&#xa;" id="uKI1nUt1GkrOB"/>
    <sourcecode value="plotitems=[i for i in self.hostScene.items()if isinstance(i,pg.PlotItem)]&#xa;pits=sorted(sorted(plotitems,key=lambda x:x.pos().y()),key=lambda x:x.pos().x())&#xa;return collections.OrderedDict([(p,(p.pos().x(),p.pos().y()))for p in pits])&#xa;" id="ueNmRnHKzFHKR"/>
    <sourcecode value="return self._host_graphics_item_&#xa;" id="uMQ6qjihx5hvj"/>
    <sourcecode value="return isinstance(self._host_graphics_item_,pg.PlotItem)&#xa;" id="uINBTIau5Znw7"/>
    <sourcecode value="return not self.isSingleAxis&#xa;" id="uTEFG1G4QWd9c"/>
    <sourcecode value="return self._vl_&#xa;" id="ujiElz9lsBUOu"/>
    <sourcecode value="return self._hl_&#xa;" id="ujWvDuHlM4Jvb"/>
    <sourcecode value="return QtCore.QPointF(self.x,self.y)&#xa;" id="updwJs9iIXpeN"/>
    <sourcecode value="if isinstance(val,(QtCore.QPoint,QtCore.QPointF)):&#xa;  self.x=float(val.x())&#xa;  self.y=float(val.y())&#xa;&#xa;elif isinstance(val,(tuple,list))and len(val)==2 and all([isinstance(v,(number.Number,type(None)))for v in val]):&#xa;  self.x=val[0]&#xa;  self.y=val[1]&#xa;&#xa;" id="ujn5ECFIX2Fuu"/>
    <sourcecode value="if self._hl_ is None and self._vl_ is None:&#xa;  return self._x_&#xa;&#xa;if self._vl_ is not None:&#xa;  line=self._vl_&#xa;&#xa;else:&#xa;  line=self._hl_&#xa;&#xa;if isinstance(self._host_graphics_item_,pg.PlotItem):&#xa;  self._current_plot_item_=self._host_graphics_item_&#xa;  return line.getXPos()&#xa;&#xa;else:&#xa;  pos=line.getPos()&#xa;  plots=[p for p in self.scenePlotItems]&#xa;  if len(plots):&#xa;    for plot in plots:&#xa;      vrange=plot.vb.viewRange()[0]&#xa;      plot_x=plot.vb.mapSceneToView(QtCore.QPointF(pos[0],pos[1])).x()&#xa;      if plot_x>=vrange[0]and plot_x&lt;=vrange[1]:&#xa;        self._current_plot_item_=plot&#xa;        return plot_x&#xa;&#xa;&#xa;&#xa;  else:&#xa;    return line.getXPos()&#xa;&#xa;&#xa;" id="uL2BtsvghWJGc"/>
    <sourcecode value="if isinstance(val,pq.Quantity):&#xa;  val=val.magnitude.flatten()[0]&#xa;&#xa;elif not isinstance(val,numbers.Number):&#xa;  raise TypeError(&quot;expected a numeric scalar value or a scalar python Quantity; got %s instead&quot;%type(val).__name__)&#xa;&#xa;if self._vl_ is not None:&#xa;  self._update_vline_position_(val)&#xa;&#xa;" id="uq4AhQcJuMTBT"/>
    <sourcecode value="if isinstance(self._host_graphics_item_,pg.PlotItem):&#xa;  return self.x&#xa;&#xa;else:&#xa;  if not isinstance(plotitem,pg.PlotItem):&#xa;    raise TypeError(&quot;For multi-axes cursors, a pg.PlotItem parameter was expected; got %s instead&quot;%type(plotitem).__name__)&#xa;&#xa;  vrange=plotitem.vb.viewRange()[0]&#xa;  if self._vl_ is not None:&#xa;    x=self._vl_.getXPos()&#xa;&#xa;  elif self._hl_ is not None:&#xa;    x=self._hl_.getXPos()&#xa;&#xa;  else:&#xa;    x=self._x_&#xa;&#xa;  return plotitem.vb.mapSceneToView(QtCore.QPointF(x,0.0)).x()&#xa;&#xa;" id="ubeOQEfIaz2wi"/>
    <sourcecode value="if isinstance(self.hostItem,pg.PlotItem):&#xa;  self.x=val&#xa;&#xa;else:&#xa;  if isinstance(val,pq.Quantity):&#xa;    val=val.magnitude.flatten()[0]&#xa;&#xa;  elif not isinstance(val,numbers.Number):&#xa;    raise TypeError(&quot;expected a numeric scalar value or a scalar python Quantity; got %s instead&quot;%type(val).__name__)&#xa;&#xa;  if not isinstance(plotItem,pg.PlotItem):&#xa;    raise TypeError(&quot;For multi-axis cursor please also specify a PlotItem&quot;)&#xa;&#xa;  if plotItem not in[p for p in self.scenePlotItems]:&#xa;    raise ValueError(&quot;Plot item %s not found in this cursor's scene&quot;%plotItem)&#xa;&#xa;  self._update_vline_position_(val,plotItem)&#xa;&#xa;" id="u1NWcYpuFnLnb"/>
    <sourcecode value="if self._hl_ is None and self._vl_ is None:&#xa;  return self._y_&#xa;&#xa;if self._hl_ is not None:&#xa;  line=self._hl_&#xa;&#xa;else:&#xa;  line=self._vl_&#xa;&#xa;if isinstance(self._host_graphics_item_,pg.PlotItem):&#xa;  self._current_plot_item_=self._host_graphics_item_&#xa;  return line.getYPos()&#xa;&#xa;else:&#xa;  pos=line.getPos()&#xa;  plots=[p for p in self.scenePlotItems]&#xa;  if len(plots):&#xa;    for plot in plots:&#xa;      vrange=plot.vb.viewRange()[1]&#xa;      plot_y=plot.vb.mapSceneToView(QtCore.QPointF(pos[0],pos[1])).y()&#xa;      if plot_y>=vrange[0]and plot_y&lt;=vrange[1]:&#xa;        self._current_plot_item_=plot&#xa;        return plot_y&#xa;&#xa;&#xa;&#xa;  else:&#xa;    return line.getYPos()&#xa;&#xa;&#xa;" id="uaUNfh9EtzRCq"/>
    <sourcecode value="if isinstance(val,pq.Quantity):&#xa;  val=val.magnitude.flatten()[0]&#xa;&#xa;elif not isinstance(val,numbers.Number):&#xa;  raise TypeError(&quot;expected a numeric scalar value or a scalar python Quantity; got %s instead&quot;%type(val).__name__)&#xa;&#xa;if self._hl_ is not None:&#xa;  self._update_hline_position_(val)&#xa;&#xa;" id="uNhYu1RzbNJbS"/>
    <sourcecode value="if isinstance(self._host_graphics_item_,pg.PlotItem):&#xa;  return self.y&#xa;&#xa;else:&#xa;  if not isinstance(plotitem,pg.PlotItem):&#xa;    raise TypeError(&quot;For multi-axes cursors, a pg.PlotItem parameter was expected; got %s instead&quot;%type(plotitem).__name__)&#xa;&#xa;  vrange=plotitem.vb.viewRange()[0]&#xa;  if self._hl_ is not None:&#xa;    y=self._hl_.getYPos()&#xa;&#xa;  elif self._vl_ is not None:&#xa;    y=self._vl_.getYPos()&#xa;&#xa;  else:&#xa;    y=self._y_&#xa;&#xa;  return plotitem.vb.mapSceneToView(QtCore.QPointF(0.0,y)).y()&#xa;&#xa;" id="utUeMGYAILPok"/>
    <sourcecode value="if isinstance(self.hostItem,pg.PlotItem):&#xa;  self.y=val&#xa;&#xa;else:&#xa;  if isinstance(val,pq.Quantity):&#xa;    val=val.magnitude.flatten()[0]&#xa;&#xa;  elif not isinstance(val,numbers.Number):&#xa;    raise TypeError(&quot;expected a numeric scalar value or a scalar python Quantity; got %s instead&quot;%type(val).__name__)&#xa;&#xa;  if not isinstance(plotItem,pg.PlotItem):&#xa;    raise TypeError(&quot;For multi-axis cursor please also specify a PlotItem&quot;)&#xa;&#xa;  if plotItem not in[p for p in self.scenePlotItems]:&#xa;    raise ValueError(&quot;Plot item %s not found in this cursor's scene&quot;%plotItem)&#xa;&#xa;  self._update_hline_position_(val,plotItem)&#xa;&#xa;" id="uDD9YbxtNQMrE"/>
    <sourcecode value="return self._hWin_&#xa;" id="uAAcuGbiD8lrx"/>
    <sourcecode value="if isinstance(val,pq.Quantity):&#xa;  val=val.magnitude.flatten()[0]&#xa;&#xa;elif not isinstance(val,numbers.Number):&#xa;  raise TypeError(&quot;expected a numeric scalar value or a scalar python Quantity; got %s instead&quot;%type(val).__name__)&#xa;&#xa;self._hWin_=val&#xa;" id="uPWaBi4pU2x0j"/>
    <sourcecode value="return self._vWin_&#xa;" id="uBFaICnFkk6z7"/>
    <sourcecode value="if isinstance(val,pq.Quantity):&#xa;  val=val.magnitude.flatten()[0]&#xa;&#xa;elif not isinstance(val,numbers.Number):&#xa;  raise TypeError(&quot;expected a numeric scalar value or a scalar python Quantity; got %s instead&quot;%type(val).__name__)&#xa;&#xa;self._vWin_=val&#xa;" id="u03MxeCkNAHkE"/>
    <sourcecode value="return self._cursorId_&#xa;" id="u4QPi0nuIqLii"/>
    <sourcecode value="if not isinstance(val,str):&#xa;  raise TypeError(&quot;expecting a string; got %s instead&quot;%type(val).__name__)&#xa;&#xa;if len(val.strip())==0:&#xa;  warnings.Warning(&quot;New ID is empty&quot;)&#xa;&#xa;self._cursorId_=val&#xa;" id="ulEU3bkDwCPWS"/>
    <sourcecode value="return self._default_pen_&#xa;" id="uHNI4rWvKwtHW"/>
    <sourcecode value="return self._pen_&#xa;" id="uC6I7jPDje3Lk"/>
    <sourcecode value="if not isinstance(val,QtGui.QPen):&#xa;  raise TypeError(&quot;expecting a QtGui.QPen; got a %s instead&quot;%type(val).__name__)&#xa;&#xa;self._pen_=val&#xa;if self._hl_ is not None:&#xa;  self._hl_.setPen(self._pen_)&#xa;&#xa;if self._vl_ is not None:&#xa;  self._vl_.setPen(self.__pen)&#xa;&#xa;" id="uZX4qPtHN9toS"/>
    <sourcecode value="return self._linkedPen_&#xa;" id="uIhPGJNtLELdM"/>
    <sourcecode value="if not isinstance(val,QtGui.QPen):&#xa;  raise TypeError(&quot;expecting a QtGui.QPen; got a %s instead&quot;%type(val).__name__)&#xa;&#xa;self._linkedPen_=val&#xa;if self._hl_ is not None:&#xa;  self._hl_.setPen(self._linkedPen_)&#xa;&#xa;if self._vl_ is not None:&#xa;  self._vl_.setPen(self._linkedPen_)&#xa;&#xa;" id="ug21HovIRq77u"/>
    <sourcecode value="return self._hoverPen_&#xa;" id="u1NIE4FTv3DfH"/>
    <sourcecode value="if not isinstance(val,QtGui.QPen):&#xa;  raise TypeError(&quot;expecting a QtGui.QPen; got a %s instead&quot;%type(val).__name__)&#xa;&#xa;self._hoverPen_=val&#xa;if self._hl_ is not None:&#xa;  self._hl_.setHoverPen(self._hoverPen_)&#xa;&#xa;if self._vl_ is not None:&#xa;  self._vl_.setHoverPen(self._hoverPen_)&#xa;&#xa;" id="uBs3jNRrU6oC9"/>
    <sourcecode value="if self._vl_ is not None and self._hl_ is not None:&#xa;  if self._cursor_type_ is not&quot;crosshair&quot;:&#xa;    self._cursor_type_=&quot;crosshair&quot;&#xa;&#xa;&#xa;else:&#xa;  if self._vl_ is None:&#xa;    if self._cursor_type_ is not&quot;horizontal&quot;:&#xa;      self._cursor_type_=&quot;horizontal&quot;&#xa;&#xa;&#xa;  else:&#xa;    if self._cursor_type_ is not&quot;vertical&quot;:&#xa;      self._cursor_type_=&quot;vertical&quot;&#xa;&#xa;&#xa;&#xa;return self._cursor_type_&#xa;" id="uGcMsIYWC14j4"/>
    <sourcecode value="return self._is_selected_&#xa;" id="u8iHaGUvZ8XRw"/>
    <sourcecode value="return self._follows_mouse_&#xa;" id="u0am31aYtT70i"/>
    <sourcecode value="return self._vl_ is not None and self._hl_ is not None&#xa;" id="uK0CPjHdb46EP"/>
    <sourcecode value="return self._hl_ is not None and self._vl_ is None&#xa;" id="uidLtyhwdNVjW"/>
    <sourcecode value="return self._vl_ is not None and self._hl_ is None&#xa;" id="u0nczaroFeidR"/>
    <sourcecode value="if not isinstance(text,str):&#xa;  raise TypeError(&quot;Expecting a str as first parameter; got %s instead&quot;%type(text).__name__)&#xa;&#xa;self._currentframe_=currentframe&#xa;self._ID_=name&#xa;self._closed_=False&#xa;PlanarGraphics.__init__(self,*args,name=name,frameindex=frameindex,currentframe=currentframe,&#xa;graphicstype=GraphicsObjectType.text,closed=False)" id="uRb8ZICu3ixSS"/>
    <sourcecode value="return False&#xa;" id="ublc9SIesZLTn"/>
    <sourcecode value="ret=self.__class__(self)&#xa;return ret&#xa;" id="uM7yEgAKTmGPN"/>
    <sourcecode value="return tuple()&#xa;" id="uMqLNuj46aDLW"/>
    <sourcecode value="pass&#xa;" id="uOvRVizhlsw5X"/>
    <sourcecode value="return Path()&#xa;" id="ul7f5Tl7zDjm2"/>
    <sourcecode value="return Path()&#xa;" id="uFHriqu3a9Oib"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  frame=self.getState(frame)&#xa;&#xa;if state and len(state):&#xa;  return[QtCore.QPointF(state.x,state.y)]&#xa;&#xa;else:&#xa;  return list()&#xa;&#xa;" id="uyisQ9wtRqiw4"/>
    <sourcecode value="self._objects_=list()&#xa;self._position_=position&#xa;self._segment_lengths_=list()&#xa;PlanarGraphics.__init__(self,(),name=name,frameindex=frameindex,currentframe=currentframe,&#xa;graphicstype=graphicstype,closed=closed,linked_objects=linked_objects)if len(args):&#xa;  if len(args)==1:&#xa;    if isinstance(args[0],Path):&#xa;      for a in args[0]:&#xa;        self._objects_.append(a.copy())&#xa;&#xa;      self._closed_=args[0]._closed_&#xa;      self._currentframe_=args[0]._currentframe_&#xa;      self._ID_=args[0]._ID_&#xa;      self._position_=args[0]._position_&#xa;      self._graphics_object_type_=args[0]._graphics_object_type_&#xa;      return&#xa;&#xa;    elif isinstance(args[0],PlanarGraphics):&#xa;      self._objects_.append(args[0].copy())&#xa;      self._position_=(args[0].x,args[0].y)&#xa;&#xa;    elif isinstance(args[0],(tuple,list))and len(args[0]):&#xa;      if all([isinstance(p,PlanarGraphics)for p in args[0]]):&#xa;        for k,p in enumerate(args[0]):&#xa;          pp=p.copy()&#xa;          self._objects_.append(pp)&#xa;&#xa;        if not isinstance(self._objects_[0],Move):&#xa;          self._objects_.insert(0,Move(0,0,frameindex=frameindex,currentframe=currentframe))&#xa;&#xa;        if all([isinstance(e,(Move,Line))for e in self._objects_]):&#xa;          if len(self._objects_)==2:&#xa;            self._graphics_object_type_=GraphicsObjectType.line&#xa;&#xa;          else:&#xa;            if self._closed_:&#xa;              self._graphics_object_type_=GraphicsObjectType.polygon&#xa;&#xa;            else:&#xa;              self._graphics_object_type_=GraphicsObjectType.polyline&#xa;&#xa;&#xa;&#xa;        else:&#xa;          self._graphics_object_type_=GraphicsObjectType.path&#xa;&#xa;        if len(self._objects_):&#xa;          x=min([e.x for e in self._objects_ if isinstance(e,PlanarGraphics)])&#xa;          y=min([e.y for e in self._objects_ if isinstance(e,PlanarGraphics)])&#xa;          self._position_=(x,y)&#xa;&#xa;        else:&#xa;          self._position_=(0,0)&#xa;&#xa;&#xa;      elif all([isinstance(c,(tuple,list))and len(c)==2 for c in args[0]]):&#xa;        self._objects_.append(Move(args[0][0],args[0][1],frameindex=frameindex,currentframe=currentframe))&#xa;        if len(args[0])>1:&#xa;          for a in args[1:]:&#xa;            self._objects_.append(Line(a[0],a[1],frameindex=frameindex,currentframe=currentframe))&#xa;&#xa;&#xa;        self._position_=(min([o.x for o in self]),min([o.y for o in self]))&#xa;        self._graphics_object_type_=GraphicsObjectType.path&#xa;&#xa;&#xa;    elif isinstance(args[0],QtGui.QPainterPath):&#xa;      for k in range(args[0].elementCount()):&#xa;        if args[0].elementAt(k).type==QtGui.QPainterPath.MoveToElement:&#xa;          element=args[0].elementAt(k)&#xa;          self._objects_.append(Move(element.x,element.y,&#xa;          frameindex=frameindex,currentframe=currentframe))&#xa;        elif args[0].elementAt(k).type==QtGui.QPainterPath.LineToElement:&#xa;          element=args[0].elementAt(k)&#xa;          self._objects_.append(Line(element.x,element.y,&#xa;          frameindex=frameindex,currentframe=currentframe))&#xa;        elif args[0].elementAt(k).type==QtGui.QPainterPath.CurveToElement:&#xa;          element=args[0].elementAt(k)&#xa;          c1=args[0].elementAt(k+1)&#xa;          c2=args[0].elementAt(k+2)&#xa;          self._objects_.append(Cubic(c1.x,c1.y,c2.x,c2.y,element.x,element.y,&#xa;          frameindex=frameindex,currentframe=currentframe))&#xa;        else:&#xa;          continue&#xa;&#xa;&#xa;      self._position_=(min([o.x for o in self]),min([o.y for o in self]))&#xa;      self._graphics_object_type_=GraphicsObjectType.path&#xa;&#xa;&#xa;  else:&#xa;    if all([isinstance(a,(PlanarGraphics,tuple,list))for a in args]):&#xa;      for k,a in enumerate(args):&#xa;        if k==0:&#xa;          if isinstance(a,PlanarGraphics):&#xa;            aa=a.copy()&#xa;            aa._currentframe_=currentframe&#xa;            self._objects_.append(aa)&#xa;&#xa;          elif isinstance(a,(tuple,list))and len(a)==2:&#xa;            if frameindex is None or self._currentframe_ is None:&#xa;              raise ValueError(&quot;frameindex or currentframe can be None only when first argument is a PlanarGraphics; got %s instead.&quot;%a)&#xa;&#xa;            self._objects_.append(Move(a[0],a[1],&#xa;            frameindex=frameindex,currentframe=self._currentframe_))&#xa;&#xa;        else:&#xa;          if isinstance(a,PlanarGraphics):&#xa;            aa=a.copy()&#xa;            if aa.frameIndices!=frameindex:&#xa;              aa.frameIndices=frameindex&#xa;&#xa;            if len(frameindex)==0 and self._currentframe_!=0:&#xa;              self._currentframe_=0&#xa;&#xa;            if aa._currentframe_!=self._currentframe_:&#xa;              aa._currentframe_=self._currentframe_&#xa;&#xa;            self._objects_.append(aa)&#xa;&#xa;          elif isinstance(a,(tuple,list))and len(a)==2:&#xa;            self._objects_.append(Line(a[0],a[1],frameindex=frameindex,currentframe=self._currentframe_))&#xa;&#xa;          else:&#xa;            raise TypeError(&quot;When constructing a Path, var-positional parameters must be PlanarGraphics objects or tuples of coordinates&quot;)&#xa;&#xa;&#xa;&#xa;      self._position_=(min([o.x for o in self]),min([o.y for o in self]))&#xa;      if not isinstance(self._objects_[0],Move):&#xa;        self._objects_.insert(0,Move(0,0,frameindex=frameindex,currentframe=currentframe))&#xa;&#xa;      self._graphics_object_type_=GraphicsObjectType.path&#xa;&#xa;&#xa;&#xa;self._ID_=name&#xa;self._closed_=closed&#xa;for e in self._objects_:&#xa;  e._currentframe_=currentframe&#xa;&#xa;" id="uqSGKyz02fOFe"/>
    <sourcecode value="return __new_planar_graphic__,(self.__class__,&#xa;self._objects_,self._ID_,self.frameIndices,self._currentframe_,self._graphics_object_type_,self._closed_,self._linked_objects_.copy(),self._position_)" id="uSF5BHal4KWdU"/>
    <sourcecode value="ss=super(PlanarGraphics,self).__repr__()&#xa;return ss&#xa;" id="ubYJ1I2URkVmn"/>
    <sourcecode value="s=&quot;\n &quot;.join([&quot;%d: %s&quot;%(k,e.__str__())for k,e in enumerate(self._objects_)])&#xa;return&quot;%s object:\n name %s\n path elements: \n %s&quot;%(self.__class__,self._ID_,s)&#xa;" id="uz4kIsLA9spQD"/>
    <sourcecode value="if path is None:&#xa;  path=QtGui.QPainterPath()&#xa;&#xa;if closed is None:&#xa;  closePath=self.closed&#xa;&#xa;elif isinstance(closed,bool):&#xa;  closePath=closed&#xa;&#xa;else:&#xa;  raise TypeError(&quot;closed expected to be a boolean or None; got %s instead&quot;%type(closed).__name__)&#xa;&#xa;if len(self):&#xa;  for k,p in enumerate(self._objects_):&#xa;    path=p(path,frame,closed=False,connected=connected)&#xa;&#xa;  if closePath:&#xa;    if frame is None:&#xa;      state=self.currentState&#xa;&#xa;    else:&#xa;      state=self.getState(frame)&#xa;&#xa;    if state and len(state):&#xa;      path.lineTo(self._objects_[0].x,self._objects_[0].y)&#xa;&#xa;&#xa;&#xa;return path&#xa;" id="u8GI1ZsaIrF4x"/>
    <sourcecode value="super().__setattr__(name,value)&#xa;" id="u0J70zG5jik7G"/>
    <sourcecode value="return super().__getattr__(name)&#xa;" id="uYmw9Vk6SurA1"/>
    <sourcecode value="if not isinstance(value,PlanarGraphics):&#xa;  raise TypeError(&quot;Expecting a PlanarGraphics objects; got %s instead&quot;%type(value).__name__)&#xa;&#xa;if isinstance(value,Path):&#xa;  for k,v in enumerate(value):&#xa;    self._objects_.insert(key+k,v)&#xa;&#xa;&#xa;else:&#xa;  self._objects_.__setitem__(key,value)&#xa;&#xa;" id="uxTFfKRZIDhvi"/>
    <sourcecode value="if isinstance(key,(int,slice)):&#xa;  return self._objects_[key]&#xa;&#xa;else:&#xa;  raise TypeError(&quot; expecting an int or a slice object; got %s instead&quot;%type(key).__name__)&#xa;&#xa;" id="u7nGTSfF4Dzko"/>
    <sourcecode value="return len(self._objects_)&#xa;" id="utG3PE2xagiEL"/>
    <sourcecode value="if not isinstance(other,PlanarGraphics):&#xa;  raise TypeError(&quot;Expecting a PlanarGraphics object; got %s instead&quot;%type(other).__name__)&#xa;&#xa;ret=self.copy()&#xa;if isinstance(other,Path):&#xa;  ret._objects_+=other._objects_&#xa;&#xa;else:&#xa;  ret._objects_.append(other)&#xa;&#xa;return ret&#xa;" id="u3gNnCm2rbzoZ"/>
    <sourcecode value="if not isinstance(other,PlanarGraphics):&#xa;  raise TypeError(&quot;Expecting a PlanarGraphics object; got %s instead&quot;%type(other).__name__)&#xa;&#xa;if isinstance(other,Path):&#xa;  self._objects_+=other._objects_&#xa;&#xa;else:&#xa;  self._objects_.append(other)&#xa;&#xa;return self&#xa;" id="urMFi6ArMOVV4"/>
    <sourcecode value="if not isinstance(value,int):&#xa;  raise TypeError(&quot;Expecting an int; got %s instead&quot;%type(value).__name__)&#xa;&#xa;self._objects_.__imul__(value)&#xa;return self&#xa;" id="u2WL0Rwr22xRl"/>
    <sourcecode value="if not isinstance(value,int):&#xa;  raise TypeError(&quot;Expecting an int; got %s instead&quot;%type(value).__name__)&#xa;&#xa;ret=self.copy()&#xa;ret._objects_.__mul__(value)&#xa;return ret&#xa;" id="uUfhpZuVGeMQp"/>
    <sourcecode value="if not isinstance(value,int):&#xa;  raise TypeError(&quot;Expecting an int; got %s instead&quot;%type(value).__name__)&#xa;&#xa;ret=self.copy()&#xa;ret._objects_.rmul__(value)&#xa;return ret&#xa;" id="uEw5BCqApUkRx"/>
    <sourcecode value="return self._objects_.__iter__(*args,**kwargs)&#xa;" id="uNJVYKbYUm10y"/>
    <sourcecode value="return self._objects_.__reversed__()&#xa;" id="uXxnZ9aTpppbE"/>
    <sourcecode value="raise NotImplementedError(&quot;Path objects do not support this function; use appendStates on individual Path elements&quot;)&#xa;" id="uf3CApYr2tIeN"/>
    <sourcecode value="if isinstance(other,PlanarGraphics):&#xa;  if not other.type&amp;GraphicsObjectType.allCursorTypes:&#xa;    other=other.copy()&#xa;    self._objects_.append(other)&#xa;&#xa;  else:&#xa;    raise TypeError(&quot;Expecting a non-cursor type; got %s instead&quot;%other.type)&#xa;&#xa;&#xa;else:&#xa;  raise TypeError(&quot;Expecting a PlanarGraphics object; got %s instead&quot;%type(other).__name__)&#xa;&#xa;return self&#xa;" id="unhSUEScPFQyY"/>
    <sourcecode value="if not isinstance(other,PlanarGraphics):&#xa;  raise TypeError(&quot;Expecting a PlanarGraphics object; got %s instead&quot;%type(other).__name__)&#xa;&#xa;return self._objects_.count(other)&#xa;" id="uaXI3kTkAz5fU"/>
    <sourcecode value="self._objects_.clear()&#xa;" id="unNQXpSaWyqjO"/>
    <sourcecode value="return self._objects_.pop(index)&#xa;" id="u9NUgqgufW2Ka"/>
    <sourcecode value="self.__iadd__(other)&#xa;" id="u58K3Si8c8S6e"/>
    <sourcecode value="if len(self._objects_):&#xa;  states=self.getState(self.currentFrame)&#xa;  for s in states:&#xa;    s.x+=dx&#xa;    s.y+=dy&#xa;    if&quot;cx&quot;in s:&#xa;      s.cx+=dx&#xa;&#xa;    if&quot;c1x&quot;in s:&#xa;      s.c1x+=dx&#xa;&#xa;    if&quot;c2x&quot;in s:&#xa;      s.c2x+=dx&#xa;&#xa;    if&quot;cy&quot;in s:&#xa;      s.cy+=dy&#xa;&#xa;    if&quot;c1y&quot;in s:&#xa;      s.c1y+=dy&#xa;&#xa;    if&quot;c2y&quot;in s:&#xa;      s.c2y+=dy&#xa;&#xa;&#xa;&#xa;" id="uKaatAqEfRJq2"/>
    <sourcecode value="if not isinstance(other,PlanarGraphics):&#xa;  raise TypeError(&quot;Expecting a PlanarGraphics object; got %s instead&quot;%type(other).__name__)&#xa;&#xa;if isinstance(other,Path):&#xa;  raise ValueError(&quot;%s is not in list&quot;%other)&#xa;&#xa;return self._objects_.index(other,*where)&#xa;" id="uDLL2kZqwIBNi"/>
    <sourcecode value="if isinstance(other,Path):&#xa;  if len(other):&#xa;    for k,o in enumerate(other):&#xa;      self._objects_.insert(index+k,o)&#xa;&#xa;&#xa;&#xa;else:&#xa;  self._objects_.insert(index,other)&#xa;&#xa;" id="u6m1bIhwQl8dV"/>
    <sourcecode value="self._objects_.remove(other)&#xa;" id="u4A8b7GecZSOL"/>
    <sourcecode value="self._objects_.reverse()&#xa;" id="ubQk895ybLNNB"/>
    <sourcecode value="import core.datatypes as dt&#xa;if not isinstance(states,(tuple,list)):&#xa;  return False&#xa;&#xa;return all([isinstance(state,dt.DataBag)and all([hasattr(state,a)for a in element._planar_descriptors_])for(state,element)in zip(states,self._objects_)])&#xa;" id="uocfSMLoRVUZS"/>
    <sourcecode value="if not isinstance(value,dict):&#xa;  return False&#xa;&#xa;return all([isinstance(k,int)and self._check_state_(state)for(k,state)in value.items()])&#xa;" id="u2jdQ8ID5S0Ac"/>
    <sourcecode value="import core.datatypes as dt&#xa;if len(self._objects_)==0:&#xa;  raise RuntimeError(&quot;This path object has no elements&quot;)&#xa;&#xa;if not isinstance(state,dt.DataBag):&#xa;  raise TypeError(&quot;state expected to be a datatypes.DataBag; got %s instead&quot;%type(state).__name__)&#xa;&#xa;if not self._check_state_(state):&#xa;  raise TypeError(&quot;state %s does not contain the required descriptors %s&quot;%(state,self._planar_descriptors_))&#xa;&#xa;if not hasattr(state,&quot;z_frame&quot;):&#xa;  raise AttributeError(&quot;state is expected to have a z_frame attribute&quot;)&#xa;&#xa;for element,state in zip(self._objects_,states):&#xa;  element.addState(state.copy())&#xa;&#xa;" id="u5JCcY0Ac4zfE"/>
    <sourcecode value="if not isinstance(n,int):&#xa;  raise TypeError(&quot;Expecting an int; got %s instead&quot;%type(n).__name__)&#xa;&#xa;if self.subpathCount==0:&#xa;  return self&#xa;&#xa;if n&lt;0 or n>=self.subpathCount:&#xa;  raise ValueError(&quot;%d is not a valid subpath index&quot;%n)&#xa;&#xa;pathStarts=[k for k,p in enumerate(self._objects_)if isinstance(p,Move)]&#xa;if n==self.subpathCount-1:&#xa;  path_slice=slice(pathStarts[n],pathStarts[n+1])&#xa;&#xa;else:&#xa;  path_slice=slice(pathStarts[n],len(self._objects_))&#xa;&#xa;return self._objects_[path_slice]&#xa;" id="ubQ9qQUNEL496"/>
    <sourcecode value="if not isinstance(newmaps,(tuple,list)):&#xa;  raise TypeError(&quot;expecting a sequence (tuple or list); got %s instead&quot;%type(newmap).__name__)&#xa;&#xa;if not all([isinstance(v,(tuple,list,dict))for v in newmaps]):&#xa;  raise TypeError(&quot;Expecting a sequence of dict or sequences&quot;)&#xa;&#xa;if len(newmaps)!=len(self._objects_):&#xa;  raise ValueError(&quot;Expecting as many elements in newmaps as there are in this object (%d); got %d instead&quot;%(len(self._objects_),len(newmaps)))&#xa;&#xa;for k,o in self._objects_:&#xa;  o.remapFrameStateAssociations(newmaps[k])&#xa;&#xa;" id="utwoFYWxdWn6i"/>
    <sourcecode value="return self._objects_&#xa;" id="ucT25faSWnsbe"/>
    <sourcecode value="return len([p for p in self._objects_ if isinstance(p,Move)])-1&#xa;" id="ukT1s9JMNQOLj"/>
    <sourcecode value="return len([p for p in self.__obj_map__ is isinstance(p,Path)])&#xa;" id="u2c3aOUAKnnju"/>
    <sourcecode value="if len(self._objects_):&#xa;  x=min([e.x for e in self._objects_])&#xa;  y=min([e.y for e in self._objects_])&#xa;&#xa;else:&#xa;  x=0&#xa;  y=0&#xa;&#xa;self._position_=(x,y)&#xa;return self._position_&#xa;" id="umW79jtLdxzLV"/>
    <sourcecode value="position=self.position&#xa;if any([p is None for p in position]):&#xa;  return QtCore.QPointF()&#xa;&#xa;return QtCore.QPointF(position[0],position[1])&#xa;" id="uLVi8Eo0Xq4Gc"/>
    <sourcecode value="if len(self._objects_):&#xa;  states=self.getState(self.currentFrame)&#xa;  if len(states):&#xa;    x=min([s.x for s in states])&#xa;&#xa;  else:&#xa;    x=0&#xa;&#xa;&#xa;else:&#xa;  x=0&#xa;&#xa;return x&#xa;" id="uwQnKUOQ2q0f6"/>
    <sourcecode value="if len(self._objects_):&#xa;  states=self.getState(self.currentFrame)&#xa;  if len(states):&#xa;    old_x=min([s.x for s in states])&#xa;    delta_x=value-old_x&#xa;    for s in states:&#xa;      s.x+=delta_x&#xa;      if&quot;cx&quot;in s:&#xa;        s.cx+=delta_x&#xa;&#xa;      if&quot;c1x&quot;in s:&#xa;        s.c1x+=delta_x&#xa;&#xa;      if&quot;c2x&quot;in s:&#xa;        s.c2x+=delta_x&#xa;&#xa;&#xa;&#xa;&#xa;self._position_=(value,self._position_[1])&#xa;" id="uKrvs2qdDX4wW"/>
    <sourcecode value="if len(self._objects_):&#xa;  states=self.getState(self.currentFrame)&#xa;  if len(states):&#xa;    y=min([s.y for s in states])&#xa;&#xa;  else:&#xa;    y=0&#xa;&#xa;&#xa;else:&#xa;  y=0&#xa;&#xa;return y&#xa;" id="uBPkeOfg30ya8"/>
    <sourcecode value="if len(self._objects_):&#xa;  states=self.getState(self.currentFrame)&#xa;  if len(states):&#xa;    old_y=min([s.y for s in states])&#xa;    delta_y=value-old_y&#xa;    for s in states:&#xa;      s.y+=delta_y&#xa;      if&quot;cy&quot;in s:&#xa;        s.cy+=delta_y&#xa;&#xa;      if&quot;c1y&quot;in s:&#xa;        s.c1y+=delta_y&#xa;&#xa;      if&quot;c2y&quot;in s:&#xa;        s.c2y+=delta_y&#xa;&#xa;&#xa;&#xa;&#xa;self._position_=(self._position_[0],value)&#xa;" id="u0yFgLjteKWVv"/>
    <sourcecode value="max_obj_frame=[o.maxFrameIndex for o in self._objects_]&#xa;return max(max_obj_frame)&#xa;" id="uncFb1x79BcRJ"/>
    <sourcecode value="if len(self._objects_):&#xa;  return[e.frameIndices for e in self._objects_]&#xa;&#xa;else:&#xa;  return[]&#xa;&#xa;" id="usRah521zlGbO"/>
    <sourcecode value="if isinstance(value,(range,dict,int,type(None))):&#xa;  for element in self._objects_:&#xa;    element.frameIndices=value&#xa;&#xa;&#xa;elif isinstance(value,(tuple,list)):&#xa;  if len(value)==0 or None in value:&#xa;    for element in self._objects_:&#xa;      element.frameIndices=value&#xa;&#xa;&#xa;  elif all([isinstance(v,int)for v in value]):&#xa;    for element in self._objects_:&#xa;      element.frameIndices=value&#xa;&#xa;&#xa;  else:&#xa;    if len(value)!=len(self._objects_):&#xa;      raise ValueError(&quot;For Path, Expecting a sequence with %d elements; got %d instead&quot;%(len(self._objects_),len(value)))&#xa;&#xa;    for k,e in enumerate(self._objects_):&#xa;      if not isinstance(value[k],(tuple,list,dict,range,type(None))):&#xa;        raise TypeError(&quot;At value[%d]: Expecting a sequence of nested sequences or None; got %s instead&quot;%(k,type(e).__name__))&#xa;&#xa;      if value[k]is None:&#xa;        continue&#xa;&#xa;      else:&#xa;        if len(value[k])==0:&#xa;          continue&#xa;&#xa;        e.frameIndices=value[k]&#xa;&#xa;&#xa;&#xa;&#xa;else:&#xa;  raise TypeError(&quot;Cannot set frame indices with this parameter: %s&quot;%value)&#xa;&#xa;" id="uWSuqaNh3sy6y"/>
    <sourcecode value="from core.utilities import unique&#xa;if len(self._objects_):&#xa;  return unique([f for f in itertools.chain(*[e.frameIndices for e in self._objects_])])&#xa;&#xa;else:&#xa;  return[]&#xa;&#xa;" id="upTfOOi0o2WWU"/>
    <sourcecode value="if isinstance(value,(range,dict,int,type(None))):&#xa;  for element in self._objects_:&#xa;    element.frameIndices=value&#xa;&#xa;&#xa;elif isinstance(value,(tuple,list)):&#xa;  if len(value)==0 or None in value:&#xa;    for element in self._objects_:&#xa;      element.frameIndices=value&#xa;&#xa;&#xa;  elif all([isinstance(v,int)for v in value]):&#xa;    for element in self._objects_:&#xa;      element.frameIndices=value&#xa;&#xa;&#xa;  else:&#xa;    if len(value)!=len(self._objects_):&#xa;      raise ValueError(&quot;For Path, Expecting a sequence with %d elements; got %d instead&quot;%(len(self._objects_),len(value)))&#xa;&#xa;    for k,e in enumerate(self._objects_):&#xa;      if not isinstance(value[k],(tuple,list,dict,range,type(None))):&#xa;        raise TypeError(&quot;At value[%d]: Expecting a sequence of nested sequences or None; got %s instead&quot;%(k,type(e).__name__))&#xa;&#xa;      if value[k]is None:&#xa;        continue&#xa;&#xa;      else:&#xa;        if len(value[k])==0:&#xa;          continue&#xa;&#xa;        e.frameIndices=value[k]&#xa;&#xa;&#xa;&#xa;&#xa;else:&#xa;  raise TypeError(&quot;Cannot set frame indices with this parameter: %s&quot;%value)&#xa;&#xa;" id="uUYf7dqutfdFK"/>
    <sourcecode value="if all([isinstance(e,(Move,Line))for e in self._objects_]):&#xa;  if len(self._objects_)==2:&#xa;    return GraphicsObjectType.line&#xa;&#xa;  elif len(self._objects_)==4:&#xa;    if self.closed:&#xa;      return GraphicsObjectType.rectangle&#xa;&#xa;    else:&#xa;      return GraphicsObjectType.polyline&#xa;&#xa;&#xa;  else:&#xa;    if self.closed:&#xa;      return GraphicsObjectType.polygon&#xa;&#xa;    else:&#xa;      return GraphicsObjectType.polyline&#xa;&#xa;&#xa;&#xa;return GraphicsObjectType.path&#xa;" id="uC4HtsTxU1GRV"/>
    <sourcecode value="uniqe_frames=self.frameIndices&#xa;return[p.states for p in self._objects_]&#xa;" id="uLLWMy51loyUh"/>
    <sourcecode value="return[(k,p.states)for k,p in enumerate(self._objects_)]&#xa;" id="uQ9fU68WhTFH5"/>
    <sourcecode value="return self._objects_[0].currentFrame&#xa;" id="urRd4cqQpBaBN"/>
    <sourcecode value="if not isinstance(value,int):&#xa;  raise TypeError(&quot;expecting an int; got %s instead&quot;%type(value).__name__)&#xa;&#xa;for e in self._objects_:&#xa;  e.currentFrame=value&#xa;&#xa;" id="uSo9mNjTpWKBR"/>
    <sourcecode value="raise NotImplementedError(&quot;Path object do not support this method&quot;)&#xa;" id="ujXYXbrmjR16v"/>
    <sourcecode value="return self._closed_&#xa;" id="u3C4cNQIJBeJ0"/>
    <sourcecode value="if not isinstance(value,bool):&#xa;  raise TypeError(&quot;value expected to be a boolean; got %s instead&quot;%type(value).__name__)&#xa;&#xa;if value:&#xa;  self.append(Line(self._objects_[0].x,self._objects_[0].y))&#xa;&#xa;else:&#xa;  if self._objects_[-1].x==self._objects_[0].x and self._objects_[-1].y==self._objects_[0].y:&#xa;    del self._objects_[-1]&#xa;&#xa;&#xa;self._closed_=value&#xa;" id="u7JOTU5Lle5Fy"/>
    <sourcecode value="self.closed=True&#xa;" id="uWgjZWkfOWmXG"/>
    <sourcecode value="self.closed=False&#xa;" id="ubmk92txCUHUq"/>
    <sourcecode value="path=self(path=None,frame=self.currentFrame,closed=self._closed_)&#xa;return QtWidgets.QGraphicsPathItem(path)&#xa;" id="ucP1rbQY9fYqx"/>
    <sourcecode value="if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  if frame in self.frameIndices:&#xa;    state=self.getState(frame)&#xa;&#xa;  else:&#xa;    warnings.warn(&quot;%s.qPoints(): No state is associated with specified frame (%d)&quot;%(self.__class__.__name__,frame),stacklevel=2)&#xa;    return[QtCore.QPointF()]&#xa;&#xa;&#xa;if state is None or len(state)==0:&#xa;  warnings.warn(&quot;%s.qPoints(): Undefined state&quot;%self.__class__.__name__,stacklevel=2)&#xa;  return[QtCore.QPointF()]&#xa;&#xa;points=list()&#xa;for e in self._objects_:&#xa;  points.append(e.qPoint())&#xa;&#xa;return points&#xa;" id="uy3GmaLgmGg6y"/>
    <sourcecode value="raise NotImplementedError(&quot;Path objects do not support this method&quot;)&#xa;" id="ujfJNihtqSZmz"/>
    <sourcecode value="for o in self:&#xa;  if isinstance(o,Path):&#xa;    o.propagateFrameState(frame,destframes)&#xa;&#xa;  else:&#xa;    if frame in o.frameIndices:&#xa;      state=o.getState(frame)&#xa;      o.propagateFrameState(state,destframes)&#xa;&#xa;&#xa;&#xa;" id="uzrZfvktxzenW"/>
    <sourcecode value="return any([o.hasStateForFrame(frame)for o in self])&#xa;" id="u5Yy5kRp3zom8"/>
    <sourcecode value="return self.asPath(frame)&#xa;" id="ur2i9fpdNkoD5"/>
    <sourcecode value="return Path([e.getObjectForFrame(frame)for e in self if e.hasStateForFrame(frame)])&#xa;" id="uMq39KdbLu13W"/>
    <sourcecode value="states=[e.getState(frame)for e in self._objects_]&#xa;states=[s for s in states if s is not None]&#xa;return states&#xa;" id="ubM8B5TslzKab"/>
    <sourcecode value="for o in self._objects_:&#xa;  o.removeState(value)&#xa;&#xa;" id="uD27nw4wpvGZx"/>
    <sourcecode value="ret=list()&#xa;for o in self:&#xa;  ret+=list(o.controlPoints(frame))&#xa;&#xa;return tuple(ret)&#xa;" id="uKh4OAhpEGHRm"/>
    <sourcecode value="ret=Path()&#xa;cp=self.controlPoints(frame)&#xa;for k,p in enumerate(cp):&#xa;  if k==0:&#xa;    ret.append(Move(p[0],p[1]))&#xa;&#xa;  else:&#xa;    ret.append(Line(p[0],p[1]))&#xa;&#xa;&#xa;return ret&#xa;" id="uV6r7NBtxF9W1"/>
    <sourcecode value="if not isinstance(path,Path):&#xa;  raise TypeError(&quot;path argument expected to be a Path; got %s instead&quot;%type(path).__name__)&#xa;&#xa;if frame is None:&#xa;  state=self.currentState&#xa;&#xa;else:&#xa;  state=self.getState(frame)&#xa;&#xa;if state is None or len(state)==0:&#xa;  return&#xa;&#xa;control_state=path.currentState&#xa;if control_state is None or len(control_state)==0:&#xa;  return&#xa;&#xa;" id="uXnwp0GTkgjNk"/>
    <sourcecode value="if not isinstance(value,(tuple,list)):&#xa;  raise TypeError(&quot;Path.linkFrame() expects a sequence&quot;)&#xa;&#xa;if len(value)!=len(self._objects_):&#xa;  raise ValueError(&quot;Path.linkFrame() expects a sequence with as many elements as there are elements in the Path&quot;)&#xa;&#xa;for k,o in enumerate(self._objects_):&#xa;  if value[k]is not None and len(value[k]):&#xa;    o.linkFrames(value[k])&#xa;&#xa;&#xa;" id="uqHt1Oi8wHKGC"/>
    <sourcecode value="if self.hasStateForFrame(frame):&#xa;  ret=Path()&#xa;  for p in self:&#xa;    ret.append(p.objectForFrame(frame))&#xa;&#xa;  ret.name=&quot;copy of %s for frame %d&quot;%(self.name,frame)&#xa;&#xa;else:&#xa;  ret=None&#xa;&#xa;return ret&#xa;" id="uKHvmGo9cnEmQ"/>
    <sourcecode value="if not isinstance(p,QtGui.QPainterPath):&#xa;  raise TypeError(&quot;Expecting a QPainterPath; instead got %s&quot;%(type(p).__name__))&#xa;&#xa;frameindex=self.frameIndices&#xa;currentframe=self.currentFrame&#xa;self.clear()&#xa;for k in range(p.elementCount()):&#xa;  if p.elementAt(k).type==QtGui.QPainterPath.MoveToElement:&#xa;    element=p.elementAt(k)&#xa;    self.append(Move(element.x,element.y,frameindex=frameindex,currentframe=currentframe))&#xa;&#xa;  elif p.elementAt(k).type==QtGui.QPainterPath.LineToElement:&#xa;    element=p.elementAt(k)&#xa;    self.append(Line(element.x,element.y,frameindex=frameindex,currentframe=currentframe))&#xa;&#xa;  elif p.elementAt(k).type==QtGui.QPainterPath.CurveToElement:&#xa;    element=p.elementAt(k)&#xa;    c1=p.elementAt(k+1)&#xa;    c2=p.elementAt(k+2)&#xa;    self.append(Cubic(x=c1.x,y=c1.y,c1x=c2.x,c1y=c2.y,c2x=element.x,c2y=element.y,frameindex=frameindex,currentframe=currentframe))&#xa;&#xa;&#xa;" id="ustkAKE7S4qHU"/>
    <sourcecode value="super(MouseEventSink,self).__init__(*args,**kwargs)&#xa;" id="upwWNaoLhT99r"/>
    <sourcecode value="if evt.type()in(QtCore.QEvent.GraphicsSceneMouseDoubleClick,QtCore.QEvent.GraphicsSceneMousePress,QtCore.QEvent.GraphicsSceneMouseRelease,\&#xa;QtCore.QEvent.GraphicsSceneHoverEnter,QtCore.QEvent.GraphicsSceneHoverLeave,QtCore.QEvent.GraphicsSceneHoverMove,\QtCore.QEvent.GraphicsSceneMouseMove):&#xa;  return True&#xa;&#xa;else:&#xa;  return False&#xa;&#xa;" id="uy37lOWUA0qLO"/>
    <sourcecode value="super(Planar2QGraphicsManager,self).__init__(parent=parent)&#xa;if not isinstance(planarobject,(PlanarGraphics,type(None))):&#xa;  raise TypeError(&quot;planarobject expected to be a PlanarGraphics object or None; got %s instead&quot;%type(planarobject).__name__)&#xa;&#xa;if not isinstance(grobject,(GraphicsObject,type(None))):&#xa;  raise TypeError(&quot;grobject expected to be a GraphicsObject or None; got %s instead&quot;%type(grobject).__name__)&#xa;&#xa;self.__obj_map__=dict()&#xa;if isinstance(planarobject,PlanarGraphics):&#xa;  self.__obj_map__[planarobject]=set()&#xa;  if isinstance(grobject,GraphicsObject):&#xa;    self.__obj_map__[planarobject].add(grobject)&#xa;&#xa;&#xa;" id="u4zoEHOOx2Wdv"/>
    <sourcecode value="if not isinstance(planarobject,(PlanarGraphics,type(None))):&#xa;  raise TypeError(&quot;planarobject expected to be a PlanarGraphics objetc or None; got %s instead&quot;%type(planarobject).__name__)&#xa;&#xa;if not isinstance(grobject,(GraphicsObject,type(None))):&#xa;  raise TypeError(&quot;grobject expected to be a GraphicsObject or None; got %s instead&quot;%type(grobject).__name__)&#xa;&#xa;if isinstance(planarobject,PlanarGraphics):&#xa;  if planarobject not in self.__obj_map__:&#xa;    self.__obj_map__[planarobject]=set()&#xa;&#xa;  if isinstance(grobject,GraphicsObject):&#xa;    self.__obj_map__[planarobject].add(grobject)&#xa;&#xa;&#xa;" id="u8svvLNRgN4aL"/>
    <sourcecode value="if not isinstance(planarobject,PlanarGraphics):&#xa;  raise TypeError(&quot;planarobject expected to be a PlanarGraphics; got %s instead&quot;%type(planarobject).__name__)&#xa;&#xa;if not isinstance(grobject,(GraphicsObject,type(None))):&#xa;  raise TypeError(&quot;grobject expected to be a GraphicsObject or None; got %s instead&quot;%type(grobject).__name__)&#xa;&#xa;if planarobject in self.__obj_map__:&#xa;  if isinstance(grobject,GraphicsObject)and grobject in self.__obj_map__[planarobject]:&#xa;    self.__obj_map__[planarobject].discard(grobject)&#xa;&#xa;  elif grobject is None:&#xa;    self.__obj_map__.pop(planarobject,None)&#xa;&#xa;&#xa;" id="uPJVA8AIDA7DC"/>
    <sourcecode value="pass&#xa;" id="uTXQkk6oIZWXI"/>
    <sourcecode value="pass&#xa;" id="uLYfH5c1G0QRD"/>
    <sourcecode value="self.defaultTextBackgroundBrush=QtGui.QBrush(QtCore.Qt.white,QtCore.Qt.SolidPattern)&#xa;self.defaultBrush=QtGui.QBrush(QtCore.Qt.white,QtCore.Qt.SolidPattern)&#xa;self.defaultTextPenWidth=1&#xa;self.defaultPenWidth=1&#xa;self.defaultPenStyle=QtCore.Qt.DashLine&#xa;self.defaultSelectedPenStyle=QtCore.Qt.SolidLine&#xa;self.defaultColor=QtCore.Qt.magenta&#xa;self.defaultCBCursorColor=QtCore.Qt.red&#xa;self.defaultLinkedCursorColor=QtCore.Qt.darkMagenta&#xa;self.defaultTextPen=QtGui.QPen(self.defaultColor,self.defaultTextPenWidth,QtCore.Qt.SolidLine,QtCore.Qt.RoundCap,QtCore.Qt.RoundJoin)&#xa;self.defaultTextBrush=QtGui.QBrush(self.defaultColor,QtCore.Qt.SolidPattern)&#xa;self.defaultLinkedTextPen=QtGui.QPen(self.defaultLinkedCursorColor,self.defaultTextPenWidth,QtCore.Qt.SolidLine,QtCore.Qt.RoundCap,QtCore.Qt.RoundJoin)&#xa;self.defaultLinkedTextBrush=QtGui.QBrush(self.defaultLinkedCursorColor,QtCore.Qt.SolidPattern)&#xa;self.defaultCBTextPen=QtGui.QPen(self.defaultCBCursorColor,self.defaultTextPenWidth,QtCore.Qt.SolidLine,QtCore.Qt.RoundCap,QtCore.Qt.RoundJoin)&#xa;self.defaultCBTextBrush=QtGui.QBrush(self.defaultCBCursorColor,QtCore.Qt.SolidPattern)&#xa;self.defaultTextFont=QtGui.QFont(&quot;sans-serif&quot;)&#xa;self.defaultPen=QtGui.QPen(self.defaultColor)&#xa;self.defaultPen.setStyle(self.defaultPenStyle)&#xa;self.defaultPen.setWidth(self.defaultPenWidth)&#xa;self.defaultPen.setCapStyle(QtCore.Qt.RoundCap)&#xa;self.defaultPen.setJoinStyle(QtCore.Qt.RoundJoin)&#xa;self.defaultSelectedPen=QtGui.QPen(self.defaultColor)&#xa;self.defaultSelectedPen.setStyle(self.defaultSelectedPenStyle)&#xa;self.defaultSelectedPen.setWidth(self.defaultPenWidth)&#xa;self.defaultSelectedPen.setCapStyle(QtCore.Qt.RoundCap)&#xa;self.defaultSelectedPen.setJoinStyle(QtCore.Qt.RoundJoin)&#xa;self.defaultLinkedPen=QtGui.QPen(self.defaultLinkedCursorColor)&#xa;self.defaultLinkedPen.setStyle(self.defaultPenStyle)&#xa;self.defaultLinkedPen.setWidth(self.defaultPenWidth)&#xa;self.defaultLinkedPen.setCapStyle(QtCore.Qt.RoundCap)&#xa;self.defaultLinkedPen.setJoinStyle(QtCore.Qt.RoundJoin)&#xa;self.defaultLinkedSelectedPen=QtGui.QPen(self.defaultLinkedCursorColor)&#xa;self.defaultLinkedSelectedPen.setStyle(self.defaultSelectedPenStyle)&#xa;self.defaultLinkedSelectedPen.setWidth(self.defaultPenWidth)&#xa;self.defaultLinkedSelectedPen.setCapStyle(QtCore.Qt.RoundCap)&#xa;self.defaultLinkedSelectedPen.setJoinStyle(QtCore.Qt.RoundJoin)&#xa;self.defaultCBPen=QtGui.QPen(self.defaultCBCursorColor)&#xa;self.defaultCBPen.setStyle(self.defaultPenStyle)&#xa;self.defaultCBPen.setWidth(self.defaultPenWidth)&#xa;self.defaultCBPen.setCapStyle(QtCore.Qt.RoundCap)&#xa;self.defaultCBPen.setJoinStyle(QtCore.Qt.RoundJoin)&#xa;self.defaultCBSelectedPen=QtGui.QPen(self.defaultCBCursorColor)&#xa;self.defaultCBSelectedPen.setStyle(self.defaultSelectedPenStyle)&#xa;self.defaultCBSelectedPen.setWidth(self.defaultPenWidth)&#xa;self.defaultCBSelectedPen.setCapStyle(QtCore.Qt.RoundCap)&#xa;self.defaultCBSelectedPen.setJoinStyle(QtCore.Qt.RoundJoin)&#xa;" id="urHWhIMKTXsqt"/>
    <sourcecode value="super(QtWidgets.QGraphicsObject,self).__init__()&#xa;if not isinstance(parentWidget,QtWidgets.QWidget)and type(parentWidget).__name__!=&quot;GraphicsImageViewerWidget&quot;:&#xa;  raise TypeError(&quot;'parentWidget' expected ot be a GraphicsImageViewerWidget; got %s instead&quot;%(type(self._parentWidget).__name__))&#xa;&#xa;self._parentWidget=parentWidget&#xa;if not isinstance(objectType,(int,GraphicsObjectType)):&#xa;  raise TypeError(&quot;Second parameter must be an int or a GraphicsObjectType; got %s instead&quot;%(type(objectType).__name__))&#xa;&#xa;self.__setup_default_appearance__()&#xa;self._objectType=objectType&#xa;self._displayStr=&quot;&quot;&#xa;self._ID_=&quot;&quot;&#xa;self._pointSize=5&#xa;self._c_penWidth=1&#xa;self._c_penStyle=QtCore.Qt.SolidLine&#xa;self._c_activePoint=-1&#xa;self._c_activeControlPoint=-1&#xa;self._control_points=[None,None]&#xa;self._constrainedPoint=None&#xa;self._hover_point=None&#xa;self._movePoint=False&#xa;self.__cachedPath__=Path()&#xa;self._shapeIsEditable=False&#xa;self._movable=True&#xa;self._editable=True&#xa;self._transformable=False&#xa;self._buildMode=False&#xa;self._showlabel=showLabel&#xa;self._opaqueLabel=True&#xa;self._curveBuild=False&#xa;self._positionChangeHasBegun=False&#xa;self.__objectVisible__=True&#xa;self._labelShowsCoordinates=labelShowsPosition&#xa;self._wbarPos=QtCore.QPointF()&#xa;self._deltaPos=QtCore.QPointF()&#xa;self._oldPos=QtCore.QPointF()&#xa;self._vline=QtCore.QLineF()&#xa;self._hline=QtCore.QLineF()&#xa;self._hwbar=QtCore.QLineF()&#xa;self._vwbar=QtCore.QLineF()&#xa;self._crect=QtCore.QRectF()&#xa;self._wrect=QtCore.QRectF()&#xa;self._labelRect=QtCore.QRectF()&#xa;self._labelPos=QtCore.QPointF()&#xa;self.__backend__=None&#xa;self.__parse_parameters__(parameters,pos,visibleFrames,currentFrame)&#xa;if isinstance(label,str)and len(label.strip())>0:&#xa;self._ID_=label if self.__backend__ is not None:&#xa;  self.__backend__.name=self._ID_&#xa;  self.__backend__.updateLinkedObjects()&#xa;&#xa;else:&#xa;  if self.__backend__ is not None and isinstance(self.__backend__.name,str)and len(self.__backend__.name.strip()):&#xa;    self._ID_=self.__backend__.name&#xa;&#xa;  else:&#xa;    if isinstance(self._objectType,int):&#xa;      try:&#xa;        self._ID_=GraphicsObjectType(self._objectType).name&#xa;&#xa;      except:&#xa;        self._ID_=&quot;graphics_object&quot;&#xa;&#xa;&#xa;    else:&#xa;      self._ID_=self._objectType.name&#xa;&#xa;&#xa;&#xa;self._linkedGraphicsObjects=list()&#xa;self._isLinked=len(self._linkedGraphicsObjects)>0&#xa;self._textPen=self.defaultTextPen&#xa;self._textBrush=self.defaultTextBrush&#xa;self._textBackgroundBrush=self.defaultTextBackgroundBrush&#xa;self._textCBPen=self.defaultCBTextPen&#xa;self._textCBBrush=self.defaultCBTextBrush&#xa;self._textFont=self.defaultTextFont&#xa;self._linkedTextPen=self.defaultLinkedTextPen&#xa;self._linkedTextBrush=self.defaultLinkedTextBrush&#xa;self._cursorPen=self.defaultPen&#xa;self._selectedCursorPen=self.defaultSelectedPen&#xa;self._linkedPen=self.defaultLinkedPen&#xa;self._linkedSelectedPen=self.defaultLinkedSelectedPen&#xa;self._cBPen=self.defaultCBPen&#xa;self._cBSelectedPen=self.defaultCBSelectedPen&#xa;self._controlPointPen=QtGui.QPen(QtGui.QColor(50,100,120,200))&#xa;self._controlPointBrush=QtGui.QBrush(QtGui.QColor(200,200,210,120))&#xa;self._testBrush=QtGui.QBrush(QtGui.QColor(100,100,105,120))&#xa;self._controlLinePen=QtGui.QPen(QtGui.QBrush(QtCore.Qt.lightGray),&#xa;1,QtCore.Qt.SolidLine)self.setFlags(QtWidgets.QGraphicsItem.ItemIsMovable|\&#xa;QtWidgets.QGraphicsItem.ItemIsFocusable|\QtWidgets.QGraphicsItem.ItemIsSelectable|\QtWidgets.QGraphicsItem.ItemSendsGeometryChanges|\QtWidgets.QGraphicsItem.ItemSendsScenePositionChanges)self.setAcceptHoverEvents(True)&#xa;if self._objectType==GraphicsObjectType.crosshair_cursor:&#xa;  self.setBoundingRegionGranularity(0.5)&#xa;&#xa;self.__drawObject__()&#xa;self.update()&#xa;if self.__backend__ is not None:&#xa;  self.setVisible(len(self.__backend__.frameIndices)==0 or self.__backend__.hasStateForFrame(self.__backend__.currentFrame))&#xa;&#xa;if self.__backend__ is not None:&#xa;  self.__backend__.frontends.append(self)&#xa;  for f in self.__backend__.frontends:&#xa;    if f!=self:&#xa;      self.signalGraphicsObjectPositionChange.connect(f.slotLinkedGraphicsObjectPositionChange)&#xa;      f.signalGraphicsObjectPositionChange.connect(self.slotLinkedGraphicsObjectPositionChange)&#xa;&#xa;&#xa;&#xa;" id="uGa9mfu1Ot1TN"/>
    <sourcecode value="if isinstance(frameindex,(tuple,list)):&#xa;  if len(frameindex)>0:&#xa;    if len(frameindex)==1 and frameindex[0]is None:&#xa;      frameindex.clear()&#xa;&#xa;    elif not all([isinstance(a,numbers.Integral)and a>=0 for a in frameindex]):&#xa;      raise TypeError(&quot;visible frame indices must be non-negative integers&quot;)&#xa;&#xa;&#xa;&#xa;elif isinstance(frameindex,numbers.Integral):&#xa;  if frameindex&lt;0:&#xa;    raise ValueError(&quot;visible frame index cannot be negative&quot;)&#xa;&#xa;  frameindex=[frameindex]&#xa;&#xa;elif frameindex is None:&#xa;  frameindex=[]&#xa;&#xa;else:&#xa;  raise TypeError(&quot;Index of visible frames (frameindex) expected to be an int or a sequence of int, or None; got %s instead&quot;%type(frameindex).__name__)&#xa;&#xa;self._frameindex=frameindex&#xa;if not isinstance(currentframe,numbers.Integral):&#xa;  raise TypeError(&quot;currentframe expected to be an int got %s instead&quot;%type(currentFrame).__name__)&#xa;&#xa;self._currentframe_=currentframe&#xa;if self._objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  if len(parameters)==5 and all([isinstance(c,numbers.Number)for c in parameters]):&#xa;    if pos is None:&#xa;      pos=QtCore.QPointF(0.,0.)&#xa;&#xa;    self.__backend__=Cursor(pos.x(),&#xa;    pos.y(),float(parameters[0]),float(parameters[1]),float(parameters[2]),float(parameters[3]),float(parameters[4]),frameindex=frameindex,name=self._objectType.name,currentframe=self._currentframe_,graphicstype=self._objectType)super().setPos(pos)&#xa;&#xa;  else:&#xa;    raise ValueError(&quot;For parametric cursor construction, 'parameters' must be a sequence of five 5 numbers; instead got %d elements&quot;%(len(parameters)))&#xa;&#xa;&#xa;else:&#xa;  if parameters is None or(isinstance(parameters,(tuple,list))and len(parameters)==0)\&#xa;  or(isinstance(parameters,Path)and len(parameters)==0)or\self._objectType==GraphicsObjectType.allShapeTypes:&#xa;    self._buildMode=True&#xa;&#xa;  elif isinstance(parameters,QtCore.QLineF):&#xa;    self._objectType=GraphicsObjectType.line&#xa;    self.__backend__=Path(Move(parameters.p1().x(),parameters.p1().y()),&#xa;    Line(parameters.p2().x(),parameters.p2().y()),frameindex=self._frameindex,currentframe=self._currentframe_)if self.__backend__.name is None or len(self.__backend__.name)==0:&#xa;      self.__backend__.name=self._objectType.name&#xa;&#xa;    self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;  elif isinstance(parameters,QtCore.QRectF):&#xa;    self._objectType=GraphicsObjectType.rectangle&#xa;    self.__backend__=Rect(parameters.topLeft().x(),&#xa;    parameters.topLeft().y(),parameters.width(),parameters.height(),name=self._objectType.name,frameindex=self._frameindex,currentframe=self._currentframe_)if self.__backend__.name is None or len(self.__backend__.name)==0:&#xa;      self.__backend__.name=self._objectType.name&#xa;&#xa;    self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;  elif isinstance(parameters,QtGui.QPolygonF):&#xa;    self._objectType=GraphicsObjectType.polygon&#xa;    self.__backend__=Path()&#xa;    for k,p in enumerate(parameters):&#xa;      if k==0:&#xa;        self.__backend__.append(Move(p.x(),p.y()))&#xa;&#xa;      else:&#xa;        self.__backend__.append(Line(p.x(),p.y()))&#xa;&#xa;&#xa;    if self._frameindex is not None and len(self._frameindex):&#xa;      self.__backend__.frameIndices=self._frameindex&#xa;      self.__backend__.currentFrame=self._currentframe_&#xa;&#xa;    if self.__backend__.name is None or len(self.__backend__.name)==0:&#xa;      self.__backend__.name=self._objectType.name&#xa;&#xa;    self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;  elif isinstance(parameters,QtGui.QPainterPath):&#xa;    self._objectType=GraphicsObjectType.path&#xa;    self.__backend__=Path()&#xa;    self.__backend__.adoptPainterPath(parameters)&#xa;    self.__backend__.frameIndices=self._frameindex&#xa;    self.__backend__.currentFrame=self._currentframe_&#xa;    if self.__backend__.name is None or len(self.__backend__.name)==0:&#xa;      self.__backend__.name=self._objectType.name&#xa;&#xa;    self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;  elif isinstance(parameters,(tuple,list)):&#xa;    if all([isinstance(p,(QtCore.QPointF,QtCore.QPoint))for p in parameters]):&#xa;      self._objectType=GraphicsObjectType.polygon&#xa;      self.__backend__=Path()&#xa;      self.__backend__.append(Move(parameters[0].x(),parameters[0].y()))&#xa;      for c in parameters[1:]:&#xa;        self.__backend__.append(Line(c.x(),c.y()))&#xa;&#xa;      self.__backend__.frameIndices=self._frameindex&#xa;      self.__backend__.currentFrame=self._currentframe_&#xa;      if self.__backend__.name is None or len(self.__backend__.name)==0:&#xa;        self.__backend__.name=self._objectType.name&#xa;&#xa;      self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;    elif all([isinstance(p,(Start,Move,Line,Cubic,Quad,Arc,ArcMove))for p in parameters]):&#xa;      self.__backend__=Path(parameters)&#xa;      self._objectType=self.__backend__.type&#xa;      if self._frameindex is not None and len(self._frameindex):&#xa;        self.__backend__.frameIndices=self._frameindex&#xa;        self.__backend__.currentFrame=self._currentframe_&#xa;&#xa;      if self.__backend__.name is None or len(self.__backend__.name)==0:&#xa;        self.__backend__.name=self._objectType.name&#xa;&#xa;      self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;    elif all([isinstance(p,numbers.Number)for p in parameters]):&#xa;      if self._objectType&amp;(GraphicsObjectType.line|GraphicsObjectType.rectangle|GraphicsObjectType.ellipse):&#xa;        if len(parameters)==4:&#xa;          if self._objectType==GraphicsObjectType.line:&#xa;            self.__backend__=Path(Move(parameters[0],parameters[1]),&#xa;            Line(parameters[2],parameters[3]))&#xa;          elif self._objectType==GraphicsObjectType.rectangle:&#xa;            self.__backend__=Rect(parameters[0],parameters[1],&#xa;            parameters[2]-parameters[0],parameters[3]-parameters[1])&#xa;          else:&#xa;            self.__backend__=Ellipse(parameters[0],&#xa;            parameters[1],parameters[2]-parameters[0],parameters[3]-parameters[1])&#xa;          self.__backend__.frameIndices=self._frameindex&#xa;          self.__backend__.currentFrame=self._currentframe_&#xa;          if self.__backend__.name is None or len(self.__backend__.name)==0:&#xa;            self.__backend__.name=self._objectType.name&#xa;&#xa;          self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;        else:&#xa;          raise TypeError(&quot;For line, ellipse or rectangle, a sequence of four scalars were expected&quot;)&#xa;&#xa;&#xa;      elif self._objectType&amp;GraphicsObjectType.point:&#xa;        if len(parameters)in(2,3):&#xa;          x=parameters[0]&#xa;          y=parameters[1]&#xa;          if len(parameters)==3:&#xa;            self._pointSize=parameters[2]&#xa;&#xa;          self.__backend__=Move(parameters[0],parameters[1],&#xa;          frameindex=self._frameindex,currentframe=self._currentframe_)if self.__backend__.name is None or len(self.__backend__.name)==0:&#xa;            self.__backend__.name=self._objectType.name&#xa;&#xa;          self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;        else:&#xa;          raise TypeError(&quot;For a point, 'parameters' is expected to be a sequence of two (x,y) or three (x, y, radius) numbers; got %s instead&quot;%(type(parameters).__name__))&#xa;&#xa;&#xa;      elif self._objectType&amp;(GraphicsObjectType.polygon|GraphicsObjectType.polyline):&#xa;        if len(parameters)%2:&#xa;          raise TypeError(&quot;For polygons or polyline, the numeric parameters must be a sequence with an even number of elements (x0,y0,x1,y1,... etc)&quot;)&#xa;&#xa;        self.__backend__=Path()&#xa;        for k in range(0,len(parameters),2):&#xa;          if k==0:&#xa;            self.__backend__.append(Move(parameters[k],parameters[k+1]))&#xa;&#xa;          else:&#xa;            self.__backend__.append(Line(parameters[k],parameters[k+1]))&#xa;&#xa;&#xa;        self.__backend__.frameIndices=self._frameindex&#xa;        self.__backend__.currentFrame=self._currentframe_&#xa;        if self.__backend__.name is None or len(self.__backend__.name)==0:&#xa;          self.__backend__.name=self._objectType.name&#xa;&#xa;        self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;&#xa;    elif all([isinstance(p,(tuple,list))and len(p)==2 and all([isinstance(cc,numbers.Number)for cc in p])for p in parameters]):&#xa;      self.__backend__=Path()&#xa;      self.__backend__.append(Move(parameters[0][0],parameters[0][1]))&#xa;      for p in parameters[1:]:&#xa;        self.__backend__.append(Line(p[0],p[1]))&#xa;&#xa;      if self._objectType==GraphicsObjectType.polygon:&#xa;        self.__backend__.closed=True&#xa;&#xa;      else:&#xa;        self._objectType=GraphicsObjectType.polyline&#xa;&#xa;      self.__backend__.frameIndices=self._frameindex&#xa;      self.__backend__.currentFrame=self._currentframe_&#xa;      if self.__backend__.name is None or len(self.__backend__.name)==0:&#xa;        self.__backend__.name=self._objectType.name&#xa;&#xa;      self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;&#xa;&#xa;" id="uv8pl3Qge5FFz"/>
    <sourcecode value="if isinstance(parameters,PlanarGraphics):&#xa;self._objectType=parameters.type if pos is not None and not isinstance(pos,(QtCore.QPoint,QtCore.QPointF)):&#xa;  raise TypeError(&quot;When given, pos must be a QPoint or QPointF&quot;)&#xa;&#xa;if isinstance(parameters,(Cursor,Ellipse,Rect,Path,Text,str)):&#xa;  if isinstance(parameters,(Cursor,Ellipse,Rect,Path)):&#xa;    if isinstance(parameters,Path):&#xa;      if len(parameters)==0:&#xa;        self.__parametric_constructor__(parameters,pos,frameindex,currentframe)&#xa;&#xa;      elif len(parameters)==1:&#xa;        if isinstance(parameters[0],(Move,Line)):&#xa;          self._objectType=GraphicsObjectType.point&#xa;&#xa;        else:&#xa;          self._objectType=parameters[0].type&#xa;&#xa;        self.__backend__=parameters[0]&#xa;&#xa;      else:&#xa;        self._objectType=parameters.type&#xa;        self.__backend__=parameters&#xa;&#xa;&#xa;    else:&#xa;      self.__backend__=parameters&#xa;      self._objectType=self.__backend__.type&#xa;&#xa;    if not isinstance(parameters,Cursor):&#xa;      self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;&#xa;  elif isinstance(parameters,str):&#xa;    painter.drawText(parameters)&#xa;    self.__backend__=Text(parameters)&#xa;    self._objectType=GraphicsObjectType.text&#xa;&#xa;  else:&#xa;    raise TypeError(&quot;Inavlid 'parameters' type for backend-based construction: %s&quot;%type(parameters).__name__)&#xa;&#xa;  self._buildMode=False&#xa;  self._frameindex=self.__backend__.frameIndices&#xa;  self._currentframe_=self.__backend__.currentFrame&#xa;  if self.__backend__.name is None or len(self.__backend__.name)==0:&#xa;    self.__backend__.name=self._objectType.name&#xa;    self.__backend__.updateLinkedObjects()&#xa;&#xa;  if pos is None or(isinstance(pos,(QtCore.QPoint,QtCore.QPointF))and pos.isNull()):&#xa;    if self.__backend__ is not None:&#xa;      if self.__backend__.hasStateForFrame(self._currentframe_):&#xa;        pos=self.__backend__.pos&#xa;&#xa;      else:&#xa;        pos=QtCore.QPointF(0,0)&#xa;&#xa;&#xa;    else:&#xa;      pos=QtCore.QPointF(0,0)&#xa;&#xa;&#xa;  super().setPos(pos)&#xa;&#xa;else:&#xa;  self.__parametric_constructor__(parameters,pos,frameindex,currentframe)&#xa;&#xa;" id="uptK8N0FILpcC"/>
    <sourcecode value="return&quot;%s, type %s, ID %s, backend %s&quot;\&#xa;%(self.__repr__(),self._objectType.name,self._ID_,self.backend.__repr__())" id="ufiYxplm7HVM5"/>
    <sourcecode value="nameStr=&quot;&quot;&#xa;if value is None:&#xa;  if self.__backend__ is None:&#xa;    nameStr=self._ID_&#xa;&#xa;  else:&#xa;    nameStr=self.__backend__.name&#xa;&#xa;&#xa;elif isinstance(value,str):&#xa;  nameStr=value&#xa;&#xa;else:&#xa;  raise TypeError(&quot;Expecting a string argument, or None; got %s instead&quot;%(type(value).__name__))&#xa;&#xa;if self.__backend__ is not None and self.__backend__.hasStateForFrame(self._currentframe_):&#xa;  if not isinstance(self.__backend__,Path):&#xa;    stateDescriptor=self.__backend__.getState(self._currentframe_)&#xa;    if isinstance(stateDescriptor,list)and len(stateDescriptor):&#xa;      stateDescriptor=stateDescriptor[0]&#xa;&#xa;    if stateDescriptor is not None and len(stateDescriptor):&#xa;      if self._parentWidget is not None:&#xa;        if self._labelShowsCoordinates:&#xa;          if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;            if self._objectType&amp;GraphicsObjectType.vertical_cursor:&#xa;              nameStr+=&quot;: %g&quot;%stateDescriptor.x&#xa;&#xa;            elif self._objectType==GraphicsObjectType.horizontal_cursor:&#xa;              nameStr+=&quot;: %g&quot;%stateDescriptor.y&#xa;&#xa;            else:&#xa;              nameStr+=&quot;: %g, %g&quot;%(stateDescriptor.x,stateDescriptor.y)&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;self._displayStr=nameStr&#xa;" id="u1GNH9p6kWvqi"/>
    <sourcecode value="if self.__backend__ is not None:&#xa;  if self._buildMode or self.editMode:&#xa;    if self.__cachedPath__ is not None and len(self.__cachedPath__)>0:&#xa;      path.addPath(self.__cachedPath__())&#xa;      if len(self.__cachedPath__)>1:&#xa;        for k,element in enumerate(self.__cachedPath__):&#xa;          path.addEllipse(element.x,element.y,&#xa;          self._pointSize*2.,self._pointSize*2.)&#xa;&#xa;&#xa;    path.addRect(sc.sceneRect())&#xa;&#xa;  path.addPath(self.__backend__())&#xa;  self.__setDisplayStr__()&#xa;  self.__updateLabelRect__()&#xa;  path.addRect(self._labelRect)&#xa;  if self.isSelected():&#xa;    if self._isLinked:&#xa;      pen=self._linkedSelectedPen&#xa;&#xa;    else:&#xa;      pen=self._selectedCursorPen&#xa;&#xa;&#xa;  else:&#xa;    if self._isLinked:&#xa;      pen=self._linkedPen&#xa;&#xa;    else:&#xa;      pen=self._cursorPen&#xa;&#xa;&#xa;  pathStroker=QtGui.QPainterPathStroker(pen)&#xa;  return pathStroker.createStroke(path)&#xa;&#xa;else:&#xa;if self.__cachedPath__ is not None and len(self.__cachedPath__)>0:&#xa;  pathStroker=QtGui.QPainterPathStroker(self._selectedCursorPen)&#xa;  path.addPath(pathStroker.createStroke(self.__cachedPath__()))&#xa;&#xa;path.addRect(sc.sceneRect())&#xa;return path&#xa;" id="uRjxekiJjuaMf"/>
    <sourcecode value="if len(self._displayStr)>0:&#xa;  fRect=self._parentWidget.fontMetrics().boundingRect(self._displayStr)&#xa;  self._labelRect.setRect(fRect.x(),fRect.y(),fRect.width(),fRect.height())&#xa;&#xa;else:&#xa;  self._labelRect=QtCore.QRectF()&#xa;&#xa;" id="un4sYeKFjBg2D"/>
    <sourcecode value="if self._objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  return&#xa;&#xa;else:&#xa;  if len(self.__cachedPath__):&#xa;    if self.__backend__ is None:&#xa;      if self._objectType==GraphicsObjectType.rectangle:&#xa;        self.__backend__=Rect(self.__cachedPath__[0].x,&#xa;        self.__cachedPath__[0].y,self.__cachedPath__[1].x-self.__cachedPath__[0].x,self.__cachedPath__[1].y-self.__cachedPath__[0].y)&#xa;      elif self._objectType==GraphicsObjectType.ellipse:&#xa;        self.__backend__=Ellipse(self.__cachedPath__[0].x,&#xa;        self.__cachedPath__[0].y,self.__cachedPath__[1].x-self.__cachedPath__[0].x,self.__cachedPath__[1].y-self.__cachedPath__[0].y)&#xa;      else:&#xa;        self.__backend__=self.__cachedPath__.copy()&#xa;&#xa;&#xa;    super().setPos(self.__backend__.pos)&#xa;    self._buildMode=False&#xa;    self._control_points=[None,None]&#xa;    self._hover_point=None&#xa;    self.signalROIConstructed.emit(self.objectType,self.name)&#xa;    if self.__backend__ is not None:&#xa;      self.__backend__.frontends.append(self)&#xa;&#xa;&#xa;  else:&#xa;    self.signalROIConstructed.emit(0,&quot;&quot;)&#xa;&#xa;&#xa;self.update()&#xa;" id="usmW0H0Kbjk0T"/>
    <sourcecode value="if self.__backend__ is None:&#xa;  return&#xa;&#xa;if len(self._displayStr)>0:&#xa;  self.__setDisplayStr__(self._displayStr)&#xa;&#xa;else:&#xa;  self.__setDisplayStr__()&#xa;&#xa;if self.isCursor:&#xa;  self.__drawCursor__()&#xa;&#xa;else:&#xa;  self.__drawROI__()&#xa;&#xa;" id="uyyK8FWybxqxo"/>
    <sourcecode value="if self._buildMode:&#xa;  return&#xa;&#xa;self.__updateCachedPathFromBackend__()&#xa;self.update()&#xa;" id="uWRm726SzuVgH"/>
    <sourcecode value="state=self.__backend__.currentState&#xa;if state is None or len(state)==0:&#xa;  return&#xa;&#xa;self.prepareGeometryChange()&#xa;try:&#xa;  self._vline=QtCore.QLineF(self.mapFromScene(QtCore.QPointF(state.x,0)),&#xa;  self.mapFromScene(QtCore.QPointF(state.x,state.height)))self._hline=QtCore.QLineF(self.mapFromScene(QtCore.QPointF(0,state.y)),&#xa;  self.mapFromScene(QtCore.QPointF(state.width,state.y)))if self._positionChangeHasBegun:&#xa;    newY=self._wbarPos.y()+self._deltaPos.y()&#xa;    if newY&lt;0:&#xa;      newY=0&#xa;&#xa;    elif newY>state.height-1:&#xa;      newY=state.height-1&#xa;&#xa;    self._hwbar=QtCore.QLineF(self.mapFromScene(QtCore.QPointF(state.x-state.xwindow/2,&#xa;    newY)),self.mapFromScene(QtCore.QPointF(state.x+state.xwindow/2,newY)))&#xa;  else:&#xa;    self._hwbar=QtCore.QLineF(self.mapFromScene(QtCore.QPointF(state.x-state.xwindow/2,&#xa;    self._wbarPos.y())),self.mapFromScene(QtCore.QPointF(state.x+state.xwindow/2,self._wbarPos.y())))&#xa;  if self._positionChangeHasBegun:&#xa;    newX=self._wbarPos.x()+self._deltaPos.x()&#xa;    if newX&lt;0:&#xa;      newX=0&#xa;&#xa;    elif newX>state.width-1:&#xa;      newX=state.width-1&#xa;&#xa;    self._vwbar=QtCore.QLineF(self.mapFromScene(QtCore.QPointF(newX,&#xa;    state.y-state.ywindow/2)),self.mapFromScene(QtCore.QPointF(newX,state.y+state.ywindow/2)))&#xa;  else:&#xa;    self._vwbar=QtCore.QLineF(self.mapFromScene(QtCore.QPointF(self._wbarPos.x(),&#xa;    state.y-state.ywindow/2)),self.mapFromScene(QtCore.QPointF(self._wbarPos.x(),state.y+state.ywindow/2)))&#xa;  self._crect=QtCore.QRectF(self.mapFromScene(QtCore.QPointF(state.x-state.radius,&#xa;  state.y-state.radius)),self.mapFromScene(QtCore.QPointF(state.x+state.radius,state.y+state.radius)))self._wrect=QtCore.QRectF(self.mapFromScene(QtCore.QPointF(state.x-state.xwindow/2,&#xa;  state.y-state.ywindow/2)),self.mapFromScene(QtCore.QPointF(state.x+state.xwindow/2,state.y+state.ywindow/2)))super().update()&#xa;&#xa;except Exception as exc:&#xa;  traceback.print_exc()&#xa;  print(&quot;in %s %s&quot;%(self.objectType,self.name))&#xa;&#xa;" id="ulNraFxp6Tdp9"/>
    <sourcecode value="self._isLinked=len(self._linkedGraphicsObjects)>0&#xa;return self._isLinked&#xa;" id="utORtOZ2cZ0FV"/>
    <sourcecode value="return other.ID in self._linkedGraphicsObjects&#xa;" id="uFpMJEo2JvPpX"/>
    <sourcecode value="return GraphicsObject.Type&#xa;" id="u3edXua4tXnvR"/>
    <sourcecode value="if not self.hasStateDescriptor:&#xa;  return&#xa;&#xa;if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  return&#xa;&#xa;path=self.graphicsItem.shape()&#xa;elements=[path.elementAt(k)for k in range(path.elementCount())]&#xa;pathBreaks=[k for(k,e)in enumerate(elements)if e.type==QtGui.QPainterPath.MoveToElement]&#xa;pathBreaks.append(len(elements))&#xa;paths=[[e for e in elements[slice(pathBreaks[k],pathBreaks[k+1])]]for k in range(len(pathBreaks)-1)]&#xa;return paths&#xa;" id="u4Lh4jpvh9vC0"/>
    <sourcecode value="if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  return&#xa;&#xa;sc=self.scene()&#xa;if self.scene()is None:&#xa;  try:&#xa;    sc=self._parentWidget.scene&#xa;&#xa;  except:&#xa;    return&#xa;&#xa;&#xa;if sc is None:&#xa;  return&#xa;&#xa;pad=self._pointSize&#xa;left=pad&#xa;right=sc.width()-pad&#xa;top=pad&#xa;bottom=sc.height()-pad&#xa;if self.__backend__ is None:&#xa;  return&#xa;&#xa;if isinstance(self.__backend__,(Ellipse,Rect)):&#xa;  self.__cachedPath__=Path(Move(self.__backend__.x,self.__backend__.y),&#xa;  Line(self.__backend__.x+self.__backend__.w,self.__backend__.y+self.__backend__.h))&#xa;elif isinstance(self.__backend__,Path):&#xa;  if self.__backend__.hasStateForFrame(self._currentframe_):&#xa;    self.__cachedPath__=self.__backend__.asPath(self._currentframe_)&#xa;&#xa;  else:&#xa;    self.__cachedPath__=Path()&#xa;&#xa;&#xa;else:&#xa;  self.__cachedPath__=self.__backend__.asPath()&#xa;&#xa;" id="uQqidcgRsScA2"/>
    <sourcecode value="self.setVisible(True)&#xa;" id="uEnNMAxlS2y1N"/>
    <sourcecode value="self.setvibisle(False)&#xa;" id="uOxvqfbDevXe9"/>
    <sourcecode value="bRect=QtCore.QRectF()&#xa;sc=self.scene()&#xa;if sc is None:&#xa;  if self._parentWidget is not None:&#xa;    sc=self._parentWidget.scene&#xa;&#xa;&#xa;if sc is None:&#xa;  return bRect&#xa;&#xa;self.__setDisplayStr__(self._ID_)&#xa;self.__updateLabelRect__()&#xa;try:&#xa;  if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;    state=self.__backend__.getState(self._currentframe_)&#xa;    if state is not None and len(state):&#xa;      if self.isVerticalCursor:&#xa;        bRect=self.mapRectFromScene(QtCore.QRectF(state.x-state.xwindow/2,&#xa;        0,state.xwindow,state.height))&#xa;      elif self.isHorizontalCursor:&#xa;        bRect=self.mapRectFromScene(QtCore.QRectF(0,&#xa;        state.y-state.ywindow/2,state.width,state.ywindow))&#xa;      elif self.isCrosshairCursor:&#xa;        bRect=self.mapRectFromScene(QtCore.QRectF(-state.width//2,&#xa;        -state.height//2,state.width,state.height))&#xa;      else:&#xa;        bRect=self.mapRectFromScene(QtCore.QRectF(state.x-state.xwindow/2,&#xa;        state.y-state.ywindow/2,state.xwindow,state.ywindow))&#xa;      if not self._labelRect.isNull():&#xa;        bRect|=self._labelRect&#xa;&#xa;&#xa;    else:&#xa;      bRect=QtCore.QRectF()&#xa;&#xa;&#xa;  else:&#xa;    if self.__backend__ is not None and self.__backend__.hasStateForFrame(self._currentframe_)and self.__backend__()is not None:&#xa;      bRect=self.mapRectFromScene(self.__backend__().boundingRect())&#xa;      if self.editMode:&#xa;        bRect|=self.mapRectFromScene(self.__cachedPath__().boundingRect())&#xa;&#xa;&#xa;    else:&#xa;      if self._buildMode:&#xa;        bRect=sc.sceneRect()&#xa;&#xa;      else:&#xa;        bRect=QtCore.QRectF()&#xa;&#xa;&#xa;    if not self._labelRect.isNull():&#xa;      lrect=QtCore.QRectF(self._labelRect.topLeft(),&#xa;      self._labelRect.bottomRight())lrect.moveBottomLeft(bRect.center())&#xa;      bRect|=lrect&#xa;&#xa;&#xa;&#xa;except Exception as exc:&#xa;  traceback.print_exc()&#xa;  print(&quot;in %s %s frame %d&quot;%(self.type,self.name,self.currentFrame))&#xa;&#xa;return bRect&#xa;" id="uU3mcSlZl5jVm"/>
    <sourcecode value="if not self.isCursor:&#xa;  if self.isText:&#xa;    raise NotImplementedError(&quot;Scene coordinates from text objects not yet implemented&quot;)&#xa;&#xa;  if len(self.__cachedPath__>0):&#xa;    return Path([self.mapToScene(p)for p in self.__cachedPath__.qPoints()])&#xa;&#xa;&#xa;" id="uaZ3dlLE58rLj"/>
    <sourcecode value="if self.isCursor:&#xa;  stateDescriptor=self.__backend__.getState(self._currentframe_)&#xa;  if stateDescriptor and len(stateDescriptor):&#xa;    p=self.mapToScene(QtCore.QPointF(self.__backend__.x,self.__backend__.y))&#xa;    return Cursor(self.name,p.x(),p.y(),self.__backend__.width,self.__backend__.height,self.__backend__.xwindow,self.__backend__.ywindow,self.__backend__.radius)&#xa;&#xa;&#xa;" id="uNHXV506fTBZ0"/>
    <sourcecode value="p=self.mapToScene(self.__backend__.pos)&#xa;return p.x(),p.y()&#xa;" id="ue6qmWDTqbs5R"/>
    <sourcecode value="stateDescriptor=self.__backend__.getState(self._currentframe_)&#xa;if len(stateDescriptor):&#xa;  if self.isCursor:&#xa;    p=self.mapToScene(QtCore.QPointF(self.__backend__.x,self.__backend__.y))&#xa;    ret=[p.x(),p.y(),self.__backend__.width,self.__backend__.height,self.__backend__.xwindow,self.__backend__.ywindow,self.__backend__.radius]&#xa;&#xa;  else:&#xa;    if isinstance(stateDescriptor,list):&#xa;      pp=list()&#xa;      for s in stateDescriptor:&#xa;        if s:&#xa;          pp.append([])&#xa;&#xa;        else:&#xa;          pp.append(None)&#xa;&#xa;&#xa;&#xa;    pp=[self.mapToScene(p)for p in stateDescriptor.qPoints()]&#xa;    if self.isPoint:&#xa;      ret=[pp[0].x(),pp[0].y()]&#xa;&#xa;    elif self.isLine:&#xa;      ret=[pp[0].x(),pp[0].y(),pp[1].x(),pp[1].y()]&#xa;&#xa;    elif self.isRectangle or self.isEllipse:&#xa;      ret=[pp[0].x(),pp[0].y(),pp1.x()-pp0.x(),pp1.y()-pp0.y()]&#xa;&#xa;    elif self.isPolygon:&#xa;      ret=[[p.x(),p.y()]for p in pp]&#xa;&#xa;    elif self.isPath:&#xa;      raise NotImplementedError(&quot;Scene coordinates from path objects not yet implemented&quot;)&#xa;&#xa;    elif self.isText:&#xa;      raise NotImplementedError(&quot;Scene coordinates from text objects not yet implemented&quot;)&#xa;&#xa;&#xa;&#xa;return ret&#xa;" id="uMgz8oIj8I6h9"/>
    <sourcecode value="path=QtGui.QPainterPath()&#xa;sc=self.scene()&#xa;if sc is None:&#xa;  if self._parentWidget is not None:&#xa;    sc=self._parentWidget.scene&#xa;&#xa;&#xa;if sc is None:&#xa;  return path&#xa;&#xa;if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  state=self.__backend__.getState(self._currentframe_)&#xa;  if state is not None and len(state):&#xa;    if self.isCrosshairCursor:&#xa;      path.moveTo(state.x,-state.height//2-self._deltaPos.y())&#xa;      path.lineTo(state.x,state.height//2-self._deltaPos.y())&#xa;      path.moveTo(-state.width//2-self._deltaPos.x(),state.y)&#xa;      path.lineTo(state.width//2-self._deltaPos.x(),state.y)&#xa;      self.__setDisplayStr__()&#xa;      self.__updateLabelRect__()&#xa;      path.addRect(self._labelRect)&#xa;&#xa;    else:&#xa;      path.addRect(self.boundingRect())&#xa;&#xa;&#xa;  return path&#xa;&#xa;else:&#xa;  if self.__backend__ is not None and self.__backend__.hasStateForFrame(self._currentframe_)and self.__backend__()is not None:&#xa;    path.addPath(self.mapFromScene(self.__backend__()))&#xa;    if self._objectType==GraphicsObjectType.line:&#xa;      p0=self.mapFromScene(QtCore.QPointF(self.__backend__[0].x,self.__backend__[0].y))&#xa;      p1=self.mapFromScene(QtCore.QPointF(self.__backend__[1].x,self.__backend__[1].y))&#xa;      path.addRect(QtCore.QRectF(p0,p1))&#xa;&#xa;    elif self._objectType==GraphicsObjectType.path:&#xa;      path.addRect(self.mapRectFromScene(self.__backend__().boundingRect()))&#xa;&#xa;    if self.editMode:&#xa;      if self.__cachedPath__ is not None and len(self.__cachedPath__)>0:&#xa;        path.addPath(self.mapFromScene(self.__cachedPath__()))&#xa;&#xa;      if len(self.__cachedPath__)>1:&#xa;        for k,element in enumerate(self.__cachedPath__):&#xa;          pt=self.mapFromScene(QtCore.QPointF(element.x,element.y))&#xa;          path.addEllipse(pt,self._pointSize,self._pointSize)&#xa;&#xa;&#xa;&#xa;    self.__setDisplayStr__()&#xa;    self.__updateLabelRect__()&#xa;    lrect=QtCore.QRectF(self._labelRect.topLeft(),&#xa;    self._labelRect.bottomRight())lrect.moveBottomLeft(self.boundingRect().center())&#xa;    path.addRect(lrect)&#xa;    path.addRect(self.boundingRect())&#xa;    path.setFillRule(QtCore.Qt.WindingFill)&#xa;    return path&#xa;&#xa;  else:&#xa;  if self._buildMode:&#xa;    if self.__cachedPath__ is not None and len(self.__cachedPath__)>0:&#xa;      path.addPath(self.__cachedPath__())&#xa;&#xa;    path.addRect(sc.sceneRect())&#xa;&#xa;&#xa;return path&#xa;" id="ulmqj3fjhWjpF"/>
    <sourcecode value="if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  if all([isinstance(v,numbers.Real)for v in(x,y)]):&#xa;    super().setPos(x,y)&#xa;&#xa;  elif isinstance(x,QtCore.QPointF):&#xa;    super().setPos(x)&#xa;&#xa;  elif isinstance(x,QtCore.QPoint):&#xa;    super().setPos(QtCore.QPointF(x))&#xa;&#xa;  else:&#xa;    raise TypeError(&quot;Either x and y must be supplied as floats, or x must be a QPointF or QPoint&quot;)&#xa;&#xa;&#xa;else:&#xa;  if all([isinstance(v,numbers.Real)for v in(x,y)]):&#xa;    super().setPos(x,y)&#xa;&#xa;  elif isinstance(x,QtCore.QPointF):&#xa;    super().setPos(x)&#xa;&#xa;  elif isinstance(x,QtCore.QPoint):&#xa;    super().setPos(QtCore.QPointF(x))&#xa;&#xa;  else:&#xa;    raise TypeError(&quot;Either x and y must be supplied as floats, or x must be a QPointF or QPoint&quot;)&#xa;&#xa;&#xa;self.redraw()&#xa;" id="uLD4cta6TwjeH"/>
    <sourcecode value="if self.scene():&#xa;  self.scene().update(self.boundingRect())&#xa;&#xa;else:&#xa;  super().update()&#xa;&#xa;" id="uEmMSsgQ6w1tO"/>
    <sourcecode value="self.__drawObject__()&#xa;self.__setDisplayStr__()&#xa;self.__updateLabelRect__()&#xa;self.update()&#xa;" id="ugZ9M60nevUzR"/>
    <sourcecode value="try:&#xa;  if not self.__objectVisible__:&#xa;    return&#xa;&#xa;  if not self._buildMode:&#xa;    if self.__backend__ is None:&#xa;      return&#xa;&#xa;    if not self.__backend__.hasStateForFrame(self.__backend__.currentFrame):&#xa;      return&#xa;&#xa;&#xa;  self.__updateLabelRect__()&#xa;  if self._buildMode:&#xa;    painter.setPen(self._selectedCursorPen)&#xa;    textPen=self._textPen&#xa;&#xa;  else:&#xa;    if self.isSelected():&#xa;      if self._isLinked:&#xa;        painter.setPen(self._linkedSelectedPen)&#xa;        textPen=self._linkedTextPen&#xa;&#xa;      elif len(self.__backend__.frontends)>0:&#xa;        painter.setPen(self._cBSelectedPen)&#xa;        textPen=self._textCBPen&#xa;&#xa;      else:&#xa;        painter.setPen(self._selectedCursorPen)&#xa;        textPen=self._textPen&#xa;&#xa;&#xa;    else:&#xa;      if self._isLinked:&#xa;        painter.setPen(self._linkedPen)&#xa;        textPen=self._linkedTextPen&#xa;&#xa;      elif len(self.__backend__.frontends)>0:&#xa;        painter.setPen(self._cBPen)&#xa;        textPen=self._textCBPen&#xa;&#xa;      else:&#xa;        painter.setPen(self._cursorPen)&#xa;        textPen=self._textPen&#xa;&#xa;&#xa;&#xa;  labelPos=None&#xa;  painter.setRenderHints(QtGui.QPainter.Antialiasing|QtGui.QPainter.TextAntialiasing)&#xa;  if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;    lines=None&#xa;    rects=None&#xa;    state=self.__backend__.getState(self.__backend__.currentFrame)&#xa;    if state is None or len(state)==0:&#xa;      return&#xa;&#xa;    if self._objectType==GraphicsObjectType.vertical_cursor:&#xa;      lines=[self._vline,self._hwbar]&#xa;      labelPos=self.mapFromScene(QtCore.QPointF(self.__backend__.x-self._labelRect.width()/2,&#xa;      self._labelRect.height()))&#xa;    elif self._objectType==GraphicsObjectType.horizontal_cursor:&#xa;      lines=[self._hline,self._vwbar]&#xa;      labelPos=self.mapFromScene(QtCore.QPointF(0,self.__backend__.height/2-self._labelRect.height()/2))&#xa;&#xa;    elif self._objectType==GraphicsObjectType.crosshair_cursor:&#xa;      lines=[self._vline,self._hline]&#xa;      labelPos=self.mapFromScene(QtCore.QPointF(self.__backend__.x-self._labelRect.width()/2,&#xa;      self._labelRect.height()))rects=[self._wrect]&#xa;&#xa;    else:&#xa;      rects=[self._crect]&#xa;      labelPos=self.mapFromScene(QtCore.QPointF(self.__backend__.x-self._labelRect.width()/2,&#xa;      self.__backend__.y-self._labelRect.height()))&#xa;    if lines is not None:&#xa;      painter.drawLines(lines)&#xa;&#xa;    if rects is not None:&#xa;      painter.drawRects(rects)&#xa;&#xa;&#xa;  else:&#xa;    if self._buildMode:&#xa;      if len(self.__cachedPath__)==0:&#xa;        return&#xa;&#xa;      painter.setPen(self._selectedCursorPen)&#xa;      if self.objectType&amp;GraphicsObjectType.path:&#xa;        painter.drawPath(self.__cachedPath__)&#xa;        if self._curveBuild and self._hover_point is not None:&#xa;          if self._control_points[0]is not None:&#xa;            path=QtGui.QPainterPath(self.__cachedPath__[-1].point())&#xa;            if self._control_points[1]is not None:&#xa;              path.cubicTo(self._control_points[0],&#xa;              self._control_points[1],self._hover_point)&#xa;            else:&#xa;              path.quadTo(self._control_points[0],&#xa;              self._hover_point)&#xa;            painter.drawPath(path)&#xa;&#xa;&#xa;&#xa;      if len(self.__cachedPath__)>1:&#xa;        if self.objectType&amp;GraphicsObjectType.line:&#xa;          painter.drawLine(self.__cachedPath__[-2].point(),&#xa;          self.__cachedPath__[-1].point())&#xa;        elif self.objectType&amp;GraphicsObjectType.rectangle:&#xa;          painter.drawRect(QtCore.QRectF(self.__cachedPath__[-2].point(),&#xa;          self.__cachedPath__[-1].point()))&#xa;        elif self.objectType&amp;GraphicsObjectType.ellipse:&#xa;          painter.drawEllipse(QtCore.QRectF(self.__cachedPath__[-2].point(),&#xa;          self.__cachedPath__[-1].point()))&#xa;        elif self.objectType&amp;GraphicsObjectType.polygon:&#xa;          for k,element in enumerate(self.__cachedPath__):&#xa;            if k>0:&#xa;              painter.drawLine(self.__cachedPath__[k-1].point(),&#xa;              self.__cachedPath__[k].point())&#xa;&#xa;&#xa;&#xa;      painter.setPen(self._controlPointPen)&#xa;      painter.setBrush(self._controlPointBrush)&#xa;      for k,element in enumerate(self.__cachedPath__):&#xa;        painter.drawEllipse(element.x-self._pointSize,&#xa;        element.y-self._pointSize,self._pointSize*2.,self._pointSize*2.)if k>0:&#xa;          painter.drawLine(self.__cachedPath__[k-1].point(),&#xa;          element.point())&#xa;&#xa;      if self.objectType&amp;GraphicsObjectType.path:&#xa;        if self._control_points[0]is not None:&#xa;          painter.drawEllipse(self._control_points[0].x()-self._pointSize,&#xa;          self._control_points[0].y()-self._pointSize,self._pointSize*2.,self._pointSize*2.)painter.drawLine(self.__cachedPath__[-1].point(),&#xa;          self._control_points[0])if self._control_points[1]is not None:&#xa;            painter.drawEllipse(self._control_points[1].x()-self._pointSize,&#xa;            self._control_points[1].y()-self._pointSize,self._pointSize*2.,self._pointSize*2.)painter.drawLine(self._control_points[0],&#xa;            self._control_points[1])if self._hover_point is not None:&#xa;              painter.drawEllipse(self._hover_point.x()-self._pointSize,&#xa;              self._hover_point.y()-self._pointSize,self._pointSize*2.,self._pointSize*2.)painter.drawLine(self._control_points[1],&#xa;              self._hover_point)&#xa;&#xa;          else:&#xa;            if self._hover_point is not None:&#xa;              painter.drawEllipse(self._hover_point.x()-self._pointSize,&#xa;              self._hover_point.y()-self._pointSize,self._pointSize*2.,self._pointSize*2.)painter.drawLine(self._control_points[0],&#xa;              self._hover_point)&#xa;&#xa;&#xa;        elif self._hover_point is not None:&#xa;          painter.drawEllipse(self._hover_point.x()-self._pointSize,&#xa;          self._hover_point.y()-self._pointSize,self._pointSize*2.,self._pointSize*2.)painter.drawLine(self.__cachedPath__[-1].point(),&#xa;          self._hover_point)&#xa;&#xa;      elif self._hover_point is not None:&#xa;        painter.drawEllipse(self._hover_point.x()-self._pointSize,&#xa;        self._hover_point.y()-self._pointSize,self._pointSize*2.,self._pointSize*2.)painter.drawLine(self.__cachedPath__[-1].point(),&#xa;        self._hover_point)if self.objectType&amp;GraphicsObjectType.line:&#xa;          painter.drawLine(self.__cachedPath__[-1].point(),&#xa;          self._hover_point)&#xa;        elif self.objectType&amp;GraphicsObjectType.rectangle:&#xa;          painter.drawRect(QtCore.QRectF(self.__cachedPath__[-1].point(),&#xa;          self._hover_point))&#xa;        elif self.objectType&amp;GraphicsObjectType.ellipse:&#xa;          painter.drawEllipse(QtCore.QRectF(self.__cachedPath__[-1].point(),&#xa;          self._hover_point))&#xa;        elif self.objectType&amp;GraphicsObjectType.polygon:&#xa;          painter.drawLine(self.__cachedPath__[-1].point(),&#xa;          self._hover_point)&#xa;&#xa;      labelPos=self.boundingRect().center()&#xa;&#xa;    else:&#xa;      if self.isSelected():&#xa;        if self._isLinked:&#xa;          painter.setPen(self._linkedSelectedPen)&#xa;&#xa;        elif self.sharesBackend:&#xa;          painter.setPen(self._cBSelectedPen)&#xa;&#xa;        else:&#xa;          painter.setPen(self._selectedCursorPen)&#xa;&#xa;&#xa;      else:&#xa;        if self._isLinked:&#xa;          painter.setPen(self._linkedPen)&#xa;&#xa;        elif self.sharesBackend:&#xa;          painter.setPen(self._cBPen)&#xa;&#xa;        else:&#xa;          painter.setPen(self._cursorPen)&#xa;&#xa;&#xa;      if self.objectType&amp;GraphicsObjectType.point:&#xa;        if self._isLinked:&#xa;          brush=QtGui.QBrush(self.defaultLinkedCursorColor)&#xa;&#xa;        else:&#xa;          brush=QtGui.QBrush(self.defaultColor)&#xa;&#xa;        painter.setBrush(brush)&#xa;&#xa;      if self.__backend__ is not None:&#xa;        if self._objectType==GraphicsObjectType.ellipse:&#xa;          r_=self.mapRectFromScene(self.__backend__.x,&#xa;          self.__backend__.y,self.__backend__.w,self.__backend__.h)painter.drawEllipse(r_)&#xa;&#xa;        elif self._objectType==GraphicsObjectType.rectangle:&#xa;          r_=self.mapRectFromScene(self.__backend__.x,&#xa;          self.__backend__.y,self.__backend__.w,self.__backend__.h)painter.drawRect(r_)&#xa;&#xa;        elif self._objectType==GraphicsObjectType.point:&#xa;          p_=self.mapFromScene(self.__backend__.x,&#xa;          self.__backend__.y)r_=self.mapRectFromScene(self.__backend__.x,&#xa;          self.__backend__.y,self.__backend__.w,self.__backend__.h)painter.drawPoint(p_)&#xa;          painter.drawEllipse(r_)&#xa;&#xa;        else:&#xa;          path=self.__backend__.asPath(frame=self._currentframe_)&#xa;          qpath=self.mapFromScene(path())&#xa;          painter.drawPath(qpath)&#xa;&#xa;&#xa;      labelPos=self.boundingRect().center()&#xa;      if self.editMode:&#xa;        painter.setPen(self._controlPointPen)&#xa;        painter.setBrush(self._controlPointBrush)&#xa;        if self.__cachedPath__ is not None and len(self.__cachedPath__)>0:&#xa;          if self.objectType&amp;GraphicsObjectType.path:&#xa;            for k,element in enumerate(self.__cachedPath__):&#xa;              if isinstance(element,Quad):&#xa;                pt=self.mapFromScene(QtCore.QPointF(element.x,element.y))&#xa;                cp=self.mapFromScene(QtCore.QPointF(element.cx,element.cy))&#xa;                painter.drawEllipse(cp.x()-self._pointSize,\&#xa;                cp.y()-self._pointSize,\self._pointSize*2.,self._pointSize*2.)painter.drawEllipse(pt.x()-self._pointSize,\&#xa;                pt.y()-self._pointSize,\self._pointSize*2.,self._pointSize*2.)painter.drawLine(self.mapFromScene(self.__cachedPath__[k-1].point()),cp)&#xa;                painter.drawLine(cp,pt)&#xa;&#xa;              elif isinstance(element,Cubic):&#xa;                pt=self.mapFromScene(QtCore.QPointF(element.x,element.y))&#xa;                cp1=self.mapFromScene(QtCore.QPointF(element.c1x,element.c1y))&#xa;                cp2=self.mapFromScene(QtCore.QPointF(element.c2x,element.c2y))&#xa;                painter.drawEllipse(cp1,self._pointSize,self._pointSize)&#xa;                painter.drawEllipse(cp2,self._pointSize,self._pointSize)&#xa;                painter.drawEllipse(pt,self._pointSize,self._pointSize)&#xa;                painter.drawLine(self.mapFromScene(self.__cachedPath__[k-1].point()),cp1)&#xa;                painter.drawLine(cp1,cp2)&#xa;                painter.drawLine(cp2,pt)&#xa;&#xa;              else:&#xa;                pt=self.mapFromScene(QtCore.QPointF(element.x,element.y))&#xa;                painter.drawEllipse(pt,self._pointSize,self._pointSize)&#xa;&#xa;&#xa;&#xa;          elif self._objectType&amp;(GraphicsObjectType.rectangle|GraphicsObjectType.ellipse):&#xa;            p0=self.mapFromScene(QtCore.QPointF(self.__cachedPath__[0].x,self.__cachedPath__[0].y))&#xa;            p1=self.mapFromScene(QtCore.QPointF(self.__cachedPath__[1].x,self.__cachedPath__[1].y))&#xa;            painter.drawEllipse(p0,self._pointSize,self._pointSize)&#xa;            painter.drawLine(p0,p1)&#xa;            painter.drawEllipse(p1,self._pointSize,self._pointSize)&#xa;&#xa;          else:&#xa;            for k,element in enumerate(self.__cachedPath__):&#xa;              pt=self.mapFromScene(QtCore.QPointF(element.x,element.y))&#xa;              painter.drawEllipse(pt,self._pointSize,self._pointSize)&#xa;              if k>0:&#xa;                painter.drawLine(self.mapFromScene(self.__cachedPath__[k-1].point()),&#xa;                self.mapFromScene(element.point()))&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;  if self._showlabel:&#xa;    if len(self._displayStr)>0 and labelPos is not None:&#xa;      pen=painter.pen()&#xa;      bgMode=painter.backgroundMode()&#xa;      bg=painter.background()&#xa;      if self._opaqueLabel:&#xa;        painter.setBackgroundMode(QtCore.Qt.OpaqueMode)&#xa;        self._textBackgroundBrush.setStyle(QtCore.Qt.SolidPattern)&#xa;&#xa;      else:&#xa;        self._textBackgroundBrush.setStyle(QtCore.Qt.NoBrush)&#xa;&#xa;      painter.setPen(textPen)&#xa;      painter.setBackground(self._textBackgroundBrush)&#xa;      painter.drawText(labelPos,self._displayStr)&#xa;      painter.setBackground(bg)&#xa;      painter.setBackgroundMode(bgMode)&#xa;      painter.setPen(pen)&#xa;&#xa;&#xa;&#xa;except Exception as exc:&#xa;  traceback.print_exc()&#xa;  print(&quot;in %s %s&quot;%(self.objectType,self.name))&#xa;&#xa;" id="ukKrZeOuwVhmN"/>
    <sourcecode value="if change==QtWidgets.QGraphicsItem.ItemPositionChange and self.scene():&#xa;  if self.__backend__ is None:&#xa;    return QtCore.QPoint()&#xa;&#xa;  if not self.__backend__.hasStateForFrame(self._currentframe_)or\&#xa;  not self.__objectVisible__:&#xa;    value=QtCore.QPointF()&#xa;    return value&#xa;&#xa;  if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;    stateDescriptor=self.__backend__.getState(self.__backend__.currentFrame)&#xa;    if stateDescriptor is None or len(stateDescriptor)==0:&#xa;      return value&#xa;&#xa;    self._positionChangeHasBegun=True&#xa;    newPos=value&#xa;    if self._objectType==GraphicsObjectType.vertical_cursor:&#xa;      if not self.pos().isNull():&#xa;        self._deltaPos=(newPos-self.pos())&#xa;&#xa;      newPos.setY(self.pos().y())&#xa;      if newPos.x()&lt;0:&#xa;        newPos.setX(0.0)&#xa;&#xa;      elif newPos.x()>self.__backend__.width:&#xa;        newPos.setX(self.__backend__.width)&#xa;&#xa;&#xa;    elif self._objectType==GraphicsObjectType.horizontal_cursor:&#xa;      if not self.pos().isNull():&#xa;        self._deltaPos=(newPos-self.pos())&#xa;&#xa;      newPos.setX(self.pos().x())&#xa;      if newPos.y()&lt;0:&#xa;        newPos.setY(0.0)&#xa;&#xa;      elif newPos.y()>self.__backend__.height:&#xa;        newPos.setY(self.__backend__.height)&#xa;&#xa;&#xa;    elif self._objectType==GraphicsObjectType.crosshair_cursor:&#xa;      if newPos.x()&lt;=0.0:&#xa;        newPos.setX(0.0)&#xa;&#xa;      if newPos.x()>self.__backend__.width:&#xa;        newPos.setX(self.__backend__.width)&#xa;&#xa;      if newPos.y()&lt;=0.0:&#xa;        newPos.setY(0.0)&#xa;&#xa;      if newPos.y()>self.__backend__.height:&#xa;        newPos.setY(self.__backend__.height)&#xa;&#xa;      self._deltaPos=(newPos-QtCore.QPointF(self.__backend__.x,self.__backend__.y))&#xa;&#xa;    else:&#xa;      if newPos.x()&lt;=0.0:&#xa;        newPos.setX(0.0)&#xa;&#xa;      if newPos.x()>self.__backend__.width:&#xa;        newPos.setX(self.__backend__.width)&#xa;&#xa;      if newPos.y()&lt;=0.0:&#xa;        newPos.setY(0.0)&#xa;&#xa;      if newPos.y()>self.__backend__.height:&#xa;        newPos.setY(self.__backend__.height)&#xa;&#xa;      self._deltaPos=(newPos-QtCore.QPointF(self.__backend__.x,self.__backend__.y))&#xa;&#xa;    self.__backend__.x=newPos.x()&#xa;    self.__backend__.y=newPos.y()&#xa;&#xa;  elif self._objectType&amp;GraphicsObjectType.allShapeTypes:&#xa;    self.__backend__.x=value.x()&#xa;    self.__backend__.y=value.y()&#xa;&#xa;  self.__backend__.updateLinkedObjects()&#xa;  if self._labelShowsCoordinates:&#xa;    self.__setDisplayStr__()&#xa;    self.__updateLabelRect__()&#xa;&#xa;  self.update()&#xa;  self.signalBackendChanged.emit(self.__backend__)&#xa;  self.signalGraphicsObjectPositionChange.emit(self.mapToScene(value-self._oldPos))&#xa;  self._oldPos=self.pos()&#xa;&#xa;elif change==QtWidgets.QGraphicsItem.ItemSelectedChange and self.scene()is not None:&#xa;  if value:&#xa;    nItems=len(self.scene().items())&#xa;    self.setZValue(nItems+1)&#xa;&#xa;  else:&#xa;    self.setZValue(0)&#xa;&#xa;  self.selectMe.emit(self._ID_,value)&#xa;&#xa;elif change==QtWidgets.QGraphicsItem.ItemScenePositionHasChanged and self.scene()is not None:&#xa;  pass&#xa;&#xa;elif change==QtWidgets.QGraphicsItem.ItemSceneHasChanged:&#xa;  self.__drawObject__()&#xa;&#xa;self._oldPos=self.pos()&#xa;return super(GraphicsObject,self).itemChange(change,value)&#xa;" id="utgn6XeVopuDB"/>
    <sourcecode value="self.setCursor(QtCore.Qt.ClosedHandCursor)&#xa;if self._buildMode:&#xa;  self.setCursor(QtCore.Qt.CrossCursor)&#xa;  if self.objectType==GraphicsObjectType.allShapeTypes and\&#xa;  len(self.__cachedPath__)==0:&#xa;    mods=&quot;&quot;&#xa;    if evt.modifiers()==QtCore.Qt.ShiftModifier:&#xa;    self._objectType=GraphicsObjectType.rectangle mods=&quot;shift&quot;elif evt.modifiers()==QtCore.Qt.ControlModifier:&#xa;    self._objectType=GraphicsObjectType.ellipse mods=&quot;ctrl&quot;elif evt.modifiers()==QtCore.Qt.AltModifier:&#xa;    self._objectType=GraphicsObjectType.path mods=&quot;alt&quot;elif evt.modifiers()==(QtCore.Qt.ControlModifier|QtCore.Qt.ShiftModifier):&#xa;      self._objectType=GraphicsObjectType.polygon&#xa;      mods=&quot;ctrl+shift&quot;&#xa;&#xa;    elif evt.modifiers()==(QtCore.Qt.AltModifier|QtCore.Qt.ControlModifier|QtCore.Qt.ShiftModifier):&#xa;      mods=&quot;alt+=ctrl+shift&quot;&#xa;      self._objectType=GraphicsObjectType.point&#xa;&#xa;    else:&#xa;    if evt.modifiers()==QtCore.Qt.NoModifier:&#xa;      mods=&quot;none&quot;&#xa;&#xa;    self._objectType=GraphicsObjectType.line&#xa;&#xa;  if len(self.__cachedPath__)==0:&#xa;    self.__cachedPath__.append(Move(evt.pos().x(),evt.pos().y()))&#xa;    if self.objectType&amp;GraphicsObjectType.point:&#xa;      self.__finalizeShape__()&#xa;&#xa;&#xa;  else:&#xa;    d=QtCore.QLineF(self._hover_point,self.__cachedPath__[-1].point()).length()&#xa;    if d>2*self._pointSize:&#xa;      if self.objectType&amp;(GraphicsObjectType.line|GraphicsObjectType.rectangle|GraphicsObjectType.ellipse):&#xa;        if len(self.__cachedPath__)==1:&#xa;          if self._constrainedPoint is not None and not self._constrainedPoint.isNull():&#xa;            self.__cachedPath__.append(Line(self._constrainedPoint.x(),self._constrainedPoint.y()))&#xa;            self._constrainedPoint=None&#xa;&#xa;          else:&#xa;            if self._hover_point is not None and not self._hover_point.isNull():&#xa;              self.__cachedPath__.append(Line(self._hover_point.x(),self._hover_point.y()))&#xa;&#xa;            else:&#xa;              self.__cachedPath__.append(Line(evt.pos().x(),evt.pos().y()))&#xa;&#xa;&#xa;          self.__finalizeShape__()&#xa;&#xa;&#xa;      elif self.objectType&amp;GraphicsObjectType.polygon:&#xa;        if self._constrainedPoint is not None:&#xa;          self.__cachedPath__.append(Line(self._constrainedPoint.x(),self._constrainedPoint.y()))&#xa;          self._constrainedPoint=None&#xa;&#xa;        else:&#xa;          self.__cachedPath__.append(Line(evt.pos().x(),evt.pos().y()))&#xa;&#xa;&#xa;      elif self.objectType&amp;GraphicsObjectType.path:&#xa;        if self._curveBuild:&#xa;          if evt.modifiers()==(QtCore.Qt.ControlModifier|QtCore.Qt.AltModifier):&#xa;            self._control_points[1]=evt.pos()&#xa;&#xa;          else:&#xa;            if self._control_points[0]is not None:&#xa;              if self._control_points[1]is not None:&#xa;                self.__cachedPath__.append(Cubic(evt.pos().x(),&#xa;                evt.pos().y(),self._control_points[0].x(),self._control_points[0].y(),self._control_points[1].x(),self._control_points[1].y()))self._control_points[1]=None&#xa;&#xa;              else:&#xa;                self.__cachedPath__.append(Quad(evt.pos().x(),&#xa;                evt.pos().y(),self._control_points[0].x(),self._control_points[0].y()))&#xa;              self._control_points[0]=None&#xa;              self._curveBuild=False&#xa;&#xa;&#xa;&#xa;        else:&#xa;          if evt.modifiers()==(QtCore.Qt.ControlModifier|QtCore.Qt.AltModifier):&#xa;            self.__cachedPath__.append(Move(evt.pos().x(),evt.pos().y()))&#xa;&#xa;          else:&#xa;            if self._constrainedPoint is not None:&#xa;              self.__cachedPath__.append(Line(self._constrainedPoint.x(),self._constrainedPoint.y()))&#xa;              self._constrainedPoint=None&#xa;&#xa;            else:&#xa;              self.__cachedPath__.append(Line(evt.pos().x(),evt.pos().y()))&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;    else:&#xa;      self._movePoint=True&#xa;&#xa;&#xa;  self.update()&#xa;  self.selectMe.emit(self._ID_,True)&#xa;&#xa;if self.editMode:&#xa;  distance=-1&#xa;  if self.__cachedPath__ is None or len(self.__cachedPath__)==0:&#xa;    self.__cachedPath__=self.__backend__.asPath(self._currentframe_)&#xa;    self.__cachedPath__.frameIndices=[]&#xa;&#xa;  for k,p in enumerate(self.__cachedPath__):&#xa;    if isinstance(p,Quad):&#xa;      d=QtCore.QLineF(evt.pos(),self.mapFromScene(p.point())).length()&#xa;      dc1=QtCore.QLineF(evt.pos(),self.mapFromScene(QtCore.QPointF(p.cx,p.cy))).length()&#xa;      self._c_shape_point=-1&#xa;      if dc1&lt;d:&#xa;        if(distance&lt;=0 and dc1&lt;=2*self._pointSize)or dc1&lt;distance:&#xa;          distance=dc1&#xa;          self._c_activePoint=k&#xa;          self._c_activeControlPoint=0&#xa;&#xa;&#xa;      else:&#xa;        if(distance&lt;0 and d&lt;=2*self._pointSize)or d&lt;distance:&#xa;          distance=d&#xa;          self._c_activePoint=k&#xa;          self._c_activeControlPoint=-1&#xa;&#xa;&#xa;&#xa;    elif isinstance(p,Cubic):&#xa;      d=QtCore.QLineF(evt.pos(),self.mapFromScene(p.point())).length()&#xa;      dc1=QtCore.QLineF(evt.pos(),self.mapFromScene(QtCore.QPointF(p.c1x,p.c1y))).length()&#xa;      dc2=QtCore.QLineF(evt.pos(),self.mapFromScene(QtCore.QPointF(p.c2x,p.c2y))).length()&#xa;      self._c_shape_point=-1&#xa;      if dc1&lt;min(d,dc2):&#xa;        if(distance&lt;=0 and dc1&lt;=2*self._pointSize)or dc1&lt;distance:&#xa;          distance=dc1&#xa;          self._c_activePoint=k&#xa;          self._c_activeControlPoint=0&#xa;&#xa;&#xa;      elif dc2&lt;min(d,dc1):&#xa;        if(distance&lt;=0 and dc2&lt;=2*self._pointSize)or dc2&lt;distance:&#xa;          distance=dc2&#xa;          self._c_activePoint=k&#xa;          self._c_activeControlPoint=1&#xa;&#xa;&#xa;      elif d&lt;min(dc1,dc2):&#xa;        if(distance&lt;0 and d&lt;=2*self._pointSize)or d&lt;distance:&#xa;          distance=d&#xa;          self._c_activePoint=k&#xa;          self._c_activeControlPoint=-1&#xa;&#xa;&#xa;      else:&#xa;        if(distance&lt;0 and d&lt;=2*self._pointSize)or d&lt;distance:&#xa;          distance=d&#xa;          self._c_activePoint=k&#xa;          self._c_activeControlPoint=-1&#xa;&#xa;&#xa;&#xa;    else:&#xa;      self._c_shape_point=-1&#xa;      d=QtCore.QLineF(evt.pos(),self.mapFromScene(p.point())).length()&#xa;      if(distance&lt;0 and d&lt;=2*self._pointSize)or d&lt;distance:&#xa;        distance=d&#xa;        self._c_activePoint=k&#xa;        self._c_activeControlPoint=-1&#xa;&#xa;&#xa;&#xa;  self.selectMe.emit(self._ID_,True)&#xa;  return&#xa;&#xa;super(GraphicsObject,self).mousePressEvent(evt)&#xa;evt.accept()&#xa;" id="u95JFaCN2Bk2i"/>
    <sourcecode value="if self._buildMode:&#xa;self.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))currentPoint=evt.pos()if evt.modifiers()==QtCore.Qt.ControlModifier:&#xa;  mods=&quot;ctrl&quot;&#xa;  if len(self.__cachedPath__)>0:&#xa;    lastPoint=self.__cachedPath__[-1].point()&#xa;    currentPoint=__constrain_0_45_90__(lastPoint,evt.pos())&#xa;&#xa;&#xa;elif evt.modifiers()==QtCore.Qt.ShiftModifier:&#xa;  mods=&quot;shift&quot;&#xa;  if len(self.__cachedPath__)>0:&#xa;    lastPoint=self.__cachedPath__[-1].point()&#xa;    currentPoint=__constrain_square__(lastPoint,evt.pos())&#xa;&#xa;&#xa;elif evt.modifiers()==QtCore.Qt.AltModifier and self.objectType==GraphicsObjectType.path:&#xa;  mods=&quot;alt&quot;&#xa;  self._curveBuild=True&#xa;&#xa;if self._movePoint:&#xa;  if len(self.__cachedPath__)>0:&#xa;    if isinstance(self.__cachedPath__[-1],Move):&#xa;      self.__cachedPath__[-1]=Move(evt.pos().x(),evt.pos().y())&#xa;&#xa;    elif isinstance(self.__cachedPath__[-1],Line):&#xa;      self.__cachedPath__[-1]=Line(evt.pos().x(),evt.pos().y())&#xa;&#xa;    elif isinstance(self.__cachedPath__[-1],Quad):&#xa;      q=self.__cachedPath__[-1]&#xa;      self.__cachedPath__[-1]=Quad(q.x1,q.y1,evt.pos().x(),evt.pos().y())&#xa;&#xa;    elif isinstance(self.__cachedPath__[-1],Cubic):&#xa;      c=self.__cachedPath__[-1]&#xa;      self.__cachedPath__[-1]=Quad(c.x,c.y,c.x1,c.y1,evt.pos().x(),evt.pos().y())&#xa;&#xa;&#xa;&#xa;else:&#xa;  self._hover_point=currentPoint&#xa;  self._control_points[0]=None&#xa;&#xa;self.update()&#xa;self.selectMe.emit(self._ID_,True)return else:&#xa;  self.setCursor(QtCore.Qt.ClosedHandCursor)&#xa;  if self.editMode and self.__cachedPath__ is not None and len(self.__cachedPath__)\&#xa;  and self._c_activePoint>=0 and self._c_activePoint&lt;len(self.__cachedPath__):&#xa;    element=self.__cachedPath__[self._c_activePoint]&#xa;    epos=self.mapToScene(evt.pos())&#xa;    if isinstance(element,Move):&#xa;      self.__cachedPath__[self._c_activePoint]=Move(epos.x(),epos.y())&#xa;&#xa;    elif isinstance(element,Line):&#xa;      self.__cachedPath__[self._c_activePoint]=Line(epos.x(),epos.y())&#xa;&#xa;    elif isinstance(element,Quad):&#xa;      if self._c_activeControlPoint==0:&#xa;        self.__cachedPath__[self._c_activePoint]=Quad(cx=epos.x(),cy=epos.y(),\&#xa;        x=element.x,y=element.y,)&#xa;      else:&#xa;        self.__cachedPath__[self._c_activePoint]=Quad(cx=element.cx,cy=element.cy,\&#xa;        x=epos.x(),y=epos.y())&#xa;&#xa;    elif isinstance(element,Cubic):&#xa;      if self._c_activeControlPoint==0:&#xa;        self.__cachedPath__[self._c_activePoint]=Cubic(c1x=epos.x(),c1y=epos.y(),\&#xa;        c2x=element.c2x,c2y=element.c2y,\x=element.x,y=element.y,)&#xa;      elif self._c_activeControlPoint==1:&#xa;        self.__cachedPath__[self._c_activePoint]=Cubic(c1x=element.c1x,c1y=element.c1y,\&#xa;        c2x=epos.x(),c2y=epos.y(),\x=element.x,y=element.y)&#xa;      else:&#xa;        self.__cachedPath__[self._c_activePoint]=Cubic(c1x=element.c1x,c1y=element.c1y,\&#xa;        c2x=element.c2x,c2y=element.c2y,\x=epos.x(),y=epos.y())&#xa;&#xa;    if self.__backend__ is not None:&#xa;      self.__updateBackendFromCachedPath__()&#xa;      self.signalBackendChanged.emit(self.__backend__)&#xa;&#xa;    self.update()&#xa;&#xa;  elif self.canMove:&#xa;    if self.__backend__ is not None:&#xa;      self.signalBackendChanged.emit(self.__backend__)&#xa;      for f in self.__backend__.frontends:&#xa;        if f!=self:&#xa;          f.redraw()&#xa;&#xa;&#xa;&#xa;    self.signalPosition[int,str,&quot;QPointF&quot;].emit(self.objectType.value,self._ID_,self.pos())&#xa;    super(GraphicsObject,self).mouseMoveEvent(evt)&#xa;&#xa;  self.selectMe.emit(self._ID_,True)&#xa;&#xa;" id="un30ZJAO6LmGc"/>
    <sourcecode value="self._c_activePoint=-1&#xa;self.unsetCursor()&#xa;if self._buildMode:&#xa;  mods=&quot;&quot;&#xa;  if evt.modifiers()==QtCore.Qt.ShiftModifier:&#xa;    mods=&quot;shift&quot;&#xa;&#xa;  elif evt.modifiers()==QtCore.Qt.ControlModifier:&#xa;  mods=&quot;ctrl&quot;elif evt.modifiers()==QtCore.Qt.AltModifier:&#xa;  mods=&quot;alt&quot;elif evt.modifiers()==(QtCore.Qt.ControlModifier|QtCore.Qt.ShiftModifier):&#xa;    mods=&quot;ctrl+shift&quot;&#xa;&#xa;  elif evt.modifiers()==(QtCore.Qt.AltModifier|QtCore.Qt.ControlModifier|QtCore.Qt.ShiftModifier):&#xa;    mods=&quot;alt+ctrl+shift&quot;&#xa;&#xa;  elif evt.modifiers()==QtCore.Qt.NoModifier:&#xa;    mods=&quot;none&quot;&#xa;&#xa;  if self._curveBuild:&#xa;    if self._control_points[1]is None:&#xa;      self._control_points[0]=evt.pos()&#xa;&#xa;&#xa;  self._hover_point=evt.pos()&#xa;  self.update()&#xa;  return&#xa;&#xa;if self.canMove:&#xa;  if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;    stateDescriptor=self.__backend__.getState(self._currentframe_)&#xa;    if stateDescriptor is None or len(stateDescriptor)==0:&#xa;      return&#xa;&#xa;    self._positionChangeHasBegun=False&#xa;    self._wbarPos+=self._deltaPos&#xa;    if self._wbarPos.x()&lt;0:&#xa;      self._wbarPos.setX(0.0)&#xa;&#xa;    elif self._wbarPos.x()>=stateDescriptor.width:&#xa;      self._wbarPos.setX(stateDescriptor.width-1)&#xa;&#xa;    if self._wbarPos.y()&lt;0:&#xa;      self._wbarPos.setY(0.0)&#xa;&#xa;    elif self._wbarPos.y()>=stateDescriptor.height:&#xa;      self._wbarPos.setY(stateDescriptor.height-1)&#xa;&#xa;&#xa;  self._oldPos=self.pos()&#xa;  self._deltaPos=QtCore.QPointF(0.0,0.0)&#xa;&#xa;self.selectMe.emit(self._ID_,True)&#xa;super(GraphicsObject,self).mouseReleaseEvent(evt)&#xa;evt.accept()&#xa;" id="uUfqvLJVycq7T"/>
    <sourcecode value="self.selectMe.emit(self._ID_,True)&#xa;self.requestContextMenu.emit(self.ID,evt.screenPos())&#xa;super(GraphicsObject,self).contextMenuEvent(evt)&#xa;evt.accept()&#xa;" id="uvF999Do7Fy4n"/>
    <sourcecode value="if self._buildMode:&#xa;  self.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))&#xa;&#xa;if self.editMode:&#xa;  d=[QtCore.QLineF(evt.pos(),self.mapFromScene(p)).length()for p in self.__cachedPath__.qPoints()]&#xa;  if min(d)&lt;=2*self._pointSize:&#xa;    self.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))&#xa;&#xa;  else:&#xa;    self.unsetCursor()&#xa;&#xa;&#xa;self.update()&#xa;super(GraphicsObject,self).hoverEnterEvent(evt)&#xa;" id="uZC2igx0TaPRr"/>
    <sourcecode value="if self._buildMode:&#xa;  self.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))&#xa;  currentPoint=evt.pos()&#xa;  if evt.modifiers()==QtCore.Qt.ControlModifier:&#xa;    if len(self.__cachedPath__)>0:&#xa;      lastPoint=self.__cachedPath__[-1].point()&#xa;      d=QtCore.QLineF(currentPoint,lastPoint).length()&#xa;      if d>2*self._pointSize:&#xa;        currentPoint=__constrain_0_45_90__(lastPoint,evt.pos())&#xa;        self._constrainedPoint=currentPoint&#xa;&#xa;&#xa;&#xa;  elif evt.modifiers()==QtCore.Qt.ShiftModifier:&#xa;    if len(self.__cachedPath__)>0:&#xa;      lastPoint=self.__cachedPath__[-1].point()&#xa;      d=QtCore.QLineF(currentPoint,lastPoint).length()&#xa;      if d>2*self._pointSize:&#xa;        currentPoint=__constrain_square__(lastPoint,evt.pos())&#xa;        self._constrainedPoint=currentPoint&#xa;&#xa;&#xa;&#xa;  self._hover_point=currentPoint&#xa;  self.update()&#xa;  return&#xa;&#xa;if self.editMode and self.__cachedPath__ is not None and len(self.__cachedPath__):&#xa;  d=[QtCore.QLineF(evt.pos(),self.mapFromScene(p)).length()for p in self.__cachedPath__.qPoints()]&#xa;  if min(d)&lt;=2*self._pointSize:&#xa;    self.setCursor(QtGui.QCursor(QtCore.Qt.CrossCursor))&#xa;&#xa;  else:&#xa;    self.unsetCursor()&#xa;&#xa;&#xa;self.update()&#xa;super(GraphicsObject,self).hoverMoveEvent(evt)&#xa;" id="ucXFA1qoF6WvR"/>
    <sourcecode value="self.unsetCursor()&#xa;self.update()&#xa;super(GraphicsObject,self).hoverLeaveEvent(evt)&#xa;" id="ullDVhGAPhLVw"/>
    <sourcecode value="if evt.key()==QtCore.Qt.Key_Delete:&#xa;  self.signalROIConstructed.emit(0,self.name)&#xa;&#xa;if self._buildMode:&#xa;  if evt.key()in(QtCore.Qt.Key_Return,QtCore.Qt.Key_Enter):&#xa;    self.__finalizeShape__()&#xa;&#xa;  elif evt.key()==QtCore.Qt.Key_Escape:&#xa;    self._buildMode=False&#xa;    self._constrainedPoint=None&#xa;    self._curveSegmentConstruction=False&#xa;    self._hover_point=None&#xa;    self.__cachedPath__.clear()&#xa;    self.update()&#xa;    self.signalROIConstructed.emit(0,self.name)&#xa;&#xa;  return&#xa;&#xa;if self.editMode:&#xa;  if evt.key()in(QtCore.Qt.Key_Return,QtCore.Qt.Key_Enter,QtCore.Qt.Key_Escape):&#xa;    self.editMode=False&#xa;    self.__cachedPath__.clear()&#xa;&#xa;&#xa;if not self.canMove:&#xa;  return&#xa;&#xa;if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  if not self.hasStateDescriptor:&#xa;    return&#xa;&#xa;  stateDescriptor=self.__backend__.getState(self._currentframe_)&#xa;  if self._objectType==GraphicsObjectType.vertical_cursor:&#xa;    if evt.key()==QtCore.Qt.Key_Right:&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        self.moveBy(10.0,0.0)&#xa;&#xa;      else:&#xa;        self.moveBy(1.0,0.0)&#xa;&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Left:&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        self.moveBy(-10.0,0.0)&#xa;&#xa;      else:&#xa;        self.moveBy(-1.0,0.0)&#xa;&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Up:&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        self._wbarPos+=QtCore.QPointF(0.0,-10.0)&#xa;&#xa;      else:&#xa;        self._wbarPos+=QtCore.QPointF(0.0,-1.0)&#xa;&#xa;      if self._wbarPos.y()&lt;0:&#xa;        self._wbarPos.setY(0.0)&#xa;&#xa;      elif self._wbarPos.y()>stateDescriptor.height-1:&#xa;        self._wbarPos.setY(stateDescriptor.height-1)&#xa;&#xa;      self.__drawObject__()&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Down:&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        self._wbarPos+=QtCore.QPointF(0.0,10.0)&#xa;&#xa;      else:&#xa;        self._wbarPos+=QtCore.QPointF(0.0,1.0)&#xa;&#xa;      if self._wbarPos.y()&lt;0:&#xa;        self._wbarPos.setY(0.0)&#xa;&#xa;      elif self._wbarPos.y()>stateDescriptor.height-1:&#xa;        self._wbarPos.setY(stateDescriptor.height-1)&#xa;&#xa;      self.__drawObject__()&#xa;&#xa;&#xa;  elif self._objectType==GraphicsObjectType.horizontal_cursor:&#xa;    if evt.key()==QtCore.Qt.Key_Right:&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        self._wbarPos+=QtCore.QPointF(10.0,0.0)&#xa;&#xa;      else:&#xa;        self._wbarPos+=QtCore.QPointF(1.0,0.0)&#xa;&#xa;      if self._wbarPos.x()&lt;0:&#xa;        self._wbarPos.setX(0.0)&#xa;&#xa;      elif self._wbarPos.x()>stateDescriptor.width-1:&#xa;        self._wbarPos.setX(stateDescriptor.width-1)&#xa;&#xa;      self.__drawObject__()&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Left:&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        self._wbarPos+=QtCore.QPointF(-10.0,0.0)&#xa;&#xa;      else:&#xa;        self._wbarPos+=QtCore.QPointF(-1.0,0.0)&#xa;&#xa;      if self._wbarPos.x()&lt;0:&#xa;        self._wbarPos.setX(0.0)&#xa;&#xa;      elif self._wbarPos.x()>stateDescriptor.width-1:&#xa;        self._wbarPos.setX(stateDescriptor.width-1)&#xa;&#xa;      self.__drawObject__()&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Up:&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        self.moveBy(0.0,-10.0)&#xa;&#xa;      else:&#xa;        self.moveBy(0.0,-1.0)&#xa;&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Down:&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        self.moveBy(0.0,10.0)&#xa;&#xa;      else:&#xa;        self.moveBy(0.0,1.0)&#xa;&#xa;&#xa;&#xa;  elif self._objectType==GraphicsObjectType.crosshair_cursor:&#xa;    if evt.key()==QtCore.Qt.Key_Right:&#xa;      moveX=1.0&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        moveX=10.0&#xa;&#xa;      newX=self.pos().x()+moveX&#xa;      if newX>self.__backend__.width-1:&#xa;        moveX=self.__backend__.width-1-self.pos().x()&#xa;&#xa;      self.moveBy(moveX,0.0)&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Left:&#xa;      moveX=-1.0&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        moveX=-10.0&#xa;&#xa;      newX=self.pos().x()+moveX&#xa;      if newX&lt;0:&#xa;        moveX=0-self.pos().x()&#xa;&#xa;      self.moveBy(moveX,0.0)&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Up:&#xa;      moveY=-1.0&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        moveY=-10.0&#xa;&#xa;      newY=self.pos().y()+moveY&#xa;      if newY&lt;0:&#xa;        moveY=0-self.pos().y()&#xa;&#xa;      self.moveBy(0.0,moveY)&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Down:&#xa;      moveY=1.0&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        moveY=10.0&#xa;&#xa;      newY=self.pos().y()+moveY&#xa;      if newY>self.__backend__.height-1:&#xa;        moveY=self.__backend__.height-1-self.pos().y&#xa;&#xa;      self.moveBy(0.0,moveY)&#xa;&#xa;    if self.pos().x()&lt;0:&#xa;      y=self.pos().y()&#xa;      self.setPos(0,y)&#xa;&#xa;    elif self.pos().x()>self.__backend__.width-1:&#xa;      y=self.pos().y()&#xa;      self.setPos(self.__backend__.width-1,y)&#xa;&#xa;    if self.pos().y()&lt;0:&#xa;      x=self.pos().x()&#xa;      self.setPos(x,0)&#xa;&#xa;    elif self.pos().y()>self.__backend__.height-1:&#xa;      x=self.pos().x()&#xa;      self.setPos(x,self.__backend__.height-1)&#xa;&#xa;&#xa;  else:&#xa;    if evt.key()==QtCore.Qt.Key_Right:&#xa;      moveX=1.0&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        moveX=10.0&#xa;&#xa;      self.moveBy(moveX,0.0)&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Left:&#xa;      moveX=-1.0&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        moveX=-10.0&#xa;&#xa;      self.moveBy(moveX,0.0)&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Up:&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        self.moveBy(0.0,-10.0)&#xa;&#xa;      else:&#xa;        self.moveBy(0.0,-1.0)&#xa;&#xa;&#xa;    elif evt.key()==QtCore.Qt.Key_Down:&#xa;      if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;        self.moveBy(0.0,10.0)&#xa;&#xa;      else:&#xa;        self.moveBy(0.0,1.0)&#xa;&#xa;&#xa;    if self.pos().x()&lt;0:&#xa;      y=self.pos().y()&#xa;      self.setPos(0,y)&#xa;&#xa;    elif self.pos().x()>self.__backend__.width-1:&#xa;      y=self.pos().y()&#xa;      self.setPos(self.__backend__.width-1,y)&#xa;&#xa;    if self.pos().y()&lt;0:&#xa;      x=self.pos().x()&#xa;      self.setPos(x,0)&#xa;&#xa;    elif self.pos().y()>self.__backend__.height-1:&#xa;      x=self.pos().x()&#xa;      self.setPos(x,self.__backend__.height-1)&#xa;&#xa;&#xa;&#xa;else:&#xa;  if evt.key()==QtCore.Qt.Key_Right:&#xa;    if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;      self.moveBy(10.0,0.0)&#xa;&#xa;    else:&#xa;      self.moveBy(1.0,0.0)&#xa;&#xa;&#xa;  elif evt.key()==QtCore.Qt.Key_Left:&#xa;    if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;      self.moveBy(-10.0,0.0)&#xa;&#xa;    else:&#xa;      self.moveBy(-1.0,0.0)&#xa;&#xa;&#xa;  elif evt.key()==QtCore.Qt.Key_Up:&#xa;    if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;      self.moveBy(0.0,-10.0)&#xa;&#xa;    else:&#xa;      self.moveBy(0.0,-1.0)&#xa;&#xa;&#xa;  elif evt.key()==QtCore.Qt.Key_Down:&#xa;    if evt.modifiers()&amp;QtCore.Qt.ShiftModifier:&#xa;      self.moveBy(0.0,10.0)&#xa;&#xa;    else:&#xa;      self.moveBy(0.0,1.0)&#xa;&#xa;&#xa;&#xa;self.__drawObject__()&#xa;self.update()&#xa;super(GraphicsObject,self).keyPressEvent(evt)&#xa;" id="uIYeQ5uEc3FGQ"/>
    <sourcecode value="self._textPen=self.defaultTextPen&#xa;self._textBrush=self.defaultTextBrush&#xa;self._textBackgroundBrush=self.defaultTextBackgroundBrush&#xa;self._textFont=self.defaultTextFont&#xa;self._linkedTextPen=self.defaultLinkedTextPen&#xa;self._linkedTextBrush=self.defaultLinkedTextBrush&#xa;self._cursorPen=self.defaultPen&#xa;self._selectedCursorPen=self.defaultSelectedPen&#xa;self._linkedPen=self.defaultLinkedPen&#xa;self._linkedSelectedPen=self.defaultLinkedSelectedPen&#xa;self._cBPen=self.defaultCBPen&#xa;self._cBSelectedPen=self.defaultCBSelectedPen&#xa;self._opaqueLabel=True&#xa;self._labelShowsCoordinates=False&#xa;self.__drawObject__()&#xa;self.update()&#xa;" id="uvtzQLznFBxTO"/>
    <sourcecode value="return other in self.__backend__.frontends and self.__backend__==other.backend&#xa;" id="uuEjSDoewyLo3"/>
    <sourcecode value="return not self._opaqueLabel&#xa;" id="u3zpulAWu36ST"/>
    <sourcecode value="self._opaqueLabel=not value&#xa;self.redraw()&#xa;" id="uuOwm0LkURnKS"/>
    <sourcecode value="return len(self.__backend__.frontends)>0&#xa;" id="u6gica6M8m9mT"/>
    <sourcecode value="self._currentframe_=val&#xa;if self.__backend__ is not None:&#xa;  self.__backend__.currentFrame=val&#xa;  self.__backend__.updateLinkedObjects()&#xa;  self.setVisible(len(self.__backend__.frameIndices)>0 or self.__backend__.hasStateForFrame(val))&#xa;  if self.__objectVisible__:&#xa;    self.redraw()&#xa;&#xa;  if len(self._linkedGraphicsObjects):&#xa;    for c in self._linkedGraphicsObjects.values():&#xa;      if c!=self:&#xa;        c._currentframe_=val&#xa;        c.setVisible(len(c.__backend__.frameIndices)>0 or c.__backend__.hasStateForFrame(val))&#xa;        if c.__objectVisible__:&#xa;          c.redraw()&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;" id="uEc243MBqBhHm"/>
    <sourcecode value="other=self.sender()&#xa;if self._currentframe_==other._currentframe_:&#xa;  if self.hasStateDescriptor and other.hasStateDescriptor:&#xa;    self.setFlag(QtWidgets.QGraphicsItem.ItemSendsGeometryChanges,False)&#xa;    self.setFlag(QtWidgets.QGraphicsItem.ItemSendsScenePositionChanges,False)&#xa;    self.setPos(self.pos()+self.mapFromScene(deltapos))&#xa;    if self._labelShowsCoordinates:&#xa;      self.__setDisplayStr__()&#xa;      self.__updateLabelRect__()&#xa;&#xa;    self.update()&#xa;    self.setFlag(QtWidgets.QGraphicsItem.ItemSendsGeometryChanges,True)&#xa;    self.setFlag(QtWidgets.QGraphicsItem.ItemSendsScenePositionChanges,True)&#xa;&#xa;&#xa;" id="uggODQfjC1JAh"/>
    <sourcecode value="ret=self.__objectVisible__ and super(GraphicsObject,self).isVisible()&#xa;return ret&#xa;" id="upGyHiBrxDeF3"/>
    <sourcecode value="if not isinstance(value,bool):&#xa;  raise TypeError(&quot;Expecting a bool value; got %s instead&quot;%type(value).__name__)&#xa;&#xa;self.__objectVisible__=value&#xa;super(GraphicsObject,self).setVisible(value)&#xa;self.update()&#xa;" id="uACaGvBcHz238"/>
    <sourcecode value="ret=self.__objectVisible__ and super(GraphicsObject,self).isVisible()&#xa;return ret&#xa;" id="uTTn7CzpE2FrD"/>
    <sourcecode value="self.__objectVisible__=value&#xa;super(GraphicsObject,self).setVisible(value)&#xa;self.update()&#xa;" id="uFQ2qF5X1kPVb"/>
    <sourcecode value="if self.__cachedPath__ is None or len(self.__cachedPath__)==0:&#xa;  return&#xa;&#xa;if self.__backend__ is None:&#xa;  self.__backend__=self.__cachedPath__.copy()&#xa;&#xa;if isinstance(self.__backend__,(Ellipse,Rect))and len(self.__cachedPath__)>=2:&#xa;  if self.hasStateDescriptor:&#xa;    self.__backend__.x=self.__cachedPath__[0].x&#xa;    self.__backend__.y=self.__cachedPath__[0].y&#xa;    self.__backend__.w=self.__cachedPath__[1].x-self.__cachedPath__[0].x&#xa;    self.__backend__.h=self.__cachedPath__[1].y-self.__cachedPath__[0].y&#xa;    self.__backend__.updateLinkedObjects()&#xa;&#xa;&#xa;elif isinstance(self.__backend__,Path):&#xa;  try:&#xa;    for k,element in enumerate(self.__cachedPath__):&#xa;      self.__backend__[k].x=element.x&#xa;      self.__backend__[k].y=element.y&#xa;&#xa;    self.__backend__.updateLinkedObjects()&#xa;&#xa;  except Exception as e:&#xa;    traceback.print_exc()&#xa;&#xa;&#xa;" id="uzH3H5EchyL3D"/>
    <sourcecode value="if type(self.parentwidget).__name__==&quot;ImageViewer&quot;:&#xa;  self.parentwidget.removeGraphicsObject(self.name)&#xa;&#xa;elif type(self.parentwidget).__name__==&quot;GraphicsImageViewerWidget&quot;:&#xa;  if isinstance(self.__backend__,Cursor):&#xa;    self.parentwidget.removeCursorByName(self.name)&#xa;&#xa;  else:&#xa;    self.parentwidget.removeRoiByName(self.name)&#xa;&#xa;&#xa;" id="uIYxwN2vqZZQB"/>
    <sourcecode value="return self._parentWidget&#xa;" id="uT6BnNsJw7DqS"/>
    <sourcecode value="return self._showlabel&#xa;" id="uULwaDdekerto"/>
    <sourcecode value="self._showlabel=value&#xa;self.update()&#xa;" id="ubKc3BTx3O3Jm"/>
    <sourcecode value="return self.__backend__&#xa;" id="uggAFs3kUzUwr"/>
    <sourcecode value="return self.__cachedPath__&#xa;" id="ufZvMWZOWSZPm"/>
    <sourcecode value="return self.__backend__.frameIndices&#xa;" id="uT1OqKMTArXG5"/>
    <sourcecode value="if isinstance(value,numbers.Integral):&#xa;  value=[value]&#xa;&#xa;elif isinstance(value,range):&#xa;  value=[v for v in value]&#xa;&#xa;if not isinstance(value,list):&#xa;  return&#xa;&#xa;if not isinstance(self.__backend__,Path):&#xa;  self.__backend__.frameIndices=value&#xa;&#xa;self.__backend__.updateLinkedObjects()&#xa;self.update()&#xa;for f in self.__backend__.frontends:&#xa;  if f!=self:&#xa;    f.redraw()&#xa;&#xa;&#xa;if len(self._linkedGraphicsObjects):&#xa;  for c in self._linkedGraphicsObjects:&#xa;    if c!=self.__backend__:&#xa;      c.frameIndices=value&#xa;      for f in c.frontends:&#xa;        if f!=self:&#xa;          f.redraw()&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;" id="uCfdilz5mb7Ps"/>
    <sourcecode value="return self._currentframe_&#xa;" id="uu7rDqI4W6GkG"/>
    <sourcecode value="self._currentframe_=value&#xa;" id="uUkostC91i2Ls"/>
    <sourcecode value="return self.__backend__.currentFrame&#xa;" id="uoz1d09Sp3iDR"/>
    <sourcecode value="self.__backend__.currentFrame=value&#xa;self.__backend__.updateLinkedObjects()&#xa;" id="urjkSpDnQbYAg"/>
    <sourcecode value="return self.__backend__.hasStateForFrame(self._currentframe_)&#xa;" id="uJ8aOYBbRfUTa"/>
    <sourcecode value="return self.ID&#xa;" id="u2MA4ASc7ZomA"/>
    <sourcecode value="self.ID=val&#xa;" id="uBZxn28EsIffF"/>
    <sourcecode value="return self._ID_&#xa;" id="ur6qsMCTA0m8h"/>
    <sourcecode value="if isinstance(value,str):&#xa;  if len(value.strip()):&#xa;    if self._ID_!=value:&#xa;      self._ID_=value&#xa;      self.signalIDChanged.emit(self._ID_)&#xa;      self.redraw()&#xa;&#xa;&#xa;  else:&#xa;    raise ValueError(&quot;value expected to be a non-empty string&quot;)&#xa;&#xa;&#xa;else:&#xa;  raise TypeError(&quot;value expected to be a non-empty string; got %s instead&quot;%type(value).__name__)&#xa;&#xa;" id="uRamJ0WxrcQbU"/>
    <sourcecode value="return len(self._frameindex)&#xa;" id="u2JgkAnZUpVUd"/>
    <sourcecode value="return self._labelShowsCoordinates&#xa;" id="uyd37XtLJEE2p"/>
    <sourcecode value="self._labelShowsCoordinates=value&#xa;self.redraw()&#xa;for f in self.__backend__.frontends:&#xa;  if f!=self:&#xa;    f._labelShowsCoordinates=value&#xa;    f.redraw()&#xa;&#xa;&#xa;" id="uKnVQUit9p3yD"/>
    <sourcecode value="return self.pos().x()&#xa;" id="uKDHDrEinkR6J"/>
    <sourcecode value="y=self.pos().y()&#xa;self.setPos(val,y)&#xa;for c in self._linkedGraphicsObjects:&#xa;  if c!=self.__backend__:&#xa;    c.x=val&#xa;    for f in c.frontends:&#xa;      if f!=self:&#xa;        f.redraw()&#xa;&#xa;&#xa;&#xa;&#xa;" id="u3XtV0F5fL43b"/>
    <sourcecode value="if not self.hasStateDescriptor:&#xa;  return&#xa;&#xa;if self._objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  stateDescriptor=self.__backend__.getState(self._currentframe_)&#xa;  if stateDescriptor and len(stateDescriptor):&#xa;    return stateDescriptor.xwindow&#xa;&#xa;&#xa;" id="uRGOFTsM9bSS8"/>
    <sourcecode value="if not self.hasStateDescriptor:&#xa;  return&#xa;&#xa;if self._objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  stateDescriptor=self.__backend__.getState(self._currentframe_)&#xa;  if stateDescriptor is not None and len(stateDescriptor):&#xa;    stateDescriptor.xwindow=val&#xa;    self.__backend__.updateLinkedObjects()&#xa;    self.redraw()&#xa;    for f in self.__backend__.frontends:&#xa;      if f!=self:&#xa;        f.redraw()&#xa;&#xa;&#xa;    if len(self._linkedGraphicsObjects):&#xa;      for c in self._linkedGraphicsObjects:&#xa;        if c!=self.__backend__:&#xa;          c.xwindow=val&#xa;          for f in c.frontends:&#xa;            if f!=self:&#xa;              f.redraw()&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;" id="uvRyTtLJLZiI5"/>
    <sourcecode value="return self.horizontalWindow&#xa;" id="umn4FMRVN8imZ"/>
    <sourcecode value="self.horizontalWindow=val&#xa;" id="uFA5AO9EVBWTj"/>
    <sourcecode value="return self.pos().y()&#xa;" id="ufVZ2hc1zQMV0"/>
    <sourcecode value="x=self.pos().x()&#xa;self.setPos(x,val)&#xa;if len(self._linkedGraphicsObjects):&#xa;  for c in self._linkedGraphicsObjects:&#xa;    if c!=self.__backend__:&#xa;      c.y=val&#xa;      for f in c.frontends:&#xa;        if f!=self:&#xa;          f.redraw()&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;" id="u3XL28Cpyxqy5"/>
    <sourcecode value="if not self.hasStateDescriptor:&#xa;  return&#xa;&#xa;if self._objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  stateDescriptor=self.__backend__.getState(self._currentframe_)&#xa;  if stateDescriptor is not None and len(stateDescriptor):&#xa;    return stateDescriptor.ywindow&#xa;&#xa;&#xa;" id="ubxtmPhtdpL0Z"/>
    <sourcecode value="if not self.hasStateDescriptor:&#xa;  return&#xa;&#xa;if self._objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  stateDescriptor=self.__backend__.getState(self._currentframe_)&#xa;  if stateDescriptor is not None and len(stateDescriptor):&#xa;    stateDescriptor.ywindow=val&#xa;    self.__backend__.updateLinkedObjects()&#xa;    self.redraw()&#xa;    for f in self.__backend__.frontends:&#xa;      if f!=self:&#xa;        f.redraw()&#xa;&#xa;&#xa;    if len(self._linkedGraphicsObjects):&#xa;      for c in self._linkedGraphicsObjects:&#xa;        if c!=self.__backend__:&#xa;          c.ywindow=val&#xa;          for f in c.frontends:&#xa;            if f!=self:&#xa;              f.redraw()&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;" id="u9KysSpNhWsUA"/>
    <sourcecode value="return self.verticalWindow&#xa;" id="uTwQfC4Crk8fE"/>
    <sourcecode value="self.verticalWindow=val&#xa;" id="uyMjdwlfxU5Bv"/>
    <sourcecode value="if not self.hasStateDescriptor:&#xa;  return&#xa;&#xa;if self._objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  stateDescriptor=self.__backend__.getState(self._currentframe_)&#xa;  if stateDescriptor is not None and len(stateDescriptor):&#xa;    return stateDescriptor.radius&#xa;&#xa;&#xa;" id="uz8iqweWJkCru"/>
    <sourcecode value="if not self.hasStateDescriptor:&#xa;  return&#xa;&#xa;if self._objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  stateDescriptor=self.__backend__.getState(self._currentframe_)&#xa;  if stateDescriptor is not None and len(stateDescriptor):&#xa;    stateDescriptor.radius=val&#xa;    self.redraw()&#xa;    self.__backend__.updateLinkedObjects()&#xa;    self.__backend__.updateFrontends()&#xa;    for f in self.__backend__.frontends:&#xa;      if f!=self:&#xa;        f.redraw()&#xa;&#xa;&#xa;    if len(self._linkedGraphicsObjects):&#xa;      for c in self._linkedGraphicsObjects:&#xa;        if c!=self.__backend__:&#xa;          c.radius=val&#xa;          for f in c.frontends:&#xa;            if f!=self:&#xa;              f.redraw()&#xa;&#xa;&#xa;&#xa;        if c.objectType&amp;GraphicsObjectType.allCursorTypes and c!=self:&#xa;          if c.currentFrame==self.currentFrame:&#xa;            if c in self.__backend__.frontends:&#xa;              c.redraw()&#xa;&#xa;            else:&#xa;              c.radius=stateDescriptor.radius&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;" id="uIBfT6vSp0D8c"/>
    <sourcecode value="return self.penColor&#xa;" id="u1Qpok6TUKLHP"/>
    <sourcecode value="if isinstance(qcolor,QtGui.QColor)and qcolor.isValid():&#xa;  self._cursorPen.setColor(qcolor)&#xa;  self._selectedCursorPen.setColor(qcolor)&#xa;  self._textPen.setColor(qcolor)&#xa;  self.update()&#xa;&#xa;" id="ulrC3wZgPIIAP"/>
    <sourcecode value="return self.penColor&#xa;" id="ucSiL2WpQXinI"/>
    <sourcecode value="if isinstance(qcolor,QtGui.QColor)and qcolor.isValid():&#xa;  self._linkedPen.setColor(qcolor)&#xa;  self._linkedTextPen.setColor(qcolor)&#xa;  self._linkedSelectedPen.setColor(qcolor)&#xa;  self.update()&#xa;&#xa;" id="u6Josjuk4hDUn"/>
    <sourcecode value="return self._cursorPen.color()&#xa;" id="u38UmWCwQ3LEB"/>
    <sourcecode value="if isinstance(qcolor,QtGui.QColor)and qcolor.isValid():&#xa;  self._cursorPen.setColor(qcolor)&#xa;  self._selectedCursorPen.setColor(qcolor)&#xa;  self.update()&#xa;&#xa;" id="uHL4IBER3bbAe"/>
    <sourcecode value="return self._cBPen.color()&#xa;" id="udLNWYuFLmNda"/>
    <sourcecode value="if isinstance(qcolor,QtGui.QColor)and qcolor.isValid():&#xa;  self._cBPen.setColor(qcolor)&#xa;  self._cBSelectedPen.setColor(qcolor)&#xa;  self._textCBPen.setColor(qcolor)&#xa;  self.update()&#xa;&#xa;" id="uhqPGhbr4yoe4"/>
    <sourcecode value="return self._linkedPen.color()&#xa;" id="uqpaeoy8GxEVa"/>
    <sourcecode value="if isinstance(qcolor,QtGui.QColor)and qcolor.isValid():&#xa;  self._linkedPen.setColor(qcolor)&#xa;  self._linkedSelectedPen.setColor(qcolor)&#xa;  self._linkedTextPen.setColor(qcolor)&#xa;  self.update()&#xa;&#xa;" id="ubsOQaaW0bw8H"/>
    <sourcecode value="return self._textPen.color()&#xa;" id="u0oyf7wEXh6pe"/>
    <sourcecode value="if isinstance(qcolor,QtGui.QColor)and qcolor.isValid():&#xa;  self._textPen.setColor(qcolor)&#xa;  self.update()&#xa;&#xa;" id="uzS8XtUuaM69e"/>
    <sourcecode value="return self._linkedTextPen.color()&#xa;" id="uZrIxrJtgreGE"/>
    <sourcecode value="if isinstance(qcolor,QtGui.QColor)and qcolor.isValid():&#xa;  self._linkedTextPen.setColor(qcolor)&#xa;  self.update()&#xa;&#xa;" id="uU2tBPPKrkQ87"/>
    <sourcecode value="return self._textBackgroundBrush&#xa;" id="uBYjjBQMaHxg8"/>
    <sourcecode value="self._textBackgroundBrush=brush&#xa;self.__drawObject__&#xa;self.update()&#xa;" id="uRSQRck0hqXBG"/>
    <sourcecode value="return self._opaqueLabel&#xa;" id="uNZXQVId9vHZ0"/>
    <sourcecode value="self._opaqueLabel=val&#xa;self.__drawObject__&#xa;self.update()&#xa;" id="uRAxEN4lebMZf"/>
    <sourcecode value="return self._textFont&#xa;" id="uOXslV6K01NL6"/>
    <sourcecode value="self._textFont=font&#xa;self.__drawObject__&#xa;self.update()&#xa;" id="uVXNxvgCDEgUA"/>
    <sourcecode value="return self._buildMode&#xa;" id="uEkDI8f6uzpal"/>
    <sourcecode value="if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  return False&#xa;&#xa;return self._shapeIsEditable&#xa;" id="utbTn8J0TF24e"/>
    <sourcecode value="if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  return&#xa;&#xa;self._shapeIsEditable=value&#xa;if self._shapeIsEditable:&#xa;  self.__updateCachedPathFromBackend__()&#xa;&#xa;self.update()&#xa;" id="uRiadMrg9Wiq3"/>
    <sourcecode value="return self._movable&#xa;" id="u5EuXvS965BpP"/>
    <sourcecode value="self._movable=value&#xa;if not self._movable:&#xa;  self.editMode=False&#xa;&#xa;self.setFlag(QtWidgets.QGraphicsItem.ItemIsMovable,value)&#xa;" id="u2ziG3XVdzKN3"/>
    <sourcecode value="return self._editable&#xa;" id="ubNpXS95eEcm1"/>
    <sourcecode value="self._editable=value&#xa;if not self._editable:&#xa;  self.editMode=False&#xa;&#xa;self.setFlag(QtWidgets.QGraphicsItem.ItemIsMovable,value)&#xa;" id="uXT2b173TpuTw"/>
    <sourcecode value="if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  return False&#xa;&#xa;return self._transformable&#xa;" id="uThjYVhOpmT46"/>
    <sourcecode value="if self.objectType&amp;GraphicsObjectType.allCursorTypes:&#xa;  return&#xa;&#xa;self._transformable=value&#xa;" id="up0oH9JMPPEre"/>
    <sourcecode value="return self._autoLabel&#xa;" id="uZPbByBYHb6rE"/>
    <sourcecode value="if not isinstance(value,bool):&#xa;  raise TypeError(&quot;Boolean expected; got %s instead&quot;%type(value).__name__)&#xa;&#xa;self._autoLabel=value&#xa;self.__setDisplayStr__()&#xa;" id="uGVu43indyhrn"/>
    <sourcecode value="return self._objectType&#xa;" id="uH3KalzhzBge1"/>
    <sourcecode value="return self._objectType&amp;GraphicsObjectType.allCursorTypes&#xa;" id="u5SuLjrgSZMiQ"/>
    <sourcecode value="return self._objectType&amp;GraphicsObjectType.lineCursorTypes&#xa;" id="uMpRh5NEtGPf8"/>
    <sourcecode value="return self._objectType&amp;GraphicsObjectType.shapedCursorTypes&#xa;" id="ueTSa8Ixl9VN8"/>
    <sourcecode value="return self._objectType==GraphicsObjectType.vertical_cursor&#xa;" id="u6tSv69buBT4q"/>
    <sourcecode value="return self._objectType==GraphicsObjectType.horizontal_cursor&#xa;" id="uc7pFyFvDpsJK"/>
    <sourcecode value="return self._objectType==GraphicsObjectType.crosshair_cursor&#xa;" id="ubMmUcJ4hSAb9"/>
    <sourcecode value="return self._objectType==GraphicsObjectType.point_cursor&#xa;" id="uehQPpfn23EDR"/>
    <sourcecode value="return self._objectType&amp;GraphicsObjectType.allObjectTypes&#xa;" id="uG3m21EVNZZDN"/>
    <sourcecode value="return self._objectType&amp;GraphicsObjectType.geometricShapeTypes&#xa;" id="u34AEqeW8ZeHs"/>
    <sourcecode value="return self._objectType&amp;GraphicsObjectType.polygonTypes&#xa;" id="uSikH2TzVCIJK"/>
    <sourcecode value="return self._objectType&amp;GraphicsObjectType.linearShapeTypes&#xa;" id="uhuW3xhdj58SR"/>
    <sourcecode value="return self._objectType&amp;GraphicsObjectType.basicShapeTypes&#xa;" id="uOghKV1oGisaC"/>
    <sourcecode value="return self._objectType&amp;GraphicsObjectType.commonShapeTypes&#xa;" id="uG7RBlyn2Opaa"/>
    <sourcecode value="return self.isROI&#xa;" id="undDmqwCn5Bh1"/>
    <sourcecode value="return self._objectType==GraphicsObjectType.point&#xa;" id="u3Ph8OONoPQ4Z"/>
    <sourcecode value="return self._objectType==GraphicsObjectType.polygon&#xa;" id="uomitAmzisCHD"/>
    <sourcecode value="return self._objectType==GraphicsObjectType.rectangle&#xa;" id="uNW0mNbIoNxva"/>
    <sourcecode value="return self._objectType==GraphicsObjectType.line&#xa;" id="uSkD2oY68YGrr"/>
    <sourcecode value="return self._objectType==GraphicsObjectType.ellipse&#xa;" id="uE5RNHYz9eUrr"/>
    <sourcecode value="return self._objectType==GraphicsObjectType.path&#xa;" id="u4iuxd102I2jX"/>
    <sourcecode value="return self._objectType==GraphicsObjectType.text&#xa;" id="uGUiLN2HicQQO"/>
    <sourcecode value="QtWidgets.QListWidget.__init__(self,parent)&#xa;self.selectedColorMap=None&#xa;if self.validateItems(itemsList):&#xa;  self.addItems(itemsList)&#xa;&#xa;self.itemClicked.connect(self.selectItem)&#xa;self.itemDoubleClicked.connect(self.selectAndGo)&#xa;" id="uJQuU5eVwteXs"/>
    <sourcecode value="if self.validateItems(itemsList):&#xa;  self.clear()&#xa;  self.addItems(itemsList)&#xa;&#xa;" id="uP1j5uhqE2qnm"/>
    <sourcecode value="if itemsList is None or not all([isinstance(x,(str,unicode))for x in itemsList]):&#xa;  QtWidgets.QMessageBox.critical(None,&quot;Error&quot;,QtCore.QString(&quot;Argument must be a list of string or unicode items.&quot;))&#xa;  return False&#xa;&#xa;return True&#xa;" id="uuMwjgZgGn8vL"/>
    <sourcecode value="self.selectedColorMap=item.text()&#xa;self.itemSelected.emit(item.text())&#xa;" id="uSmtNeIAroI4C"/>
    <sourcecode value="self.selectedColorMap=item.text()&#xa;self.itemSelected.emit(item.text())&#xa;self.close()&#xa;" id="ufIkKXKBExQTR"/>
    <sourcecode value="super(ItemsListDialog,self).__init__(parent)&#xa;self.setupUi(self)&#xa;self.setModal(modal)&#xa;self._selectedItemText_=None&#xa;self._pre_selected_text_=None&#xa;self.listWidget.setSelectionMode(selectmode)&#xa;if title is not None:&#xa;  self.setWindowTitle(title)&#xa;&#xa;self.listWidget.itemClicked.connect(self.selectItem)&#xa;self.listWidget.itemDoubleClicked.connect(self.selectAndGo)&#xa;if isinstance(itemsList,(tuple,list))and\&#xa;all([isinstance(i,str)for i in itemsList]):&#xa;  if isinstance(preSelected,str)and preSelected in itemsList:&#xa;    self._pre_selected_text_=preSelected&#xa;&#xa;  self.setItems(itemsList)&#xa;&#xa;" id="uDQDyus9o0BRq"/>
    <sourcecode value="if itemsList is None or isinstance(itemsList,list)and(len(itemsList)==0 or not all([isinstance(x,(str))for x in itemsList])):&#xa;  QtWidgets.QMessageBox.critical(None,&quot;Error&quot;,&quot;Argument must be a list of string or unicode items.&quot;)&#xa;  return False&#xa;&#xa;return True&#xa;" id="uDxZPDMmiB9C6"/>
    <sourcecode value="return listWidget.selectionMode()&#xa;" id="utu9jpHn9B6g6"/>
    <sourcecode value="if not isinstance(selectmode,(int,QtWidgets.QAbstractItemView.SelectionMode)):&#xa;  raise TypeError(&quot;Expecting an int or a QtWidgets.QAbstractItemView.SelectionMode; got %s instead&quot;%type(selectmode).__name__)&#xa;&#xa;if isinstance(selectmode,int):&#xa;  if selectmode not in range(5):&#xa;    raise ValueError(&quot;Invalid selection mode:  %d&quot;%selectmode)&#xa;&#xa;&#xa;self.listWidget.setSelectionMode(selectmode)&#xa;" id="uXzLErCuzRlcc"/>
    <sourcecode value="if self.validateItems(itemsList):&#xa;  self.listWidget.clear()&#xa;  self.listWidget.addItems(itemsList)&#xa;  longestItemNdx=np.argmax([len(i)for i in itemsList])&#xa;  longestItem=itemsList[longestItemNdx]&#xa;  if isinstance(preSelected,str)and preSelected in itemsList:&#xa;    self._pre_selected_text_=preSelected&#xa;&#xa;  if self._pre_selected_text_ in itemsList:&#xa;    ndx=itemsList.index(self._pre_selected_text_)&#xa;    self.listWidget.setCurrentRow(ndx)&#xa;&#xa;  fm=QtGui.QFontMetrics(self.listWidget.font())&#xa;  w=fm.width(longestItem)*1.1&#xa;  if self.listWidget.verticalScrollBar():&#xa;    w+=self.listWidget.verticalScrollBar().sizeHint().width()&#xa;&#xa;  self.listWidget.setMinimumWidth(w)&#xa;&#xa;" id="uiuIKCM2layrU"/>
    <sourcecode value="self._selectedItemText_=item.text()&#xa;self.itemSelected.emit(str(item.text()))&#xa;" id="uLLVIeKAF6AI5"/>
    <sourcecode value="items=self.listWidget.selectedItems()&#xa;if len(items):&#xa;  return[i.text()for i in items]&#xa;&#xa;else:&#xa;  return[]&#xa;&#xa;" id="ufKNkd3OFFJD4"/>
    <sourcecode value="return self._selectedItemText_&#xa;" id="u6udzdnTd1Wa5"/>
    <sourcecode value="self._selectedItemText_=item.text()&#xa;self.itemSelected.emit(item.text())&#xa;self.accept()&#xa;" id="u4UZ8a2vXiSGn"/>
    <sourcecode value="QtWidgets.QFrame.__init__(self,parent)&#xa;parent.addWidget(self)&#xa;self.filter=filter&#xa;self.label=QtWidgets.QLabel(label)&#xa;self.filename=QtWidgets.QLineEdit()&#xa;self.filebrowser=QtWidgets.QPushButton(&quot;Browse...&quot;)&#xa;self.filebrowser.setFocusPolicy(QtCore.Qt.NoFocus)&#xa;self._layout=QtWidgets.QHBoxLayout()&#xa;self._layout.setSpacing(5)&#xa;self._layout.addWidget(self.label)&#xa;self._layout.addWidget(self.filename,1)&#xa;self._layout.addWidget(self.filebrowser)&#xa;self.setLayout(self._layout)&#xa;" id="uaqfPhIFUeOb3"/>
    <sourcecode value="return str(QtCore.QFile.encodeName(self.filename.text()))&#xa;" id="uOfQKtI4Gk28P"/>
    <sourcecode value="self.filename.setFocus()&#xa;" id="u3CUNoNBwbxi2"/>
    <sourcecode value="FileDialog.__init__(self,parent,label,filter)&#xa;self.filebrowser.clicked.connect(self.browse)&#xa;" id="uQFskaXhMcR5b"/>
    <sourcecode value="fn=QtWidgets.QFileDialog.getOpenFileName(&quot;&quot;,self.filter,self)&#xa;if not fn.isNull():&#xa;  self.filename.setText(fn)&#xa;&#xa;" id="uQPDD9u1rxVtu"/>
    <sourcecode value="try:&#xa;  filename=str(QtCore.QFile.encodeName(self.filename.text()))&#xa;  file=open(filename)&#xa;  file.close()&#xa;  return True&#xa;&#xa;except IOError:&#xa;  QtWidgets.QMessageBox.critical(None,&quot;Error&quot;,&quot;File '&quot;+filename+&quot;' not found&quot;)&#xa;  return False&#xa;&#xa;" id="uXpHZVhR5bx7z"/>
    <sourcecode value="FileDialog.__init__(self,parent,label,filter)&#xa;self.filebrowser.clicked.connect(self.browse)&#xa;" id="u313toaO7cHuJ"/>
    <sourcecode value="fn=QtWidgets.QFileDialog.getSaveFileName(self,&quot;Save File&quot;,&quot;&quot;,self.filter)&#xa;if not fn.isNull():&#xa;  self.filename.setText(fn)&#xa;&#xa;" id="uLGfacuoouwbL"/>
    <sourcecode value="try:&#xa;  filename=str(QtCore.QFile.encodeName(self.filename.text()))&#xa;  file=open(filename)&#xa;  file.close()&#xa;  return not QtWidgets.QMessageBox.warning(&#xa;  None,&quot;Warning&quot;,&quot;File '&quot;+filename+&quot;' exists&quot;,&quot;Overwrite&quot;,&quot;Cancel&quot;)&#xa;except IOError:&#xa;  return True&#xa;&#xa;" id="uACDBZuoGTWTN"/>
    <sourcecode value="QtWidgets.QFrame.__init__(self,parent)&#xa;parent.addWidget(self)&#xa;self.label=QtWidgets.QLabel(label)&#xa;self.variable=QtWidgets.QLineEdit()&#xa;self.variable.setValidator(self._QValidator(self.variable))&#xa;self._layout=QtWidgets.QHBoxLayout()&#xa;self._layout.setSpacing(5)&#xa;self._layout.addWidget(self.label)&#xa;self._layout.addWidget(self.variable,1)&#xa;self.setLayout(self._layout)&#xa;" id="uGg5z7QQ2e9sS"/>
    <sourcecode value="self.variable.setFocus()&#xa;" id="uBPlXxuSmmDg4"/>
    <sourcecode value="self.variable.setText(str(self._text2Value(text)))&#xa;" id="uhQATuUbvhpo3"/>
    <sourcecode value="text=self.text()&#xa;if text==&quot;&quot;:&#xa;  return None&#xa;&#xa;return self._text2Value(text)&#xa;" id="ugD0h4mno1vfX"/>
    <sourcecode value="return str(self.variable.text())&#xa;" id="uTNGKwnwzc9LW"/>
    <sourcecode value="try:&#xa;  v=self.value()&#xa;  if v==None:&#xa;    return True&#xa;&#xa;&#xa;except:&#xa;  QtWidgets.QMessageBox.critical(None,&quot;Error&quot;,&quot;Field '%s' must contain &quot;%self.label.text()+self._mustContain)&#xa;  return False&#xa;&#xa;try:&#xa;  if v&lt;self.min:&#xa;    QtWidgets.QMessageBox.critical(None,&quot;Error&quot;,&quot;Field '%s' value must be >= %s&quot;%(self.label.text()+str(self.min)))&#xa;    return False&#xa;&#xa;&#xa;except AttributeError:&#xa;  pass&#xa;&#xa;try:&#xa;  if v>self.max:&#xa;    QtWidgets.QMessageBox.critical(None,&quot;Error&quot;,&quot;Field '%%' value must be &lt;= %s&quot;%(self.label.text(),str(self.max)))&#xa;    return False&#xa;&#xa;&#xa;except AttributeError:&#xa;  pass&#xa;&#xa;return True&#xa;" id="ujkD2i8YuYENH"/>
    <sourcecode value="return int(self.text())&#xa;" id="uNxhXL5Q6PU1k"/>
    <sourcecode value="return float(self.text())&#xa;" id="uENNlHrmYacQH"/>
    <sourcecode value="QtWidgets.QFrame.__init__(self,parent)&#xa;parent.addWidget(self)&#xa;self.label=QtWidgets.QLabel(label)&#xa;self.variable=QtWidgets.QLineEdit()&#xa;self._layout=QtWidgets.QHBoxLayout()&#xa;self._layout.setSpacing(5)&#xa;self._layout.addWidget(self.label)&#xa;self._layout.addWidget(self.variable,1)&#xa;self.setLayout(self._layout)&#xa;" id="u81gnUrkL1QhS"/>
    <sourcecode value="self.variable.setFocus()&#xa;" id="uJO6EjS44unMc"/>
    <sourcecode value="self.variable.setText(text)&#xa;" id="ugLfYAEcKLXbs"/>
    <sourcecode value="return str(self.variable.text())&#xa;" id="uY1Z19Ld0gyNr"/>
    <sourcecode value="return unicode(self.variable.text())&#xa;" id="uQqaqQDYBudth"/>
    <sourcecode value="OptionalStringInput.__init__(self,parent,label)&#xa;" id="umA0URd0ZOt7j"/>
    <sourcecode value="if self.text()==&quot;&quot;:&#xa;  QtWidgets.QMessageBox.critical(None,&quot;Error&quot;,&quot;Field '%s' empty&quot;%(self.label.text()))&#xa;  return False&#xa;&#xa;return True&#xa;" id="uPWukG6XDmtEP"/>
    <sourcecode value="QtWidgets.QCheckBox.__init__(self,label,parent)&#xa;parent.addWidget(self)&#xa;" id="us2wDdLG9Bc51"/>
    <sourcecode value="return self.isChecked()&#xa;" id="uRaQH1deA0ZCt"/>
    <sourcecode value="QtWidgets.QFrame.__init__(self,parent)&#xa;parent.addWidget(self)&#xa;self.buttonBox=QtWidgets.QGroupBox(label,self)&#xa;if vertical:&#xa;  self.buttonBox.layout=QtWidgets.QVBoxLayout(self.buttonBox)&#xa;&#xa;else:&#xa;  self.buttonBox.layout=QtWidgets.QHBoxLayout(self.buttonBox)&#xa;&#xa;self.layout=QtWidgets.QHBoxLayout(self)&#xa;self.layout.addWidget(self.buttonBox)&#xa;self.layout.addStretch(5)&#xa;self.buttons=[]&#xa;self.results=[]&#xa;" id="uNa9R2ej2Ntk4"/>
    <sourcecode value="self.buttons.append(QtWidgets.QRadioButton(label))&#xa;self.buttonBox.layout.addWidget(self.buttons[-1])&#xa;self.results.append(result)&#xa;self.buttons[0].setChecked(True)&#xa;" id="urJQ8jxiQbqlK"/>
    <sourcecode value="self.buttonBox.addSpace(spacing)&#xa;" id="ueaXxcbE61X4Q"/>
    <sourcecode value="if index>=0 and index&lt;len(self.buttons):&#xa;  self.buttons[index].setChecked(True)&#xa;&#xa;" id="uhOqA8w1ZZqWT"/>
    <sourcecode value="for k in range(len(self.buttons)):&#xa;  if self.buttons[k].isChecked():&#xa;    return self.results[k]&#xa;&#xa;&#xa;return None&#xa;" id="uH3L6Nm1AP4lG"/>
    <sourcecode value="Choice.__init__(self,parent,label,0)&#xa;" id="ujek1AJ0sFcwt"/>
    <sourcecode value="Choice.__init__(self,parent,label,1)&#xa;" id="ul1UBeTx8NMTq"/>
    <sourcecode value="QtWidgets.QFrame.__init__(self,parent)&#xa;parent.addWidget(self)&#xa;if vertical:&#xa;  self.layout=QtWidgets.QVBoxLayout(self)&#xa;  self.defaultAlignment=QtCore.Qt.AlignLeft&#xa;&#xa;else:&#xa;  self.layout=QtWidgets.QHBoxLayout(self)&#xa;  self.defaultAlignment=QtCore.Qt.AlignTop&#xa;&#xa;self.widgets=[]&#xa;" id="uogSfCwiWZTzR"/>
    <sourcecode value="if alignment is None:&#xa;  alignment=self.defaultAlignment&#xa;&#xa;self.layout.addWidget(widget,stretch,alignment)&#xa;self.widgets.append(widget)&#xa;" id="uyNcvSJnbFM2o"/>
    <sourcecode value="self.layout.addSpacing(spacing)&#xa;" id="uXlrJsXrzcYgJ"/>
    <sourcecode value="self.layout.addStretch(stretch)&#xa;" id="u93shnSpjlEku"/>
    <sourcecode value="label=QtWidgets.QLabel(labelString,self)&#xa;self.addWidget(label,0,QtCore.Qt.AlignLeft)&#xa;" id="uU3SLR5D7Okag"/>
    <sourcecode value="for i in self.widgets:&#xa;  try:&#xa;    if i.validate()==0:&#xa;      return False&#xa;&#xa;&#xa;  except AttributeError:&#xa;    continue&#xa;&#xa;&#xa;return True&#xa;" id="ulbjhh2CxzMJL"/>
    <sourcecode value="DialogGroup.__init__(self,parent,0)&#xa;" id="uzLhbt30QVmSD"/>
    <sourcecode value="DialogGroup.__init__(self,parent,1)&#xa;" id="uy0b6T8kXvNq0"/>
    <sourcecode value="super().__init__(parent,label)&#xa;self.variable.setClearButtonEnabled(True)&#xa;self.variable.undoAvailable=True&#xa;self.variable.redoAvailable=True&#xa;" id="ugn7c8OYqLYdL"/>
    <sourcecode value="if self.text()==&quot;&quot;:&#xa;  QtWidgets.QMessageBox.critical(None,&quot;Error&quot;,&quot;Field '%s' empty&quot;%(self.label.text()))&#xa;  return False&#xa;&#xa;else:&#xa;  self.variable.setText(validateVarName(self.text()))&#xa;&#xa;return True&#xa;" id="ulc9OJIBrkxMU"/>
    <sourcecode value="QtWidgets.QDialog.__init__(self,parent)&#xa;self.layout=QtWidgets.QVBoxLayout(self)&#xa;self.layout.addStretch(5)&#xa;self.layout.addSpacing(20)&#xa;self.insertButtons()&#xa;self.widgets=[]&#xa;self.setWindowTitle(title)&#xa;self.resize(500,-1)&#xa;" id="uP04JkeryxVIo"/>
    <sourcecode value="self.buttons=QtWidgets.QFrame(self)&#xa;self.buttons.OK=QtWidgets.QPushButton(&quot;OK&quot;,self.buttons)&#xa;self.buttons.Cancel=QtWidgets.QPushButton(&quot;Cancel&quot;,self.buttons)&#xa;self.buttons.OK.setDefault(1)&#xa;self.buttons.Cancel.clicked.connect(self.reject)&#xa;self.buttons.OK.clicked.connect(self.tryAccept)&#xa;self.buttons.layout=QtWidgets.QHBoxLayout(self.buttons)&#xa;self.buttons.layout.addStretch(5)&#xa;self.buttons.layout.addWidget(self.buttons.OK)&#xa;self.buttons.layout.addWidget(self.buttons.Cancel)&#xa;self.layout.addWidget(self.buttons)&#xa;" id="uIYRjEtT4V6fP"/>
    <sourcecode value="if alignment is None:&#xa;  alignment=QtCore.Qt.AlignTop&#xa;&#xa;self.layout.insertWidget(len(self.widgets),widget,stretch,alignment)&#xa;self.widgets.append(widget)&#xa;" id="ud25fAyABicLQ"/>
    <sourcecode value="self.layout.insertSpacing(len(self.widgets),spacing)&#xa;self.widgets.append(None)&#xa;" id="uh3ejQUPAWCE5"/>
    <sourcecode value="self.layout.insertStretch(len(self.widgets),stretch)&#xa;self.widgets.append(None)&#xa;" id="uiwvVJrV4qmuQ"/>
    <sourcecode value="label=QtWidgets.QLabel(labelString,self)&#xa;self.addWidget(label,0,QtCore.Qt.AlignLeft)&#xa;" id="uHyKU2xRUVxyJ"/>
    <sourcecode value="helpString=&quot;&quot;&#xa;functionList=list(*functionSeq)&#xa;while len(functionList)>0:&#xa;  function=functionList.pop()&#xa;  if(len(functionList)==0)and(function.__doc__):&#xa;    helpString=helpString+function.__doc__&#xa;&#xa;  elif function.__doc__:&#xa;    helpString=helpString+function.__doc__+os.linesep+\&#xa;    &quot;--------------------------------------------------------&quot;+\&quot;--------------------------------&quot;+os.linesep&#xa;&#xa;if not hasattr(self.buttons,&quot;Help&quot;):&#xa;  self.buttons.Help=QtWidgets.QPushButton(&quot;Help&quot;,self.buttons)&#xa;  self.buttons.Help.setToggleButton(1)&#xa;  self.buttons.layout.insertWidget(3,self.buttons.Help)&#xa;  self.connect(self.buttons.Help,SIGNAL(&quot;toggled(bool)&quot;),self.showExtension)&#xa;&#xa;if int(QtCore.qVersion()[0])&lt;3:&#xa;  self.help=QtWidgets.QTextEdit(self)&#xa;  self.help.setText(helpString)&#xa;  if self.help.numLines()>20:&#xa;    self.help.setFixedVisibleLines(20)&#xa;&#xa;  else:&#xa;    self.help.setFixedVisibleLines(self.help.numLines()+1)&#xa;&#xa;  self.help.setReadOnly(1)&#xa;  self.help.setWordWrap(QtWidgets.QTextEdit.WidgetWidth)&#xa;&#xa;else:&#xa;  self.help=QtWidgets.QVGroupBox(self)&#xa;  self.help.setLayout(QtWidgets.QVBoxLayout())&#xa;  self.help.text=QtWidgets.QTextEdit(self.help)&#xa;  self.help.text.setText(helpString)&#xa;  self.help.text.setReadOnly(1)&#xa;  self.help.text.setWordWrap(QtWidgets.QTextEdit.WidgetWidth)&#xa;  total_height=self.help.text.heightForWidth(self.help.width())&#xa;  if total_height>self.help.text.height():&#xa;    self.help.text.setMinimumSize(self.help.text.width(),min(300,total_height))&#xa;&#xa;&#xa;self.setExtension(self.help)&#xa;" id="uX5k2LiLXYeqq"/>
    <sourcecode value="for i in self.widgets:&#xa;  try:&#xa;    if i.validate()==0:&#xa;      return&#xa;&#xa;&#xa;  except AttributeError:&#xa;    continue&#xa;&#xa;&#xa;self.accept()" id="uqdlSntGnoOhN"/>
    <sourcecode value="super().__init__(**kwargs)&#xa;self.settings=QtCore.QSettings()&#xa;self._plot_names_=dict()&#xa;self.crosshairDataCursors=dict()&#xa;self.verticalDataCursors=dict()&#xa;self.horizontalDataCursors=dict()&#xa;self.allDataCursors=collections.ChainMap(self.crosshairDataCursors,self.horizontalDataCursors,self.verticalDataCursors)&#xa;self._cached_cursors_=dict()&#xa;self.linkedCrosshairCursors=[]&#xa;self.linkedHorizontalCursors=[]&#xa;self.linkedVerticalCursors=[]&#xa;self.signalNo=0&#xa;self.frameIndex=range(1)&#xa;self.signalIndex=1&#xa;self.dataAnnotations=dict()&#xa;self.globalAnnotations=None&#xa;self.currentFrameAnnotations=None&#xa;self.currentSignalAnnotations=None&#xa;self._shown_epochs_=dict()&#xa;self._shown_spike_trains_=dict()&#xa;self.guiSelectedSignals=list()&#xa;self.guiSelectedSignalNames=list()&#xa;self.guiSelectedIrregularSignals=list()&#xa;self.guiSelectedIrregularSignalNames=list()&#xa;self._plot_analogsignals_=True&#xa;self._plot_irregularsignals_=True&#xa;self._overlay_spikes_events_epochs_=True&#xa;self._plotted_analogsignal_index=list()&#xa;self._plotted_irregularsignal_index=list()&#xa;self._focussed_plot_item_=None&#xa;self._current_plot_item_=None&#xa;self._mouse_coordinates_text_=&quot;&quot;&#xa;self._cursor_coordinates_text_=&quot;&quot;&#xa;self._configureGUI_()&#xa;self.plotSpikesAsEvents=False&#xa;self.plotEventsAsSpikes=False&#xa;self.plotEpochsAsEvents=False&#xa;self.overlayAxes=None&#xa;self.overlays=list()&#xa;self.defaultCursorWindowSizeX=0.005&#xa;self.defaultCursorWindowSizeY=0.0&#xa;self._number_of_frames_=1&#xa;self.x=None&#xa;self.y=None&#xa;self.ox=None&#xa;self.oy=None&#xa;self._mpl_prop_cycle_=plt.rcParams['axes.prop_cycle']&#xa;self.epoch_plot_options=dict()&#xa;self.epoch_plot_options[&quot;epoch_pen&quot;]=None&#xa;self.epoch_plot_options[&quot;epoch_brush&quot;]=None&#xa;self.epoch_plot_options[&quot;epoch_hoverPen&quot;]=None&#xa;self.epoch_plot_options[&quot;epoch_hoverBrush&quot;]=None&#xa;self.epoch_plot_options[&quot;epochs_color_set&quot;]=[(255,0,0,50),&#xa;(0,255,0,50),(0,0,255,50),(255,255,0,50),(255,0,255,50),(0,255,255,50)]self.train_plot_options=dict()&#xa;self.train_plot_options[&quot;train_pen&quot;]=None&#xa;self._defaultLineColorsList_=[&quot;;self._defaultOverlaidLineColorList_=[mpl.colors.to_rgba(c,alpha=0.5)for c in self._defaultLineColorsList_]&#xa;self.plotStyle=&quot;plot&quot;&#xa;self.selectedDataCursor=None&#xa;self.cursorColors=:&#xa;  &quot;crosshair&quot;:&quot;;self.linkedCursorColors=:&#xa;    &quot;crosshair&quot;:pg.mkColor(self.cursorColors[&quot;crosshair&quot;]).darker(),&#xa;    &quot;horizontal&quot;:pg.mkColor(self.cursorColors[&quot;horizontal&quot;]).darker(),&quot;vertical&quot;:pg.mkColor(self.cursorColors[&quot;vertical&quot;]).darker()&#xa;  self.defaultSpikeColor=mpl.colors.to_rgba(&quot;xkcd:navy&quot;)&#xa;  self.defaultEventColor=mpl.colors.to_rgba(&quot;xkcd:crimson&quot;)&#xa;  self.defaultEpochColor=mpl.colors.to_rgba(&quot;xkcd:coral&quot;)&#xa;  self._linkedViewers_=list()&#xa;  self._load_settings_()&#xa;  if isinstance(data,SignalViewer.supported_types)or any([t in type(data).mro()for t in SignalViewer.supported_types]):&#xa;    self.setData(data,doc_title=self._doc_title_)&#xa;&#xa;&#xa;def _save_settings_(self):&#xa;  if not self._gui_client_:&#xa;    self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowSize&quot;]),self.size())&#xa;    self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowPos&quot;]),self.pos())&#xa;    self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowState&quot;]),self.saveState())&#xa;    for dw in self.dockWidgets:&#xa;      self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,dw[0]]),dw[1].isVisible())&#xa;&#xa;&#xa;&#xa;def _load_settings_(self):&#xa;  if not self._gui_client_:&#xa;    windowSize=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowSize&quot;]),None)&#xa;    if windowSize is not None:&#xa;      self.resize(windowSize)&#xa;&#xa;    windowPos=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowPos&quot;]),None)&#xa;    if windowPos is not None:&#xa;      self.move(windowPos)&#xa;&#xa;    windowState=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowState&quot;]),None)&#xa;    if windowState is not None:&#xa;      self.restoreState(windowState)&#xa;&#xa;    for dw in self.dockWidgets:&#xa;      dock_visible=False&#xa;      dock_visibility=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,dw[0]]),&quot;false&quot;)&#xa;      if isinstance(dock_visibility,str):&#xa;        dock_visible=dock_visibility.lower().strip()==&quot;true&quot;&#xa;&#xa;      elif(isinstance(dock_visibility,bool)):&#xa;        dock_visible=dock_visibility&#xa;&#xa;      if dock_visible:&#xa;        dw[1].setVisible(True)&#xa;        dw[1].show()&#xa;&#xa;      else:&#xa;        dw[1].hide()&#xa;&#xa;&#xa;&#xa;&#xa;@property&#xa;def dockWidgets(self):&#xa;  return[(name,win)for name,win in self.__dict__.items()if isinstance(win,QtWidgets.QDockWidget)]&#xa;&#xa;def __del__(self):&#xa;  self.linkedCrosshairCursors.clear()&#xa;  self.linkedHorizontalCursors.clear()&#xa;  self.linkedVerticalCursors.clear()&#xa;  self.crosshairDataCursors.clear()&#xa;  self.verticalDataCursors.clear()&#xa;  self.horizontalDataCursors.clear()&#xa;  self.allDataCursors.clear()&#xa;  self.y=None&#xa;  self.x=None&#xa;  self.oy=None&#xa;  self.ox=None&#xa;  self.overlays.clear()&#xa;  self._current_plot_item_=None&#xa;  self._focussed_plot_item_=None&#xa;  self.canvas=None&#xa;  self.fig=None&#xa;  self.framesQSlider=None&#xa;  self.framesQSpinBox=None&#xa;  self.menuBar=None&#xa;&#xa;def _clear_signal_combobox_(self,analog=True):&#xa;  if analog:&#xa;    combobox=self.selectSignalComboBox&#xa;    signalChoiceList=self.guiSelectedSignals&#xa;    signalChoiceNames=self.guiSelectedSignalNames&#xa;    commandSigIndex=self.signalIndex&#xa;    signal_indices_to_plot=self._plotted_analogsignal_index&#xa;&#xa;  else:&#xa;    combobox=self.selectIrregularSignalComboBox&#xa;    signalChoiceList=self.guiSelectedIrregularSignals&#xa;    signalChoiceNames=self.guiSelectedIrregularSignalNames&#xa;    commandSigIndex=self.irregularIndex&#xa;    signal_indices_to_plot=self._plotted_irregularsignal_index&#xa;&#xa;  qSignalBlock=QtCore.QSignalBlocker(combobox)&#xa;  combobox.clear()&#xa;  signalChoiceNames.clear()&#xa;  signalChoiceList.clear()&#xa;  signal_indices_to_plot.clear()&#xa;&#xa;def _update_annotations_(self,data=None):&#xa;  self.dataAnnotations.clear()&#xa;  if isinstance(self.globalAnnotations,dict):&#xa;    self.dataAnnotations.update(self.globalAnnotations)&#xa;&#xa;  if isinstance(self.currentFrameAnnotations,dict):&#xa;    self.dataAnnotations.update(self.currentFrameAnnotations)&#xa;&#xa;  if isinstance(self.currentSignalAnnotations,dict):&#xa;    self.dataAnnotations.update(self.currentSignalAnnotations)&#xa;&#xa;  if isinstance(data,(tuple,list)):&#xa;    self.dataAnnotations=[self.dataAnnotations,data[:]]&#xa;&#xa;  elif isinstance(data,dict):&#xa;    self.dataAnnotations.update(data)&#xa;&#xa;  self.annotationsViewer.setData(self.dataAnnotations)&#xa;  if self.annotationsViewer.topLevelItemCount()==1:&#xa;    self.annotationsViewer.topLevelItem(0).setText(0,&quot;Data&quot;)&#xa;&#xa;&#xa;def _update_signal_combobox_(self,data,analog=True):&#xa;  if analog:&#xa;    combobox=self.selectSignalComboBox&#xa;    signalChoiceList=self.guiSelectedSignals&#xa;    signalChoiceNames=self.guiSelectedSignalNames&#xa;    commandSigIndex=self.signalIndex&#xa;    signal_indices_to_plot=self._plotted_analogsignal_index&#xa;&#xa;  else:&#xa;    combobox=self.selectIrregularSignalComboBox&#xa;    signalChoiceList=self.guiSelectedIrregularSignals&#xa;    signalChoiceNames=self.guiSelectedIrregularSignalNames&#xa;    commandSigIndex=self.irregularIndex&#xa;    signal_indices_to_plot=self._plotted_irregularsignal_index&#xa;&#xa;  qSignalBlock=QtCore.QSignalBlocker(combobox)&#xa;  prevSelSignalNdx=combobox.currentIndex()&#xa;  prevSelSignalTxt=combobox.currentText()&#xa;  prevAvailableChoices=[combobox.itemText(k)for k in range(combobox.model().rowCount())]&#xa;  if isinstance(data,(tuple,list)):&#xa;    if all([isinstance(d,(neo.AnalogSignal,neo.IrregularlySampledSignal,dt.DataSignal))for d in data]):&#xa;      currentSigNames=neoutils.get_signal_names_indices(data)&#xa;&#xa;    else:&#xa;      currentSigNames=[&quot;signal_%d&quot;%k for k in range(len(data))]&#xa;&#xa;&#xa;  elif isinstance(data,(neo.AnalogSignal,neo.IrregularlySampledSignal,dt.DataSignal)):&#xa;    currentSigNames=neoutils.get_signal_names_indices([data])&#xa;&#xa;  else:&#xa;    currentSigNames=[&quot;signal_0&quot;]&#xa;&#xa;  if len(prevAvailableChoices)!=len(currentSigNames)+2:&#xa;    combobox.clear()&#xa;    combobox.addItems([&quot;All&quot;]+currentSigNames+[&quot;Choose&quot;])&#xa;&#xa;  else:&#xa;    if any([s not in currentSigNames for s in prevAvailableChoices[1:-1]]):&#xa;      combobox.clear()&#xa;      combobox.addItems([&quot;All&quot;]+currentSigNames+[&quot;Choose&quot;])&#xa;&#xa;    elif any([s not in prevAvailableChoices for s in currentSigNames]):&#xa;      combobox.clear()&#xa;      combobox.addItems([&quot;All&quot;]+currentSigNames+[&quot;Choose&quot;])&#xa;&#xa;&#xa;  currentlyAvailableChoices=[combobox.itemText(k)for k in range(combobox.model().rowCount())]&#xa;  prevChoiceList=list(signalChoiceList[:])&#xa;  prevChoiceNames=list(signalChoiceNames[:])&#xa;  signalChoiceNames.clear()&#xa;  signalChoiceList.clear()&#xa;  ndx=[]&#xa;  if prevSelSignalNdx&lt;=0:&#xa;    if isinstance(commandSigIndex,str):&#xa;      if commandSigIndex in currentlyAvailableChoices:&#xa;        ndx=[currentSigNames.index(commandSigIndex)]&#xa;        if ndx[0]==-1:&#xa;          combobox.setCurrentIndex(0)&#xa;          ndx=[k for k in range(currentSigNames)]&#xa;&#xa;        else:&#xa;          combobox.setCurrentIndex(ndx[0]+1)&#xa;&#xa;&#xa;&#xa;    elif isinstance(commandSigIndex,int):&#xa;      if commandSigIndex&lt;0 or commandSigIndex>len(currentlyAvailableChoices)-2:&#xa;        combobox.setCurrentIndex(0)&#xa;        ndx=[k for k in range(len(currentSigNames))]&#xa;&#xa;      elif commandSigIndex>len(currentlyAvailableChoices)-2:&#xa;        combobox.setCurrentIndex(0)&#xa;        ndx=[k for k in range(len(currentSigNames))]&#xa;&#xa;&#xa;    elif isinstance(commandSigIndex,range):&#xa;      ndx=[k for k in commandSigIndex if k>=0 and k&lt;len(currentSigNames)]&#xa;      if len(ndx)!=len(currentSigNames):&#xa;        combobox.setCurrentIndex(len(currentlyAvailableChoices)-1)&#xa;&#xa;      else:&#xa;        combobox.setCurrentIndex(0)&#xa;&#xa;&#xa;    elif isinstance(commandSigIndex,slice):&#xa;      ndx=[k for k in range(*commandSigIndex.indices(len(currentSigNames)))]&#xa;      if len(ndx)!=len(currentSigNames):&#xa;        combobox.setCurrentIndex(len(currentlyAvailableChoices)-1)&#xa;&#xa;      else:&#xa;        combobox.setCurrentIndex(0)&#xa;&#xa;&#xa;    elif isinstance(commandSigIndex,(tuple,list)):&#xa;      if al([isinstance(c,int)for c in commandSigIndex]):&#xa;        ndx=[k for k in commandSigIndex if k>=0 and k&lt;len(currentSigNames)]&#xa;&#xa;      elif all([isinstance(c,str)for c in commandSigIndex]):&#xa;        ndx=[currentSigNames.index(c)for c in commandSigIindex if currentSigNames.index(c)!=-1]&#xa;&#xa;      if len(ndx)!=len(currentSigNames):&#xa;        combobox.setCurrentIndex(len(currentlyAvailableChoices)-1)&#xa;&#xa;      else:&#xa;        combobox.setCurrentIndex(0)&#xa;&#xa;&#xa;    else:&#xa;      combobox.setCurrentIndex(0)&#xa;      ndx=[k for k in range(len(currentSigNames))]&#xa;&#xa;&#xa;  else:&#xa;  if prevSelSignalTxt in currentlyAvailableChoices:&#xa;    if prevSelSignalTxt==&quot;Choose&quot;:&#xa;      ndx=[k for k in prevChoiceList if k>=0 and k&lt;len(currentSigNames)]&#xa;&#xa;    else:&#xa;      ndx=[currentSigNames.index(prevSelSignalTxt)]&#xa;&#xa;    index=currentlyAvailableChoices.index(prevSelSignalTxt)&#xa;    combobox.setCurrentIndex(index)&#xa;&#xa;  else:&#xa;    if prevSelSignalNdx>0 and prevSelSignalNdx&lt;len(currentlyAvailableChoices-1):&#xa;      combobox.setCurrentIndex(prevSelSignalNdx)&#xa;      ndx=[prevSelSignalNdx]&#xa;&#xa;    else:&#xa;      combobox.setCurrentIndex(0)&#xa;      ndx=[k for k in range(len(currentSigNames))]&#xa;&#xa;&#xa;  signalChoiceList[:]=ndx[:]&#xa;  signalChoiceNames[:]=[currentSigNames[k]for k in ndx]&#xa;  signal_indices_to_plot[:]=signalChoiceList[:]&#xa;&#xa;def _setup_signal_choosers_(self,data=None):&#xa;  sigBlock=[QtCore.QSignalBlocker(widget)for widget in(self.selectSignalComboBox,self.selectIrregularSignalComboBox)]&#xa;  if data is None:&#xa;    self._clear_signal_combobox_(analog=False)&#xa;    self._clear_signal_combobox_(analog=True)&#xa;    return&#xa;&#xa;  if isinstance(data,neo.Segment):&#xa;    if hasattr(data,&quot;analogsignals&quot;)and len(data.analogsignals):&#xa;      self._update_signal_combobox_(data.analogsignals,analog=True)&#xa;&#xa;    else:&#xa;      self._clear_signal_combobox_(analog=True)&#xa;&#xa;    if hasattr(data,&quot;irregularlysampledsignals&quot;)and len(data.irregularlysampledsignals):&#xa;      self._update_signal_combobox_(data.irregularlysampledsignals,analog=False)&#xa;&#xa;    else:&#xa;      self._clear_signal_combobox_(analog=False)&#xa;&#xa;&#xa;  elif isinstance(data,(tuple,list)):&#xa;    if all([isinstance(s,(neo.AnalogSignal,dt.DataSignal))for s in data]):&#xa;      self._update_signal_combobox_(data,analog=True)&#xa;      self._clear_signal_combobox_(analog=False)&#xa;&#xa;    elif all([isinstance(s,neo.IrregularlySampledSignal)for s in data]):&#xa;      self._update_signal_combobox_(data,analog=False)&#xa;      self._clear_signal_combobox_(analog=True)&#xa;&#xa;    elif all([isinstance(s,np.ndarray)for s in data]):&#xa;      self._update_signal_combobox_(data,analog=True)&#xa;      self._clear_signal_combobox_(analog=False)&#xa;&#xa;    elif all([isinstance(s,vigra.Kernel1D)for s in data]):&#xa;      self._update_signal_combobox_(data,analog=True)&#xa;      self._clear_signal_combobox_(analog=False)&#xa;&#xa;    else:&#xa;      self._clear_signal_combobox_(analog=False)&#xa;      self._clear_signal_combobox_(analog=True)&#xa;&#xa;&#xa;  else:&#xa;    if isinstance(data,(neo.AnalogSignal,dt.DataSignal)):&#xa;      self._update_signal_combobox_(data,analog=True)&#xa;      self._clear_signal_combobox_(analog=False)&#xa;&#xa;    elif isinstance(data,neo.IrregularlySampledSignal):&#xa;      self._update_signal_combobox_(data,analog=False)&#xa;      self._clear_signal_combobox_(analog=True)&#xa;&#xa;    elif isinstance(data,np.ndarray):&#xa;      self._update_signal_combobox_(data,analog=True)&#xa;      self._clear_signal_combobox_(analog=False)&#xa;&#xa;    elif isinstance(data,vigra.Kernel1D):&#xa;      self._update_signal_combobox_(data,analog=True)&#xa;      self._clear_signal_combobox_(analog=False)&#xa;&#xa;    else:&#xa;      self._clear_signal_combobox_(analog=False)&#xa;      self._clear_signal_combobox_(analog=True)&#xa;&#xa;&#xa;&#xa;def _configureGUI_(self):&#xa;  self.setupUi(self)&#xa;  if self.viewerWidgetContainer.layout()is None:&#xa;    self.viewerWidgetContainer.setLayout(QtWidgets.QGridLayout(self.viewerWidgetContainer))&#xa;&#xa;  self.viewerWidgetContainer.layout().setSpacing(0)&#xa;  self.viewerWidgetContainer.layout().setContentsMargins(0,0,0,0)&#xa;  self.actionSVG.triggered.connect(self.slot_export_svg)&#xa;  self.actionTIFF.triggered.connect(self.slot_export_tiff)&#xa;  self.actionPNG.triggered.connect(self.slot_export_png)&#xa;  self.cursorsMenu=QtWidgets.QMenu(&quot;Cursors&quot;,self)&#xa;  self.menubar.addMenu(self.cursorsMenu)&#xa;  self.addCursorsMenu=QtWidgets.QMenu(&quot;Add Cursors&quot;,self)&#xa;  self.addMultiAxesCursorMenu=QtWidgets.QMenu(&quot;Multi-axis&quot;,self)&#xa;  self.cursorsMenu.addMenu(self.addCursorsMenu)&#xa;  self.addCursorsMenu.addMenu(self.addMultiAxesCursorMenu)&#xa;  self.addVerticalCursorAction=self.addCursorsMenu.addAction(&quot;Vertical Cursor&quot;)&#xa;  self.addVerticalCursorAction.triggered.connect(self.slot_addVerticalCursor)&#xa;  self.addHorizontalCursorAction=self.addCursorsMenu.addAction(&quot;Horizontal Cursor&quot;)&#xa;  self.addHorizontalCursorAction.triggered.connect(self.slot_addHorizontalCursor)&#xa;  self.addCrosshairCursorAction=self.addCursorsMenu.addAction(&quot;Crosshair Cursor&quot;)&#xa;  self.addCrosshairCursorAction.triggered.connect(self.slot_addCrosshairCursor)&#xa;  self.addDynamicCrosshairCursorAction=self.addCursorsMenu.addAction(&quot;Dynamic Crosshair&quot;)&#xa;  self.addDynamicCrosshairCursorAction.triggered.connect(self.slot_addDynamicCrosshairCursor)&#xa;  self.addMultiAxisVCursorAction=self.addMultiAxesCursorMenu.addAction(&quot;Vertical&quot;)&#xa;  self.addMultiAxisVCursorAction.triggered.connect(self.slot_addMultiAxisVerticalCursor)&#xa;  self.addMultiAxisCCursorAction=self.addMultiAxesCursorMenu.addAction(&quot;Crosshair&quot;)&#xa;  self.addMultiAxisCCursorAction.triggered.connect(self.slot_addMultiAxisCrosshairCursor)&#xa;  self.addMultiAxesCursorMenu.addSeparator()&#xa;  self.addDynamicMultiAxisVCursorAction=self.addMultiAxesCursorMenu.addAction(&quot;Dynamic Vertical&quot;)&#xa;  self.addDynamicMultiAxisVCursorAction.triggered.connect(self.slot_addDynamicMultiAxisVerticalCursor)&#xa;  self.addDynamicMultiAxisCCursorAction=self.addMultiAxesCursorMenu.addAction(&quot;Dynamic Crosshair&quot;)&#xa;  self.addDynamicMultiAxisCCursorAction.triggered.connect(self.slot_addDynamicMultiAxisCrosshairCursor)&#xa;  self.editCursorsMenu=QtWidgets.QMenu(&quot;Edit Cursor&quot;,self)&#xa;  self.editAnyCursorAction=self.editCursorsMenu.addAction(&quot;Choose...&quot;)&#xa;  self.editAnyCursorAction.triggered.connect(self.slot_editCursor)&#xa;  self.editCursorAction=self.editCursorsMenu.addAction(&quot;Selected...&quot;)&#xa;  self.editCursorAction.triggered.connect(self.slot_editSelectedCursor)&#xa;  self.cursorsMenu.addMenu(self.editCursorsMenu)&#xa;  self.removeCursorsMenu=QtWidgets.QMenu(&quot;Remove cursors&quot;,self)&#xa;  self.removeCursorAction=self.removeCursorsMenu.addAction(&quot;Remove a cursor...&quot;)&#xa;  self.removeCursorAction.triggered.connect(self.slot_removeCursor)&#xa;  self.removeSelectedCursorAction=self.removeCursorsMenu.addAction(&quot;Remove Selected Cursor&quot;)&#xa;  self.removeSelectedCursorAction.triggered.connect(self.slot_removeSelectedCursor)&#xa;  self.removeAllCursorsAction=self.removeCursorsMenu.addAction(&quot;Remove All Cursors&quot;)&#xa;  self.removeAllCursorsAction.triggered.connect(self.slot_removeCursors)&#xa;  self.cursorsMenu.addMenu(self.removeCursorsMenu)&#xa;  self.epochsMenu=QtWidgets.QMenu(&quot;Make Epochs&quot;)&#xa;  self.epochsFromCursorsAction=self.epochsMenu.addAction(&quot;Cursors to Epochs&quot;)&#xa;  self.epochsFromCursorsAction.triggered.connect(self.slot_cursorsToEpoch)&#xa;  self.epochsFromCursorsAction.setEnabled(self._scipyenWindow_ is not None)&#xa;  self.epochFromSelectedCursorAction=self.epochsMenu.addAction(&quot;Selected Cursor to Epoch&quot;)&#xa;  self.epochFromSelectedCursorAction.triggered.connect(self.slot_cursorToEpoch)&#xa;  self.epochFromSelectedCursorAction.setEnabled(self._scipyenWindow_ is not None)&#xa;  self.epochBetweenCursorsAction=self.epochsMenu.addAction(&quot;Epoch Between Two Cursors&quot;)&#xa;  self.epochBetweenCursorsAction.triggered.connect(self.slot_epochBetweenCursors)&#xa;  self.epochBetweenCursorsAction.setEnabled(self._scipyenWindow_ is not None)&#xa;  self.epochsInDataMenu=QtWidgets.QMenu(&quot;Make Epochs in Data&quot;)&#xa;  self.epochsInDataFromCursorsAction=self.epochsInDataMenu.addAction(&quot;From All Cursors&quot;)&#xa;  self.epochsInDataFromCursorsAction.triggered.connect(self.slot_cursorsToEpochInData)&#xa;  self.epochInDataFromSelectedCursorAction=self.epochsInDataMenu.addAction(&quot;From Selected Cursor&quot;)&#xa;  self.epochInDataFromSelectedCursorAction.triggered.connect(self.slot_cursorToEpochInData)&#xa;  self.epochInDataBetweenCursors=self.epochsInDataMenu.addAction(&quot;Between Two Cursors&quot;)&#xa;  self.epochInDataBetweenCursors.triggered.connect(self.slot_epochInDataBetweenCursors)&#xa;  self.cursorsMenu.addMenu(self.epochsMenu)&#xa;  self.cursorsMenu.addMenu(self.epochsInDataMenu)&#xa;  self.signalsLayout=pg.GraphicsLayout()&#xa;  self.signalsLayout.layout.setVerticalSpacing(0)&#xa;  self.fig=pg.GraphicsLayoutWidget(parent=self.viewerWidgetContainer)&#xa;  self.viewerWidget=self.fig&#xa;  self.viewerWidgetContainer.layout().setHorizontalSpacing(0)&#xa;  self.viewerWidgetContainer.layout().setVerticalSpacing(0)&#xa;  self.viewerWidgetContainer.layout().contentsMargins().setLeft(0)&#xa;  self.viewerWidgetContainer.layout().contentsMargins().setRight(0)&#xa;  self.viewerWidgetContainer.layout().contentsMargins().setTop(0)&#xa;  self.viewerWidgetContainer.layout().contentsMargins().setBottom(0)&#xa;  self.viewerWidgetContainer.layout().addWidget(self.viewerWidget,0,0)&#xa;  self.mainLayout=self.fig.ci&#xa;  self.mainLayout.layout.setVerticalSpacing(0)&#xa;  self.mainLayout.layout.setHorizontalSpacing(0)&#xa;  self.plotTitleLabel=self.mainLayout.addLabel(&quot;&quot;,col=0,colspan=1)&#xa;  self.mainLayout.nextRow()&#xa;  self.mainLayout.addItem(self.signalsLayout)&#xa;  self.framesQSlider.setMinimum(0)&#xa;  self.framesQSlider.setMaximum(0)&#xa;  self.framesQSlider.valueChanged.connect(self.slot_setFrameNumber)&#xa;  self._frames_slider_=self.framesQSlider&#xa;  self.framesQSpinBox.setKeyboardTracking(False)&#xa;  self.framesQSpinBox.setMinimum(0)&#xa;  self.framesQSpinBox.setMaximum(0)&#xa;  self.framesQSpinBox.valueChanged.connect(self.slot_setFrameNumber)&#xa;  self._frames_spinner_=self.framesQSpinBox&#xa;  self.signalsMenu=QtWidgets.QMenu(&quot;Signals&quot;,self)&#xa;  self.selectSignalComboBox.clear()&#xa;  self.selectSignalComboBox.setCurrentIndex(0)&#xa;  self.selectSignalComboBox.currentIndexChanged[int].connect(self.slot_displayedSignalIndexChoiceChanged)&#xa;  self.selectSignalComboBox.currentIndexChanged[str].connect(self.slot_displayedSignalNameChoiceChanged)&#xa;  self.plotAnalogSignalsCheckBox.setCheckState(QtCore.Qt.Checked)&#xa;  self.plotAnalogSignalsCheckBox.stateChanged[int].connect(self.slot_plotAnalogSignalsCheckStateChanged)&#xa;  self.selectIrregularSignalComboBox.clear()&#xa;  self.selectIrregularSignalComboBox.setCurrentIndex(0)&#xa;  self.selectIrregularSignalComboBox.currentIndexChanged[int].connect(self.slot_displayedIrregularSignalIndexChoiceChanged)&#xa;  self.selectIrregularSignalComboBox.currentIndexChanged[str].connect(self.slot_displayedIrregularSignalNameChoiceChanged)&#xa;  self.plotIrregularSignalsCheckBox.setCheckState(QtCore.Qt.Checked)&#xa;  self.plotIrregularSignalsCheckBox.stateChanged[int].connect(self.slot_plotIrregularSignalsCheckStateChanged)&#xa;  self.annotationsDockWidget=QtWidgets.QDockWidget(&quot;Annotations&quot;,self,objectName=&quot;annotationsDockWidget&quot;)&#xa;  self.annotationsDockWidget.setWindowTitle(&quot;Annotations&quot;)&#xa;  self.annotationsDockWidget.setFeatures(QtWidgets.QDockWidget.DockWidgetClosable|QtWidgets.QDockWidget.DockWidgetMovable|QtWidgets.QDockWidget.DockWidgetFloatable)&#xa;  self.annotationsViewer=InteractiveTreeWidget(self.annotationsDockWidget)&#xa;  self.annotationsViewer.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)&#xa;  self.annotationsViewer.setDragDropMode(QtWidgets.QAbstractItemView.DragOnly)&#xa;  self.annotationsViewer.setDragEnabled(True)&#xa;  self.annotationsViewer.customContextMenuRequested[QtCore.QPoint].connect(self.slot_annotationsContextMenuRequested)&#xa;  self.annotationsViewer.setData(self.dataAnnotations)&#xa;  self.annotationsDockWidget.setWidget(self.annotationsViewer)&#xa;  self.addDockWidget(QtCore.Qt.RightDockWidgetArea,self.annotationsDockWidget)&#xa;  self.coordinatesDockWidget.setWindowTitle(&quot;Coordinates&quot;)&#xa;  self.docksMenu=QtWidgets.QMenu(&quot;Panels&quot;,self)&#xa;  self.showAnnotationsDockWidgetAction=self.docksMenu.addAction(&quot;Annotations&quot;)&#xa;  self.showAnnotationsDockWidgetAction.setObjectName(&quot;action_%s&quot;%self.annotationsDockWidget.objectName())&#xa;  self.showAnnotationsDockWidgetAction.triggered.connect(self.slot_showAnnotationsDock)&#xa;  self.showCoordinatesDockWidgetAction=self.docksMenu.addAction(&quot;Coordinates&quot;)&#xa;  self.showCoordinatesDockWidgetAction.setObjectName(&quot;action_%s&quot;%self.coordinatesDockWidget.objectName())&#xa;  self.showCoordinatesDockWidgetAction.triggered.connect(self.slot_showCoordinatesDock)&#xa;  self.menubar.addMenu(self.docksMenu)&#xa;&#xa;def addCursor(self,cursorType=&quot;c&quot;,where=None,hWin=None,vWin=None,&#xa;label=None,follows_mouse=False):&#xa;  if hWin is None:&#xa;    hWin=self.defaultCursorWindowSizeX&#xa;&#xa;  if vWin is None:&#xa;    vWin=self.defaultCursorWindowSizeY&#xa;&#xa;  crsID=None&#xa;  if cursorType==&quot;c&quot;:&#xa;    crsID=self.slot_addCrosshairCursor(label)&#xa;    self.slot_selectCursor(crsID)&#xa;    self.selectedDataCursor.xwindow=hWin&#xa;    self.selectedDataCursor.ywindow=vWin&#xa;    if where is not None and len(where)==2:&#xa;      if all([isinstance(w,pq.quantity.Quantity)for w in where]):&#xa;        self.crosshairDataCursors[crsID].x=where[0].magnitude&#xa;        self.crosshairDataCursors[crsID].y=where[1].magnitude&#xa;&#xa;      else:&#xa;        self.crosshairDataCursors[crsID].x=where[0]&#xa;        self.crosshairDataCursors[crsID].y=where[1]&#xa;&#xa;&#xa;&#xa;  elif cursorType==&quot;h&quot;:&#xa;    crsID=self.slot_addHorizontalCursor(label)&#xa;    self.slot_selectCursor(crsID)&#xa;    self.selectedDataCursor.ywindow=vWin&#xa;    if where is not None:&#xa;      if isinstance(where,pq.quantity.Quantity):&#xa;        self.horizontalDataCursors[crsID].y=where.magnitude&#xa;&#xa;      else:&#xa;        self.horizontalDataCursors[crsID].y=where&#xa;&#xa;&#xa;&#xa;  elif cursorType==&quot;v&quot;:&#xa;    crsID=self.slot_addVerticalCursor(label)&#xa;    self.slot_selectCursor(crsID)&#xa;    self.selectedDataCursor.xwindow=hWin&#xa;    if where is not None:&#xa;      if isinstance(where,pq.quantity.Quantity):&#xa;        self.horizontalDataCursors[crsID].x=where.magnitude&#xa;&#xa;      else:&#xa;        self.verticalDataCursors[crsID].x=where&#xa;&#xa;&#xa;&#xa;  return crsID&#xa;&#xa;@safeWrapper&#xa;def keyPressEvent(self,keyevt):&#xa;  if keyevt.key()in(QtCore.Qt.Key_Escape,QtCore.Qt.Key_Delete,QtCore.Qt.Key_Backspace):&#xa;    if len(self.allDataCursors):&#xa;      for c in[c for c in self.allDataCursors.values()if c.isDynamic]:&#xa;        self.slot_removeCursor(c.ID)&#xa;&#xa;      self._cursor_coordinates_text_=&quot;&quot;&#xa;      self._update_coordinates_viewer_()&#xa;&#xa;&#xa;&#xa;@safeWrapper&#xa;def setupCursors(self,cursorType=&quot;c&quot;,*where,**kwargs):&#xa;  hWin=self.defaultCursorWindowSizeX&#xa;  vWin=self.defaultCursorWindowSizeY&#xa;  labels=None&#xa;  allowed_keywords=[&quot;hWin&quot;,&quot;vWin&quot;,&quot;labels&quot;]&#xa;  if len(kwargs)>0:&#xa;    for key in kwargs.keys():&#xa;      if key not in allowed_keywords:&#xa;        raise ValueError(&quot;Illegal keyword argument %s&quot;%key)&#xa;&#xa;&#xa;    if&quot;hWin&quot;in kwargs.keys():&#xa;      hWin=kwargs[&quot;hWin&quot;]&#xa;&#xa;    if&quot;vWin&quot;in kwargs.keys():&#xa;      vWin=kwargs[&quot;vWin&quot;]&#xa;&#xa;    if&quot;labels&quot;in kwargs.keys():&#xa;      labels=kwargs[&quot;labels&quot;]&#xa;&#xa;&#xa;  if len(where)==1:&#xa;    where=where[0]&#xa;&#xa;  self.slot_removeCursors()&#xa;  self.displayFrame()&#xa;  self.addCursors(cursorType,where,hWin=hWin,vWin=vWin,labels=labels)&#xa;&#xa;def addCursors(self,cursorType=&quot;c&quot;,*where,**kwargs):&#xa;  hWin=self.defaultCursorWindowSizeX&#xa;  vWin=self.defaultCursorWindowSizeY&#xa;  labels=None&#xa;  allowed_keywords=[&quot;hWin&quot;,&quot;vWin&quot;,&quot;labels&quot;]&#xa;  if len(kwargs)>0:&#xa;    for key in kwargs.keys():&#xa;      if key not in allowed_keywords:&#xa;        raise ValueError(&quot;Illegal keyword argument %s&quot;%key)&#xa;&#xa;&#xa;    if&quot;hWin&quot;in kwargs.keys():&#xa;      hWin=kwargs[&quot;hWin&quot;]&#xa;&#xa;    if&quot;vWin&quot;in kwargs.keys():&#xa;      vWin=kwargs[&quot;vWin&quot;]&#xa;&#xa;    if&quot;labels&quot;in kwargs.keys():&#xa;      labels=kwargs[&quot;labels&quot;]&#xa;&#xa;&#xa;  if len(where)==1:&#xa;    where=where[0]&#xa;&#xa;  if isinstance(where,(tuple,list,np.ndarray)):&#xa;    for(k,x)in enumerate(where):&#xa;      wx=hWin&#xa;      wy=vWin&#xa;      lbl=labels&#xa;      if isinstance(hWin,(tuple,list,np.ndarray)):&#xa;        wx=hWin[k]&#xa;&#xa;      if isinstance(vWin,(tuple,list,np.ndarray)):&#xa;        wy=vWin[k]&#xa;&#xa;      if isinstance(labels,(tuple,list,np.ndarray)):&#xa;        lbl=labels[k]&#xa;&#xa;      self.addCursor(cursorType=cursorType,where=x,hWin=wx,vWin=wy,label=lbl)&#xa;&#xa;&#xa;  else:&#xa;    self.addCursor(cursorType=cursorType,where=where,hWin=hWin,vWin=vWin,label=labels)&#xa;&#xa;&#xa;@pyqtSlot(int)&#xa;@safeWrapper&#xa;def slot_displayedSignalIndexChoiceChanged(self,index):&#xa;  if index==0:&#xa;    self.guiSelectedSignals.clear()&#xa;&#xa;  elif index==self.selectSignalComboBox.count():&#xa;    self.guiSelectedSignals.clear()&#xa;&#xa;  else:&#xa;    self.guiSelectedSignals=[index-1]&#xa;&#xa;  self.displayFrame()&#xa;&#xa;@pyqtSlot(str)&#xa;@safeWrapper&#xa;def slot_displayedSignalNameChoiceChanged(self,name):&#xa;  if name.lower()in(&quot;all&quot;):&#xa;    self.guiSelectedSignals.clear()&#xa;&#xa;  elif name.lower()==&quot;choose&quot;:&#xa;    self.guiSelectedSignals.clear()&#xa;&#xa;  else:&#xa;    self.guiSelectedSignals=[name]&#xa;&#xa;  self.displayFrame()&#xa;&#xa;@pyqtSlot(int)&#xa;@safeWrapper&#xa;def slot_plotAnalogSignalsCheckStateChanged(self,state):&#xa;  if state==QtCore.Qt.Checked:&#xa;    self._plot_analogsignals_=True&#xa;&#xa;  else:&#xa;    self._plot_analogsignals_=False&#xa;&#xa;&#xa;@pyqtSlot(int)&#xa;@safeWrapper&#xa;def slot_plotIrregularSignalsCheckStateChanged(self,state):&#xa;  if state==QtCore.Qt.Checked:&#xa;    self._plot_irregularsignals_=True&#xa;&#xa;  else:&#xa;    self._plot_irregularsignals_=False&#xa;&#xa;  self.displayFrame()&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_showCoordinatesDock(self):&#xa;  self.coordinatesDockWidget.show()&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_showAnnotationsDock(self):&#xa;  self.annotationsDockWidget.show()&#xa;&#xa;@pyqtSlot(str)&#xa;@safeWrapper&#xa;def slot_reportCursorPosition(self,crsId=None):&#xa;  cursor=None&#xa;  if crsId is not None:&#xa;    cursor=self.getDataCursor(crsId)&#xa;&#xa;  if cursor is None:&#xa;    cursor=self.sender()&#xa;&#xa;  if isinstance(cursor,Cursor):&#xa;    text=[]&#xa;    if cursor.isDynamic:&#xa;      cursor_label_text=&quot;Dynamic %s&quot;%cursor.ID&#xa;&#xa;    else:&#xa;      cursor_label_text=&quot;Cursor %s&quot;%cursor.ID&#xa;&#xa;    if cursor.isSingleAxis:&#xa;      if isinstance(cursor.hostItem.vb.name,str)and len(cursor.hostItem.vb.name.strip()):&#xa;        cursor_label_text+=&quot; in %s:&quot;%cursor.hostItem.vb.name&#xa;&#xa;      text.append(cursor_label_text)&#xa;      x=cursor.getX()&#xa;      y=cursor.getY()&#xa;      cursor_pos_text=list()&#xa;      if cursor.cursorType in(&quot;crosshair&quot;,&quot;vertical&quot;):&#xa;        cursor_pos_text.append(&quot;X: %f&quot;%x)&#xa;&#xa;      if cursor.cursorType in(&quot;crosshair&quot;,&quot;horizontal&quot;):&#xa;        cursor_pos_text.append(&quot;Y: %f&quot;%y)&#xa;&#xa;      text.append(&quot;\n&quot;.join(cursor_pos_text))&#xa;      if cursor.cursorType in(&quot;vertical&quot;,&quot;crosshair&quot;):&#xa;      data_text=[]dataitems=cursor.hostItem.dataItems for kdata,dataitem in enumerate(dataitems):&#xa;        data_x,data_y=dataitem.getData()&#xa;        ndx=np.where(data_x>=x)[0]&#xa;        if len(ndx):&#xa;          if len(dataitems)>1:&#xa;            data_text.append(&quot;Y (%d/%d): %f&quot;%(kdata,len(dataitems),data_y[ndx[0]]))&#xa;&#xa;          else:&#xa;            data_text.append(&quot;Y: %f&quot;%data_y[ndx[0]])&#xa;&#xa;&#xa;&#xa;      if len(data_text)>1:&#xa;        text.append(&quot;\n&quot;.join(data_text))&#xa;&#xa;      else:&#xa;        text.append(data_text[0])&#xa;&#xa;&#xa;    else:&#xa;      text.append(cursor_label_text)&#xa;      plot_item_texts=[]&#xa;      for plotitem in self.plotItems:&#xa;        plot_item_text=list()&#xa;        plot_item_cursor_pos_text=list()&#xa;        if isinstance(plotitem.vb.name,str)and len(plotitem.vb.name.strip()):&#xa;          plot_item_cursor_pos_text.append(&quot;%s:&quot;%plotitem.vb.name)&#xa;&#xa;        x=cursor.getX(plotitem)&#xa;        y=cursor.getY(plotitem)&#xa;        if cursor.cursorType in(&quot;crosshair&quot;,&quot;vertical&quot;):&#xa;          plot_item_cursor_pos_text.append(&quot;X: %f&quot;%x)&#xa;&#xa;        if cursor.cursorType in(&quot;crosshair&quot;,&quot;horizontal&quot;):&#xa;          plot_item_cursor_pos_text.append(&quot;Y: %f&quot;%y)&#xa;&#xa;        plot_item_text.append(&quot;\n&quot;.join(plot_item_cursor_pos_text))&#xa;        if cursor.cursorType in(&quot;vertical&quot;,&quot;crosshair&quot;):&#xa;        data_text=[]dataitems=plotitem.dataItems if len(dataitems)>0:&#xa;          for kdata,dataitem in enumerate(dataitems):&#xa;            data_x,data_y=dataitem.getData()&#xa;            ndx=np.where(data_x>=x)[0]&#xa;            if len(ndx):&#xa;              data_text.append(&quot;Y (%d/%d): %f&quot;%(kdata,len(dataitems),data_y[ndx[0]]))&#xa;&#xa;&#xa;&#xa;        if len(data_text)>0:&#xa;          plot_item_text.append(&quot;\n&quot;.join(data_text))&#xa;&#xa;        if len(plot_item_text)>1:&#xa;          plot_item_texts.append(&quot;\n&quot;.join(plot_item_text))&#xa;&#xa;        elif len(plot_item_text)==1:&#xa;          plot_item_texts.append(plot_item_text[0])&#xa;&#xa;&#xa;      if len(plot_item_texts)>1:&#xa;        text.append(&quot;\n&quot;.join(plot_item_texts))&#xa;&#xa;      elif len(plot_item_texts)==1:&#xa;        text.append(plot_item_texts[0])&#xa;&#xa;&#xa;    if len(text)>1:&#xa;      self._cursor_coordinates_text_=&quot;\n&quot;.join(text)&#xa;&#xa;    elif len(text)==1:&#xa;      self._cursor_coordinates_text_=text[0]&#xa;&#xa;    else:&#xa;      self._cursor_coordinates_text_=&quot;&quot;&#xa;&#xa;    self._update_coordinates_viewer_()&#xa;&#xa;  else:&#xa;    self._cursor_coordinates_text_=&quot;&quot;&#xa;&#xa;&#xa;@pyqtSlot(int)&#xa;@safeWrapper&#xa;def slot_displayedIrregularSignalIndexChoiceChanged(self,index):&#xa;  if index==0:&#xa;    self.guiSelectedIrregularSignalIndices.clear()&#xa;&#xa;  elif index==self.selectIrregularSignalComboBox.count():&#xa;    self.guiSelectedIrregularSignalIndices.clear()&#xa;&#xa;  else:&#xa;    self.guiSelectedIrregularSignalIndices=[index]&#xa;&#xa;  self.displayFrame()&#xa;&#xa;@pyqtSlot(str)&#xa;@safeWrapper&#xa;def slot_displayedIrregularSignalNameChoiceChanged(self,name):&#xa;  if name.lower()in(&quot;all&quot;):&#xa;    self.guiSelectedIrregularSignals.clear()&#xa;&#xa;  elif name.lower()==&quot;choose&quot;:&#xa;    self.guiSelectedIrregularSignals.clear()&#xa;&#xa;  else:&#xa;    self.guiSelectedIrregularSignals=[name]&#xa;&#xa;  self.displayFrame()&#xa;&#xa;def linkCursors(self,id1,*ids):&#xa;  if len(ids)==0:&#xa;    raise ValueError(&quot;Link to what?&quot;)&#xa;&#xa;  if not self._hasCursor_(id1):&#xa;    raise ValueError(&quot;Cursor %s not found&quot;%id1)&#xa;&#xa;  ct=self.getDataCursor(id1).cursorType()&#xa;  other=list()&#xa;  for cid in ids:&#xa;    if not self._hasCursor_(cid):&#xa;      raise ValueError(&quot;Cursor %s not found&quot;%cid)&#xa;&#xa;    if self.getDataCursor(cid).cursorType()!=ct:&#xa;      raise ValueError(&quot;Cannot link cursors of different types&quot;)&#xa;&#xa;    other.append(self.getDataCursor(cid))&#xa;&#xa;  self.getDataCursor(id1).linkTo(*other)&#xa;&#xa;def unlinkCursors(self,id1=None,*ids):&#xa;  if id1 is None:&#xa;    for c in self.allDataCursors.values():&#xa;      c.unlink()&#xa;&#xa;    return&#xa;&#xa;  if not self._hasCursor_(id1):&#xa;    raise ValueError(&quot;Cursor %s not found&quot;%id1)&#xa;&#xa;  ct=self.getDataCursor(id1).cursorType()&#xa;  if len(ids)==1:&#xa;  if isinstance(ids[0],str):&#xa;    if not self._hasCursor_(ids[0]):&#xa;      raise ValueError(&quot;Cursor %s not found&quot;%ids[0])&#xa;&#xa;    if self.getDataCursor(id1).cursorType()!=self.getDataCursor(ids[0]).cursorType():&#xa;      raise ValueError(&quot;Cursors of different types cannot be linked&quot;)&#xa;&#xa;    self.getDataCursor(id1).unlinkFrom(self.getDataCursor(ids[0]))&#xa;&#xa;  elif isinstance(ids[0],tuple)or isinstance(ids[0],list):&#xa;    other=list()&#xa;    for cid in ids[0]:&#xa;      if not self._hasCursor_(cid):&#xa;        raise ValueError(&quot;Cursor %s not found&quot;%cid)&#xa;&#xa;      if self.getDataCursor(cid).cursorType()!=ct:&#xa;        raise ValueError(&quot;Cursors of different types cannot be linked&quot;)&#xa;&#xa;      other.append(self.getDataCursor(cid))&#xa;&#xa;    self.getDataCursor(id1).unlinkFrom(*other)&#xa;&#xa;  elif len(ids)>1:&#xa;    other=list()&#xa;    for cid in ids:&#xa;      if not self._hasCursor_(cid):&#xa;        raise ValueError(&quot;Cursor %s not found &quot;%cid)&#xa;&#xa;      if self.getDataCursor(cid).cursorType()!=ct:&#xa;        raise ValueError(&quot;Cursors of different types cannot be linked&quot;)&#xa;&#xa;      other.append(self.getDataCursor(cid))&#xa;&#xa;    self.getDataCursor(id1).unlinkFrom(*other)&#xa;    for c in other:&#xa;      c.unlink()&#xa;&#xa;&#xa;  else:&#xa;    self.getDataCursor(id1).unlink()&#xa;&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_refreshDataDisplay(self):&#xa;  if self._scipyenWindow_ is None:&#xa;    return&#xa;&#xa;  if self._data_var_name_ is not None and self._data_var_name_ in self._scipyenWindow_.workspace.keys():&#xa;    self.setData(self._scipyenWindow_.workspace[self._data_var_name_],self._data_var_name_)&#xa;&#xa;&#xa;def _hasCursor_(self,crsID):&#xa;  if len(self.allDataCursors)==0:&#xa;    return False&#xa;&#xa;  return crsID in self.allDataCursors&#xa;&#xa;def _addCursor_(self,cursor_type,item=None,label=None,follows_mouse=False,&#xa;**kwargs):&#xa;  ax_cx=self.axesWithLayoutPositions&#xa;  x=None&#xa;  y=None&#xa;  if len(ax_cx)==0:&#xa;    item=self.signalsLayout.scene()&#xa;&#xa;  else:&#xa;    ax,cx=zip(*ax_cx)&#xa;    if item is None:&#xa;      if self._current_plot_item_ is None:&#xa;        item=ax[0]&#xa;&#xa;      else:&#xa;        item=self._current_plot_item_&#xa;&#xa;      view_range=item.viewRange()&#xa;      x=view_range[0][0]+(view_range[0][1]-view_range[0][0])/2&#xa;      y=view_range[1][0]+(view_range[1][1]-view_range[1][0])/2&#xa;&#xa;    elif isinstance(item,pg.PlotItem):&#xa;      if item not in ax:&#xa;        return&#xa;&#xa;      view_range=item.viewRange()&#xa;      x=view_range[0][0]+(view_range[0][1]-view_range[0][0])/2&#xa;      y=view_range[1][0]+(view_range[1][1]-view_range[1][0])/2&#xa;&#xa;    elif isinstance(item,pg.GraphicsScene):&#xa;      if item is not self.signalsLayout.scene():&#xa;        return&#xa;&#xa;&#xa;    else:&#xa;      raise TypeError(&quot;axes expected to be a pyqtgraph.PlotItem, a pyqtgraph.GraphicsScene or None; got %s instead&quot;%type(axes).__name__)&#xa;&#xa;&#xa;  if not isinstance(cursor_type,str):&#xa;    raise TypeError(&quot;cursor_type expected to be a str; got %s instead&quot;%type(cursor_type).__name__)&#xa;&#xa;  if cursor_type==&quot;vertical&quot;:&#xa;    cursorDict=self.verticalDataCursors&#xa;    crsPrefix=&quot;v&quot;&#xa;    hWin=self.defaultCursorWindowSizeX&#xa;    vWin=0.0&#xa;    pen=pg.mkPen(pg.mkColor(self.cursorColors[&quot;vertical&quot;]),style=QtCore.Qt.SolidLine)&#xa;    linkedPen=pg.mkPen(pg.mkColor(self.linkedCursorColors[&quot;vertical&quot;]),style=QtCore.Qt.SolidLine)&#xa;&#xa;  elif cursor_type==&quot;horizontal&quot;:&#xa;    cursorDict=self.horizontalDataCursors&#xa;    crsPrefix=&quot;h&quot;&#xa;    hWin=0.0&#xa;    vWin=self.defaultCursorWindowSizeY&#xa;    pen=pg.mkPen(pg.mkColor(self.cursorColors[&quot;horizontal&quot;]),style=QtCore.Qt.SolidLine)&#xa;    linkedPen=pg.mkPen(pg.mkColor(self.linkedCursorColors[&quot;horizontal&quot;]),style=QtCore.Qt.SolidLine)&#xa;&#xa;  elif cursor_type==&quot;crosshair&quot;:&#xa;    cursorDict=self.crosshairDataCursors&#xa;    crsPrefix=&quot;c&quot;&#xa;    hWin=self.defaultCursorWindowSizeX&#xa;    vWin=self.defaultCursorWindowSizeY&#xa;    pen=pg.mkPen(pg.mkColor(self.cursorColors[&quot;crosshair&quot;]),style=QtCore.Qt.SolidLine)&#xa;    linkedPen=pg.mkPen(pg.mkColor(self.linkedCursorColors[&quot;crosshair&quot;]),style=QtCore.Qt.SolidLine)&#xa;&#xa;  else:&#xa;    raise ValueError(&quot;unsupported cursor type %s&quot;%cursor_type)&#xa;&#xa;  nCursors=len(cursorDict)&#xa;  if label is None:&#xa;    crsId=&quot;%s%s&quot;%(crsPrefix,str(nCursors))&#xa;&#xa;  else:&#xa;    crsId=label&#xa;&#xa;  xBounds=kwargs.pop(&quot;xBounds&quot;,None)&#xa;  yBounds=kwargs.pop(&quot;yBounds&quot;,None)&#xa;  cursorDict[crsId]=Cursor(item,&#xa;  x=x,y=y,hWin=hWin,vWin=vWin,cursor_type=cursor_type,cursorID=crsId,linkedPen=linkedPen,pen=pen,parent=self,follower=follows_mouse,xBounds=xBounds,yBounds=yBounds,**kwargs)cursorDict[crsId].sig_cursorSelected[str].connect(self.slot_selectCursor)&#xa;  cursorDict[crsId].sig_reportPosition[str].connect(self.slot_reportCursorPosition)&#xa;  cursorDict[crsId].sig_doubleClicked[str].connect(self.slot_editCursor)&#xa;  return crsId&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_addVerticalCursor(self,label=None,follows_mouse=False):&#xa;  return self._addCursor_(&quot;vertical&quot;,item=self._current_plot_item_,&#xa;  label=label,follows_mouse=follows_mouse)&#xa;@pyqtSlot((QtCore.QPoint))&#xa;@safeWrapper&#xa;def slot_annotationsContextMenuRequested(self,point):&#xa;  if self._scipyenWindow_ is None:&#xa;  return indexList=self.annotationsViewer.selectedIndexes()&#xa;  if len(indexList)==0:&#xa;    return&#xa;&#xa;  cm=QtWidgets.QMenu(&quot;Data operations&quot;,self)&#xa;  copyItemData=cm.addAction(&quot;Copy to workspace&quot;)&#xa;  copyItemData.triggered.connect(self.slot_exportItemDataToWorkspace)&#xa;  cm.popup(self.annotationsViewer.mapToGlobal(point),copyItemData)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_exportItemDataToWorkspace(self):&#xa;  if self._scipyenWindow_ is None:&#xa;    return&#xa;&#xa;  items=self.annotationsViewer.selectedItems()&#xa;  if len(items)==0:&#xa;    return&#xa;&#xa;  self._export_data_items_(items)&#xa;&#xa;@safeWrapper&#xa;def _export_data_items_(self,items):&#xa;  if self._scipyenWindow_ is None:&#xa;    return&#xa;&#xa;  values=list()&#xa;  item_paths=list()&#xa;  if isinstance(self.dataAnnotations,(dict,tuple,list)):&#xa;    for item in items:&#xa;      item_path=list()&#xa;      item_path.append(item.text(0))&#xa;      parent=item.parent()&#xa;      while parent is not None:&#xa;        item_path.append(parent.text(0))&#xa;        parent=parent.parent()&#xa;&#xa;      item_path.reverse()&#xa;      value=get_nested_value(self.dataAnnotations,item_path[1:])&#xa;      values.append(value)&#xa;      item_paths.append(item_path[-1])&#xa;&#xa;    if len(values):&#xa;      if len(values)==1:&#xa;        dlg=quickdialog.QuickDialog(self,&quot;Copy to workspace&quot;)&#xa;        namePrompt=quickdialog.StringInput(dlg,&quot;Data name:&quot;)&#xa;        newVarName=strutils.string_to_valid_identifier(item_paths[-1])&#xa;        namePrompt.variable.setClearButtonEnabled(True)&#xa;        namePrompt.variable.redoAvailable=True&#xa;        namePrompt.variable.undoAvailable=True&#xa;        namePrompt.setText(newVarName)&#xa;        if dlg.exec()==QtWidgets.QDialog.Accepted:&#xa;          newVarName=validateVarName(namePrompt.text(),self._scipyenWindow_.workspace)&#xa;          self._scipyenWindow_.assignToWorkspace(newVarName,values[0])&#xa;&#xa;&#xa;      else:&#xa;        for name,value in zip(item_paths,values):&#xa;          newVarName=validateVarName(name,self._scipyenWindow_.workspace)&#xa;          self._scipyenWindow_.assignToWorkspace(newVarName,value)&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_addHorizontalCursor(self,label=None,follows_mouse=False):&#xa;  return self._addCursor_(&quot;horizontal&quot;,item=self._current_plot_item_,&#xa;  label=label,follows_mouse=follows_mouse)&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_addCrosshairCursor(self,label=None,follows_mouse=False):&#xa;  return self._addCursor_(&quot;crosshair&quot;,item=self._current_plot_item_,&#xa;  label=label,follows_mouse=follows_mouse)&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_export_svg(self):&#xa;  if self.fig.scene()is None:&#xa;    return&#xa;&#xa;  self._export_to_graphics_file_(&quot;svg&quot;)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_export_tiff(self):&#xa;  if self.fig.scene()is None:&#xa;    return&#xa;&#xa;  self._export_to_graphics_file_(&quot;tiff&quot;)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_export_png(self):&#xa;  if self.fig.scene()is None:&#xa;    return&#xa;&#xa;  self._export_to_graphics_file_(&quot;png&quot;)&#xa;&#xa;@safeWrapper&#xa;def _export_to_graphics_file_(self,file_format):&#xa;  if not isinstance(file_format,str)or file_format.strip().lower()not in(&quot;svg&quot;,&quot;tiff&quot;,&quot;png&quot;):&#xa;    raise ValueError(&quot;Unsupported export file format %s&quot;%file_format)&#xa;&#xa;  if file_format.strip().lower()==&quot;svg&quot;:&#xa;    file_filter=&quot;Scalable Vector Graphics Files (*.svg)&quot;&#xa;    caption_suffix=&quot;SVG&quot;&#xa;&#xa;  elif file_format.strip().lower()==&quot;tiff&quot;:&#xa;    file_filter=&quot;TIFF Files (*.tif)&quot;&#xa;    caption_suffix=&quot;TIFF&quot;&#xa;&#xa;  elif file_format.strip().lower()==&quot;png&quot;:&#xa;    file_filter=&quot;Portable Network Graphics Files (*.png)&quot;&#xa;    caption_suffix=&quot;PNG&quot;&#xa;&#xa;  else:&#xa;    raise ValueError(&quot;Unsupported export file format %s&quot;%file_format)&#xa;&#xa;  if self._scipyenWindow_ is not None:&#xa;    targetDir=self._scipyenWindow_.currentDir&#xa;    fileName,_=QtWidgets.QFileDialog.getSaveFileName(self,&#xa;    caption=&quot;Export figure as %s&quot;%caption_suffix,filter=file_filter,directory=targetDir)&#xa;  else:&#xa;    fileName,_=QtWidgets.QFileDialog.getSaveFileName(self,&#xa;    caption=&quot;Export figure as %s&quot;%caption_suffix,filter=file_filter)&#xa;  if len(fileName)==0:&#xa;    return&#xa;&#xa;  if file_format.strip().lower()==&quot;svg&quot;:&#xa;    generator=QtSvg.QSvgGenerator()&#xa;    generator.setFileName(fileName)&#xa;    generator.setSize(QtCore.QSize(int(self.fig.scene().width()),int(self.fig.scene().height())))&#xa;    generator.setViewBox(QtCore.QRect(0,0,int(self.fig.scene().width()),int(self.fig.scene().height())))&#xa;    generator.setResolution(300)&#xa;    font=QtGui.QGuiApplication.font()&#xa;    painter=QtGui.QPainter()&#xa;    painter.begin(generator)&#xa;    painter.setFont(font)&#xa;    self.fig.scene().render(painter)&#xa;    painter.end()&#xa;&#xa;  else:&#xa;    out=QtGui.QImage(int(self.fig.scene().width()),int(self.fig.scene().height()))&#xa;    out.fill(pg.mkColor(pg.getConfigOption(&quot;background&quot;)))&#xa;    painter=QtGui.QPainter(out)&#xa;    self.fig.scene().render(painter)&#xa;    painter.end()&#xa;    out.save(fileName,file_format.strip().lower(),100)&#xa;&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_addDynamicCrosshairCursor(self,label=None):&#xa;  return self._addCursor_(&quot;crosshair&quot;,item=self._current_plot_item_,&#xa;  label=label,follows_mouse=True)&#xa;def _construct_multi_axis_vertical_(self,label=None,dynamic=False):&#xa;  if self.signalsLayout.scene()is not None:&#xa;    ax_cx=self.axesWithLayoutPositions&#xa;    if len(ax_cx)==0:&#xa;      return&#xa;&#xa;    pIs,_=zip(*ax_cx)&#xa;    min_x_axis=np.min([p.viewRange()[0][0]for p in pIs])&#xa;    max_x_axis=np.max([p.viewRange()[0][1]for p in pIs])&#xa;    min_point=pIs[0].vb.mapViewToScene(QtCore.QPointF(min_x_axis,0))&#xa;    max_point=pIs[0].vb.mapViewToScene(QtCore.QPointF(max_x_axis,0))&#xa;    xbounds=[min_point.x(),max_point.x()]&#xa;    return self._addCursor_(&quot;vertical&quot;,item=self.signalsLayout.scene(),&#xa;    label=label,follows_mouse=dynamic,xBounds=xbounds)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_addMultiAxisVerticalCursor(self,label=None):&#xa;  self._construct_multi_axis_vertical_(label=label)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_addDynamicMultiAxisVerticalCursor(self,label=None):&#xa;  self._construct_multi_axis_vertical_(label=label,dynamic=True)&#xa;&#xa;def _construct_multi_axis_crosshair_(self,label=None,dynamic=False):&#xa;  if self.signalsLayout.scene()is not None:&#xa;    ax_cx=self.axesWithLayoutPositions&#xa;    if len(ax_cx)==0:&#xa;      return&#xa;&#xa;    pIs,_=zip(*ax_cx)&#xa;    min_x_axis=np.min([p.viewRange()[0][0]for p in pIs])&#xa;    max_x_axis=np.max([p.viewRange()[0][1]for p in pIs])&#xa;    topAxis_y_max=pIs[0].viewRange()[1][1]&#xa;    bottomAxis_y_min=pIs[-1].viewRange()[1][0]&#xa;    min_point=pIs[0].vb.mapViewToScene(QtCore.QPointF(min_x_axis,topAxis_y_max))&#xa;    max_point=pIs[-1].vb.mapViewToScene(QtCore.QPointF(max_x_axis,bottomAxis_y_min))&#xa;    xbounds=[min_point.x(),max_point.x()]&#xa;    ybounds=[min_point.y(),max_point.y()]&#xa;    return self._addCursor_(&quot;crosshair&quot;,item=self.signalsLayout.scene(),&#xa;    label=label,follows_mouse=dynamic,xBounds=xbounds,yBounds=ybounds)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_addMultiAxisCrosshairCursor(self,label=None):&#xa;  self._construct_multi_axis_crosshair_(label=label)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_addDynamicMultiAxisCrosshairCursor(self,label=None):&#xa;  self._construct_multi_axis_crosshair_(label=label,dynamic=True)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_removeCursors(self):&#xa;  axes=self.plotItems&#xa;  for crs in self.allDataCursors.values():&#xa;    crs.detach()&#xa;&#xa;  self.allDataCursors.clear()&#xa;  self.crosshairDataCursors.clear()&#xa;  self.horizontalDataCursors.clear()&#xa;  self.verticalDataCursors.clear()&#xa;  self.selectedDataCursor=None&#xa;  self._cursor_coordinates_text_=&quot;&quot;&#xa;  self._update_coordinates_viewer_()&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_removeCursor(self,crsID=None):&#xa;  if len(self.allDataCursors)==0:&#xa;    return&#xa;&#xa;  if not isinstance(crsID,str):&#xa;    d=quickdialog.QuickDialog(self,&quot;Choose cursor to remove&quot;)&#xa;    cursorComboBox=pgui.QuickDialogComboBox(d,&quot;Select cursor:&quot;)&#xa;    cursorComboBox.setItems([c for c in self.allDataCursors])&#xa;    cursorComboBox.setValue(0)&#xa;    d.cursorComboBox=cursorComboBox&#xa;    if d.exec()==QtWidgets.QDialog.Accepted:&#xa;      crsID=d.cursorComboBox.text()&#xa;&#xa;&#xa;  if crsID not in self.allDataCursors:&#xa;    return&#xa;&#xa;  crs=None&#xa;  if crsID in self.crosshairDataCursors:&#xa;    crs=self.crosshairDataCursors.pop(crsID,None)&#xa;&#xa;  elif crsID in self.horizontalDataCursors:&#xa;    crs=self.horizontalDataCursors.pop(crsID,None)&#xa;&#xa;  elif crsID in self.verticalDataCursors:&#xa;    crs=self.verticalDataCursors.pop(crsID,None)&#xa;&#xa;  if crs is not None:&#xa;    crs.detach()&#xa;&#xa;  self._cached_cursors_.clear()&#xa;  if isinstance(self.selectedDataCursor,Cursor)and self.selectedDataCursor.ID==crsID:&#xa;    self.selectedDataCursor=None&#xa;    self.slot_reportCursorPosition(None)&#xa;&#xa;  else:&#xa;    self.slot_reportCursorPosition(self.selectedDataCursor.ID)&#xa;&#xa;  self._cursor_coordinates_text_=&quot;&quot;&#xa;  self._update_coordinates_viewer_()&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_removeSelectedCursor(self):&#xa;  if len(self.allDataCursors)==0:&#xa;    return&#xa;&#xa;  if isinstance(self.selectedDataCursor,Cursor):&#xa;    self.slot_removeCursor(self.selectedDataCursor.ID)&#xa;    self.selectedDataCursor=None&#xa;&#xa;  self._cursor_coordinates_text_=&quot;&quot;&#xa;  self._update_coordinates_viewer_()&#xa;&#xa;@pyqtSlot(str)&#xa;@safeWrapper&#xa;def slot_selectCursor(self,crsID=None):&#xa;  if len(self.allDataCursors)==0:&#xa;    return&#xa;&#xa;  if crsID is None:&#xa;    if not isinstance(self.sender(),Cursor):&#xa;      return&#xa;&#xa;    cursor=self.sender()&#xa;    crsID=cursor.ID&#xa;    if not crsID in self.allDataCursors:&#xa;      return&#xa;&#xa;    self.selectedDataCursor=cursor&#xa;    cursor.slot_setSelected(True)&#xa;&#xa;  else:&#xa;    if crsID in self.allDataCursors and not self.allDataCursors[crsID].isSelected:&#xa;      self.selectedDataCursor=self.allDataCursors[crsID]&#xa;      self.allDataCursors[crsID].slot_setSelected(True)&#xa;&#xa;&#xa;  for cid in self.allDataCursors:&#xa;    if cid!=crsID:&#xa;      self.allDataCursors[cid].slot_setSelected(False)&#xa;&#xa;&#xa;  if isinstance(self.selectedDataCursor,Cursor):&#xa;    self.slot_reportCursorPosition(self.selectedDataCursor.ID)&#xa;&#xa;&#xa;@pyqtSlot(str)&#xa;@safeWrapper&#xa;def slot_deselectCursor(self,crsID=None):&#xa;  if len(self.allDataCursors)==0:&#xa;    return&#xa;&#xa;  if crsID is None:&#xa;    if not isinstance(self.sender(),Cursor):&#xa;      return&#xa;&#xa;    cursor=self.sender()&#xa;    crsID=cursor.ID&#xa;    if not crsID in self.allDataCursors:&#xa;      return&#xa;&#xa;    self.selectedDataCursor=None&#xa;    cursor.slot_setSelected(False)&#xa;&#xa;  else:&#xa;    if crsID in self.allDataCursors:&#xa;      cursor=self.allDataCursors[crsID]&#xa;      cursor.slot_setSelected(False)&#xa;      self.selectedDataCursor=None&#xa;&#xa;&#xa;&#xa;@pyqtSlot(str)&#xa;@pyqtSlot(bool)&#xa;@safeWrapper&#xa;def slot_editCursor(self,crsId=None,choose=False):&#xa;  from functools import partial&#xa;  if len(self.allDataCursors)==0:&#xa;    return&#xa;&#xa;  cursor=None&#xa;  if crsId is None:&#xa;    cursor=self.selectedDataCursor&#xa;&#xa;  else:&#xa;    cursor=self.getDataCursor(crsId)&#xa;&#xa;  if cursor is None:&#xa;    if not choose:&#xa;      cursor=self.sender()&#xa;&#xa;    if not isinstance(cursor,Cursor):&#xa;      cursor=None&#xa;      choose=True&#xa;&#xa;&#xa;  if cursor is not None:&#xa;    if crsId is None:&#xa;      crsId=cursor.ID&#xa;&#xa;&#xa;  initialID=crsId&#xa;  if choose:&#xa;    d=quickdialog.QuickDialog(self,&quot;Edit cursor&quot;)&#xa;    cursorComboBox=pgui.QuickDialogComboBox(d,&quot;Select cursor:&quot;)&#xa;    cursorComboBox.setItems([c for c in self.allDataCursors])&#xa;    d.cursorComboBox=cursorComboBox&#xa;    d.cursorComboBox.connectIndexChanged(partial(self._slot_update_cursor_editor_dlg_,d=d))&#xa;&#xa;  else:&#xa;    d=quickdialog.QuickDialog(self,&quot;Edit cursor %s&quot;%crsId)&#xa;&#xa;  namePrompt=quickdialog.StringInput(d,&quot;Name:&quot;)&#xa;  namePrompt.variable.setClearButtonEnabled(True)&#xa;  namePrompt.variable.redoAvailable=True&#xa;  namePrompt.variable.undoAvailable=True&#xa;  d.namePrompt=namePrompt&#xa;  if cursor is not None:&#xa;    if cursor.cursorType in(&quot;vertical&quot;,&quot;crosshair&quot;):&#xa;      promptX=quickdialog.FloatInput(d,&quot;X coordinate:&quot;)&#xa;      promptX.variable.setClearButtonEnabled(True)&#xa;      promptX.variable.redoAvailable=True&#xa;      promptX.variable.undoAvailable=True&#xa;      d.promptX=promptX&#xa;      promptXWindow=quickdialog.FloatInput(d,&quot;Horizontal window size:&quot;)&#xa;      promptXWindow.variable.setClearButtonEnabled(True)&#xa;      promptXWindow.variable.redoAvailable=True&#xa;      promptXWindow.variable.undoAvailable=True&#xa;      d.promptXWindow=promptXWindow&#xa;&#xa;    if cursor.cursorType in(&quot;horizontal&quot;,&quot;crosshair&quot;):&#xa;      promptY=quickdialog.FloatInput(d,&quot;Y coordinate:&quot;)&#xa;      promptY.variable.setClearButtonEnabled(True)&#xa;      promptY.variable.redoAvailable=True&#xa;      promptY.variable.undoAvailable=True&#xa;      d.promptY=promptY&#xa;      promptYWindow=quickdialog.FloatInput(d,&quot;Vertical window size:&quot;)&#xa;      promptYWindow.variable.setClearButtonEnabled(True)&#xa;      promptYWindow.variable.redoAvailable=True&#xa;      promptYWindow.variable.undoAvailable=True&#xa;      d.promptYWindow=promptYWindow&#xa;&#xa;&#xa;  else:&#xa;    promptX=quickdialog.FloatInput(d,&quot;X coordinate:&quot;)&#xa;    promptX.variable.setClearButtonEnabled(True)&#xa;    promptX.variable.redoAvailable=True&#xa;    promptX.variable.undoAvailable=True&#xa;    d.promptX=promptX&#xa;    promptXWindow=quickdialog.FloatInput(d,&quot;Horizontal window size:&quot;)&#xa;    promptXWindow.variable.setClearButtonEnabled(True)&#xa;    promptXWindow.variable.redoAvailable=True&#xa;    promptXWindow.variable.undoAvailable=True&#xa;    d.promptXWindow=promptXWindow&#xa;    promptY=quickdialog.FloatInput(d,&quot;Y coordinate:&quot;)&#xa;    promptY.variable.setClearButtonEnabled(True)&#xa;    promptY.variable.redoAvailable=True&#xa;    promptY.variable.undoAvailable=True&#xa;    d.promptY=promptY&#xa;    promptYWindow=quickdialog.FloatInput(d,&quot;Vertical window size:&quot;)&#xa;    promptYWindow.variable.setClearButtonEnabled(True)&#xa;    promptYWindow.variable.redoAvailable=True&#xa;    promptYWindow.variable.undoAvailable=True&#xa;    d.promptYWindow=promptYWindow&#xa;&#xa;  if not isinstance(crsId,str):&#xa;    crsId=[c for c in self.allDataCursors.keys()][0]&#xa;&#xa;  self._slot_update_cursor_editor_dlg_(crsId,d)&#xa;  if d.exec()==QtWidgets.QDialog.Accepted:&#xa;    if choose:&#xa;      crsId=cursorComboBox.text()&#xa;      cursor=self.getDataCursor(crsId)&#xa;      initialID=crsId&#xa;&#xa;    if cursor is None:&#xa;      return&#xa;&#xa;    name=d.namePrompt.text()&#xa;    if initialID is not None:&#xa;      if name is not None and len(name.strip())>0 and name!=initialID:&#xa;        cursor.ID=name&#xa;        if cursor.isVertical:&#xa;          self.verticalDataCursors.pop(initialID)&#xa;          self.verticalDataCursors[cursor.ID]=cursor&#xa;&#xa;        elif cursor.isHorizontal:&#xa;          self.horizontalDataCursors.pop(initialID)&#xa;          self.horizontalDataCursors[cursor.ID]=cursor&#xa;&#xa;        else:&#xa;          self.crosshairDataCursors.pop(initialID)&#xa;          self.crosshairDataCursors[cursor.ID]=cursor&#xa;&#xa;&#xa;&#xa;    if cursor.isVertical:&#xa;      cursor.x=d.promptX.value()&#xa;      cursor.xwindow=d.promptXWindow.value()&#xa;&#xa;    elif cursor.isHorizontal:&#xa;      cursor.y=d.promptY.value()&#xa;      cursor.ywindow=d.promptYWindow.value()&#xa;&#xa;    else:&#xa;      cursor.x=d.promptX.value()&#xa;      cursor.xwindow=d.promptXWindow.value()&#xa;      cursor.y=d.promptY.value()&#xa;      cursor.ywindow=d.promptYWindow.value()&#xa;&#xa;&#xa;  if hasattr(d,&quot;cursorComboBox&quot;):&#xa;    d.cursorComboBox.disconnect()&#xa;&#xa;  del d&#xa;&#xa;@pyqtSlot(str)&#xa;@safeWrapper&#xa;def _slot_update_cursor_editor_dlg_(self,cid,d):&#xa;  if not isinstance(cid,str)or len(cid.strip())==0:&#xa;    if hasattr(d,&quot;cursorComboBox&quot;):&#xa;      if d.cursorComboBox.variable.count()==0:&#xa;        return&#xa;&#xa;      else:&#xa;        cid=d.cursorComboBox.variable.currentText()&#xa;        if len(cid)==0:&#xa;          cid=d.cursorComboBox.variable.itemText(0)&#xa;&#xa;&#xa;&#xa;&#xa;  c=self.getDataCursor(cid)&#xa;  if not isinstance(c,Cursor):&#xa;    return&#xa;&#xa;  if hasattr(d,&quot;namePrompt&quot;):&#xa;    d.namePrompt.setText(cid)&#xa;&#xa;  if c.cursorType==&quot;vertical&quot;:&#xa;    if hasattr(d,&quot;promptX&quot;):&#xa;      d.promptX.variable.setEnabled(True)&#xa;      d.promptX.setValue(c.x)&#xa;&#xa;    if hasattr(d,&quot;promptXWindow&quot;):&#xa;      d.promptXWindow.variable.setEnabled(True)&#xa;      d.promptXWindow.setValue(c.xwindow)&#xa;&#xa;    if hasattr(d,&quot;promptY&quot;):&#xa;      d.promptY.setValue(np.nan)&#xa;      d.promptY.variable.setEnabled(False)&#xa;&#xa;    if hasattr(d,&quot;promptYWindow&quot;):&#xa;      d.promptYWindow.setValue(np.nan)&#xa;      d.promptYWindow.variable.setEnabled(False)&#xa;&#xa;&#xa;  elif c.cursorType==&quot;horizontal&quot;:&#xa;    if hasattr(d,&quot;promptX&quot;):&#xa;      d.promptX.setValue(np.nan)&#xa;      d.promptX.variable.setEnabled(False)&#xa;&#xa;    if hasattr(d,&quot;promptXWindow&quot;):&#xa;      d.promptXWindow.setValue(np.nan)&#xa;      d.promptXWindow.variable.setEnabled(False)&#xa;&#xa;    if hasattr(d,&quot;promptY&quot;):&#xa;      d.promptY.variable.setEnabled(True)&#xa;      d.promptY.setValue(c.y)&#xa;&#xa;    if hasattr(d,&quot;promptYWindow&quot;):&#xa;      d.promptYWindow.variable.setEnabled(True)&#xa;      d.promptYWindow.setValue(c.ywindow)&#xa;&#xa;&#xa;  else:&#xa;    if hasattr(d,&quot;promptX&quot;):&#xa;      d.promptX.variable.setEnabled(True)&#xa;      d.promptX.setValue(c.x)&#xa;&#xa;    if hasattr(d,&quot;promptXWindow&quot;):&#xa;      d.promptXWindow.variable.setEnabled(True)&#xa;      d.promptXWindow.setValue(c.xwindow)&#xa;&#xa;    if hasattr(d,&quot;promptY&quot;):&#xa;      d.promptY.variable.setEnabled(True)&#xa;      d.promptY.setValue(c.y)&#xa;&#xa;    if hasattr(d,&quot;promptYWindow&quot;):&#xa;      d.promptYWindow.variable.setEnabled(True)&#xa;      d.promptYWindow.setValue(c.ywindow)&#xa;&#xa;&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_editSelectedCursor(self):&#xa;  if isinstance(self.selectedDataCursor,Cursor):&#xa;    self.slot_editCursor(crsId=self.selectedDataCursor.ID,choose=False)&#xa;&#xa;&#xa;def testGlobalsFcn(self,workspace):&#xa;  exec(&quot;a=np.eye(3)&quot;,workspace)&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def selectSignals(self,index=None):&#xa;  if index is None:&#xa;    pass&#xa;&#xa;  pass&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_cursorsToEpoch(self):&#xa;  if self._scipyenWindow_ is not None:&#xa;    epoch=self.cursorsToEpoch()&#xa;    if epoch is not None:&#xa;      name=epoch.name&#xa;      if name is None:&#xa;        name=&quot;epoch&quot;&#xa;&#xa;      self._scipyenWindow_.assignToWorkspace(name,epoch)&#xa;&#xa;&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_cursorsToEpochInData(self):&#xa;  vertAndCrossCursors=collections.ChainMap(self.crosshairDataCursors,self.verticalDataCursors)&#xa;  if len(vertAndCrossCursors)==0:&#xa;    return&#xa;&#xa;  if isinstance(self.y,(neo.Block,neo.Segment)):&#xa;    d=quickdialog.QuickDialog(self,&quot;Attach epoch to data&quot;)&#xa;    d.promptWidgets=list()&#xa;    epochNamePrompt=quickdialog.StringInput(d,&quot;Epoch Name:&quot;)&#xa;    epochNamePrompt.variable.setClearButtonEnabled(True)&#xa;    epochNamePrompt.variable.redoAvailable=True&#xa;    epochNamePrompt.variable.undoAvailable=True&#xa;    if self.y.name is not None:&#xa;      epochNamePrompt.setText(&quot;%s_Epoch&quot;%self.y.name)&#xa;&#xa;    else:&#xa;      epochNamePrompt.setText(&quot;Epoch&quot;)&#xa;&#xa;    d.promptWidgets.append(epochNamePrompt)&#xa;    toCurrentSegmentCheckBox=quickdialog.CheckBox(d,&quot;Current segment only&quot;)&#xa;    toCurrentSegmentCheckBox.setChecked(False)&#xa;    d.promptWidgets.append(toCurrentSegmentCheckBox)&#xa;    overwriteEpochCheckBox=quickdialog.CheckBox(d,&quot;Overwrite existing epochs&quot;)&#xa;    overwriteEpochCheckBox.setChecked(True)&#xa;&#xa;    d.promptWidgets.append(overwriteEpochCheckBox)&#xa;    if d.exec()==QtWidgets.QDialog.Accepted:&#xa;      epochName=epochNamePrompt.text()&#xa;      if epochName is None or len(epochName)==0:&#xa;        return&#xa;&#xa;      toCurrentSegment=toCurrentSegmentCheckBox.isChecked()&#xa;      overwriteEpoch=overwriteEpochCheckBox.isChecked()&#xa;&#xa;    cursors=[c for c in vertAndCrossCursors.values()]&#xa;    cursors.sort(key=attrgetter('x'))&#xa;    x=np.array([c.x for c in cursors])*pq.s&#xa;    d=np.array([c.xwindow for c in cursors])*pq.s&#xa;    labels=np.array([c.ID for c in cursors],dtype=&quot;S&quot;)&#xa;    t=x-d/2&#xa;    epoch=neo.Epoch(times=t,durations=d,labels=labels,units=pq.s,name=epochName)&#xa;    if isinstance(self.y,neo.Block):&#xa;      if toCurrentSegment:&#xa;        if overwriteEpoch:&#xa;          self.y.segments[self.frameIndex[self._current_frame_index_]].epochs=[epoch]&#xa;&#xa;        else:&#xa;          self.y.segments[self.frameIndex[self._current_frame_index_]].epochs.append(epoch)&#xa;&#xa;&#xa;      else:&#xa;        if overwriteEpoch:&#xa;          for ndx in self.frameIndex:&#xa;            self.y.segments[ndx].epochs=[epoch]&#xa;&#xa;&#xa;        else:&#xa;          for ndx in self.frameIndex:&#xa;            self.y.segments[ndx].epochs.append(epoch)&#xa;&#xa;&#xa;&#xa;&#xa;    else:&#xa;      if overwriteEpoch:&#xa;        self.y.epochs=[epoch]&#xa;&#xa;      else:&#xa;        self.y.epochs.append(epoch)&#xa;&#xa;&#xa;    self.displayFrame()&#xa;&#xa;  else:&#xa;    QtWidgets.QMessageBox.warning(self,&quot;Attach epoch to data&quot;,&quot;Epochs can only be embedded in neo.Block and neo.Segment data.\n\nPlease use actions in 'Make epochs' sub-menu&quot;)&#xa;&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_cursorToEpochInData(self):&#xa;  vertAndCrossCursors=collections.ChainMap(self.crosshairDataCursors,self.verticalDataCursors)&#xa;  if len(vertAndCrossCursors)==0:&#xa;    return&#xa;&#xa;  epoch=self.cursorToEpoch(self.selectedDataCursor)&#xa;  if epoch is not None:&#xa;    name=epoch.name&#xa;    if name is not None:&#xa;      name=&quot;epoch&quot;&#xa;&#xa;&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_epochInDataBetweenCursors(self):&#xa;  vertAndCrossCursors=collections.ChainMap(self.crosshairDataCursors,self.verticalDataCursors)&#xa;  if len(vertAndCrossCursors)==0:&#xa;    return&#xa;&#xa;  if isinstance(self.y,(neo.Block,neo.Segment)):&#xa;    d=quickdialog.QuickDialog(self,&quot;Make Epoch From Interval Between Cursors:&quot;)&#xa;    d.promptWidgets=list()&#xa;    namePrompt=quickdialog.StringInput(d,&quot;Name:&quot;)&#xa;    namePrompt.setText(&quot;Epoch&quot;)&#xa;    c1Prompt=quickdialog.StringInput(d,&quot;Cursor 1:&quot;)&#xa;    c2Prompt=quickdialog.StringInput(d,&quot;Cursor 2:&quot;)&#xa;    d.promptWidgets.append(namePrompt)&#xa;    d.promptWidgets.append(c1Prompt)&#xa;    d.promptWidgets.append(c2Prompt)&#xa;    toCurrentSegmentCheckBox=quickdialog.CheckBox(d,&quot;Current segment only&quot;)&#xa;    toCurrentSegmentCheckBox.setChecked(False)&#xa;    d.promptWidgets.append(toCurrentSegmentCheckBox)&#xa;    overwriteEpochCheckBox=quickdialog.CheckBox(d,&quot;Overwrite existing epochs&quot;)&#xa;    overwriteEpochCheckBox.setChecked(True)&#xa;&#xa;    d.promptWidgets.append(overwriteEpochCheckBox)&#xa;    if d.exec()==QtWidgets.QDialog.Accepted:&#xa;      name=namePrompt.text()&#xa;      if name is None or len(name)==0:&#xa;        return&#xa;&#xa;      c1ID=c1Prompt.text()&#xa;      if c1ID is None or len(c1ID)==0:&#xa;        return&#xa;&#xa;      c2ID=c2Prompt.text()&#xa;      if c2ID is None or len(c2ID)==0:&#xa;        return&#xa;&#xa;      c1=self.getDataCursor(c1ID)&#xa;      c2=self.getDataCursor(c2ID)&#xa;      if c1 is None or c2 is None:&#xa;        return&#xa;&#xa;      toCurrentSegment=toCurrentSegmentCheckBox.isChecked()&#xa;      overwriteEpoch=overwriteEpochCheckBox.isChecked()&#xa;      epoch=self.epochBetweenCursors(c1,c2,name)&#xa;      if epoch is not None:&#xa;        name=epoch.name&#xa;        if name is None:&#xa;          name=&quot;epoch&quot;&#xa;&#xa;&#xa;      if isinstance(self.y,neo.Block):&#xa;        if toCurrentSegment:&#xa;          if overwriteEpoch:&#xa;            self.y.segments[self.frameIndex[self._current_frame_index_]].epochs=[epoch]&#xa;&#xa;          else:&#xa;            self.y.segments[self.frameIndex[self._current_frame_index_]].epochs.append(epoch)&#xa;&#xa;&#xa;        else:&#xa;          if overwriteEpoch:&#xa;            for ndx in self.frameIndex:&#xa;              self.y.segments[ndx].epochs=[epoch]&#xa;&#xa;&#xa;          else:&#xa;            for ndx in self.frameIndex:&#xa;              self.y.segments[ndx].epochs.append(epoch)&#xa;&#xa;&#xa;&#xa;&#xa;      else:&#xa;        if overwriteEpoch:&#xa;          self.y.epochs=[epoch]&#xa;&#xa;        else:&#xa;          self.y.epochs.append(epoch)&#xa;&#xa;&#xa;      self.displayFrame()&#xa;&#xa;&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_cursorToEpoch(self):&#xa;  vertAndCrossCursors=collections.ChainMap(self.crosshairDataCursors,self.verticalDataCursors)&#xa;  if len(vertAndCrossCursors)==0:&#xa;    return&#xa;&#xa;  if self._scipyenWindow_ is not None:&#xa;    epoch=self.cursorToEpoch(self.selectedDataCursor)&#xa;    if epoch is not None:&#xa;      name=epoch.name&#xa;      if name is not None:&#xa;        name=&quot;epoch&quot;&#xa;&#xa;      self._scipyenWindow_.assignToWorkspace(name,epoch)&#xa;&#xa;&#xa;&#xa;@pyqtSlot()&#xa;@safeWrapper&#xa;def slot_epochBetweenCursors(self):&#xa;  if self._scipyenWindow_ is None:&#xa;    return&#xa;&#xa;  vertAndCrossCursors=collections.ChainMap(self.crosshairDataCursors,self.verticalDataCursors)&#xa;  if len(vertAndCrossCursors)==0:&#xa;    return&#xa;&#xa;  d=quickdialog.QuickDialog(self,&quot;Make Epoch From Interval Between Cursors:&quot;)&#xa;  d.promptWidgets=list()&#xa;  namePrompt=quickdialog.StringInput(d,&quot;Name:&quot;)&#xa;  namePrompt.setText(&quot;Epoch&quot;)&#xa;  c1Prompt=quickdialog.StringInput(d,&quot;Cursor 1 ID:&quot;)&#xa;  c2Prompt=quickdialog.StringInput(d,&quot;Cursor 2 ID:&quot;)&#xa;  d.promptWidgets.append(namePrompt)&#xa;  d.promptWidgets.append(c1Prompt)&#xa;  d.promptWidgets.append(c2Prompt)&#xa;  if d.exec()==QtWidgets.QDialog.Accepted:&#xa;    name=namePrompt.text()&#xa;    if name is None or len(name)==0:&#xa;      return&#xa;&#xa;    c1ID=c1Prompt.text()&#xa;    if c1ID is None or len(c1ID)==0:&#xa;      return&#xa;&#xa;    c2ID=c2Prompt.text()&#xa;    if c2ID is None or len(c2ID)==0:&#xa;      return&#xa;&#xa;    c1=self.getDataCursor(c1ID)&#xa;    c2=self.getDataCursor(c2ID)&#xa;    if c1 is None or c2 is None:&#xa;      return&#xa;&#xa;    epoch=self.epochBetweenCursors(c1,c2,name)&#xa;    if epoch is not None:&#xa;      name=epoch.name&#xa;      if name is None:&#xa;        name=&quot;epoch&quot;&#xa;&#xa;      self._scipyenWindow_.assignToWorkspace(name,epoch)&#xa;&#xa;&#xa;&#xa;def cursorsToEpoch(self,name=None):&#xa;  vertAndCrossCursors=collections.ChainMap(self.crosshairDataCursors,self.verticalDataCursors)&#xa;  if len(vertAndCrossCursors)==0:&#xa;    return None&#xa;&#xa;  if name is None:&#xa;    d=quickdialog.QuickDialog(self,&quot;Make Epoch From Cursors:&quot;)&#xa;    d.promptWidgets=list()&#xa;    d.promptWidgets.append(quickdialog.StringInput(d,&quot;Name:&quot;))&#xa;    d.promptWidgets[0].setText(&quot;Epoch&quot;)&#xa;    d.promptWidgets[0].variable.setClearButtonEnabled(True)&#xa;    d.promptWidgets[0].variable.redoAvailable=True&#xa;    d.promptWidgets[0].variable.undoAvailable=True&#xa;    if d.exec()==QtWidgets.QDialog.Accepted:&#xa;      txt=d.promptWidgets[0].text()&#xa;      if txt is not None and len(txt)>0:&#xa;        name=txt&#xa;&#xa;&#xa;&#xa;  cursors=[c for c in vertAndCrossCursors.values()]&#xa;  cursors.sort(key=attrgetter('x'))&#xa;  x=np.array([c.x for c in cursors])*pq.s&#xa;  d=np.array([c.xwindow for c in cursors])*pq.s&#xa;  labels=np.array([c.ID for c in cursors],dtype=&quot;S&quot;)&#xa;  t=x-d/2&#xa;  ret=neo.Epoch(times=t,durations=d,labels=labels,units=pq.s,name=name)&#xa;  return ret&#xa;&#xa;def cursorToEpoch(self,crs=None,name=None):&#xa;  if crs is None:&#xa;    return&#xa;&#xa;  if crs.isHorizontal:&#xa;    return&#xa;&#xa;  if name is None:&#xa;    d=quickdialog.QuickDialog(self,&quot;Make Epoch From Cursor:&quot;)&#xa;    d.promptWidgets=list()&#xa;    d.promptWidgets.append(quickdialog.StringInput(d,&quot;Name:&quot;))&#xa;    d.promptWidgets[0].setText(&quot;Epoch from &quot;+crs.ID)&#xa;    if d.exec()==QtWidgets.QDialog.Accepted:&#xa;      txt=d.promptWidgets[0].text()&#xa;      if txt is not None and len(txt)>0:&#xa;        name=txt&#xa;&#xa;&#xa;    else:&#xa;      return&#xa;&#xa;&#xa;  return neo.Epoch(times=np.array([crs.x-crs.xwindow/2])*pq.s,\&#xa;  durations=np.array([crs.xwindow])*pq.s,\units=pq.s,label=np.ndarray([crs.ID],dtype=&quot;S&quot;),name=name)&#xa;def epochBetweenCursors(self,c0,c1,name=None):&#xa;  if c0.isHorizontal or c1.isHorizontal:&#xa;    return&#xa;&#xa;  clist=sorted([c0,c1],key=attrgetter('x'))&#xa;  if name is None:&#xa;    d=quickdialog.QuickDialog(self,&quot;Make Epoch From Interval Between Two Cursors:&quot;)&#xa;    d.promptWidgets=list()&#xa;    d.promptWidgets.append(quickdialog.StringInput(d,&quot;Name:&quot;))&#xa;    d.promptWidgets[0].setText(&quot;Epoch&quot;)&#xa;    if d.exec()==QtWidgets.QDialog.Accepted:&#xa;      txt=d.promptWidgets[0].text()&#xa;      if txt is not None and len(txt)>0:&#xa;        name=txt&#xa;&#xa;&#xa;    else:&#xa;      return&#xa;&#xa;&#xa;  return neo.Epoch(times=np.array([clist[0].x])*pq.s,\&#xa;  durations=np.array([clist[1].x-clist[0].x])*pq.s,\units=pq.s,labels=np.array([&quot;From %s to %s&quot;%(clist[0].ID,clist[1].ID)],dtype=&quot;S&quot;),\name=name)&#xa;def setPlotStyle(self,val):&#xa;  if val is None:&#xa;    self.plotStyle=&quot;plot&quot;&#xa;&#xa;  elif isinstance(val,str):&#xa;    self.plotStyle=val&#xa;&#xa;  else:&#xa;    raise ValueError(&quot;Plot style must be a string with a valid matplotlib drawing function&quot;)&#xa;&#xa;  self.displayFrame()&#xa;&#xa;@safeWrapper&#xa;def plot(self,*args,**kwargs):&#xa;  self.setData(*args,**kwargs)&#xa;&#xa;@safeWrapper&#xa;def setData(self,x,y=None,plotStyle=None,style=None,doc_title=None,&#xa;segments=None,signals=None,irregularSignals=None,interval=None,separateChannels=False,signalChannels=None,irregularSignalChannels=None,channelAxis=None,varname=None,*args,**kwargs):&#xa;  from.import imageviewer as iv&#xa;  self.plot_start=None&#xa;  self.plot_stop=None&#xa;  self.epoch_plot_options[&quot;epoch_pen&quot;]=kwargs.pop(&quot;epoch_pen&quot;,None)&#xa;  self.epoch_plot_options[&quot;epoch_brush&quot;]=kwargs.pop(&quot;epoch_brush&quot;,None)&#xa;  self.epoch_plot_options[&quot;epoch_hoverPen&quot;]=kwargs.pop(&quot;epoch_hoverPen&quot;,None)&#xa;  self.epoch_plot_options[&quot;epoch_hoverBrush&quot;]=kwargs.pop(&quot;epoch_hoverBrush&quot;,None)&#xa;  self.train_plot_options[&quot;train_pen&quot;]=kwargs.pop(&quot;train_pen&quot;,None)&#xa;  if isinstance(interval,neo.Epoch):&#xa;    if len(interval)>0:&#xa;      self.plot_start=interval.times[0]&#xa;      self.plot_stop=interval.durations[0]&#xa;&#xa;&#xa;  elif isinstance(interval,(tuple,list))and all([isinstance(t,(numbers.Real,pq.Quantity))for t in interval]):&#xa;    self.plot_start=interval[0]&#xa;    self.plot_stop=interval[1]&#xa;    if isinstance(y,neo.core.baseneo.BaseNeo):&#xa;      if not isinstance(self.plot_start,pq.Quantity):&#xa;        self.plot_start*=pq.s&#xa;&#xa;      else:&#xa;        if not dt.check_time_units(self.plot_start):&#xa;          raise TypeError(&quot;plot start must be a time python quantity; got %s instead&quot;%self.plot_start.units)&#xa;&#xa;&#xa;      if not isinstance(self.plot_stop,pq.Quantity):&#xa;        self.plot_stop*=pq.s&#xa;&#xa;      else:&#xa;        if not dt.check_time_units(self.plot_stop):&#xa;          raise TypeError(&quot;plot stop must be a time python quantity; got %s instead&quot;%self.plot_stop.units)&#xa;&#xa;&#xa;&#xa;    elif isinstance(y,dt.DataSignal):&#xa;      if not isinstance(self.plot_start,pq.Quantity):&#xa;        self.plot_start*=y.origin.units&#xa;&#xa;      else:&#xa;        if not dt.units_convertible(self.plot_start.units,y.origin.units):&#xa;          raise TypeError(&quot;plot start units (%s) are incompatible with data domain units (%s)&quot;%(self.plot_start.units,y.origin.units))&#xa;&#xa;&#xa;      if not isinstance(self.plot_stop,pq.Quantity):&#xa;        self.plot_stop*=y.origin.units&#xa;&#xa;      else:&#xa;        if not dt.units_convertible(self.plot_stop.units,y.origin.units):&#xa;          raise TypeError(&quot;plot stop units (%s) are incompatible with data domain units (%s)&quot;%(self.plot_stop.units,y.origin.units))&#xa;&#xa;&#xa;&#xa;&#xa;  try:&#xa;    self.signalIndex=signals&#xa;    self.irregularIndex=irregularSignals&#xa;    self.signalChannelIndex=signalChannels&#xa;    self.irregularSignalChannelIndex=irregularSignalChannels&#xa;    self.separateChannels=separateChannels&#xa;    self.channelAxis=channelAxis&#xa;    self.dataAnnotations=dict()&#xa;    if y is None:&#xa;      if x is not None:&#xa;        y=x&#xa;        x=None&#xa;&#xa;      else:&#xa;        raise ValueError(&quot;I need something to plot&quot;)&#xa;&#xa;&#xa;    if isinstance(y,neo.basesignal.BaseNeo):&#xa;      self.globalAnnotations=:&#xa;        type(y).__name__:y.annotations&#xa;&#xa;&#xa;    if isinstance(y,neo.core.Block):&#xa;      self.y=y&#xa;      self._plotEpochs_(clear=True)&#xa;      self.overlays.clear()&#xa;      if segments is None:&#xa;        self._number_of_frames_=len(self.y.segments)&#xa;        self.frameIndex=range(self._number_of_frames_)&#xa;&#xa;      elif isinstance(segments,(list,tuple,range)):&#xa;        self._number_of_frames_=len(segments)&#xa;        self.frameIndex=segments&#xa;&#xa;      elif isinstance(segments,slice):&#xa;        self.frameIndex=range(*segments.indices(len(self.y.segments)))&#xa;        self._number_of_frames_=len(self.frameIndex)&#xa;&#xa;      elif isinstance(segments,int):&#xa;        self.frameIndex=[segments]&#xa;        self._number_of_frames_=1&#xa;&#xa;      else:&#xa;        raise TypeError(&quot;Unexpected segment indexing: %s&quot;%str(type(segments)))&#xa;&#xa;      if isinstance(self.frameIndex,(tuple,list)):&#xa;        if np.any([f&lt;0 or f>=len(self.y.segments)for f in self.frameIndex]):&#xa;          raise ValueError(&quot;Segment(frame or sweep) indexing out of bounds&quot;)&#xa;&#xa;        self._number_of_frames_=len(self.frameIndex)&#xa;&#xa;      elif isinstance(self.frameIndex,range):&#xa;        self._number_of_frames_=len(self.frameIndex)&#xa;        if len(self.frameIndex)==0:&#xa;          return&#xa;&#xa;        if max(self.frameIndex)>=len(self.y.segments):&#xa;          raise ValueError(&quot;Segment(frame or sweep) indexing out of bounds&quot;)&#xa;&#xa;&#xa;      self.signalIndex=signals&#xa;      self.irregularIndex=irregularSignals&#xa;      self.signalChannelIndex=signalChannels&#xa;      self.irregularSignalChannelIndex=irregularSignalChannels&#xa;      self.separateChannels=separateChannels&#xa;&#xa;    elif isinstance(y,neo.core.Segment):&#xa;      self.y=y&#xa;      self._plotEpochs_(clear=True)&#xa;      self.overlays.clear()&#xa;      self.frameIndex=range(1)&#xa;      self._number_of_frames_=1&#xa;      self.signalIndex=signals&#xa;      self.irregularIndex=irregularSignals&#xa;      self.signalChannelIndex=signalChannels&#xa;      self.irregularSignalChannelIndex=irregularSignalChannels&#xa;      self.separateChannels=separateChannels&#xa;&#xa;    elif isinstance(y,neo.core.ChannelIndex):&#xa;      raise NotImplementedError(&quot;Plotting neo.core.ChannelIndex object is not yet implemented&quot;)&#xa;&#xa;    elif isinstance(y,(neo.core.AnalogSignal,&#xa;    neo.core.IrregularlySampledSignal,dt.DataSignal,dt.IrregularlySampledDataSignal)):&#xa;      self.y=y&#xa;      self.frameIndex=range(1)&#xa;      self.signalIndex=range(1)&#xa;      self._number_of_frames_=1&#xa;      self.irregularIndex=irregularSignals&#xa;      self.signalChannelIndex=signalChannels&#xa;      self.irregularSignalChannelIndex=irregularSignalChannels&#xa;      self.separateChannels=separateChannels&#xa;&#xa;    elif isinstance(y,neo.core.Unit):&#xa;      raise NotImplementedError(&quot;Plotting neo.core.Unit objects is not yet implemented&quot;)&#xa;&#xa;    elif isinstance(y,neo.core.SpikeTrain):&#xa;      self._plotSpikeTrains_(y)&#xa;&#xa;    elif isinstance(y,neo.core.Event):&#xa;      raise NotImplementedError(&quot;Plotting stand-alone neo.core.Event objects is not yet implemented&quot;)&#xa;&#xa;    elif isinstance(y,neo.core.Epoch):&#xa;      self._number_of_frames_=1&#xa;      self._plotEpochs_(y)&#xa;      if self._docTitle_ is None or(isinstance(self._docTitle_,str)and len(self._docTitle_.strip())==0):&#xa;        if isinstance(title,str)and len(title.strip())>0:&#xa;          self._doctTitle_=title&#xa;&#xa;        else:&#xa;          self._docTitle_=y.name&#xa;&#xa;&#xa;&#xa;    elif isinstance(y,vigra.VigraArray):&#xa;      raise NotImplementedError(&quot;Plotting of vigra arrays is not yet implemented; try the ImageViewer in module 'iv'&quot;)&#xa;&#xa;    elif isinstance(y,vigra.filters.Kernel1D):&#xa;      self.x,self.y=dt.vigraKernel1D_to_ndarray(self.y)&#xa;      self._plotEpochs_(clear=True)&#xa;      self.frameIndex=range(1)&#xa;      self.signalIndex=range(1)&#xa;      self._number_of_frames_=1&#xa;&#xa;    elif isinstance(y,np.ndarray):&#xa;      self.y=y&#xa;      self.channelAxis=channelAxis&#xa;      self.separateChannels=separateChannels&#xa;      if self.y.ndim>3:&#xa;      raise ValueError('\nCannot plot data with more than 3 dimensions\n')if self.y.ndim==1:&#xa;        self.frameIndex=range(1)&#xa;        self.signalChannelIndex=range(1)&#xa;        self._number_of_frames_=1&#xa;&#xa;      elif self.y.ndim==2:&#xa;        if self.channelAxis is None:&#xa;          self.signalChannelIndex=range(1)&#xa;          if self.frameIndex is None:&#xa;            self.frameIndex=range(self.y.shape[1])&#xa;            self._number_of_frames_=len(self.frameIndex)&#xa;&#xa;          elif isinstance(self.frameIndex,(range,slice)):&#xa;            pass&#xa;&#xa;          elif isinstance(self.frameIndex,(list,tuple,np.ndarray)):&#xa;            self._number_of_frames_=len(self.frameIndex)&#xa;            if any([d>=self.y.shape[0]or d&lt;0 for d in self.frameIndex]):&#xa;              raise ValueError(&quot;Invalid frame index; all values mut be between 0 and %d&quot;%(y.shape[0]))&#xa;&#xa;&#xa;          else:&#xa;            raise TypeError(&quot;Unexpected type for frames argument: must be range or sequence of indices&quot;)&#xa;&#xa;&#xa;        elif self.channelAxis>1:&#xa;          raise ValueError(&quot;Invalid channel axis specification; for 2D arrays it must be None, 0 or 1&quot;)&#xa;&#xa;        else:&#xa;          self.frameIndex=range(1)&#xa;          self._number_of_frames_=1&#xa;          if self.signalChannelIndex is None:&#xa;            self.signalChannelIndex=range(self.y.shape[1])&#xa;&#xa;          elif isinstance(self.signalChannelIndex,(range,slice)):&#xa;            pass&#xa;&#xa;          elif isinstance(self.signalChannelIndex,(list,tuple.np.ndarray)):&#xa;            if any(d&lt;0 or d>=self.y.shape[1]for d in self.signalChannelIndex):&#xa;              raise ValueError(&quot;Invalid channel index; al values must be between 0 and %d&quot;%(self.y.shape[1]))&#xa;&#xa;&#xa;          else:&#xa;            raise TypeError(&quot;Unexpected type for channels argument; must be range or sequence of indices&quot;)&#xa;&#xa;&#xa;&#xa;      elif self.y.ndim==3:&#xa;        if self.channelAxis is None:&#xa;          raise TypeError(&quot;When plotting ndarrays with more than 2 dimensions, channelAxis MUST be specified&quot;)&#xa;&#xa;        elif self.channelAxis not in range(1,self.y.ndim):&#xa;          raise ValueError(&quot;Invalid channel axis specification: must be between 1 and %d&quot;%(self.y.ndim-1))&#xa;&#xa;        if self.frameIndex is None:&#xa;          if self.channelAxis==1:&#xa;            self.frameIndex=range(self.y.shape[2])&#xa;&#xa;          else:&#xa;            self.frameIndex=range(self.y.shape[1])&#xa;&#xa;          self._number_of_frames_=len(self.frameIndex)&#xa;&#xa;        elif isinstance(self.frameIndex,(range,slice)):&#xa;          pass&#xa;&#xa;        elif isinstance(self.frameIndex,(list,tuple,np.ndarray)):&#xa;          if self.channelAxis==1:&#xa;            if any(d&lt;0 or d>=self.y.shape[2]for d in self.frameIndex):&#xa;              raise ValueError(&quot;Invalid frames specification: must  be between 0 and %d&quot;%(self.y.shape[2]))&#xa;&#xa;&#xa;          else:&#xa;            if any(d&lt;0 or d>=self.y.shape[1]for d in self.frameIndex):&#xa;              raise ValueError(&quot;Invalid frames specification: must  be between 0 and %d&quot;%(self.y.shape[1]))&#xa;&#xa;&#xa;          self._number_of_frames_=len(self.frameIndex)&#xa;&#xa;        else:&#xa;          raise TypeError(&quot;Invalid frame specification type; must be a range or  sequence of indices&quot;)&#xa;&#xa;        if self.signalChannelIndex is None:&#xa;          self.signalChannelIndex=range(self.y.shape[self.channelAxis])&#xa;&#xa;        elif isinstance(self.signalChannelIndex,(range,slice)):&#xa;          pass&#xa;&#xa;        elif isinstance(self.signalChannelIndex,(list,tuple,np.ndarray)):&#xa;          if any(d&lt;0 or d>=self.y.shape[self.channelAxis]for d in self.frameIndex):&#xa;            raise ValueError(&quot;Invalid frames specification: must  be between 0 and %d&quot;%(self.y.shape[self.channelAxis]))&#xa;&#xa;&#xa;        else:&#xa;          raise TypeError(&quot;Unexpected type for channel index specification&quot;)&#xa;&#xa;&#xa;      if x is None:&#xa;        xx=np.linspace(0,self.y.shape[0],self.y.shape[0],&#xa;        endpoint=False)[:,np.newaxis]self.x=xx&#xa;&#xa;      else:&#xa;        self.x=x&#xa;&#xa;&#xa;    elif isinstance(y,(tuple,list)):&#xa;      self.separateChannels=separateChannels&#xa;      self.channelAxis=channelAxis&#xa;      if np.all([isinstance(i,vigra.filters.Kernel1D)for i in y]):&#xa;        self._plotEpochs_(clear=True)&#xa;        self.frameIndex=range(len(y))&#xa;        self._number_of_frames_=len(self.frameIndex)&#xa;        self.signalIndex=1&#xa;        xx,yy=[dt.vigraKernel1D_to_ndarray(i)for i in y]&#xa;        if x is None:&#xa;          x=xx&#xa;&#xa;        else:&#xa;        if isinstance(x,np.ndarray):&#xa;          if x.ndim==2:&#xa;            if x.shape[1]>1:&#xa;              raise TypeError(&quot;When 'y' is a list, 'x' must be a vector&quot;)&#xa;&#xa;&#xa;&#xa;        elif isinstance(x,(tuple,list))and\&#xa;        not all([isinstance(x_,np.ndarray)and x_.ndim&lt;=2 for x_ in x]):&#xa;          raise TypeError(&quot;'x' has incompatible shape %s&quot;%x.shape)&#xa;&#xa;        else:&#xa;          raise TypeError(&quot;Invalid x specified&quot;)&#xa;&#xa;        self.x=x&#xa;        self.y=yy&#xa;&#xa;      elif all([isinstance(i,neo.Segment)for i in y]):&#xa;        self.frameIndex=range(len(y))&#xa;        self._number_of_frames_=len(self.frameIndex)&#xa;        self.signalIndex=signals&#xa;        self.irregularIndex=irregularSignals&#xa;        self.signalChannelIndex=signalChannels&#xa;        self.irregularSignalChannelIndex=irregularSignalChannels&#xa;        self.separateChannels=separateChannels&#xa;        self.x=None&#xa;        self.y=y&#xa;&#xa;      elif all([isinstance(i,(neo.core.AnalogSignal,neo.core.IrregularlySampledSignal,dt.DataSignal))for i in y]):&#xa;        self.frameIndex=range(len(y))&#xa;        self._number_of_frames_=len(self.frameIndex)&#xa;        self.signalIndex=0&#xa;        self.x=None&#xa;        self.y=y&#xa;&#xa;      elif all([isinstance(i,neo.Epoch)for i in y]):&#xa;        self._plotEpochs_(y)&#xa;        self._number_of_frames_=1&#xa;&#xa;      elif all([isinstance(i,np.ndarray)and i.ndim&lt;=2 for i in y]):&#xa;        self._plotEpochs_(clear=True)&#xa;        self.frameIndex=range(len(y))&#xa;        self._number_of_frames_=len(self.frameIndex)&#xa;        self.signalIndex=1&#xa;        if x is None:&#xa;          x=[np.linspace(0,y_.shape[0],y_.shape[0],endpoint=False)[:,np.newaxis]for y_ in y]&#xa;&#xa;        else:&#xa;        if isinstance(x,np.ndarray):&#xa;          if x.ndim==2:&#xa;            if x.shape[1]>1:&#xa;              raise TypeError(&quot;for 'x', the 2nd axis of a 2D array must have shape of 1&quot;)&#xa;&#xa;&#xa;&#xa;        elif isinstance(x,(tuple,list))and\&#xa;        not all([isinstance(x_,np.ndarray)and x_.ndim&lt;=2 for x_ in x]):&#xa;          raise TypeError(&quot;'x' has incompatible shape %s&quot;%self.x.shape)&#xa;&#xa;        else:&#xa;          raise TypeError(&quot;Invalid x specified&quot;)&#xa;&#xa;        self.x=x&#xa;        self.y=y&#xa;&#xa;      else:&#xa;        raise TypeError(&quot;Can only plot a list of 1D vigra filter kernels or 1D/2D numpy arrays&quot;)&#xa;&#xa;&#xa;    else:&#xa;      raise TypeError(&quot;Plotting is not implemented for %s data types&quot;%type(self.y).__name__)&#xa;&#xa;    if isinstance(title,str)and len(title.strip()):&#xa;      self._docTitle_=title&#xa;&#xa;    else:&#xa;      if isinstance(self.y,(neo.Block,neo.AnalogSignal,neo.IrregularlySampledSignal,neo.Segment,dt.DataSignal))and(self.y.name is not None and len(self.y.name)>0):&#xa;        self._doctTitle_=self.y.name&#xa;&#xa;      elif isinstance(self.y,(neo.Epoch,neo.SpikeTrain,neo.Event)):&#xa;        if self._docTitle_ is None or(isinstance(self._docTitle_,str)and len(self._docTitle_.strip())==0):&#xa;          self._doctTitle_=self.y.name&#xa;&#xa;&#xa;      elif hasattr(self.y,&quot;name&quot;)and isinstance(self.y.name,str):&#xa;        self._doctTitle_=self.y.name&#xa;&#xa;      else:&#xa;        dataVarName=&quot;&quot;&#xa;        cframe=inspect.getouterframes(inspect.currentframe())[1][0]&#xa;        try:&#xa;          for(k,v)in cframe.f_globals.items():&#xa;            if not type(v).__name__ in(&quot;module&quot;,&quot;type&quot;,&quot;function&quot;,&quot;builtin_function_or_method&quot;):&#xa;              if v is self.y and not k.startswith(&quot;_&quot;):&#xa;                dataVarName=k&#xa;&#xa;&#xa;&#xa;&#xa;        finally:&#xa;          del(cframe)&#xa;&#xa;        self._docTitle_=dataVarName&#xa;&#xa;&#xa;    if isinstance(self._docTitle_,str)and len(self._docTitle_.strip()):&#xa;      self.setWindowTitle(&quot;%s - %s&quot;%(self._winTitle_,self._docTitle_))&#xa;&#xa;    else:&#xa;      self.setWindowTitle(self._winTitle_)&#xa;&#xa;    self.plot_args=args&#xa;    self.plot_kwargs=kwargs&#xa;    if plotStyle is not None and isinstance(plotStyle,str):&#xa;      self.plotStyle=plotStyle&#xa;&#xa;    elif style is not None and isinstance(style,str):&#xa;      self.plotStyle=style&#xa;&#xa;    if isinstance(self.frameIndex,int):&#xa;      self._number_of_frames_=1&#xa;      self.framesQSlider.setMaximum(self._number_of_frames_)&#xa;      self.framesQSpinBox.setMaximum(self._number_of_frames_)&#xa;&#xa;    else:&#xa;      self._number_of_frames_=len(self.frameIndex)&#xa;      self.framesQSlider.setMaximum(len(self.frameIndex)-1)&#xa;      self.framesQSpinBox.setMaximum(len(self.frameIndex)-1)&#xa;&#xa;    self.framesQSlider.setValue(self._current_frame_index_)&#xa;    self.framesQSpinBox.setValue(self._current_frame_index_)&#xa;    self.nFramesLabel.setText(&quot;of %d&quot;%self._number_of_frames_)&#xa;    self.displayFrame()&#xa;    self._update_annotations_()&#xa;    self.show()&#xa;&#xa;&#xa;  except Exception as e:&#xa;    traceback.print_exc()&#xa;&#xa;&#xa;def view(self,*args,**kwargs):&#xa;  self.setData(*args,**kwargs)&#xa;&#xa;@property&#xa;def currentFrame(self):&#xa;  return self._current_frame_index_&#xa;&#xa;@currentFrame.setter&#xa;def currentFrame(self,val):&#xa;  if not isinstance(val,int)or val>=self._number_of_frames_ or val&lt;0:&#xa;  return signalBlockers=[QtCore.QSignalBlocker(widget)for widget in\&#xa;  (self.framesQSpinBox,self.framesQSlider)]self.framesQSpinBox.setValue(val)&#xa;  self.framesQSlider.setValue(val)&#xa;  self._current_frame_index_=val&#xa;  self.displayFrame()&#xa;&#xa;@property&#xa;def plotItemsWithLayoutPositions(self):&#xa;  items=[item for item in self.signalsLayout.items.items()]&#xa;  return sorted(items,key=lambda x:x[1][0])&#xa;&#xa;@property&#xa;def plotItems(self):&#xa;  px=self.plotItemsWithLayoutPositions&#xa;  if len(px):&#xa;    ret,_=zip(*px)&#xa;&#xa;  else:&#xa;    ret=list()&#xa;&#xa;  return ret&#xa;&#xa;@property&#xa;def axesWithLayoutPositions(self):&#xa;  return self.plotItemsWithLayoutPositions&#xa;&#xa;@property&#xa;def axes(self):&#xa;  return self.plotItems&#xa;&#xa;def getPlotItem(self,index):&#xa;  try:&#xa;    plotitem=self.signalsLayout.getItem(index,0)&#xa;&#xa;  except:&#xa;    pass&#xa;&#xa;  return plotitem&#xa;&#xa;def getAxis(self,index):&#xa;  return self.getPlotItem(index)&#xa;&#xa;@property&#xa;def currentPlotItem(self):&#xa;  return self._current_plot_item_&#xa;&#xa;@currentPlotItem.setter&#xa;def currentPlotItem(self,index):&#xa;  plotitems_coords=self.axesWithLayoutPositions&#xa;  if len(plotitems_coords)==0:&#xa;    self._current_plot_item_=None&#xa;    return False&#xa;&#xa;  plotitems,_=zip(*plotitems_coords)&#xa;  if not isinstance(index,int):&#xa;    raise TypeError(&quot;Expecting an int; got a %s instead&quot;%type(index).__name__)&#xa;&#xa;  if index&lt;0 or index>=len(plotitems):&#xa;    raise ValueError(&quot;Expecting an int between 0 and %d inclusive; got %d&quot;%(len(plotitems)-1,index))&#xa;&#xa;  self._current_plot_item_=plotitems[index]&#xa;  self.statusBar().showMessage(&quot;Selected axes: %d&quot;%index)&#xa;&#xa;@property&#xa;def currentAxes(self):&#xa;  return self.currentPlotItem&#xa;&#xa;@currentAxes.setter&#xa;def currentAxes(self,index):&#xa;  self.currentPlotItem=index&#xa;&#xa;def getDataCursor(self,ID):&#xa;  if len(self.allDataCursors)and ID in self.allDataCursors:&#xa;    return self.allDataCursors[ID]&#xa;&#xa;&#xa;def getDataCursorWindow(self,crsID):&#xa;  if self._hasCursor_(crsID):&#xa;    return(self.allDataCursors[crsID].xwindow,self.allDataCursors[crsID].ywindow)&#xa;&#xa;  else:&#xa;    raise Exception(&quot;Cursor %s not found&quot;%crsID)&#xa;&#xa;&#xa;def getDataCursorX(self,crsID):&#xa;  if self._hasCursor_(crsID):&#xa;    return self.allDataCursors[crsID].x&#xa;&#xa;  else:&#xa;    return None&#xa;&#xa;&#xa;def getDataCursorY(self,crsID):&#xa;  if self._hasCursor_(crsID):&#xa;    return self.allDataCursors[crsID].y&#xa;&#xa;&#xa;def getSelectedDataCursorWindow(self):&#xa;  if self.selectedDataCursor is not None:&#xa;    return(self.allDataCursors[self.selectedDataCursor.ID].xwindow,self.allDataCursors[self.selectedDataCursor.ID].ywindow)&#xa;&#xa;&#xa;def getDataCursorsForItem(self,index=None):&#xa;  hostitem=None&#xa;  if index is None:&#xa;    if self.currentPlotItem is None:&#xa;      hostitem=self.signalsLayout.scene()&#xa;&#xa;    else:&#xa;      hostitem=self.currentPlotItem&#xa;&#xa;&#xa;  elif isinstance(index,int):&#xa;    if index>=0:&#xa;      if index>=len(self.axesWithLayoutPositions):&#xa;        raise ValueError(&quot;index must be between -1 and %d; got %d instead&quot;%(len(self.axesWithLayoutPositions),index))&#xa;&#xa;      hostitem=self.getAxis(index)&#xa;&#xa;    else:&#xa;      hostitem=self.signalsLayout.scene()&#xa;&#xa;&#xa;  if hostitem is not None:&#xa;    ret=[c for c in self.allDataCursors.values()if c.hostItem is hostitem]&#xa;&#xa;  else:&#xa;    ret=list()&#xa;&#xa;  return ret&#xa;&#xa;def getVerticalCursors(self):&#xa;  return self.verticalDataCursors&#xa;&#xa;def getVerticalCursorsX(self):&#xa;  return[c.x for c in self.verticalDataCursors]&#xa;&#xa;def getVerticalCursorsWindow(self):&#xa;  return[c.window for c in self.verticalDataCursors]&#xa;&#xa;def setDataCursorWindow(self,crsID,value):&#xa;  if crsID in self.verticalDataCursors:&#xa;    if isinstance(value,float):&#xa;      value=[value]&#xa;&#xa;    elif isinstance(value,(list,tuple,np.ndarray)):&#xa;      if len(value)==1:&#xa;        value=list(value)&#xa;&#xa;      else:&#xa;        raise ValueError(&quot;Vertical cursor window needs to be a single value (as a scalar or one-element tuple, list, or numpy ndarray)&quot;)&#xa;&#xa;&#xa;    else:&#xa;      raise ValueError(&quot;Vertical cursor window needs to be a single value (as a scalar or one-element tuple, list, or numpy ndarray)&quot;)&#xa;&#xa;    self.verticalDataCursors[crsID].xwindow=value&#xa;&#xa;  elif crsID in self.horizontalDataCursors:&#xa;    if isinstance(value,float):&#xa;      value=[value]&#xa;&#xa;    elif isinstance(value,(list,tuple,np.ndarray)):&#xa;      if len(value)==1:&#xa;        value=list(value)&#xa;&#xa;      else:&#xa;        raise ValueError(&quot;Horizontal cursor window needs to be a single value (as a scalar or one-element tuple, list, or numpy ndarray)&quot;)&#xa;&#xa;&#xa;    else:&#xa;      raise ValueError(&quot;Horizontal cursor window needs to be a single value (as a scalar or one-element tuple, list, or numpy ndarray)&quot;)&#xa;&#xa;    self.horizontalDataCursors[crsID].ywindow=value&#xa;&#xa;  elif crsID in self.crosshairDataCursors:&#xa;    if isinstance(value,(tuple,list,np.ndarray)):&#xa;      if len(value)==2:&#xa;        value=list(value)&#xa;&#xa;      else:&#xa;        raise ValueError(&quot;Crosshair cursor window needs to be a two-element tuple, list, or numpy ndarray&quot;)&#xa;&#xa;&#xa;    else:&#xa;      raise ValueError(&quot;Crosshair cursor window needs to be a two-element tuple, list, or numpy ndarray&quot;)&#xa;&#xa;    self.crosshairDataCursors[crsID].xwindow=value[0]&#xa;    self.crosshairDataCursors[crsID].ywindow=value[1]&#xa;&#xa;  else:&#xa;    raise ValueError(&quot;Cursor %s not found.&quot;%crsID)&#xa;&#xa;&#xa;def setSelectedDataCursorWindow(self,value):&#xa;  self.setDataCursorWindow(self.selectedDataCursor.ID,value)&#xa;&#xa;def getHorizontalDataCursors(self):&#xa;  return self.horizontalDataCursors&#xa;&#xa;def getCrosshairDataCursors(self):&#xa;  return self.crosshairDataCursors&#xa;&#xa;def getDataCursors(self):&#xa;  return self.allDataCursors&#xa;&#xa;@safeWrapper&#xa;def displayFrame(self):&#xa;  if self.y is None:&#xa;    return&#xa;&#xa;  self.currentFrameAnnotations=None&#xa;  if isinstance(self.y,(tuple,list)):&#xa;  if all([isinstance(y_,(dt.DataSignal,neo.core.AnalogSignal,neo.core.IrregularlySampledSignal,dt.IrregularlySampledDataSignal))for y_ in self.y]):&#xa;    self._plotSignal_(self.y[self._current_frame_index_],*self.plot_args,**self.plot_kwargs)&#xa;    self.currentFrameAnnotations=:&#xa;      type(self.y[self._current_frame_index_]).__name__:self.y[self._current_frame_index_].annotations&#xa;&#xa;&#xa;  elif all([isinstance(y_,neo.core.Epoch)for y_ in self.y]):&#xa;    self._plotEpochs_(self.y,**self.epoch_plot_options)&#xa;&#xa;  else:&#xa;    self._setup_signal_choosers_(self.y)&#xa;    if isinstance(self.x,list):&#xa;      self._plotArray_(self.x[self._current_frame_index_],self.y[self._current_frame_index_],*self.plot_args,**self.plot_kwargs)&#xa;&#xa;    else:&#xa;      self._plotArray_(self.x,self.y[self._current_frame_index_],*self.plot_args,**self.plot_kwargs)&#xa;&#xa;&#xa;  else:&#xa;    if isinstance(self.y,neo.core.Block):&#xa;      if len(self.y.segments)==0:&#xa;        return&#xa;&#xa;      if self._current_frame_index_ not in self.frameIndex:&#xa;        return&#xa;&#xa;      if self.frameIndex[self._current_frame_index_]>=len(self.y.segments):&#xa;        return&#xa;&#xa;      segment=self.y.segments[self.frameIndex[self._current_frame_index_]]&#xa;      self._plotSegment_(segment,*self.plot_args,**self.plot_kwargs)&#xa;      self.currentFrameAnnotations=:&#xa;        type(segment).__name__:segment.annotations&#xa;&#xa;&#xa;    elif isinstance(self.y,neo.core.Segment):&#xa;      self._plotSegment_(self.y,*self.plot_args,**self.plot_kwargs)&#xa;&#xa;    elif isinstance(self.y,(neo.core.AnalogSignal,&#xa;    dt.DataSignal,neo.core.IrregularlySampledSignal,dt.IrregularlySampledDataSignal)):&#xa;      self._plotSignal_(self.y,*self.plot_args,**self.plot_kwargs)&#xa;&#xa;    elif isinstance(self.y,neo.core.Epoch):&#xa;      self._plotEpochs_(self.y,**self.epoch_plot_options)&#xa;&#xa;    elif isinstance(self.y,np.ndarray):&#xa;      try:&#xa;        self._setup_signal_choosers_(self.y)&#xa;        self._plotArray_(self.x,self.y,*self.plot_args,**self.plot_kwargs)&#xa;&#xa;      except Exception as e:&#xa;        traceback.print_exc()&#xa;&#xa;&#xa;    elif self.y is None:&#xa;      pass&#xa;&#xa;    else:&#xa;      raise TypeError(&quot;Plotting of data of type %s not yet implemented&quot;%str(type(self.y)))&#xa;&#xa;&#xa;  if self._current_plot_item_ is None:&#xa;    axes=self.plotItems&#xa;    if len(axes):&#xa;      self._current_plot_item_=axes[0]&#xa;&#xa;&#xa;  for cursor in self.allDataCursors.values():&#xa;    cursor.setBounds()&#xa;&#xa;  self._update_annotations_()&#xa;&#xa;@safeWrapper&#xa;def _plot_epochs_dict_(self,epoch_dict,**kwargs):&#xa;  from itertools import cycle&#xa;  if len(epoch_dict)==0:&#xa;    return&#xa;&#xa;  epoch_pen=kwargs.pop(&quot;epoch_pen&quot;,self.epoch_plot_options[&quot;epoch_pen&quot;])&#xa;  epoch_brush=kwargs.pop(&quot;epoch_brush&quot;,self.epoch_plot_options[&quot;epoch_brush&quot;])&#xa;  epoch_hoverPen=kwargs.pop(&quot;epoch_hoverPen&quot;,self.epoch_plot_options[&quot;epoch_hoverPen&quot;])&#xa;  epoch_hoverBrush=kwargs.pop(&quot;epoch_hoverBrush&quot;,self.epoch_plot_options[&quot;epoch_hoverBrush&quot;])&#xa;  try:&#xa;    if epoch_brush is None:&#xa;      if len(epoch_dict)>1:&#xa;        brushes=cycle([QtGui.QBrush(QtGui.QColor(*c))for c in self.epoch_plot_options[&quot;epochs_color_set&quot;]])&#xa;&#xa;      else:&#xa;        brushes=cycle([QtGui.QBrush(QtGui.QColor(0,0,255,50))])&#xa;&#xa;&#xa;    else:&#xa;      if isinstance(epoch_brush,(tuple,list)):&#xa;        if all([isinstance(b,(QtGui.QColor,QtGui.QBrush,tuple,list))for b in epoch_brush]):&#xa;          brushes=cycle([QtGui.QBrush(QtGui.QColor(c))if isinstance(c,(QtGui.QColor,QtGui.QBrush))else QtGui.QBrush(QtGui.QColor(*c))for c in epoch_brush])&#xa;&#xa;        else:&#xa;          brushes=cycle([QtGui.QBrush(QtGui.QColor(*epoch_brush))])&#xa;&#xa;&#xa;      elif isinstance(epoch_brush,QtGui.Color):&#xa;        brushes=cycle([QtGui.QBrush(epoch_brush)])&#xa;&#xa;      elif isinstance(epoch_brush,QtGui.QBrush):&#xa;        brushes=cycle([epoch_brush])&#xa;&#xa;      else:&#xa;        brushes=cycle([None])&#xa;&#xa;&#xa;    if len(self.axes)==0:&#xa;      self._prepareAxes_(1)&#xa;&#xa;    for tag,epoch in epoch_dict.items():&#xa;      x0=epoch.times.magnitude.flatten()&#xa;      x1=(epoch.times.flatten()+epoch.durations.flatten()).magnitude&#xa;      x=[v for v in zip(x0,x1)]&#xa;      brush=next(brushes)&#xa;      existing_lris=[i for i in self.axes[0].items if isinstance(i,pg.LinearRegionItem)]&#xa;      used_colors=[lri.brush.color()for lri in existing_lris]&#xa;      for c in used_colors:&#xa;        if c==brush.color():&#xa;          brush=next(brushes)&#xa;&#xa;&#xa;      if tag in self._shown_epochs_:&#xa;        for ax in self.axes:&#xa;          if ax in self._shown_epochs_[tag]:&#xa;            old_lris=self._shown_epochs_[tag][ax]&#xa;            if len(old_lris)&lt;len(x):&#xa;              lris_to_modify=old_lris&#xa;              new_x=x[0:len(old_lris)]&#xa;              regions_to_add=x[len(old_lris):]&#xa;              lris_to_remove=[]&#xa;&#xa;            elif len(old_lris)>len(x):&#xa;              lris_to_modify=old_lris[0:len(x)]&#xa;              new_x=x&#xa;              regions_to_add=[]&#xa;              lris_to_remove=old_lris[len(x):]&#xa;&#xa;            else:&#xa;              lris_to_modify=old_lris&#xa;              new_x=x&#xa;              regions_to_add=[]&#xa;              lris_to_remove=[]&#xa;&#xa;            new_or_modified_lris=lris_to_modify&#xa;            for lri,region in zip(lris_to_modify,new_x):&#xa;              lri.setRegion(region)&#xa;&#xa;            for region in regions_to_add:&#xa;              lri=pg.LinearRegionItem()&#xa;              lri.setRegion(region)&#xa;              lri.setZValue(10)&#xa;              ax.addItem(lri)&#xa;              lri.setBrush(brush)&#xa;              for l in lri.lines:&#xa;                penColor=lri.brush.color()&#xa;                penColor.setAlpha(255)&#xa;                l.setPen(QtGui.QPen(penColor))&#xa;&#xa;              lri.update()&#xa;              new_or_modified_lris.append(lri)&#xa;&#xa;            for lri in lris_to_remove:&#xa;              ax.removeItem(lri)&#xa;&#xa;            self._shown_epochs_[tag][ax][:]=new_or_modified_lris&#xa;&#xa;          else:&#xa;            self._shown_epochs_[tag][ax]=list()&#xa;            for region in x:&#xa;              lri=pg.LinearRegionItem()&#xa;              lri.setRegion(region)&#xa;              lri.setZValue(10)&#xa;              ax.addItem(lri)&#xa;              lri.setBrush(brush)&#xa;              for l in lri.lines:&#xa;                penColor=lri.brush.color()&#xa;                penColor.setAlpha(255)&#xa;                l.setPen(QtGui.QPen(penColor))&#xa;&#xa;              lri.update()&#xa;              self._shown_epochs_[tag][ax].append(ax)&#xa;&#xa;&#xa;&#xa;&#xa;      else:&#xa;        for ax in self.axes:&#xa;          self._shown_epochs_[tag]=dict()&#xa;          self._shown_epochs_[tag][ax]=list()&#xa;          for k in range(x0.size):&#xa;            x=[x0[k],x1[k]]&#xa;            lri=pg.LinearRegionItem(movable=False)&#xa;            lri.setRegion(x)&#xa;            lri.setZValue(10)&#xa;            ax.addItem(lri)&#xa;            lri.setBrush(brush)&#xa;            lri.update()&#xa;            self._shown_epochs_[tag][ax].append(lri)&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;  except Exception as e:&#xa;    traceback.print_exc()&#xa;&#xa;&#xa;@safeWrapper&#xa;def _plotSpikeTrains_(self,trains=None,clear=False,**kwargs):&#xa;  if trains is None or clear:&#xa;    for k,ax in enumerate(self.axes):&#xa;      lris=[i for i in ax.items if isinstance(i,pg.LinearRegionItem)]&#xa;      if len(lris):&#xa;        for l in lris:&#xa;          ax.removeItem(l)&#xa;&#xa;&#xa;&#xa;&#xa;  self._shown_spike_trains_.clear()&#xa;  if trains is None:&#xa;    return&#xa;&#xa;  trains_dict=dict()&#xa;  if isinstance(trains,(tuple,list)):&#xa;    if all([isinstance(s,neo.SpikeTrain)for s in trains]):&#xa;      for k,t in enumerate(trains):&#xa;        if t.name is None or(isinstance(t.name,str)and len(t.name.strip()==0)):&#xa;          tag=k&#xa;&#xa;        else:&#xa;          tag=t.name&#xa;&#xa;        trains_dict[tag]=t&#xa;&#xa;&#xa;    else:&#xa;      raise TypeError(&quot;All elements in the 'trains' sequence mus be neo.SpikeTrain objects&quot;)&#xa;&#xa;&#xa;  elif isinstance(trains,neo.SpikeTrain):&#xa;    if trains.name is None or(isinstance(trains.name,str)and len(trains.name.strip()==0)):&#xa;      tag=0&#xa;&#xa;    else:&#xa;      tag=trains.name&#xa;&#xa;    trains_dict[tag]=trains&#xa;&#xa;  else:&#xa;    raise TypeError(&quot;Expecting a neo.SpikeTrain or a sequence (tuple, list) of neo.SpikeTrain objects; got %s instead&quot;%type(trains).__name__)&#xa;&#xa;  self._plot_trains_dict_(trains_dict,**kwargs)&#xa;&#xa;@safeWrapper&#xa;def _plotEpochs_(self,epochs=None,clear=False,**kwargs):&#xa;  if epochs is None or clear:&#xa;    for k,ax in enumerate(self.axes):&#xa;      lris=[i for i in ax.items if isinstance(i,pg.LinearRegionItem)]&#xa;      if len(lris):&#xa;        for l in lris:&#xa;          ax.removeItem(l)&#xa;&#xa;&#xa;&#xa;    self._shown_epochs_.clear()&#xa;    if epochs is None:&#xa;      return&#xa;&#xa;&#xa;  epochs_dict=dict()&#xa;  if isinstance(epochs,(tuple,list)):&#xa;    if all(isinstance(e,neo.Epoch)for e in epochs):&#xa;      for k,e in enumerate(epochs):&#xa;        if e.name is None or(isinstance(e.name,str)and len(e.name.strip())==0):&#xa;          epoch_tag=k&#xa;&#xa;        else:&#xa;          epoch_tag=e.name&#xa;&#xa;        epochs_dict[epoch_tag]=e&#xa;&#xa;&#xa;    else:&#xa;      raise TypeError(&quot;All elements in the 'epochs' sequence must be neo.Epoch objects&quot;)&#xa;&#xa;&#xa;  elif isinstance(epochs,neo.Epoch):&#xa;    if epochs.name is None or(isinstance(epochs.name,str)and len(epochs.name.strip())==0):&#xa;      e_tag=0&#xa;&#xa;    else:&#xa;      e_tag=epochs.name&#xa;&#xa;    epochs_dict[e_tag]=epochs&#xa;&#xa;  else:&#xa;    raise TypeError(&quot;Expecting a neo.Epoch or a sequence of neo.Epoch objects; gopt %s instead&quot;%type(epochs).__name__)&#xa;&#xa;  self._plot_epochs_dict_(epochs_dict,**kwargs)&#xa;&#xa;@safeWrapper&#xa;def _plot_trains_dict_(self,trains_dict,**kwargs):&#xa;  from itertools import cycle&#xa;  if len(trains_dict)==0:&#xa;    return&#xa;&#xa;  try:&#xa;    if len(self.axes)==0:&#xa;      self._prepareAxes_(1)&#xa;&#xa;    spike_train_axis=self.signalsLayout.getItem(0,0)&#xa;    height_interval=1/len(trains_dict)&#xa;    colors=cycle(self._defaultLineColorsList_)&#xa;    labelStyle=:&#xa;      &quot;color&quot;:&quot;;trains_x_list=list()&#xa;      trains_y_list=list()&#xa;      for k_train,(tag,train)in enumerate(trains_dict.items()):&#xa;        data_name=tag if isinstance(tag,str)else&quot;%d&quot;%tag&#xa;        x=train.times.magnitude.flatten()&#xa;        y=np.full(x.shape,height_interval*k_train+height_interval/2)&#xa;        trains_x_list.append(x)&#xa;        trains_y_list.append(y)&#xa;&#xa;      tr_x=np.concatenate(trains_x_list,axis=np.newaxis)&#xa;      tr_y=np.concatenate(trains_y_list,axis=np.newaxis)&#xa;      self._plot_numeric_data_(spike_train_axis,&#xa;      tr_x,tr_y,symbol=&quot;spike&quot;,pen=None,name=data_name,symbolPen=pg.mkPen(pg.mkColor(next(colors))))spike_train_axis.axes[&quot;left&quot;][&quot;item&quot;].setPen(None)&#xa;      spike_train_axis.axes[&quot;left&quot;][&quot;item&quot;].setLabel(&quot;Spike Trains&quot;,**labelStyle)&#xa;&#xa;    except Exception as e:&#xa;      traceback.print_exc()&#xa;&#xa;&#xa;  @safeWrapper&#xa;  def _plotSegment_(self,seg,**kwargs):&#xa;    if not isinstance(seg,neo.Segment):&#xa;      raise TypeError(&quot;Expecting a neo.Segment; got %s instead&quot;%type(seg).__name__)&#xa;&#xa;    from itertools import cycle&#xa;    self._setup_signal_choosers_(seg)&#xa;    plot_analog_sigs=self._plot_analogsignals_ and hasattr(seg,&quot;analogsignals&quot;)&#xa;    if plot_analog_sigs:&#xa;      plot_analog_sigs=plot_analog_sigs and len(seg.analogsignals)>0 and all([sig is not None for sig in seg.analogsignals])&#xa;&#xa;    plot_irreg_sigs=self._plot_irregularsignals_ and hasattr(seg,&quot;irregularlysampledsignals&quot;)&#xa;    if plot_irreg_sigs:&#xa;      plot_irreg_sigs=plot_irreg_sigs and len(seg.irregularlysampledsignals)>0 and all([s is not None for s in seg.irregularlysampledsignals])&#xa;&#xa;    if not plot_analog_sigs and not plot_irreg_sigs:&#xa;      return&#xa;&#xa;    nAxes=0&#xa;    signames=list()&#xa;    if plot_analog_sigs:&#xa;      nAxes+=len(self._plotted_analogsignal_index)&#xa;      if self.separateChannels:&#xa;        for k in self._plotted_analogsignal_index:&#xa;          if seg.analogsignals[k].shape[1]>1:&#xa;            nAxes+=seg.analogsignals[k].shape[1]-1&#xa;            signames+=[&quot;%s_channel_d&quot;%(seg.analogsignals[k].name,ch)for ch in range(seg.analogsignals[k].shape[1])]&#xa;&#xa;          else:&#xa;            signames+=[seg.analogsignals[k].name]&#xa;&#xa;&#xa;&#xa;      else:&#xa;        signames+=[seg.analogsignals[k].name for k in self._plotted_analogsignal_index]&#xa;&#xa;&#xa;    if plot_irreg_sigs:&#xa;      nAxes+=len(self._plotted_irregularsignal_index)&#xa;      if self.separateChannels:&#xa;        for k in self._plotted_irregularsignal_index:&#xa;          if seg.irregularlysampledsignals[k].shape[1]>1:&#xa;            nAxes+=seg.irregularlysampledsignals[k].shape[1]-1&#xa;            signames+=[&quot;%s_channel_d&quot;%(seg.irregularlysampledsignals[k].name,ch)for ch in range(seg.irregularlysampledsignals[k].shape[1])]&#xa;&#xa;          else:&#xa;            signames+=[seg.irregularlysampledsignals[k].name]&#xa;&#xa;&#xa;&#xa;      else:&#xa;        signames+=[seg.irregularlysampledsignals[k].name for k in self._plotted_irregularsignal_index]&#xa;&#xa;&#xa;    if len(seg.spiketrains):&#xa;      nAxes+=1&#xa;      signames+=[&quot;spike trains&quot;]&#xa;&#xa;    if len(seg.events):&#xa;      nAxes+=1&#xa;      signames+=[&quot;events&quot;]&#xa;&#xa;    self._prepareAxes_(nAxes,sigNames=signames)&#xa;    axes=self.plotItems&#xa;    analog_signal_axes=list()&#xa;    irregular_signal_axes=list()&#xa;    kAx=0&#xa;    if plot_analog_sigs:&#xa;      for k in self._plotted_analogsignal_index:&#xa;        signal=seg.analogsignals[k]&#xa;        if isinstance(signal,neo.AnalogSignal):&#xa;          domain_name=&quot;Time&quot;&#xa;&#xa;        else:&#xa;          domain_name=signal.domain_name&#xa;&#xa;        if self.plot_start is not None:&#xa;          if self.plot_stop is not None:&#xa;            sig=signal.time_slice(self.plot_start,self.plot_stop)&#xa;&#xa;          else:&#xa;            sig=signal.time_slice(self.plot_start,signal.t_top)&#xa;&#xa;&#xa;        else:&#xa;          if self.plot_stop is not None:&#xa;            sig=signal.time_slice(signal.t_start,self.plot_stop)&#xa;&#xa;          else:&#xa;            sig=signal&#xa;&#xa;&#xa;        if isinstance(sig.name,str)and len(sig.name.strip()):&#xa;          sig_name=sig.name&#xa;&#xa;        else:&#xa;          sig_name=&quot;signal_%d&quot;%k&#xa;&#xa;        if self.separateChannels:&#xa;          if self.signalChannelIndex is None:&#xa;            chNdx=range(sig.shape[1])&#xa;&#xa;          elif isinstance(self.signalChannelIndex,(tuple,list,range)):&#xa;            chNdx=self.signalChannelIndex&#xa;&#xa;          elif isinstance(self.signalChannelIndex,slice):&#xa;            chNdx=range(*self.signalChannelIndex.indices(sig.shape[1]))&#xa;&#xa;          else:&#xa;            raise TypeError(&quot;Unexpected channel indexing type %s&quot;%str(type(self.signalChannelIndex)))&#xa;&#xa;          for channel in chNdx:&#xa;            plotItem=self.signalsLayout.getItem(kAx,0)&#xa;            self._plot_numeric_data_(plotItem,&#xa;            sig.times,sig[:,channel].magnitude,xlabel=&quot;%s (%s)&quot;%(domain_name,sig.t_start.units.dimensionality),ylabel=&quot;%s (%s)\nchannel %d&quot;%(sig_name,sig.units.dimensionality,channel),name=&quot;%s channel %d&quot;%(sig_name,channel),**kwargs)kAx+=1&#xa;&#xa;&#xa;        else:&#xa;          plotItem=self.signalsLayout.getItem(kAx,0)&#xa;          self._plot_numeric_data_(plotItem,&#xa;          sig.times,sig.magnitude,xlabel=&quot;%s (%s)&quot;%(domain_name,sig.t_start.units.dimensionality),ylabel=&quot;%s (%s)&quot;%(sig_name,signal.units.dimensionality),name=sig_name,**kwargs)kAx+=1&#xa;&#xa;&#xa;&#xa;    if plot_irreg_sigs:&#xa;      for k in self._plotted_irregularsignal_index:&#xa;        signal=seg.irregularlysampledsignals[k]&#xa;        if self.plot_start is not None:&#xa;          if self.plot_stop is not None:&#xa;            sig=signal.time_slice(self.plot_start,self.plot_stop)&#xa;&#xa;          else:&#xa;            sig=signal.time_slice(self.plot_start,signal.t_top)&#xa;&#xa;&#xa;        else:&#xa;          if self.plot_stop is not None:&#xa;            sig=signal.time_slice(signal.t_start,self.plot_stop)&#xa;&#xa;          else:&#xa;            sig=signal&#xa;&#xa;&#xa;        if self.separateChannels:&#xa;          if self.signalChannelIndex is None:&#xa;            chNdx=range(sig.shape[1])&#xa;&#xa;          elif isinstance(self.signalChannelIndex,(tuple,list,range)):&#xa;            chNdx=self.signalChannelIndex&#xa;&#xa;          elif isinstance(self.signalChannelIndex,slice):&#xa;            chNdx=range(*self.signalChannelIndex.indices(sig.shape[1]))&#xa;&#xa;          else:&#xa;            raise TypeError(&quot;Unexpected channel indexing type %s&quot;%str(type(self.signalChannelIndex)))&#xa;&#xa;          for channel in chNdx:&#xa;            plotItem=self.signalsLayout.getItem(kAx,0)&#xa;            self._plot_numeric_data_(plotItem,&#xa;            sig.times,sig[:,channel].magnitude,xlabel=&quot;Time (%s)&quot;%sig.t_start.units.dimensionality,ylabel=&quot;%s (%s)\nchannel %d&quot;%(sig.name,signal.units.dimensionality,channel),**kwargs)kAx+=1&#xa;&#xa;&#xa;        else:&#xa;          plotItem=self.signalsLayout.getItem(kAx,0)&#xa;          self._plot_numeric_data_(plotItem,&#xa;          sig.times,sig.magnitude,xlabel=&quot;Time (%s)&quot;%sig.t_start.units.dimensionality,ylabel=&quot;%s (%s)&quot;%(sig.name,signal.units.dimensionality),**kwargs)kAx+=1&#xa;&#xa;&#xa;&#xa;    for k_ax in range(kAx-1):&#xa;      plotitem=self.signalsLayout.getItem(k_ax,0)&#xa;      if isinstance(plotitem,pg.PlotItem):&#xa;        self.signalsLayout.getItem(k_ax,0).hideAxis(&quot;bottom&quot;)&#xa;&#xa;&#xa;    if isinstance(seg.name,str)and len(seg.name.strip()):&#xa;      self.plotTitleLabel.setText(seg.name,color=&quot;;&#xa;    else:&#xa;      self.plotTitleLabel.setText(&quot;&quot;,color=&quot;;&#xa;    try:&#xa;      if len(seg.spiketrains):&#xa;        spike_train_axis=self.signalsLayout.getItem(kAx,0)&#xa;        colors=cycle(self._defaultLineColorsList_)&#xa;        labelStyle=:&#xa;          &quot;color&quot;:&quot;;height_interval=1/len(seg.spiketrains)&#xa;          trains_x_list=list()&#xa;          trains_y_list=list()&#xa;          for k_spike,spike_train in enumerate(seg.spiketrains):&#xa;            if hasattr(spike_train,&quot;name&quot;):&#xa;              data_name=spike_train.name&#xa;&#xa;            else:&#xa;              data_name=&quot;spikes&quot;&#xa;&#xa;            x=spike_train.times.flatten()&#xa;            y=np.full(x.shape,height_interval*k_spike+height_interval/2)&#xa;            trains_x_list.append(x)&#xa;            trains_y_list.append(y)&#xa;&#xa;          tr_x=np.concatenate(trains_x_list,axis=np.newaxis)&#xa;          tr_y=np.concatenate(trains_y_list,axis=np.newaxis)&#xa;          self._plot_numeric_data_(spike_train_axis,&#xa;          tr_x,tr_y,symbol=&quot;spike&quot;,pen=None,name=data_name,symbolPen=pg.mkPen(pg.mkColor(next(colors))))spike_train_axis.axes[&quot;left&quot;][&quot;item&quot;].setPen(None)&#xa;          spike_train_axis.axes[&quot;left&quot;][&quot;item&quot;].setLabel(&quot;Spike Trains&quot;,**labelStyle)&#xa;          kAx+=1&#xa;&#xa;        if len(seg.events):&#xa;          colors=cycle(self._defaultLineColorsList_)&#xa;          labelStyle=:&#xa;            &quot;color&quot;:&quot;;event_axis=self.signalsLayout.getItem(kAx,0)&#xa;            height_interval=1/len(seg.events)&#xa;            events_x_list=list()&#xa;            events_y_list=list()&#xa;            for k_event,event in enumerate(seg.events):&#xa;              if hasattr(event,&quot;type&quot;):&#xa;                data_name=event.type.name&#xa;&#xa;              elif hasattr(event,&quot;name&quot;):&#xa;                data_name=event.name&#xa;&#xa;              else:&#xa;                data_name=&quot; &quot;&#xa;&#xa;              if isinstance(data_name,str):&#xa;                if data_name==&quot;presynaptic&quot;:&#xa;                  data_name=&quot;pre&quot;&#xa;&#xa;                elif data_name==&quot;postsynaptic&quot;:&#xa;                  data_name=&quot;post&quot;&#xa;&#xa;                elif data_name==&quot;photostimulation&quot;:&#xa;                  data_name=&quot;photo&quot;&#xa;&#xa;                elif&quot;imaging&quot;in data_name:&#xa;                  data_name=&quot;img&quot;&#xa;&#xa;&#xa;              x=event.times.flatten()&#xa;              events_x_list.append(x)&#xa;              y=np.full(x.shape,height_interval*k_event+height_interval/2)&#xa;              events_y_list.append(y)&#xa;&#xa;            ev_x=np.concatenate(events_x_list,axis=np.newaxis)&#xa;            ev_y=np.concatenate(events_y_list,axis=np.newaxis)&#xa;            self._plot_numeric_data_(event_axis,&#xa;            ev_x,ev_y,symbol=&quot;spike&quot;,pen=None,name=data_name,symbolPen=pg.mkPen(pg.mkColor(next(colors))))event_axis.axes[&quot;left&quot;][&quot;item&quot;].setPen(None)&#xa;            event_axis.axes[&quot;left&quot;][&quot;item&quot;].setLabel(&quot;Events&quot;,**labelStyle)&#xa;            kAx+=1&#xa;&#xa;          if len(seg.epochs):&#xa;            self._plotEpochs_(seg.epochs)&#xa;&#xa;&#xa;        except Exception as e:&#xa;          traceback.print_exc()&#xa;&#xa;        self._current_plot_item_=self.getAxis(0)&#xa;&#xa;      @safeWrapper&#xa;      def _plotArray_(self,x,y,*args,**kwargs):&#xa;        if y.ndim==1:&#xa;          self._prepareAxes_(1)&#xa;          self._plot_numeric_data_(self.getAxis(0),x,y,name=&quot;signal&quot;,**kwargs)&#xa;&#xa;        elif y.ndim==2:&#xa;          if self.separateChannels:&#xa;            if self.signalChannelIndex is None:&#xa;              chNdx=range(sig.shape[1])&#xa;&#xa;            elif isinstance(self.signalChannelIndex,(tuple,list,range)):&#xa;              chNdx=self.signalChannelIndex&#xa;&#xa;            elif isinstance(self.signalChannelIndex,slice):&#xa;              chNdx=range(*self.signalChannelIndex.indices(sig.shape[1]))&#xa;&#xa;            else:&#xa;              raise TypeError(&quot;Unexpected channel indexing type %s&quot;%str(type(self.signalChannelIndex)))&#xa;&#xa;            self._prepareAxes_(len(chNdx))&#xa;            for k_ch,channel in enumerate(chNdx):&#xa;              axis=self.getAxis(k_ch)&#xa;              if axis:&#xa;                self._plot_numeric_data_(axis,x,y[:,channel],**kwargs)&#xa;&#xa;&#xa;&#xa;          else:&#xa;            self._prepareAxes_(1)&#xa;            self._plot_numeric_data_(self.getAxis(0),x,y,**kwargs)&#xa;&#xa;&#xa;        else:&#xa;          raise TypeError(&quot;numpy arrays with more than two dimensions are not supported&quot;)&#xa;&#xa;&#xa;      @safeWrapper&#xa;      def _plotSignal_(self,signal,*args,**kwargs):&#xa;        if signal is None:&#xa;          return&#xa;&#xa;        if not isinstance(signal,neo.core.baseneo.BaseNeo):&#xa;          raise TypeError(&quot;_plotSignal_ expects an object from neo framework, or a datatypes.DataSignal or datatypes.IrregularlySampledDataSignal; got %s instead&quot;%(type(signal).__name__))&#xa;&#xa;        self._setup_signal_choosers_(self.y)&#xa;        signal_name=signal.name&#xa;        if isinstance(signal,(neo.AnalogSignal,neo.IrregularlySampledSignal)):&#xa;          domain_name=&quot;Time&quot;&#xa;&#xa;        else:&#xa;          domain_name=signal.domain_name&#xa;&#xa;        if self.plot_start is not None:&#xa;          if self.plot_stop is not None:&#xa;            sig=signal.time_slice(self.plot_start,self.plot_stop)&#xa;&#xa;          else:&#xa;            sig=signal.time_slice(self.plot_start,signal.t_top)&#xa;&#xa;&#xa;        else:&#xa;          if self.plot_stop is not None:&#xa;            sig=signal.time_slice(signal.t_start,self.plot_stop)&#xa;&#xa;          else:&#xa;            sig=signal&#xa;&#xa;&#xa;        if self.separateChannels:&#xa;          if self.signalChannelIndex is None:&#xa;            chNdx=range(sig.shape[1])&#xa;&#xa;          elif isinstance(self.signalChannelIndex,(tuple,list,range)):&#xa;            chNdx=self.signalChannelIndex&#xa;&#xa;          elif isinstance(self.signalChannelIndex,slice):&#xa;            chNdx=range(*self.signalChannelIndex.indices(sig.shape[1]))&#xa;&#xa;          else:&#xa;            raise TypeError(&quot;Unexpected channel indexing type %s&quot;%str(type(self.signalChannelIndex)))&#xa;&#xa;          self._prepareAxes_(len(chNdx),sigNames=[&quot;%s_channel%d&quot;%(signal_name,c)for c in chNdx])&#xa;          for(k,channel)in enumerate(chNdx):&#xa;            self._plot_numeric_data_(self.getAxis(k),np.array(sig.times),&#xa;            np.array(sig[:,channel].magnitude),xlabel=&quot;%s (%s)&quot;%(domain_name,sig.t_start.units.dimensionality),ylabel=&quot;%s (%s)\nchannel %d&quot;%(signal_name,sig.units.dimensionality,channel),*args,**kwargs)&#xa;&#xa;        else:&#xa;          self._prepareAxes_(1,sigNames=[signal_name])&#xa;          self._plot_numeric_data_(self.getAxis(0),np.array(sig.times),&#xa;          np.array(sig.magnitude),ylabel=&quot;%s (%s)&quot;%(signal_name,sig.units.dimensionality),xlabel=&quot;%s (%s)&quot;%(domain_name,sig.times.units.dimensionality),*args,**kwargs)&#xa;&#xa;      @safeWrapper&#xa;      def _plot_numeric_data_(self,plotItem,x,y,&#xa;      xlabel=None,ylabel=None,title=None,name=None,*args,**kwargs):&#xa;        from itertools import cycle&#xa;        if x.ndim>1:&#xa;          x=x.flatten()&#xa;&#xa;        if x.size!=y.shape[0]:&#xa;          raise ValueError(&quot;x and y have different sizes on their first axes&quot;)&#xa;&#xa;        cycle_line_colors=&quot;pen&quot;not in kwargs&#xa;        pen=pg.mkPen(pg.mkColor(&quot;k&quot;))&#xa;        plotDataItems=[i for i in plotItem.listDataItems()if isinstance(i,pg.PlotDataItem)]&#xa;        if&quot;name&quot;not in kwargs:&#xa;          kwargs[&quot;name&quot;]=name&#xa;&#xa;        if y.ndim==1:&#xa;          ndx=~np.isnan(y)&#xa;          if not np.any(ndx):&#xa;            yy=y[ndx].flatten()&#xa;            xx=x[ndx]&#xa;&#xa;          else:&#xa;            yy=y.flatten()&#xa;            xx=x&#xa;&#xa;          if yy.size==0:&#xa;            return&#xa;&#xa;          if&quot;pen&quot;not in kwargs:&#xa;            kwargs[&quot;pen&quot;]=pen&#xa;&#xa;          if len(plotDataItems):&#xa;            if len(plotDataItems)>1:&#xa;              for item in plotDataItems[1:]:&#xa;                plotItem.removeItem(item)&#xa;&#xa;&#xa;            plotDataItems[0].setData(xx,yy,**kwargs)&#xa;&#xa;          else:&#xa;            plotItem.plot(xx,yy,**kwargs)&#xa;&#xa;&#xa;        elif y.ndim==2:&#xa;          colors=cycle(self._defaultLineColorsList_)&#xa;          if y.shape[1]&lt;len(plotDataItems):&#xa;            for item in plotDataItems[y.shape[1]:]:&#xa;              plotItem.removeItem(item)&#xa;&#xa;&#xa;          for k in range(y.shape[1]):&#xa;            ndx=~np.isnan(y[:,k])&#xa;            if not np.any(ndx):&#xa;              yy=y[ndx,k].flatten()&#xa;              xx=x[ndx]&#xa;&#xa;            else:&#xa;              yy=y[:,k].flatten()&#xa;              xx=x&#xa;&#xa;            if yy.size==0:&#xa;              continue&#xa;&#xa;            if cycle_line_colors:&#xa;              pen.setColor(pg.mkColor(next(colors)))&#xa;              kwargs[&quot;pen&quot;]=pen&#xa;&#xa;            if k&lt;len(plotDataItems):&#xa;              plotDataItems[k].setData(xx,yy,**kwargs)&#xa;&#xa;            else:&#xa;              plotItem.plot(xx,yy,**kwargs)&#xa;&#xa;&#xa;&#xa;        plotItem.setLabels(bottom=[xlabel],left=[ylabel])&#xa;        plotItem.setTitle(title)&#xa;        plotItem.replot()&#xa;        plotItemCursors=self.getDataCursorsForItem(plotItem)&#xa;        for c in plotItemCursors:&#xa;          c.setBounds()&#xa;&#xa;        return plotItem&#xa;&#xa;      @safeWrapper&#xa;      def _prepareAxes_(self,nAxes,sigNames=list()):&#xa;        plotitems=self.plotItems&#xa;        if not isinstance(sigNames,(tuple,list)):&#xa;          raise TypeError(&quot;Expecting sigNames to be a sequence; got %s instead&quot;%type(sigNames).__name__)&#xa;&#xa;        if len(sigNames):&#xa;          if len(sigNames)!=nAxes:&#xa;            raise ValueError(&quot;mismatch between number of signal names in sigNames (%d) and the number of new axes (%d))&quot;%(len(sigNames),nAxes))&#xa;&#xa;          elif not all([isinstance(s,(str,type(None)))for s in sigNames]):&#xa;            raise TypeError(&quot;sigNames sequence must contain only strings, or None objects&quot;)&#xa;&#xa;&#xa;        else:&#xa;          sigNames=[&quot;signal_%d&quot;%k for k in range(nAxes)]&#xa;&#xa;        if nAxes==len(plotitems):&#xa;          for k in range(len(plotitems)):&#xa;            plotitem=self.signalsLayout.getItem(k,0)&#xa;            if isinstance(plotitem,pg.PlotItem):&#xa;              self._plot_names_[k]=sigNames[k]&#xa;              try:&#xa;                plotitem.vb.unregister()&#xa;                plotitem.vb.register(sigNames[k])&#xa;                plotitem.vb.name=sigNames[k]&#xa;&#xa;              except:&#xa;                if plotitem.vb.name in plotitem.vb.NamedViews:&#xa;                  plotitem.vb.NamedViews.pop(plotitem.vb.name,None)&#xa;                  plotitem.vb.NamedViews[sigNames[k]]=plotitem.vb&#xa;                  plotitem.vb.updateAllViewLists()&#xa;                  sid=id(plotitem.vb)&#xa;                  plotitem.vb.destroyed.connect(lambda:plotitem.vb.forgetView(sid,name)if(plotitem.vb is not None and'sid'in locals()and'name'in locals())else None)&#xa;&#xa;&#xa;&#xa;&#xa;          return&#xa;&#xa;        if nAxes==0:&#xa;          if len(plotitems):&#xa;            cursors=[c for c in self.crosshairDataCursors.values()]+\&#xa;            [c for c in self.verticalDataCursors.values()]+\[c for c in self.horizontalDataCursors.values()]for plotitem in plotitems:&#xa;              for c in cursors:&#xa;                c.detach()&#xa;&#xa;&#xa;&#xa;          for clist in self._cached_cursors_.values():&#xa;            for c in clist:&#xa;              c.detach()&#xa;&#xa;&#xa;          for plotitem in plotitems:&#xa;            self.signalsLayout.removeItem(plotitem)&#xa;&#xa;          self._plot_names_.clear()&#xa;          self.crosshairDataCursors.clear()&#xa;          self.verticalDataCursors.clear()&#xa;          self.horizontalDataCursors.clear()&#xa;          self._cached_cursors_.clear()&#xa;&#xa;        else:&#xa;          if nAxes&lt;len(plotitems):&#xa;            for k in range(nAxes):&#xa;            plotitem=self.signalsLayout.getItem(k,0)self._plot_names_[k]=sigNames[k]self._cached_cursors_.pop(k,None)if isinstance(plotitem,pg.PlotItem):&#xa;              try:&#xa;                plotitem.vb.unregister()&#xa;                plotitem.vb.register(sigNames[k])&#xa;                plotitem.vb.name=sigNames[k]&#xa;&#xa;              except:&#xa;                if plotitem.vb.name is not None:&#xa;                  if plotitem.vb.name in plotitem.vb.NamedViews:&#xa;                    plotitem.vb.NamedViews.pop(plotitem.vb.name,None)&#xa;                    plotitem.vb.NamedViews[sigNames[k]]=plotitem.vb&#xa;                    plotitem.vb.updateAllViewLists()&#xa;                    sid=id(plotitem.vb)&#xa;                    plotitem.vb.destroyed.connect(lambda:plotitem.vb.forgetView(sid,name)if(plotitem.vb is not None and'sid'in locals()and'name'in locals())else None)&#xa;&#xa;&#xa;&#xa;&#xa;            for k in range(nAxes,len(plotitems)):&#xa;              plotitem=self.signalsLayout.getItem(k,0)&#xa;              if isinstance(plotitem,pg.PlotItem):&#xa;                cursors=self.getDataCursorsForItem(plotitem)&#xa;                if len(cursors):&#xa;                  for cursor in cursors:&#xa;                    cursor.detach()&#xa;&#xa;                  self._cached_cursors_[k]=cursors&#xa;&#xa;                self.signalsLayout.removeItem(plotitem)&#xa;                self._plot_names_.pop(k,None)&#xa;&#xa;&#xa;&#xa;          elif nAxes>len(plotitems):&#xa;            for k in range(len(plotitems)):&#xa;              plotitem=self.signalsLayout.getItem(k,0)&#xa;              self._plot_names_[k]=sigNames[k]&#xa;              self._cached_cursors_.pop(k,None)&#xa;              plotitem.clear()&#xa;              if isinstance(plotitem,pg.PlotItem):&#xa;                try:&#xa;                  plotitem.vb.unregister()&#xa;                  plotitem.vb.register(sigNames[k])&#xa;                  plotitem.vb.name=sigNames[k]&#xa;&#xa;                except:&#xa;                  if plotitem.vb.name is not None:&#xa;                    if plotitem.vb.name in plotitem.vb.NamedViews:&#xa;                      plotitem.vb.NamedViews.pop(plotitem.vb.name,None)&#xa;                      plotitem.vb.NamedViews[sigNames[k]]=plotitem.vb&#xa;                      plotitem.vb.updateAllViewLists()&#xa;                      sid=id(plotitem.vb)&#xa;                      plotitem.vb.destroyed.connect(lambda:plotitem.vb.forgetView(sid,name)if(plotitem.vb is not None and'sid'in locals()and'name'in locals())else None)&#xa;&#xa;&#xa;&#xa;&#xa;&#xa;            for k in range(len(plotitems),nAxes):&#xa;              plotitem=self.signalsLayout.addPlot(row=k,col=0)&#xa;              plotitem.register(sigNames[k])&#xa;              self._plot_names_[k]=sigNames[k]&#xa;              cursors=self._cached_cursors_.get(k,None)&#xa;              if isinstance(cursors,(tuple,list))and len(cursors):&#xa;                for c in cursors:&#xa;                  c.attach(plotitem)&#xa;&#xa;&#xa;&#xa;&#xa;          p0=None&#xa;          plotitems=sorted([i for i in self.signalsLayout.items.items()],key=lambda x:x[1][0])&#xa;          if len(plotitems):&#xa;            p0=self.signalsLayout.getItem(0,0)&#xa;            if isinstance(p0,pg.PlotItem):&#xa;              for k in range(1,len(plotitems)):&#xa;                plotitem=self.signalsLayout.getItem(k,0)&#xa;                if isinstance(plotitem,pg.PlotItem):&#xa;                  plotitem.setXLink(p0)&#xa;&#xa;&#xa;&#xa;&#xa;          if self.signalsLayout.scene()is not None:&#xa;            self.signalsLayout.scene().sigMouseClicked.connect(self.slot_mouseClickSelectPlotItem)&#xa;&#xa;          if nAxes==1:&#xa;            p=self.signalsLayout.getItem(0,0)&#xa;            for c in[c for c in self.allDataCursors.values()if c.isDynamic]:&#xa;              c.detach()&#xa;              c.attach(p)&#xa;&#xa;&#xa;&#xa;        for p in self.axes:&#xa;          if p.scene():&#xa;            p.scene().sigMouseMoved[object].connect(self.slot_mouseMovedInPlotItem)&#xa;            p.scene().sigMouseHover[object].connect(self.slot_mouseHoverInPlotItem)&#xa;&#xa;&#xa;&#xa;      @pyqtSlot(object)&#xa;      @safeWrapper&#xa;      def slot_mouseHoverInPlotItem(self,obj):&#xa;      if len(obj)and isinstance(obj[0],pg.PlotItem):&#xa;        self._focussed_plot_item_=obj[0]&#xa;&#xa;      else:&#xa;        self._focussed_plot_item_=None&#xa;&#xa;      @pyqtSlot(object)&#xa;      @safeWrapper&#xa;      def slot_mouseMovedInPlotItem(self,pos):&#xa;        if isinstance(self._focussed_plot_item_,pg.PlotItem):&#xa;          self.reportMouseCoordinatesInAxis(pos,self._focussed_plot_item_)&#xa;&#xa;        else:&#xa;          self._mouse_coordinates_text_=&quot;&quot;&#xa;          self._update_coordinates_viewer_()&#xa;&#xa;&#xa;      @safeWrapper&#xa;      def reportMouseCoordinatesInAxis(self,pos,plotitem):&#xa;        if isinstance(plotitem,pg.PlotItem):&#xa;          if plotitem.sceneBoundingRect().contains(pos):&#xa;            plots,rc=zip(*self.plotItemsWithLayoutPositions)&#xa;            plot_index=plots.index(plotitem)&#xa;            plot_row=rc[plot_index][0][0]&#xa;            plot_name=self._plot_names_.get(plot_row,&quot;&quot;)&#xa;            mousePoint=plotitem.vb.mapSceneToView(pos)&#xa;            x_text=&quot;%f&quot;%mousePoint.x()&#xa;            y_text=&quot;%f&quot;%mousePoint.y()&#xa;            display_text=&quot;X: %s; Y: %s&quot;%(x_text,y_text)&#xa;            self._mouse_coordinates_text_=&quot;%s:\n%s&quot;%(plot_name,display_text)&#xa;&#xa;          else:&#xa;            self._mouse_coordinates_text_=&quot;&quot;&#xa;&#xa;          self._update_coordinates_viewer_()&#xa;&#xa;&#xa;      def _update_coordinates_viewer_(self):&#xa;        self.coordinatesViewer.setPlainText(&quot;\n&quot;.join([self._mouse_coordinates_text_,&#xa;        self._cursor_coordinates_text_]))&#xa;      @pyqtSlot(object)&#xa;      @safeWrapper&#xa;      def slot_mouseClickSelectPlotItem(self,evt):&#xa;        focusItem=self.sender().focusItem()&#xa;        if isinstance(focusItem,pg.ViewBox):&#xa;          plotitems,rc=zip(*self.axesWithLayoutPositions)&#xa;          focusedPlotItems=[i for i in plotitems if i.vb is focusItem]&#xa;          if len(focusedPlotItems):&#xa;            self._current_plot_item_=focusedPlotItems[0]&#xa;            self._focussed_plot_item_=self._current_plot_item_&#xa;            plot_index=plotitems.index(self._current_plot_item_)&#xa;            plot_row=rc[plot_index][0][0]&#xa;            plot_name=self._plot_names_.get(plot_row,&quot;&quot;)&#xa;            if isinstance(plot_name,str)and len(plot_name.strip()):&#xa;              self.statusBar().showMessage(&quot;Selected axes: %d (%s)&quot;%(plotitems.index(self._current_plot_item_),plot_name))&#xa;&#xa;            else:&#xa;              self.statusBar().showMessage(&quot;Selected axes: %d&quot;%plotitems.index(self._current_plot_item_))&#xa;&#xa;&#xa;          else:&#xa;            self._current_plot_item_=None&#xa;            self._focussed_plot_item_=None&#xa;&#xa;&#xa;        else:&#xa;          self._current_plot_item_=None&#xa;          self._focussed_plot_item_=None&#xa;&#xa;&#xa;      @safeWrapper&#xa;      def clearEpochs(self):&#xa;        self._plotEpochs_()&#xa;&#xa;      @safeWrapper&#xa;      def clear(self,keepCursors=False):&#xa;        self._current_plot_item_=None&#xa;        self._focussed_plot_item_=None&#xa;        for p in self.plotItems:&#xa;          self.signalsLayout.removeItem(p)&#xa;&#xa;        self.plotTitleLabel.setText(&quot;&quot;)&#xa;        for c in self.crosshairDataCursors.values():&#xa;          c.detach()&#xa;&#xa;        for c in self.verticalDataCursors.values():&#xa;          c.detach()&#xa;&#xa;        for c in self.horizontalDataCursors.values():&#xa;          c.detach()&#xa;&#xa;        for c in self._cached_cursors_.values():&#xa;          c.detach()&#xa;&#xa;        if not keepCursors:&#xa;          self.crosshairDataCursors.clear()&#xa;          self.verticalDataCursors.clear()&#xa;          self.horizontalDataCursors.clear()&#xa;          self._cached_cursors_.clear()&#xa;          self.linkedCrosshairCursors=[]&#xa;          self.linkedHorizontalCursors=[]&#xa;          self.linkedVerticalCursors=[]&#xa;&#xa;        self.signalNo=0&#xa;        self.frameIndex=[0]&#xa;        self.signalIndex=1&#xa;        self.guiSelectedSignals.clear()&#xa;        self.guiSelectedSignalNames.clear()&#xa;        self.guiSelectedIrregularSignals.clear()&#xa;        self.guiSelectedIrregularSignalNames.clear()&#xa;        self.y=None&#xa;        self.x=None&#xa;        self.plot_start=None&#xa;        self.plot_stop=None&#xa;        self._plotEpochs_()&#xa;        signalBlockers=[QtCore.QSignalBlocker(widget)for widget in\&#xa;        (self.selectSignalComboBox,self.selectIrregularSignalComboBox)]self.selectSignalComboBox.clear()&#xa;        self.selectIrregularSignalComboBox.clear()&#xa;&#xa;      def setTitlePrefix(self,value):&#xa;        if isinstance(value,str)and len(value.strip())>0:&#xa;          self._winTitle_=value&#xa;&#xa;        else:&#xa;          self._winTitle_=&quot;SignalViewer%d&quot;%self._ID_&#xa;&#xa;        if isinstance(self._docTitle_,str)and len(self._docTitle_.strip())>0:&#xa;          self.setWindowTitle(&quot;%s - %s&quot;%(self._winTitle_,self._docTitle_))&#xa;&#xa;        else:&#xa;          self.setWindowTitle(self._winTitle_)&#xa;&#xa;&#xa;      @property&#xa;      def cursors(self):&#xa;        return self.allDataCursors" id="uK0qgrKGnbezY"/>
    <sourcecode value="super(MetaHeaderView,self).__init__(orientation,parent)&#xa;self.setMovable(True)&#xa;self.setClickable(True)&#xa;self.line=QtWidgets.QLineEdit(parent=self.viewport())&#xa;self.line.setAlignment(QtCore.Qt.AlignTop)&#xa;self.line.setHidden(True)&#xa;self.line.blockSignals(True)&#xa;self.sectionedit=0&#xa;self.sectionDoubleClicked.connect(self.editHeader)&#xa;self.line.editingFinished.connect(self.doneEditing)&#xa;" id="uBFcCjE7jau6m"/>
    <sourcecode value="self.line.blockSignals(True)&#xa;self.line.setHidden(True)&#xa;oldname=self.model().dataset.field(self.sectionedit)&#xa;newname=str(self.line.text())&#xa;self.model().dataset.changeFieldName(oldname,newname)&#xa;self.line.setText('')&#xa;self.setCurrentIndex(QtCore.QModelIndex())&#xa;" id="uQqN2vRTZRrBf"/>
    <sourcecode value="edit_geometry=self.line.geometry()&#xa;edit_geometry.setWidth(self.sectionSize(section))&#xa;edit_geometry.moveLeft(self.sectionViewportPosition(section))&#xa;self.line.setGeometry(edit_geometry)&#xa;self.line.setText(self.model().dataset.field(section).name)&#xa;self.line.setHidden(False)&#xa;self.line.blockSignals(False)&#xa;self.line.setFocus()&#xa;self.line.selectAll()&#xa;self.sectionedit=section&#xa;" id="udW4vSWavmjo5"/>
    <sourcecode value="super(TabularDataModel,self).__init__(parent=parent)&#xa;self._modelData_=None&#xa;self._modelRows_=0&#xa;self._modelColumns_=0&#xa;self._displayedRows_=0&#xa;self._viewers_=list()&#xa;self.setModelData(data)&#xa;" id="ujqblzLa0kc8G"/>
    <sourcecode value="try:&#xa;  if self._modelData_ is None:&#xa;    return QtCore.QVariant()&#xa;&#xa;  if not modelIndex.isValid():&#xa;    return QtCore.QVariant()&#xa;&#xa;  row=modelIndex.row()&#xa;  col=modelIndex.column()&#xa;  if row>=self._modelRows_ or row&lt;0:&#xa;    return QtCore.QVariant()&#xa;&#xa;  if col>=self._modelColumns_ or row&lt;0:&#xa;    return QtCore.QVariant()&#xa;&#xa;  return self.__getModelData__(row,col,role)&#xa;&#xa;except Exception as e:&#xa;  traceback.print_exc()&#xa;&#xa;" id="uaGdtZSxR3WZz"/>
    <sourcecode value="if self._modelData_ is None:&#xa;  return QtCore.QVariant()&#xa;&#xa;return self.__getHeaderData__(section,orientation,role)&#xa;" id="ubX02zmEgglhQ"/>
    <sourcecode value="return self._modelRows_&#xa;" id="uJcg8ZNVAwX1y"/>
    <sourcecode value="return self._modelColumns_&#xa;" id="uZWnNYVlh7FLl"/>
    <sourcecode value="if not modelIndex.isValid():&#xa;  return QtCore.Qt.ItemIsEnabled&#xa;&#xa;return QtCore.Qt.ItemIsEditable|super().flags(modelIndex)&#xa;" id="uuGoOjKiGv0mz"/>
    <sourcecode value="if self._modelData_ is None:&#xa;  return False&#xa;&#xa;row=modelIndex.row()&#xa;col=modelIndex.column()&#xa;if row>=self._modelData_.shape[0]:&#xa;  return False&#xa;&#xa;if col>=self._modelData_.shape[1]:&#xa;  return False&#xa;&#xa;if role!=QtCore.Qt.EditRole:&#xa;  return False&#xa;&#xa;if self._setDataValue_(value,row,col):&#xa;  self.dataChanged.emit(modelIndex,modelIndex)&#xa;  return True&#xa;&#xa;return False&#xa;" id="u9qbVvXYZguRg"/>
    <sourcecode value="try:&#xa;  if not isinstance(data,(pd.Series,pd.DataFrame,np.ndarray,type(None))):&#xa;    raise TypeError(&quot;%s data is not yet supported&quot;%type(data).__name__)&#xa;&#xa;  if isinstance(data,np.ndarray)and data.ndim>2:&#xa;    raise TypeError(&quot;cannot support numpy array data with more than two dimensions&quot;)&#xa;&#xa;  self.beginResetModel()&#xa;  if isinstance(data,pd.DataFrame):&#xa;    self._modelData_=data&#xa;    self._modelRows_=data.shape[0]&#xa;    self._modelColumns_=data.shape[1]&#xa;&#xa;  elif isinstance(data,pd.Series):&#xa;    self._modelData_=data&#xa;    self._modelRows_=data.shape[0]&#xa;    self._modelColumns_=1&#xa;&#xa;  elif isinstance(data,(neo.AnalogSignal,neo.IrregularlySampledSignal,dt.DataSignal,dt.IrregularlySampledDataSignal)):&#xa;    if data.ndim:&#xa;      self._modelRows_=data.shape[0]&#xa;      if data.ndim>1:&#xa;        self._modelColumns_=data.shape[1]+1&#xa;&#xa;&#xa;    else:&#xa;      self._modelRows_=1&#xa;      self._modelColumns_=1&#xa;&#xa;    self._modelData_=data&#xa;&#xa;  elif isinstance(data,np.ndarray):&#xa;    self._modelData_=data&#xa;    if data.ndim:&#xa;      self._modelRows_=data.shape[0]&#xa;      if data.ndim>1:&#xa;        self._modelColumns_=data.shape[1]&#xa;&#xa;&#xa;    else:&#xa;      self._modelRows_=1&#xa;      self._modelColumns_=1&#xa;&#xa;&#xa;  elif data is None:&#xa;    self._modelData_=data&#xa;    self._modelRows_=0&#xa;    self._modelColumns_=0&#xa;&#xa;  self._displayedRows_=0&#xa;  self.endResetModel()&#xa;  if self._modelData_ is None:&#xa;    self.headerDataChanged.emit(QtCore.Qt.Vertical,0,0)&#xa;&#xa;  else:&#xa;    self.headerDataChanged.emit(QtCore.Qt.Vertical,0,self._modelRows_)&#xa;&#xa;&#xa;except Exception as e:&#xa;  traceback.print_exc()&#xa;&#xa;" id="ud4ww6CJMB50h"/>
    <sourcecode value="return self._viewers_&#xa;" id="ulEMK3Ug11DZX"/>
    <sourcecode value="try:&#xa;  if role not in(QtCore.Qt.DisplayRole,QtCore.Qt.EditRole,QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleTextRole):&#xa;    return QtCore.QVariant()&#xa;&#xa;  if isinstance(self._modelData_,pd.DataFrame):&#xa;    if orientation==QtCore.Qt.Horizontal:&#xa;      if isinstance(self._modelData_.columns,pd.MultiIndex):&#xa;        if role in(QtCore.Qt.DisplayRole,QtCore.Qt.EditRole,QtCore.Qt.AccessibleTextRole):&#xa;          return QtCore.QVariant(str(self._modelData_.columns[section]))&#xa;&#xa;        elif role in(QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleDescriptionRole):&#xa;          if&quot;%s&quot;%self._modelData_.iloc[:,section].dtype==&quot;category&quot;:&#xa;            if len(self._modelData_.iloc[:,section].cat.categories)>6:&#xa;              ret=&quot;\n&quot;.join([&quot;%s&quot;%v for v in self._modelData_.columns.names]+\&#xa;              [&quot;%d categories:&quot;%len(self._modelData_.iloc[:,section].cat.categories)]+\[&quot;%s&quot;%v for v in self._modelData_.iloc[:,section].cat.categories[0:3]]+\[&quot;...&quot;]+\[&quot;%s&quot;%v for v in self._modelData_.iloc[:,section].cat.categories[-3:]])&#xa;            else:&#xa;              ret=&quot;\n&quot;.join([&quot;%s&quot;%v for v in self._modelData_.columns.names]+\&#xa;              [&quot;categories:&quot;]+\[&quot;%s&quot;%v for v in self._modelData_.iloc[:,section].cat.categories])&#xa;&#xa;          else:&#xa;            ret=&quot;\n&quot;.join([&quot;%s&quot;%v for v in self._modelData_.columns.names]+[&quot;(%s)&quot;%self._modelData_.iloc[:,section].dtype])&#xa;&#xa;          return QtCore.QVariant(ret)&#xa;&#xa;        else:&#xa;          return QtCore.QVariant()&#xa;&#xa;&#xa;      elif isinstance(self._modelData_.columns,pd.Index):&#xa;        if role in(QtCore.Qt.DisplayRole,QtCore.Qt.EditRole,QtCore.Qt.AccessibleTextRole):&#xa;          return QtCore.QVariant(str(self._modelData_.columns[section]))&#xa;&#xa;        elif role in(QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleDescriptionRole):&#xa;          if&quot;%s&quot;%self._modelData_.iloc[:,section].dtype==&quot;category&quot;:&#xa;            if len(self._modelData_.iloc[:,section].cat.categories)>6:&#xa;              ret=&quot;\n&quot;.join([&quot;%d categories:&quot;%len(self._modelData_.iloc[:,section].cat.categories)]+\&#xa;              [&quot;%s&quot;%v for v in self._modelData_.iloc[:,section].cat.categories[0:3]]+\[&quot;...&quot;]+\[&quot;%s&quot;%v for v in self._modelData_.iloc[:,section].cat.categories[-3:]])&#xa;            else:&#xa;              ret=&quot;\n&quot;.join([&quot;categories:&quot;]+\&#xa;              [&quot;%s&quot;%v for v in self._modelData_.iloc[:,section].cat.categories])&#xa;            return QtCore.QVariant(ret)&#xa;&#xa;          else:&#xa;            return QtCore.QVariant(&quot;%s&quot;%self._modelData_.iloc[:,section].dtype)&#xa;&#xa;&#xa;        else:&#xa;          return QtCore.QVariant()&#xa;&#xa;&#xa;      else:&#xa;        return QtCore.QVariant()&#xa;&#xa;&#xa;    else:&#xa;      if isinstance(self._modelData_.index,pd.MultiIndex):&#xa;        if role in(QtCore.Qt.DisplayRole,QtCore.Qt.EditRole,QtCore.Qt.AccessibleTextRole):&#xa;          return QtCore.QVariant(str(self._modelData_.index[section]))&#xa;&#xa;        elif role in(QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleDescriptionRole):&#xa;          if&quot;%s&quot;%self._modelData_.iloc[section,:].dtype==&quot;category&quot;:&#xa;            if len(self._modelData_.iloc[section,:].cat.categories)>6:&#xa;              ret=&quot; &quot;.join([&quot;%s&quot;%v for v in self._modelData_.index.names]+\&#xa;              [&quot;%d categories:&quot;%len(self._modelData_.iloc[section,:].cat.categories)]+\[&quot;%s&quot;%v for v in self._modelData_.iloc[section,:].cat.categories[0:3]]+\[&quot;...&quot;]+\[&quot;%s&quot;%v for v in self._modelData_.iloc[section,:].cat.categories[-3:]])&#xa;            else:&#xa;              ret=&quot; &quot;.join([&quot;%s&quot;%v for v in self._modelData_.index.names]+\&#xa;              [&quot;categories:&quot;]+\[&quot;%s&quot;%v for v in self._modelData_.iloc[section,:].cat.categories])&#xa;&#xa;          else:&#xa;            ret=&quot; &quot;.join([&quot;%s&quot;%v for v in self._modelData_.index.names]+[&quot;(%s)&quot;%self._modelData_.iloc[section,:].dtype])&#xa;&#xa;          return QtCore.QVariant(ret)&#xa;&#xa;        else:&#xa;          return QtCore.QVariant()&#xa;&#xa;&#xa;      elif isinstance(self._modelData_.index,pd.Index):&#xa;        if role in(QtCore.Qt.DisplayRole,QtCore.Qt.EditRole,QtCore.Qt.AccessibleTextRole):&#xa;          return QtCore.QVariant(str(self._modelData_.index[section]))&#xa;&#xa;        elif role in(QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleDescriptionRole):&#xa;          if&quot;%s&quot;%self._modelData_.iloc[section,:].dtype==&quot;category&quot;:&#xa;            if len(self._modelData_.iloc[section,:].cat.category)>6:&#xa;              ret=&quot; &quot;.join([&quot;%d categories:&quot;%len(self._modelData_.iloc[section,:].cat.categories)]+\&#xa;              [&quot;%s&quot;%v for v in self._modelData_.iloc[section,:].cat.categories[0:3]]+\[&quot;...&quot;]+\[&quot;%s&quot;%v for v in self._modelData_.iloc[section,:].cat.categories[-3:]])&#xa;            else:&#xa;              ret=&quot; &quot;.join([&quot;categories:&quot;]+\&#xa;              [&quot;%s&quot;%v for v in self._modelData_.iloc[section,:].cat.categories])&#xa;&#xa;          else:&#xa;            ret=&quot;%s&quot;%self._modelData_.iloc[section,:].dtype&#xa;&#xa;          return QtCore.QVariant(ret)&#xa;&#xa;        else:&#xa;          return QtCore.QVariant()&#xa;&#xa;&#xa;      else:&#xa;        return QtCore.QVariant()&#xa;&#xa;&#xa;&#xa;  elif isinstance(self._modelData_,pd.Series):&#xa;    if orientation==QtCore.Qt.Horizontal:&#xa;      if role in(QtCore.Qt.DisplayRole,QtCore.Qt.EditRole,QtCore.Qt.AccessibleTextRole):&#xa;        return QtCore.QVariant(str(self._modelData_.name))&#xa;&#xa;      elif role in(QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleDescriptionRole):&#xa;        if&quot;%s&quot;%self._modelData_.dtype==&quot;category&quot;:&#xa;          if len(self._modelData_.cat.categories)>6:&#xa;            ret=&quot;\n&quot;.join([&quot;%d categories:&quot;%len(self._modelData_.cat.categories)]+\&#xa;            [&quot;%s&quot;%v for v in self._modelData_.cat.categories[0:3]]+\[&quot;...&quot;]+\[&quot;%s&quot;%v for v in self._modelData_.cat.categories[-3:]])&#xa;          else:&#xa;            ret=&quot;\n&quot;.join([&quot;categories:&quot;]+\&#xa;            [&quot;%s&quot;%v for v in self._modelData_.cat.categories])&#xa;          return QtCore.QVariant(ret)&#xa;&#xa;        else:&#xa;          return QtCore.QVariant(&quot;%s&quot;%self._modelData_.dtype)&#xa;&#xa;&#xa;      else:&#xa;        return QtCore.QVariant()&#xa;&#xa;&#xa;    else:&#xa;      if isinstance(self._modelData_.index,pd.MultiIndex):&#xa;        if role in(QtCore.Qt.DisplayRole,QtCore.Qt.EditRole,QtCore.Qt.AccessibleTextRole):&#xa;          return QtCore.QVariant(str(self._modelData_.index[section]))&#xa;&#xa;        elif role in(QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleDescriptionRole):&#xa;          if&quot;%s&quot;%self._modelData_.iloc[section].dtype==&quot;category&quot;:&#xa;            if len(self._modelData_.iloc[section].cat.categories)>6:&#xa;              ret=&quot; &quot;.join([&quot;%s&quot;%v for v in self._modelData_.index.names]+\&#xa;              [&quot;%d categories:&quot;%len(self._modelData_.iloc[section].cat.categories)]+\[&quot;%s&quot;%v for v in self._modelData_.iloc[section].cat.categories[0:3]]+\[&quot;...&quot;]+\[&quot;%s&quot;%v for v in self._modelData_.iloc[section].cat.categories[-3:]])&#xa;            else:&#xa;              ret=&quot; &quot;.join([&quot;categories:&quot;]+\&#xa;              [&quot;%s&quot;%v for v in self._modelData_.iloc[section].cat.categories])&#xa;            return QtCore.QVariant(ret)&#xa;&#xa;&#xa;        else:&#xa;          return QtCore.QVariant()&#xa;&#xa;&#xa;      elif isinstance(self._modelData_.index,pd.Index):&#xa;      if role in(QtCore.Qt.DisplayRole,QtCore.Qt.EditRole,QtCore.Qt.AccessibleTextRole):&#xa;        return QtCore.QVariant(str(self._modelData_.index[section]))&#xa;&#xa;      elif role in(QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleDescriptionRole):&#xa;        if&quot;%s&quot;%self._modelData_.iloc[section].dtype==&quot;category&quot;:&#xa;          if len(self._modelData_.iloc[section].cat.categories)>6:&#xa;            ret=&quot; &quot;.join([&quot;%d categories:&quot;%len(self._modelData_[section].cat.categories)]+\&#xa;            [&quot;%s&quot;%v for v in self._modelData_[section].cat.categories[0:3]]+\[&quot;...&quot;]+\[&quot;%s&quot;%v for v in self._modelData_[section].cat.categories[-3:]])&#xa;          else:&#xa;            ret=&quot; &quot;.join([&quot;categories:&quot;]+\&#xa;            [&quot;%s&quot;%v for v in self._modelData_[section].cat.categories])&#xa;          return QtCore.QVariant(ret)&#xa;&#xa;        else:&#xa;          return QtCore.QVariant(&quot;%s&quot;%self._modelData_[section].dtype)&#xa;&#xa;&#xa;      else:&#xa;        return QtCore.QVariant()&#xa;&#xa;      else:&#xa;        return QtCore.QVariant()&#xa;&#xa;&#xa;&#xa;  elif isinstance(self._modelData_,(neo.AnalogSignal,neo.IrregularlySampledSignal,dt.DataSignal,dt.IrregularlySampledDataSignal)):&#xa;    if orientation==QtCore.Qt.Horizontal:&#xa;      if role in(QtCore.Qt.DisplayRole,QtCore.Qt.EditRole,QtCore.Qt.AccessibleTextRole):&#xa;        if section==0:&#xa;          if isinstance(self._modelData_,(neo.IrregularlySampledSignal,dt.IrregularlySampledDataSignal)):&#xa;            return QtCore.QVariant(&quot;%s (%s)&quot;%(self._modelData_.domain_name,self._modelData_.domain.dimensionality))&#xa;&#xa;          else:&#xa;            return QtCore.QVariant(&quot;Time (%s)&quot;%self._modelData_.times.dimensionality)&#xa;&#xa;&#xa;        else:&#xa;          return QtCore.QVariant(&quot;%s (channel %d, %s)&quot;%(self._modelData_.name,section-1,self._modelData_.dimensionality))&#xa;&#xa;&#xa;      elif role in(QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleDescriptionRole):&#xa;        return QtCore.QVariant(&quot;%s&quot;%self._modelData_[:,section].dtype)&#xa;&#xa;      else:&#xa;        return QtCore.QVariant()&#xa;&#xa;&#xa;    else:&#xa;      if role in(QtCore.Qt.DisplayRole,QtCore.Qt.AccessibleTextRole):&#xa;        return QtCore.QVariant(&quot;%s&quot;%section)&#xa;&#xa;      elif role in(QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleDescriptionRole):&#xa;        return QtCore.QVariant(&quot;%s&quot;%self._modelData_[section,:].dtype)&#xa;&#xa;      else:&#xa;        return QtCore.QVariant()&#xa;&#xa;&#xa;&#xa;  elif isinstance(self._modelData_,np.ndarray):&#xa;    if role in(QtCore.Qt.DisplayRole,QtCore.Qt.AccessibleTextRole):&#xa;      return QtCore.QVariant(&quot;%s&quot;%section)&#xa;&#xa;    elif role in(QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleDescriptionRole):&#xa;      if orientation==QtCore.Qt.Horizontal:&#xa;        return QtCore.QVariant(&quot;%s&quot;%self._modelData_[:,section].dtype)&#xa;&#xa;      else:&#xa;        return QtCore.QVariant(&quot;%s&quot;%self._modelData_[section,:].dtype)&#xa;&#xa;&#xa;    else:&#xa;      return QtCore.QVariant()&#xa;&#xa;&#xa;  else:&#xa;    return QtCore.QVariant()&#xa;&#xa;&#xa;except(IndexError,):&#xa;  return QtCore.QVariant()&#xa;&#xa;" id="uicpxvmc116nc"/>
    <sourcecode value="try:&#xa;  if role not in(QtCore.Qt.DisplayRole,QtCore.Qt.EditRole,QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleTextRole):&#xa;    return QtCore.QVariant()&#xa;&#xa;  if isinstance(self._modelData_,pd.DataFrame):&#xa;    ret=self._modelData_.iloc[row,col]&#xa;    ret_type=type(ret).__name__&#xa;    if isinstance(ret,datetime.datetime):&#xa;      ret=ret.isoformat(&quot; &quot;)&#xa;&#xa;&#xa;  elif isinstance(self._modelData_,pd.Series):&#xa;    ret=self._modelData_.iloc[row]&#xa;    ret_type=type(ret).__name__&#xa;    if isinstance(ret,datetime.datetime):&#xa;      ret=ret.isoformat(&quot; &quot;)&#xa;&#xa;&#xa;  elif isinstance(self._modelData_,(neo.AnalogSignal,neo.IrregularlySampledSignal,dt.DataSignal,dt.IrregularlySampledDataSignal)):&#xa;    if col==0:&#xa;      ret=self._modelData_.times[row]&#xa;      ret_type=type(ret).__name__&#xa;&#xa;    else:&#xa;      ret=self._modelData_[row,col-1]&#xa;      ret_type=type(ret).__name__&#xa;&#xa;&#xa;  elif isinstance(self._modelData_,np.ndarray):&#xa;    ret=self._modelData_[row,col]&#xa;    ret_type=type(ret).__name__&#xa;    if isinstance(ret,datetime.datetime):&#xa;      ret=ret.isoformat(&quot; &quot;)&#xa;&#xa;&#xa;  else:&#xa;    return QtCore.QVariant()&#xa;&#xa;  if role in(QtCore.Qt.DisplayRole,QtCore.Qt.EditRole):&#xa;    return QtCore.QVariant(&quot;%s&quot;%ret)&#xa;&#xa;  elif role in(QtCore.Qt.ToolTipRole,QtCore.Qt.AccessibleDescriptionRole):&#xa;    return QtCore.QVariant(ret_type)&#xa;&#xa;  elif role in(QtCore.Qt.UserRole,):&#xa;    return QtCore.QVariant(ret)&#xa;&#xa;  else:&#xa;    return QtCore.QVariant()&#xa;&#xa;&#xa;except(IndexError,):&#xa;  return QtCore.QVariant()&#xa;&#xa;" id="u5ryLbVV60pwU"/>
    <sourcecode value="if self._modelData_ is None:&#xa;  return False&#xa;&#xa;if not isinstance(value,str):&#xa;  raise TypeError(&quot;Expecting a str, got %s instead&quot;%type(value).__name__)&#xa;&#xa;try:&#xa;  if isinstance(self._modelData_,pd.DataFrame):&#xa;    data_row=self._modelData_.index[row]&#xa;    data_col=self._modelData_.columns[col]&#xa;    current_value=self._modelData_.loc[data_row,data_col]&#xa;    if hasattr(current_value,&quot;dtype&quot;):&#xa;      data_type=current_value.dtype.type&#xa;&#xa;    else:&#xa;      data_type=type(current_value)&#xa;&#xa;    if isinstance(value,QtCore.QVariant)or hasattr(value,&quot;value&quot;):&#xa;      pyvalue=value.value()&#xa;&#xa;    else:&#xa;      pyvalue=value&#xa;&#xa;    if data_type!=object:&#xa;      if isinstance(pyvalue,str):&#xa;        if len(pyvalue.strip())>0:&#xa;          data_value=pyvalue&#xa;&#xa;        else:&#xa;          data_value=None&#xa;&#xa;&#xa;&#xa;    data_value=data_type(data_value)&#xa;    self._modelData_.at[data_row,data_col]=data_value&#xa;&#xa;  elif isinstance(self._modelData_,pd.Series):&#xa;    data_row=self._modelData_.index[row]&#xa;    current_value=self._modelData_.loc[row]&#xa;    if hasattr(current_value,&quot;dtype&quot;):&#xa;      data_type=self._modelData_.loc[row].dtype.type&#xa;&#xa;    else:&#xa;      data_type=type(current_value)&#xa;&#xa;    if isinstance(value,QtCore.QVariant)or hasattr(value,&quot;value&quot;):&#xa;      pyvalue=value.value()&#xa;&#xa;    else:&#xa;      pyvalue=value&#xa;&#xa;    if data_type!=object:&#xa;      if isinstance(pyvalue,str):&#xa;        if len(pyvalue.strip())>0:&#xa;          data_value=pyvalue&#xa;&#xa;        else:&#xa;          data_value=None&#xa;&#xa;&#xa;&#xa;    data_value=data_type(data_value)&#xa;    self._modelData_.at[data_row]=data_value&#xa;&#xa;  elif isinstance(self._modelData_,np.ndarray):&#xa;    current_value=self._modelData_[row,col]&#xa;    if hasattr(current_value,&quot;dtype&quot;):&#xa;      data_type=current_value.dtype.type&#xa;&#xa;    else:&#xa;      data_type=type(current_value)&#xa;&#xa;    if isinstance(value,QtCore.QVariant)or hasattr(value,&quot;value&quot;):&#xa;      pyvalue=value.value()&#xa;&#xa;    else:&#xa;      pyvalue=value&#xa;&#xa;    if data_type!=object:&#xa;      if isinstance(pyvalue,str):&#xa;        if len(pyvalue.strip())>0:&#xa;          data_value=pyvalue&#xa;&#xa;        else:&#xa;          data_value=None&#xa;&#xa;&#xa;&#xa;    data_value=data_type(data_value)&#xa;    self._modelData_[row,col]=data_value&#xa;&#xa;  else:&#xa;    return False&#xa;&#xa;  return True&#xa;&#xa;except Exception as e:&#xa;  traceback.print_exc()&#xa;  return False&#xa;&#xa;return False&#xa;" id="uiimiC6TvzMUD"/>
    <sourcecode value="super().__init__(**kwargs)&#xa;self.settings=QtCore.QSettings()&#xa;self._dataModel_=TabularDataModel(parent=self)&#xa;self._data_=None&#xa;self.selectedColumnIndex=None&#xa;self.selectedRowIndex=None&#xa;self.__use_matplotlib__=True&#xa;if isinstance(data,(type(None),pd.DataFrame,pd.Series,np.ndarray)):&#xa;  self._data_=data&#xa;&#xa;else:&#xa;  raise TypeError(&quot;data expected to be one of %s; got %s instead&quot;%(str((type(None),pd.DataFrame,pd.Series,np.ndarray)),type(data)))&#xa;&#xa;self._configureGUI_()&#xa;self._load_settings_()&#xa;if self._data_ is not None:&#xa;  self._viewData()&#xa;  self.show()&#xa;&#xa;" id="uZ1lS8cV1VfVx"/>
    <sourcecode value="self._save_settings_()&#xa;evt.accept()&#xa;self.close()&#xa;" id="uDgWBclcwZLt8"/>
    <sourcecode value="if not self._gui_client_:&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowSize&quot;]),self.size())&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowPos&quot;]),self.pos())&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowState&quot;]),self.saveState())&#xa;  self.settings.setValue(&quot;/&quot;.join([self.__class__.__name__,&quot;UseMatplotlib&quot;]),&quot;%s&quot;%self.__use_matplotlib__)&#xa;&#xa;" id="uArdMGmMAlcSe"/>
    <sourcecode value="if not self._gui_client_:&#xa;  windowSize=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowSize&quot;]),None)&#xa;  if windowSize is not None:&#xa;    self.resize(windowSize)&#xa;&#xa;  windowPos=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowPos&quot;]),None)&#xa;  if windowPos is not None:&#xa;    self.move(windowPos)&#xa;&#xa;  windowState=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;WindowState&quot;]),None)&#xa;  if windowState is not None:&#xa;    self.restoreState(windowState)&#xa;&#xa;  use_mpl=self.settings.value(&quot;/&quot;.join([self.__class__.__name__,&quot;UseMatplotlib&quot;]),True)&#xa;  if isinstance(use_mpl,bool):&#xa;    self.__use_matplotlib__=use_mpl&#xa;&#xa;  elif isinstance(use_mpl,str)and use_mpl==&quot;True&quot;:&#xa;    self.__use_matplotlib__=True&#xa;&#xa;  else:&#xa;    self.__use_matplotlib__=False&#xa;&#xa;&#xa;if hasattr(self,&quot;__use_mpl_action__&quot;):&#xa;  self.__use_mpl_action__.setChecked(self.__use_matplotlib__)&#xa;&#xa;" id="uZhlqHAg2iQIN"/>
    <sourcecode value="if self._scipyenWindow_ is None:&#xa;  return&#xa;&#xa;if self._docTitle_ is not None and self._docTitle_ in self._scipyenWindow_.workspace.keys():&#xa;  self.view(self._scipyenWindow_.workspace[self._docTitle_],title=self._docTitle_)&#xa;&#xa;" id="uO59isKHiKJKi"/>
    <sourcecode value="self.__use_matplotlib__=value&#xa;" id="ud0KDSayDn93D"/>
    <sourcecode value="self.setupUi(self)&#xa;self.fileMenu=self.menuBar().addMenu(&quot;&amp;File&quot;)&#xa;csvExportAction=self.fileMenu.addAction(&quot;&amp;Export As CSV...&quot;)&#xa;csvExportAction.triggered.connect(self.slot_exportAsCSVFile)&#xa;self.viewMenu=self.menuBar().addMenu(&quot;&amp;View&quot;)&#xa;resizeCandH_Action=self.viewMenu.addAction(&quot;Resize Columns And Rows to Content&quot;)&#xa;resizeCandH_Action.triggered.connect(self.slot_resizeAllColumnsAndRowsToContents)&#xa;self.plotMenu=self.menuBar().addMenu(&quot;&amp;Plot&quot;)&#xa;self.plotMenu.setToolTipsVisible(True)&#xa;self.plotMenu.setToolTip(&quot;Plot selected columns&quot;)&#xa;plot_Action=self.plotMenu.addAction(&quot;&amp;Plot&quot;)&#xa;plot_Action.triggered.connect(self.slot_plotSelectedColumns)&#xa;self.tableView.setModel(self._dataModel_)&#xa;self.tableView.horizontalHeader().setSectionsMovable(False)&#xa;self.tableView.horizontalHeader().setResizeContentsPrecision(0)&#xa;self.tableView.horizontalHeader().setContextMenuPolicy(QtCore.Qt.CustomContextMenu)&#xa;self.tableView.horizontalHeader().customContextMenuRequested[QtCore.QPoint].connect(self.slot_horizontal_header_context_menu_request)&#xa;self.tableView.verticalHeader().setSectionsMovable(False)&#xa;self.tableView.verticalHeader().setResizeContentsPrecision(0)&#xa;self.tableView.verticalHeader().setContextMenuPolicy(QtCore.Qt.CustomContextMenu)&#xa;self.tableView.verticalHeader().customContextMenuRequested[QtCore.QPoint].connect(self.slot_vertical_header_context_menu_request)&#xa;self.tableView.setAlternatingRowColors(True)&#xa;self.tableView.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)&#xa;self.tableView.customContextMenuRequested[QtCore.QPoint].connect(self.slot_table_context_menu_requested)&#xa;self.toolBar=QtWidgets.QToolBar(&quot;Main&quot;,self)&#xa;self.toolBar.setObjectName(&quot;TableEditor_Main_Toolbar&quot;)&#xa;refreshAction=self.toolBar.addAction(QtGui.QIcon(&quot;:/images/view-refresh.svg&quot;),&quot;Refresh&quot;)&#xa;refreshAction.triggered.connect(self.slot_refreshData)&#xa;self.addToolBar(self.toolBar)&#xa;" id="uTCHNPjfOVp26"/>
    <sourcecode value="evt.accept()&#xa;if evt.type()==QtCore.QEvent.WindowActivate:&#xa;  self.sig_activated.emit(self.winId())&#xa;  return True&#xa;&#xa;return super(TableEditor,self).event(evt)&#xa;" id="uLA4uIjDOIyMN"/>
    <sourcecode value="pass&#xa;" id="u5rCe5W5WcxDx"/>
    <sourcecode value="if isinstance(value,str)and len(value.strip())>0:&#xa;  self._winTitle_=value&#xa;&#xa;else:&#xa;  self._winTitle_=&quot;%s%d&quot;%(type(self).__name__,self.ID)&#xa;&#xa;if isinstance(self._docTitle_,str)and len(self._docTitle_.strip())>0:&#xa;  self.setWindowTitle(&quot;%s - %s&quot;%(self._winTitle_,self._docTitle_))&#xa;&#xa;else:&#xa;  self.setWindowTitle(self._winTitle_)&#xa;&#xa;" id="uGleblJ5WOyJ5"/>
    <sourcecode value="if isinstance(prefix,str)and len(prefix.strip()):&#xa;  self._winTitle_=prefix&#xa;&#xa;if isinstance(value,str)and len(value.strip()):&#xa;  self._docTitle_=value&#xa;  self.setWindowTitle(&quot;%s - %s&quot;%(self._winTitle_,self._docTitle_))&#xa;&#xa;else:&#xa;  self._docTitle_=&quot;&quot;&#xa;  self.setWindowTitle(self._winTitle_)&#xa;&#xa;" id="ukAQTq28ne84R"/>
    <sourcecode value="if self._data_ is None:&#xa;  return&#xa;&#xa;signalBlocker=QtCore.QSignalBlocker(self.tableView)&#xa;self._dataModel_.setModelData(self._data_)&#xa;" id="uaS8jUMsNTzgT"/>
    <sourcecode value="if isinstance(data,(type(None),pd.DataFrame,pd.Series,pd.Panel,np.ndarray)):&#xa;  self.tableView.setSortingEnabled(False)&#xa;  if isinstance(data,(pd.DataFrame,pd.Series)):&#xa;    self.nFrames=1&#xa;    self.frameNo=0&#xa;&#xa;  elif isinstance(data,pd.Panel):&#xa;    QtWidgets.QMessageBox.warning(self,&quot;Table Editor&quot;,&quot;pandas.Panels are not supported.\nPlease use xarray (not yet implemented)&quot;)&#xa;    return&#xa;&#xa;  elif isinstance(data,np.ndarray):&#xa;    if data.ndim&lt;=2:&#xa;      self.nFrames=1&#xa;      self.frameNo=0&#xa;&#xa;    elif data.ndim==3:&#xa;      self.nFrames=data.shape[2]&#xa;      if not isinstance(dataframe,int):&#xa;        raise TypeError(&quot;DataFrame expected to be an int; got %s instead&quot;%type(dataframe).__name__)&#xa;&#xa;      if dataframe&lt;0 or dataframe>=self.nFrames:&#xa;        raise ValueError(&quot;dataframe expected to be in the interval [0, %d); got %d instead&quot;%(data.shape[2],dataframe))&#xa;&#xa;      self.frameNo=dataframe&#xa;&#xa;    else:&#xa;      raise ValueError(&quot;Cannot view numpy arrays with more than three dimensions; data has %d dimensions&quot;%data.ndim)&#xa;&#xa;&#xa;  self._data_=data&#xa;  self._viewData()&#xa;  if docTitle is None or not isinstance(docTitle,str):&#xa;    if isinstance(dataname,str)and len(dataname.strip())>0:&#xa;      self._docTitle_=dataname&#xa;&#xa;    else:&#xa;      if isinstance(self._data_,pd.Series):&#xa;        self._docTitle_=self._data_.name&#xa;&#xa;      else:&#xa;        dataVarName=&quot;&quot;&#xa;        if self._scipyenWindow_ is not None:&#xa;          for(k,v)in self._scipyenWindow_.workspace.items():&#xa;            if not type(v).__name__ in(&quot;module&quot;,&quot;type&quot;,&quot;function&quot;,&quot;builtin_function_or_method&quot;):&#xa;              if v is data and not k.startswith(&quot;_&quot;):&#xa;                dataVarName=k&#xa;&#xa;&#xa;&#xa;&#xa;        if len(dataVarName.strip())==0:&#xa;          cframe=inspect.getouterframes(inspect.currentframe())[1][0]&#xa;          try:&#xa;            for(k,v)in cframe.f_globals.items():&#xa;              if not type(v).__name__ in(&quot;module&quot;,&quot;type&quot;,&quot;function&quot;,&quot;builtin_function_or_method&quot;):&#xa;                if v is data and not k.startswith(&quot;_&quot;):&#xa;                  dataVarName=k&#xa;&#xa;&#xa;&#xa;&#xa;          finally:&#xa;            del(cframe)&#xa;&#xa;&#xa;        if len(dataVarName.strip())>0:&#xa;          self._docTitle_=dataVarName&#xa;&#xa;&#xa;&#xa;&#xa;  else:&#xa;    self._docTitle_=docTitle&#xa;&#xa;  if isinstance(self._winTitle_,str)and len(self._winTitle_.strip())>0:&#xa;    if isinstance(self._docTitle_,str)and len(self._docTitle_.strip())>0:&#xa;      self.setWindowTitle(&quot;%s - %s&quot;%(self._winTitle_,self._docTitle_))&#xa;&#xa;    else:&#xa;      self.setWindowTitle(self._winTitle_)&#xa;&#xa;&#xa;&#xa;else:&#xa;  raise TypeError(&quot;data expected to be one of %s; got %s instead&quot;%(print((type(None),pd.DataFrame,pd.Series,np.ndarray)),type(data)))&#xa;&#xa;if show:&#xa;  self.show()&#xa;&#xa;" id="uq1xws9tCTb9n"/>
    <sourcecode value="if self._data_ is None:&#xa;  return&#xa;&#xa;targetDir=os.getcwd()&#xa;if len(self._docTitle_.strip()):&#xa;  targetDir=os.path.join(targetDir,&#xa;  self._docTitle_)+&quot;.csv&quot;&#xa;print(targetDir)&#xa;filePath,_=QtWidgets.QFileDialog.getSaveFileName(self,&#xa;caption=&quot;Save CSV Document&quot;,directory=targetDir,filter=&quot;CSV files (*.csv)&quot;)if len(filePath)>0:&#xa;  pio.writeCsv(self._data_,filePath)&#xa;&#xa;QtWidgets.QApplication.setOverrideCursor(self._defaultCursor)&#xa;" id="uduJUCZgsCYC6"/>
    <sourcecode value="signalBlockers=[QtCore.QSignalBlocker(v)for v in(self.tableView.horizontalHeader(),self.tableView.verticalHeader())]&#xa;self.tableView.horizontalHeader().resizeSections(QtWidgets.QHeaderView.ResizeToContents)&#xa;self.tableView.verticalHeader().resizeSections(QtWidgets.QHeaderView.ResizeToContents)&#xa;" id="ukeix6WL7jJ2E"/>
    <sourcecode value="signalBlockers=[QtCore.QSignalBlocker(v)for v in(self.tableView.horizontalHeader(),self.tableView.verticalHeader())]&#xa;self.tableView.horizontalHeader().resizeSections(QtWidgets.QHeaderView.ResizeToContents)&#xa;" id="uJoVTJfhZyy6B"/>
    <sourcecode value="signalBlockers=[QtCore.QSignalBlocker(v)for v in(self.tableView.horizontalHeader(),self.tableView.verticalHeader())]&#xa;self.tableView.verticalHeader().resizeSections(QtWidgets.QHeaderView.ResizeToContents)&#xa;" id="uvClKe1eow1qU"/>
    <sourcecode value="'''Plot table selection;NOTE:2019-09-06 10:30:36&#xa;We default to matplotlib plotting.&#xa;TODO implement pyqtgraph plotting as alternative&#xa;''';if type(self._scipyenWindow_).__name__!=&quot;ScipyenWindow&quot;:&#xa;  return&#xa;&#xa;modelIndexes=self.tableView.selectedIndexes()&#xa;self.__plot_model_data__(modelIndexes,custom=False)&#xa;" id="unOVkzDZ7Uhun"/>
    <sourcecode value="if type(self._scipyenWindow_).__name__!=&quot;ScipyenWindow&quot;:&#xa;  return&#xa;&#xa;modelIndexes=self.tableView.selectedIndexes()&#xa;self.__plot_model_data__(modelIndexes,custom=True)&#xa;" id="uG7QaPYGGos6H"/>
    <sourcecode value="if len(modelIndexes)==0:&#xa;  return&#xa;&#xa;(ndx_k,ndx_rows,ndx_columns)=[k for k in zip(*[(k,ndx.row(),ndx.column())for k,ndx in enumerate(modelIndexes)])]&#xa;selected_column_indices=unique(ndx_columns)&#xa;n_columns=len(selected_column_indices)&#xa;model_index_list=list()&#xa;for column in selected_column_indices:&#xa;  column_index=[kc for kc,c in enumerate(ndx_columns)if c==column]&#xa;  column_model_list=[modelIndexes[ndx_k[k]]for k in column_index]&#xa;  sorted_column_model_list=sorted(column_model_list,key=lambda x:x.row())&#xa;  model_index_list.append(sorted_column_model_list)&#xa;&#xa;if len(model_index_list)==0:&#xa;  return&#xa;&#xa;if not all([len(l)==len(model_index_list[0])for l in model_index_list]):&#xa;  return&#xa;&#xa;column_headers=[&quot;%s&quot;%self._dataModel_.__getHeaderData__(k,QtCore.Qt.Horizontal).value()for k in selected_column_indices]&#xa;data=list()&#xa;nan=np.nan&#xa;for l in model_index_list:&#xa;  column_data=np.array([string_to_float(&quot;%s&quot;%self._dataModel_.__getModelData__(ndx.row(),ndx.column()).value())for ndx in l],dtype=&quot;float64&quot;)&#xa;  data.append(column_data)&#xa;&#xa;fig=self._scipyenWindow_._newMatplotLibFigure()&#xa;fig=self._scipyenWindow_.__register_viewer_window__(fig,name=self._docTitle_)&#xa;plt.figure(fig.number)&#xa;if len(data)==1:&#xa;  plt.plot(data[0])&#xa;  plt.gca().set_ylabel(column_headers[0])&#xa;&#xa;else:&#xa;  if custom:&#xa;    pass&#xa;&#xa;  else:&#xa;    plot_data=np.concatenate([np.atleast_2d(d).T for d in data],axis=1)&#xa;    lines=plt.plot(plot_data)&#xa;&#xa;&#xa;" id="uBIJSJGKgE4r2"/>
    <sourcecode value="return self.__use_matplotlib__&#xa;" id="u869JzwIB59ge"/>
    <sourcecode value="if not isinstance(value,bool):&#xa;  raise TypeError(&quot;Expecting a bool scalar; got %s instead&quot;%type(value).__name__)&#xa;&#xa;self.__use_matplotlib__=value&#xa;" id="uBq7zXUQ1LIMf"/>
    <sourcecode value="return self.nFrames&#xa;" id="uEWOl3wOFFkGy"/>
    <sourcecode value="cm=QtWidgets.QMenu(&quot;Cell menu&quot;,self.tableView)&#xa;copySelectedAction=cm.addAction(&quot;Copy&quot;)&#xa;copySelectedAction.triggered.connect(self.slot_copySelection)&#xa;cm.popup(self.tableView.mapToGlobal(pos),copySelectedAction)&#xa;" id="uAKrdon5lR6RS"/>
    <sourcecode value="modelIndexes=self.tableView.selectedIndexes()&#xa;selected_text=list()&#xa;previous=modelIndexes[0]&#xa;selected_text.append(str(self._dataModel_.data(previous).value()))&#xa;for modelIndex in modelIndexes[1:]:&#xa;  data=str(self._dataModel_.data(modelIndex).value())&#xa;  if modelIndex.row()!=previous.row():&#xa;    selected_text.append(&quot;\n&quot;)&#xa;&#xa;  elif modelIndex.column()!=previous.column():&#xa;    selected_text.append(&quot;\t&quot;)&#xa;&#xa;  selected_text.append(data)&#xa;  previous=modelIndex&#xa;&#xa;QtGui.QGuiApplication.clipboard().setText(&quot;&quot;.join(selected_text))&#xa;" id="u3pO5zfOZTNoC"/>
    <sourcecode value="if not isinstance(self.selectedColumnIndex,int):&#xa;  return&#xa;&#xa;signalBlocker=QtCore.QSignalBlocker(self.tableView.horizontalHeader())&#xa;if len(self.tableView.selectionModel().selectedColumns())>1:&#xa;  col_indices=[ndx.column()for ndx in self.tableView.selectionModel().selectedColumns()]&#xa;  for ndx in col_indices:&#xa;    sizeHint=max([self.tableView.sizeHintForColumn(ndx),self.tableView.horizontalHeader().sectionSizeHint(ndx)])&#xa;    self.tableView.horizontalHeader().resizeSection(ndx,sizeHint)&#xa;&#xa;&#xa;else:&#xa;  sizeHint=max([self.tableView.sizeHintForColumn(self.selectedColumnIndex),self.tableView.horizontalHeader().sectionSizeHint(self.selectedColumnIndex)])&#xa;  self.tableView.horizontalHeader().resizeSection(self.selectedColumnIndex,sizeHint)&#xa;&#xa;" id="uefLKEqYNMvpA"/>
    <sourcecode value="if not isinstance(self.selectedRowIndex,int):&#xa;  return&#xa;&#xa;signalBlocker=QtCore.QSignalBlocker(self.tableView.verticalHeader())&#xa;if len(self.tableView.selectionModel().selectedRows())>1:&#xa;  row_indices=[ndx.row()for ndx in self.tableView.selectionModel().selectedColumns()]&#xa;  for ndx in row_indices:&#xa;    sizeHint=max([self.tableView.sizeHintForRow(ndx),self.tableView.verticalHeader().sectionSizeHint(ndx)])&#xa;    self.tableView.verticalHeader().resizeSection(ndx,sizeHint)&#xa;&#xa;&#xa;else:&#xa;  sizeHint=max([self.tableView.sizeHintForRow(self.selectedRowIndex),self.tableView.verticalHeader().sectionSizeHint(self.selectedRowIndex)])&#xa;  self.tableView.verticalHeader().resizeSection(self.selectedRowIndex,sizeHint)&#xa;&#xa;" id="uuEdfaUVNCuHT"/>
    <sourcecode value="self.selectedColumnIndex=self.tableView.columnAt(pos.x())&#xa;cm=QtWidgets.QMenu(&quot;Column Menu&quot;,self.tableView)&#xa;copyColumnTitleAction=cm.addAction(&quot;Copy column name&quot;)&#xa;copyColumnTitleAction.triggered.connect(self.slot_copyColumnName)&#xa;resizeColumnToContentsAction=cm.addAction(&quot;Resize to contents&quot;)&#xa;resizeColumnToContentsAction.triggered.connect(self.slot_resizeSelectedColumnsToContents)&#xa;resizeAllColumsToContextAction=cm.addAction(&quot;Resize All Columns To Contents&quot;)&#xa;resizeAllColumsToContextAction.triggered.connect(self.slot_resizeAllColumnsToContents)&#xa;cm.exec(self.tableView.mapToGlobal(pos))&#xa;" id="uzGnXTcMDZjJj"/>
    <sourcecode value="self.selectedRowIndex=self.tableView.rowAt(pos.x())&#xa;cm=QtWidgets.QMenu(&quot;Row Menu&quot;,self.tableView)&#xa;copyColumnTitleAction=cm.addAction(&quot;Copy row name&quot;)&#xa;copyColumnTitleAction.triggered.connect(self.slot_copyRowName)&#xa;resizeRowToContentsAction=cm.addAction(&quot;Resize to contents&quot;)&#xa;resizeRowToContentsAction.triggered.connect(self.slot_resizeSelectedRowsToContents)&#xa;resizeAllRowsToContextAction=cm.addAction(&quot;Resize All Rows To Contents&quot;)&#xa;resizeAllRowsToContextAction.triggered.connect(self.slot_resizeAllRowsToContents)&#xa;cm.exec(self.tableView.mapToGlobal(pos))&#xa;" id="uLjFbfRCakHc4"/>
    <sourcecode value="if not isinstance(self.selectedColumnIndex,int):&#xa;  return&#xa;&#xa;columnName=self.tableView.model().headerData(self.selectedColumnIndex,QtCore.Qt.Horizontal).value()&#xa;QtWidgets.QApplication.instance().clipboard().setText(columnName)&#xa;" id="unEJd7tCmdDVb"/>
    <sourcecode value="if not isinstance(self.selectedRowIndex,int):&#xa;  return&#xa;&#xa;rowName=self.tableView.verticalheaderItem(self.selectedRowIndex).text()&#xa;QtWidgets.QApplication.instance().clipboard().setText(rowName)&#xa;" id="ua8cpuqTJNK23"/>
    <sourcecode value="col=item.column()&#xa;row=item.row()&#xa;value=item.text()&#xa;if isinstance(self._data_,pd.DataFrame):&#xa;  colHeaderText=self.tableView.horizontalHeaderItem(col).text()&#xa;  if colHeaderText not in self._data_.columns:&#xa;    raise RuntimeError(&quot;%s not found in data columns!&quot;%colHeaderText)&#xa;&#xa;  columnDType=self._data_[colHeaderText].dtype&#xa;  if np.can_cast(eval(value),columnDType):&#xa;    if columnDType==np.dtype(&quot;bool&quot;):&#xa;      if value.lower().strip()in(&quot;true, t, 1&quot;):&#xa;        value=&quot;True&quot;&#xa;&#xa;      elif value.lower().strip()in(&quot;false, f, 0&quot;):&#xa;        value=False&#xa;&#xa;&#xa;    data_value=np.array(eval(value),dtype=columnDType)&#xa;    self._data_.loc[self._data_.index[row],colHeaderText]=data_value&#xa;&#xa;  else:&#xa;    raise RuntimeError(&quot;cannot cast %s to %s&quot;%(value,columnDType))&#xa;&#xa;&#xa;elif isinstance(self._data_,pd.Series):&#xa;  dataDType=self._data_.dtype&#xa;  if np.can_cast(eval(value),dataDType):&#xa;    data_value=np.array(eval(value),dtype=dataDType)&#xa;    self._data_.loc[self._data_.index[row]]=data_value&#xa;&#xa;&#xa;elif isinstance(self._data_,np.ndarray):&#xa;  dataDType=self._data_.dtype&#xa;  if np.can_cast(eval(value),dataDType):&#xa;    data_value=np.array(eval(value),dtype=dataDType)&#xa;    if self._data_.ndim==3:&#xa;      self._data_[row,col,self.frameNo]=data_value&#xa;&#xa;    elif self._data_.ndim==2:&#xa;      self._data_[row,col]=data_value&#xa;&#xa;    elif self._data_.ndim==1:&#xa;      self._data_[row]=data_value&#xa;&#xa;&#xa;  else:&#xa;    raise RuntimeError(&quot;cannot cast %s to %s&quot;%(value,dataDType))&#xa;&#xa;&#xa;" id="uCLK63Nz8w2oO"/>
    <sourcecode value="return self._ID&#xa;" id="umQXc61vDPI5A"/>
    <sourcecode value="self._ID=val&#xa;" id="uojmfVPL9v7OT"/>
    <sourcecode value="super(ComboBoxDelegate,self).__init__(parent)" id="uPtgVv96TLs0U"/>
   </codegenerator>
  </codegeneration>
 </XMI.extensions>
</XMI>
