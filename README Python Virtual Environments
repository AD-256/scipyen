1. Create a virtual Python3 environment.

Because Scipyen relies on may third party python packages and modules, it is best
run from a virtual python environment.

Create a directory to host your scipyen-specific virtual environment e.g.
$HOME/scipyen-venv.
    
    user@host:~> python3 -m venv scipyen-venv 
    
NOTE 1: this approach does not seem to work well (openSUSE >= Leap 15.1):
        
Error: Command '['/home/cezar/scipyen-venv/bin/python3', '-Im', 'ensurepip', 
                 '--upgrade', '--default-pip']' returned non-zero exit status 1

While "python3 -m venv" is the official recommended way to create a python
virtual environment, the error above is very frustrating.

Until I can find a consistent solution to this, a convenient alternative is to 
use virtualenv (in openSUSE, install the package python3-virtualenv).

Create a virtual environment in a directory in your $HOME directory, to host your
scipyen-specific environment:
    
    user@host:~> virtualenv -p /usr/bin/python3 scipyen-virtualenv
    
NOTE 2: On one of my machines, I needed to specify which python interpreter to use
(" -p /usr/bin/python3 "); I guess is nothing wrong with preempting that on any
machine.

NOTE 3: Avoid passing " --system-site-packages" - the system-installed pip may
prevent the installation of python packages in the newly created environment, 
trying instead to place then in the system's site-packages, or in your local
site-packages (when " --user " option is passed to pip); in both cases this 
defeats the purpose of using a virtual environment.

 user@host~/> cd scipyen-virtualenv
 user@host~/scipyen-virtualenv> source bin/activate
 (scipyen-virtualenv) user@host:~/scipyen-virtualenv> # you're using the virtual environment now
 (scipyen-virtualenv) user@host:~/scipyen-virtualenv> deactivate
 user@host~/scipyen-virtualenv> # you're out of the virtual environment
 
 # You now have a barebones python virtual environment
 
 ------------------------------------------------------
 
 2. Install the rerquired python packages:
     
 2.1 activate the virtual environment:
     
    user@host~/> cd scipyen-virtualenv
    user@host~/scipyen-virtualenv> source bin/activate
    (scipyen-virtualenv) user@host:~/scipyen-virtualenv> # you're using the virtual environment now

 2.2 install packages (call "pip install xxx"; avoid "--user" option, so that the 
                       packagesare installed in the virtual "system" enviornment)
 
    xxx is (note this will also install yyy depedencies of xxx as mentioned below):
        
    Package         Dependencies                
                    (installed alongside)
    --------------------------------------------
        pyqt5       
        sip         toml                        
        jupyter     ipython, traitlets, zmq,...
        qtconsole
        pyqtgraph
        pywavelets
        matplotlib
        numpy
        quantities
        neo
        scipy
        sympy       mpmath
        pandas      pytz
        seaborn  
        statsmodels patsy
        pingouin    scikit-learn
        researchpy
        h5py
        nose                                    
        sphinx      (...)                       
        vigra -- DO NOT INSTALL USING PIP; 
              -- build and install vigra manually, instead -- see README vigra
              -- in this directory
        qimage2ndarray
        imreg_dft                               
        xarray  
        pyxdg
        pythod-magic -- Python interface to the libmagic file type identification library
        
        
        
 2.3 build and install vigra --  see READMe vigra in this directory
 
    * using cmake, make sure you point to installation directories located INSIDE
    scpiyen-virtualenv directory tree


 2.4 Platform-wide Qt styles may not be available to the Pyqt5 installed in the 
 virtual environment - you need to make Qt style plugins available to the 
 virtual python environment.
 
 NOTE: to find out the location of machine-wide (system-wide) Qt plugins, in a
 NORMAL shell run the following command:
     
 python -c "from PyQt5 import QtCore; print(QtCore.QLibraryInfo.location(QtCore.QLibraryInfo.PluginsPath))"
 
 And to find out the styles:
     
 python -c "import os; from PyQt5 import QtCore; print(os.path.join(QtCore.QLibraryInfo.location(QtCore.QLibraryInfo.PluginsPath), 'styles'))"
     
 
 Typically, the platform-wide Qt styles would be at: /usr/lib64/qt5/plugins/styles
 
 Then to find out where the style plugins SHOULD be located inside the environment, 
 run the same command as above in a shell AFTER the environment has been activated.
 
 Typically, the style plugins for the Pyqt5 installed in the virtual environment
 should be at (where "user" is your actual account name):
     /home/user/scipyen-virtualenv/lib/python3.6/site-packages/PyQt5/Qt/plugins/styles
 
 You may find that the "styles" subdirectory of the Qt plugins location in the PyQt5
 tree installed in the environment is missing.
 
 In this case you will have to create a symbolic link from the platform-wide Qt 
 style plugins directory to the environment-specific Qt styles plugin directory.
 
    1. from "inside" the activated environment save the destination to a one-line
        text file in the current directory.
        
        if environment is not activated, run:
             
        user@host:>source path/to/virtual/environment/bin/activate
        
        the shell's prompt becomes something like:
            
        (path/to/virtual/environment) user@host:~>
        
        cd into the environment's top directory:
            
        cd path/to/virtual/environment
        
        the shell prompt becomes something like:
            
        (path/to/virtual/environment) user@host:~/path/to/virtual/environment>
    
        write the destination location path to a one-line text file (let's call
        it 'stylespath'):
        
        (path/to/virtual/environment) user@host:~/path/to/virtual/environment> python -c "`import os; from PyQt5 import QtCore; print(os.path.join(QtCore.QLibraryInfo.location(QtCore.QLibraryInfo.PluginsPath), 'styles'))" > stylepath
        
        verify the output contents:
            
        (path/to/virtual/environment) user@host:~/path/to/virtual/environment> cat stylespath
        --> outputs:
            
            path/to/virtual/environment/lib/python3.6/site-packages/PyQt5/Qt/plugins/styles
 
    2. from "outside" the environment save the path of the "target" system-wide 
        Qt styles plugins directory, to a one-line text file in the same current
        directory.
        
        deactivate the environment first (if the shell is still "inside" the active
        environment):
        
        (path/to/virtual/environment) user@host:~/path/to/virtual/environment> deactivate
        
        the shell's prompt should become something like:
            
        user@host:~/path/to/virtual/environment>   
        
        then assuming you're still in the environment's top directory, 
        (otherwise, change directory to get there) save the location of system-wide
        style plugins to another file:
        
        user@host:~/path/to/virtual/environment> python -c "`import os; from PyQt5 import QtCore; print(os.path.join(QtCore.QLibraryInfo.location(QtCore.QLibraryInfo.PluginsPath), 'styles'))" > systemstylepath
        
        verify the output:
            
        user@host:~/path/to/virtual/environment> cat systemstylespath
        --> outputs: /usr/lib64/qt5/plugins/styles
        
    You now need to make a symbolic link from the path contained in 'systemstylespath'
    (the "target") to the "link name" (i.e., the destination), contained in 'stylespath':
        
        user@host:~/path/to/virtual/environment> ln -s -T $(cat systemstylespath) $(cat stylespath)
        
    Explanation:
        ln = the GNU core utility to create file links
        -s = the option to ln, to create a symbolic link (recommended for various
                                                          reasons)
        -T = treats the destination as a "file" in itself (otherwise it would
                require you to link every file inside the destination)
        
        $(cat systemstylespath) = the "target" -- this in fact is a shell
        substitution: the "target" of 'ln' is the content of the file 'systemstylespath'
        output by calling 'cat'
        
        $(cat stylespath) = the "linkname" -- another shell substitution: the 
        "linkname" is the content of the file 'stylespath' output by calling 'cat'
        
        
        
    Now reactivate the environment:
        
        user@host:~/path/to/virtual/environment> source bin/activate
        
     
 
