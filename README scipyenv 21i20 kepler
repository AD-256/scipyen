Last modified 2021-10-05 18:18:50

To build on a Python build from sources (e.g. 3.9.7) -> installed in 
/usr/local

see src/Building python

activate the environment

NOTE you need to build boost_1_77_0 form sources

On Linux :
    ./booststrap.sh --prefix=$VIRTUAL_ENV --with-python=/usr/local/bin/python3.9 --with-python-root=/usr/local
    ./b2 --prefix=$VIRTUAL_ENV --with-python=/usr/local/bin/python3.9 --with-python-root=/usr/local





Last modified 2021-09-20 10:07:27


On Kepler:
    For the latest ipython/jupyter create a virtualenv using python >= 3.7!!!
    
    Meanwhile, for python < 3.7 there are some oustanding issue:
        
        1) with jedi:
        
            must install
            
            pip install jedi==0.17.2
            
        2) with inprocess kernel: the following issue raises exceptions (printed
        on stderr) but does NOT seem to affect the functionality of the external 
        console
        
tornado.application - ERROR - Exception in callback functools.partial(<bound 
method Kernel.enter_eventloop of <ipykernel.inprocess.ipkernel.InProcessKernel 
object at 0x7fe018246d30>>) Traceback (most recent call last): File 
"/home/cezar/scipyenv/lib/python3.6/site-packages/tornado/ioloop.py", line 741, 
in _run_callback ret = callback() File 
"/home/cezar/scipyenv/lib/python3.6/site-packages/ipykernel/kernelbase.py", line 
324, in enter_eventloop schedule_next() File 
"/home/cezar/scipyenv/lib/python3.6/site-packages/ipykernel/kernelbase.py", line 
321, in schedule_next self.io_loop.call_later(1, advance_eventloop) 
AttributeError: 'InProcessKernel' object has no attribute 'io_loop'
            
        Furthermore the issue only appears when the external console is initialized
        for the FIRST time.
        
        Interestingly, the external console DOES NOT use an inprocess kernel. It
        is the ScipyenConsoleWidget that does!
            
        The immediate reason is that the inprocess kernels don't have an 'io_loop' 
        attribute anymore.
        
        The NOTE: 2021-09-21 14:22:58 in ScipyenConsoleWidget has a possible
        workaround. However, while this helps the code to get through the 
        io_loop.call_later(), it exposes the subsidiary issue that the 
        'shell_streams' attribute of an inprocess kernel is always empty, causing:
                
tornado.application - ERROR - Exception in callback functools.partial(<function 
Kernel.enter_eventloop.<locals>.advance_eventloop at 0x7f276842b7b8>) Traceback 
(most recent call last): File 
"/home/cezar/scipyenv/lib/python3.6/site-packages/tornado/ioloop.py", line 741, 
in _run_callback ret = callback() File 
"/home/cezar/scipyenv/lib/python3.6/site-packages/ipykernel/kernelbase.py", line 
307, in advance_eventloop eventloop(self) File 
"/home/cezar/scipyenv/lib/python3.6/site-packages/ipykernel/eventloops.py", line 
130, in loop_qt5 return loop_qt4(kernel) File 
"/home/cezar/scipyenv/lib/python3.6/site-packages/ipykernel/eventloops.py", line 
121, in loop_qt4 _notify_stream_qt(kernel, kernel.shell_streams[0]) IndexError: 
list index out of range
            
    I cannot find a workaround yet, for this subsidiary issue.
    
    On questions is why launching the external console triggers the above code
    inside the inprocess kernel of the internal (Scipyen) console?
        
    
        
    To (re)create a virtualenv with a more recent python3:
        

================================================================================

This file describes how to install scipyen and its dependencies in a virtual
environment (python3), independent of the system or local (i.e. "user") python
site packages.

The advantage of a virtual environment include the possibility of installing
build software directly in this environment (without administrator privileges,
and without interfering with system-wide or account-wide software).

This means the software can be uninstalled re-built, etc, without worrying about
the local account or system-wide interference.

Requires ~ 1 GiB in home directory (including source trees, see below)

Prerequisites:
--------------
a. For creating the virtual environment:
python3, python3-virtualenv, python3-virtualenvwrapper (optional) toml, setuptools, pip3, wheel

b. The following software must be built inside the virtual environment (see
    NOTE 2021-01-12 10:13:03 Separate builds, below):
    1. sip
    2. Pyqt5 - built using the host system's Qt5, but without the designer and 
        qml plugins, and without the qscintila component.
    3. PyQt5.sip module
    4. vigra and python bindings for vigra (vigranumpy)
    5. NEURON modelling software with python bindings
    

NOTE 2021-01-12 10:13:03 Separate builds
------------------------------------------
The source directories DO NOT need to be located inside the directory of the
virtual python environment; they can be placed in a source repository separate
from the environment itself, e.g. ~/scipyenv/src or ~/scipyenv-src.

However, both the build and installation processes MUST be run from a shell
with the virtual python environment activated (see points 1.2 and 1.3, below).

By separating source and environment directories the source packages can be
re-built for specific environments. 

NOTE: 2021-01-14 09:02:07 Variations for individual software libraries:
------------------------------------------------------------------------

    *** Vigra and neuron software ***

        These can be built "outside" the source directories (i.e. in build 
        directories outside the source tree).

        Out-of-source builds are recommended for both vigra and neuron. The
        build processes are run from inside the build directories as detailed for 
        Vigra (section 4) and NEURON (section 5) below. 

        - The builds are configured using 'cmake' or 'cmake-gui'.

        - 'make' performs the building (compiling and linking) of the software;

        - 'make install' will install the software in the environment directory 
        tree as per configuration as explained in sections 4 and 5.

        Other optional commands are explained in sections 4 and 5.

        NOTE 2021-01-12 11:15:51: all git repositories cloned below can be
        refreshed (e.g. git checkout master then git pull) followed by 
        rebuilding & installing

    *** sip, PyQt5, PyQt5_sip module and node ***
        These do not seem to support out-of-source builds. They must be unpacked
        in the src directory and built INSIDE the resulting subdirectory.

  1. Create Python 3 virtual environment
  ======================================
  
  1.1 Prerequisites and shell command:
  ------------------------------------
  
  shell command (assumes the python3, and NOT the python2 version of virtualenv
                 is installed on the system):
      
  #virtualenv --system-site-packages scipyenv
  
  NOTE: 2021-09-20 10:30:23 Do NOT use system packages
  virtualenv --p python3 scipyenv #(do NOT use system packages)
  
  # make relocatable WARNING only avaliable for legacy <20.0 versions of virtualenv
  virtualenv --relocatable scipyenv
  
  # for more recent virtualenv versions (>= 20.0):
      pip install --user virtualenv-make-relocatable
      
  # then
    virtualenv-make-relocatable scipyenv
  
  
  1.2 Activate the virtual environment --  everything below MUST be run under
  the activated virtual python environment
  ------------------------------------------------------------------------------
  cd scipyenv
  source bin/activate
  
  1.3 (Optional) make an activation command alias:
  -------------------------------------------------
      
      in ~/.bashrc enter the following line:
          
          alias scipyact='source $HOME/scipyenv/bin/activate'
          
    Then, to activate the scipyenv environment just type 'scipyact' command
    in the shell.
    
  The active environment will be indicated by its name in parantheses before the
  normal shell prompt, e.g.:
      
      (scipyenv) user@Host:~>
  
  NOTE: While the scipyen environment is active, it can be deactivated with the 
  'deactivate' shell command
  
  1.4 Create directories for source code
  --------------------------------------
  
  As per NOTE 2021-01-12 10:13:03 Separate builds and 
  NOTE: 2021-01-14 09:02:07 Variations for individual software libraries, the
  directory tree used in this README is as follows:
  
  $HOME
        |
        -- scipyenv
                    |
                    -- bin
                    |
                    -- include
                    |
                    -- lib
                    |
                    -- lib64 (symbolic link to $HOME/scipyenv/lib)
                    |
                    -- nrnipython
                    |
                    -- scipyen (the scipyen git repository)
                    |
                    -- scipyen_boilerplate
                    |
                    -- scipyen_not_staged
                    |
                    -- src
                        |
                        -- nrn (github clone, done by git )
                        |
                        -- nrn-build   
                        |
                        -- vigra (github clone, done by git)
                        |
                        -- vigra-build
                        |
                        -- sipxxx
                        |
                        -- PyQt5xxx
                        |
                        -- PyQt5_sipxxx
        
    * the src directory inside the environment tree contains cloned git repositories
    and directories for out-of-source build of 3rd party software, see the README
    file in there
    
  2. Install sip, PyQt5 and PyQt5.sip module
  ===============================================
  
  2.1 Download sources, build and install sip, PyQt5 and PyQt5.sip modules
  ------------------------------------------------------------------------
  NOTE: check on the Riverbank computing website:
  https://riverbankcomputing.com/software/sip/download
  and
  https://riverbankcomputing.com/software/pyqt/download
  
  before using wget - the versions available may not be the same as in the
  examples below
  
  Examples:
  sip v 5 (latest before PyQt6, which is in development for Qt6):
  wget 'https://www.riverbankcomputing.com/static/Downloads/sip/sip-5.5.1.dev2011271026.tar.gz'
  
  WARNING: 2021-01-11 16:43:23:
      sip5.5.1 has been removed form the Riverbank Computing SIP download page.
      The most recent version is sip6.0.1. However, the build of PyQt5 with sip6
      installed fails. Therefore, TO BUILD PYQT5 USE SIP5.X ARCHIVE ALREADY 
      DOWNLOADED HERE.
    
      TODO: build sip6 and PyQt6 and check Scipyen still works - expect disruption
      in 3rd party packages such as Jupyter qt console, etc. For the moment stick
      with PySt5/sip5.5.1
      
  PyQt5 but see WARNING: 2021-01-11 16:43:23:
  wget 'https://www.riverbankcomputing.com/static/Downloads/PyQt5/PyQt5-5.15.3.dev2012141313.tar.gz'
  
  Pyqt5 sip extension module: 
  download source tar.gz archive from PyPI web site https://pypi.org/project/PyQt5-sip/
  
  Example (NOTE: 2021-01-11 18:07:03: best downloded manually from the above site)
  wget 'https://files.pythonhosted.org/packages/73/8c/c662b7ebc4b2407d8679da68e11c2a2eb275f5f2242a92610f6e5024c1f2/PyQt5_sip-12.8.1.tar.gz'
  
  2.2.1 Build sip
  ...............
  tar xzvf sip-5.5.1.dev2011271026.tar.gz
  cd sip-5.5.1.dev2011271026/
  
  python setup.py build
  python setup.py install
  
  2.2.2 Build PyQt5
  ...................
  
  NOTE: This requires a systenm-wide installation of the Qt5 developer packages
  and their dependencies (qmake, build chain, etc)
  
  WARNING: 2021-01-11 17:50:54 see WARNING: 2021-01-11 16:43:23 :
    Requires sip5.5.1; fails to build if sip6.0.1 is installed.

  cd ..
  tar xzvf PyQt5-5.15.3.dev2012141313.tar.gz
  cd PyQt5-5.15.3.dev2012141313
  
  # python configure.py --qmake=`which qmake-qt5` --no-designer-plugin --no-qml-plugin --no-qsci-api --no-python-dbus
  
  # NOTE: 
  # QT_INSTALL_PLUGINS resolves to /usr/lib64/qt5/plugins
  # QT_INSTALL_DATA resolves to /usr/share/qt5
  # therefore the designer plugin dir, qml plugin dir and qsci api dir must be manually
  # mentioned
  # By default these are:
      --designer-plugindir=QT_INSTALL_PLUGINS/designer
      --qml-plugindir=QT_INSTALL_PLUGINS/PyQt5
      --qsci-api-destdir=QT_INSTALL_DATA/qsci
  #
  # Replace
  # QT_INSTALL_PLUGINS with $VIRTUAL_ENV/lib/qt5/plugins/
  # QT_INSTALL_DATA with $VIRTUAL_ENV/share/qt5
  
  #NOTE: 2021-09-20 11:08:31 the line below seems to be working at configuration stage
  python configure.py --confirm-license --qmake=`which qmake-qt5` --designer-plugindir=$VIRTUAL_ENV/lib/qt5/plugins/designer --qml-plugindir=$VIRTUAL_ENV/lib/qt5/plugins/PyQt5 --qsci-api-destdir=$VIRTUAL_ENV/share/qt5 --no-python-dbus
  
  python dbus bindings are skipped because they tend to be installed in a system directory
  
  # NOTE: installation fails when the installer script tries to install the 
   designer, qml plugins smd python dbus extension in the system-wide Qt5 
   installation (but without root privileges) -- hence these are all disabled
  
  (enter 'yes' to accept the license)
  
  make # (... be prepared to wait ...)
  make install
  
  2.2.3 Build Pyqt5.sip module
  .............................
  cd ..
  tar xzvf PyQt5_sip-12.8.1.tar.gz
  cd PyQt5_sip-12.8.1/
  
  python setup.py build
  python setup.py install
  
  pip show PyQt5-sip <-- veryfies that PyQt5 sip module is installed
  
  3. Build and install Node.js in the local virtual environment
  -----------------------------------------------------------------------
  (required to use bokeh with jupyterlab)
  
  3.1 Download Node.js source code archive from https://nodejs.org/en/download/current/
  
  --> node-v15.6.0.tar.gz
  
  
  cd ~/scipyenv-src
  tar xzf node-v15.6.0.tar.gz
  cd node-v15.6.0
  
  (make sure scipyenv environment is activated)
  
  ./configure --prefix=$HOME/scipyenv
  make -j4
  make doc
  make install
  
  
  4. Install python packages inside the environment (via pip install ...)
  -----------------------------------------------------------------------
  NOTE: because the environment was created for a python3 environemnt, pip and 
  pip3 are the same
  
  NOTE: do not use --user option because it will install packages 
    in ~/.local/lib/python-x.y/site-packages and therefore bypass the environment
    
  NOTE: is the virtual environemnt has been created with the --system-site-packages
  option, then you may want to pass the '-I' options to pip install command for
  those packages that are already installed systemwide

e.g. pip install -I numpy NOTE: omit -I
    This may flag further needed dependencies, that will have to be installed
    in the environment.
    
    
  
    Package         Dependencies                
                    (installed alongside if not already present
                     NOTE: some dependencies are required
                     by multiple packages and, if installed, pip will verify 
                     their installed versions; therefore, these are listed below
                     only ONCE: the lists are not exhaustive representations of
                     these dependencies)
    ----------------------------------------------------------------------------
    xxhash (optional, not used currently)
    distributed
    blosc
    numpy
    matplotlib      (pyparsing, cycler, kiwisolver, Pillow, python_dateutil, six)
    scipy
    sympy           (mpmath)
    cmocean         (for nice colormaps)
    cmasher         (ditto; brings colorspacious, e13tools, )
    viscm           matplotlib module to visualize colormaps (pip install viscm)
    scikit-learn    (joblib, threadpoolctl)
    scikit-image    (imageio, networkx, decorator, pywavelets, tifffile)
    seaborn         (pandas, pillow, cycler, python-dateutil, pyparsing, six)
    bohek           (for jupyterlab plotting from neuron; also install tornado, typing_extension)
    
    quantities
    pandas          (pytz)
    nixio
    neo
    pyqtgraph
    statsmodels     (patsy)
    pingouin        (urllib3, idna, chardet, certifi, requests, littleutils, 
                     tabulate, pandas_flavor, outdated, xarray)
    pywavelets      (installed by scikit-learn)
    researchpy
    h5py            required for vigra
    nose            required for vigra                            
    sphinx          required for vigra    
                    also installs:
                    (sphinxcontrib-serializinghtml, sphinxcontrib-qthelp, 
                    sphinxcontrib-jsmath, sphinxcontrib-htmlhelp, sphinxcontrib-devhelp, 
                    sphinxcontrib-applehelp, snowballstemmer, imagesize, docutils, 
                    babel, alabaster)
    qimage2ndarray
    imreg_dft                               
    xarray      
    pyxdg
    python-magic    Python interface to the libmagic file type identification library
    nested_lookup
    dpath

    jupyter         (zipp, typing-extensions, ipython-genutils, traitlets,
                    pyrsistent, importlib-metadata, attrs, wcwidth, tornado, pyzmq,
                    ptyprocess, parso, jupyter-core, jsonschema, webencodings, pygments,
                    pycparser, prompt-toolkit, pickleshare, pexpect, nest-asyncio, 
                    nbformat, MarkupSafe, jupyter-client, jedi, backcall, async-generator, 
                    testpath, pandocfilters, nbclient, mistune, jupyterlab-pygments, 
                    jinja2, ipython, entrypoints, defusedxml, cffi, bleach, terminado,
                    Send2Trash, prometheus-client, nbconvert, ipykernel, argon2-cffi, 
                    notebook, widgetsnbextension, qtpy, qtconsole, jupyter-console, 
                    ipywidgets)
    
    NOTE: 2021-06-12 15:46:34 
    jedi 0.18.0 is incompatible with IPython<=7.19; if you have IPython<=7.19 
    installed in scipyenv then force install an earlier jedi version:
        pip install jedi==0.17.2
        
        see also here: 
            https://github.com/davidhalter/jedi/issues/1714
            https://github.com/ipython/ipython/issues/12740
            https://github.com/ipython/ipython/issues/12821
                
    jupyter_qtconsole_colorschemes
    
    NOTE: Scipyen does not aim to replicate the functionality in the jupyter 
        interfaces available - some people may find it easy(er) to work with 
        jupyter notebook and/or jupyterlab.
        
        jupyter notebook is already installed alongside jupyter; jupyterlab can 
        be installed separately.
        
        jupyter notebooks and/or jupyterlab are useful when trying out gui2 module
        in neuron package (for plotting outside of neuron's own gui)
        
    ipyparallel
    jupyter_cms     (woosh)
    jupyterlab      (immutables, contextvars, sniffio, dataclasses, anyio, jupyter-server,
                     json5, nbclassic, jupyterlab-server, )
    
    jupyterlab_templates
    
    jupyterthemes   for theming the jupyter notebook
    
    nodejs - requires installation of a more recent Node.js version (>- 12.0.0)
        in the local environment
        
    
    *** Install Python libraries for storing configuration options unrelated to the GUI:
        NOTE: this is still experimental - testing various configuration libraries
    
    confuse     (pyyaml)
        
        not used, not installed:
            config (pip install config) -- 
                recommended for use inside a virtual environment, which we use here
            
            dynaconf -- python library for software configuration framework, independent
                of the Qt5 framework
                * not very straightforward to use; 
                * not straightforward to permamently store changed configurations 
                    form inside the program
                    
            python-configuration -- alternative to config and dynaconf 
            python-configuration[toml,yaml] -- toml and yaml modules of the above
                * again, saving configuration to files from within the program not straightforward
                
    Optional jupyter kernels:
    octave_kernel   (metakernal)
    gnuplot_kernel
    matlab_kernel   (wurlitzer)
    
    Other modules - functionality complementary to NEURON:
        pyneuroml reader
            (NOTE: pyneuroml may require installation of NeuroML inside scipyenv)
        neurom - SWC reader
        pylmeasure

    # install jupyterlab extensions for bokeh
    jupyter labextension install @jupyter-widgets/jupyterlab-manager
    jupyter labextension install @bokeh/jupyter_bokeh - error current version of jupyterlab not supported
    ValueError: The extension "@bokeh/jupyter_bokeh" does not yet support the current version of JupyterLab.
    NOTE: Kepler 2021-09-20 17:39:04 still -- fails tp build
    
    Building jupyterlab assets (production, minimized)
    An error occurred.
    RuntimeError: JupyterLab failed to build
    See the log file for details:  /tmp/jupyterlab-debug-f7hokh0b.log


    Conflicting Dependencies:
    JupyterLab                        Extension      Package
    >=3.0.3 <3.1.0                    >=2.0.2 <3.0.0 @jupyterlab/application
    >=3.0.2 <3.1.0                    >=2.0.2 <3.0.0 @jupyterlab/apputils
    >=3.0.3 <3.1.0                    >=2.0.2 <3.0.0 @jupyterlab/notebook
    >=3.0.2 <3.1.0                    >=2.0.1 <3.0.0 @jupyterlab/rendermime-interfaces
    >=6.0.2 <6.1.0                    >=5.0.2 <6.0.0 @jupyterlab/services
    See the log file for details:  /tmp/jupyterlab-debug-vqsmr_8t.log
    
  5. Install (download/clone, build/make & install) vigra
  ----------------------------------------------------------------
  5.1 Required depedencies (indluding their development packages)
    NOTE: These are installed system-wide, (i.e. not just in scipyen virtual environment)
    typically via the distribution's software management tools 
    
    TODO: Contemplate installing these inside the virtual environment - especially
        when the environment also has its own (stand-alone) Qt5 build.
  ............................................................................
  NOTE 2021-01-11 18:44:43: some of these may have already been installed with
  their development packaged system-wide - use your distribution software manager
  to verify.
  ............................................................................
  
    cmake, cmake-gui NOTE: needs cmake3 which on opensuse15.2 comes as cmake3 but as cmake on leap15.3
    zlib
    tiff
    jpeg
    png
    fftw3
        and mpich bindings (for neuron)
    hdf5
    openexr
    valgrind
    python3 - effected in the virtual environment!
        numpy, 
        nose, 
        sphinx
    boost-python3 - system-wide
    boost-graph
    boost-threads
    boost-timer
    doxygen
    
  5.2 Clone vigra repo (while in src, with the virtual environment activated):
  ...........................................................................
    cd ~/scipyenv-src
    
    git clone https://github.com/ukoethe/vigra.git
    
    (--> creates ~/scipyenv-src/vigra)
    
  5.3 Create out-of-source build for vigra
  ........................................
  NOTE if inside virtual environment - get out of it!
    5.3.1
    cd ..
    mkdir ~/scipyenv/src/vigra-build (if not already there, see NOTE: 2021-01-14 09:02:07)
    cd ~/scipyenv/src/vigra-build
    
    5.3.2 generate Makefile
    cmake-gui ~/scypienv-src/vigra (run cmake-gui --help for options)
        At first run click "configure" then as cmake variables are set or edited
        as below, press "configure" again
        Inside the CMake gui set the following variables as follows:
            CMAKE_INSTALL_PREFIX (-DCMAKE_INSTALL_PREFIX=) /home/user/scipyenv
            LIB_SUFFIX (-DLIB_SUFFIX=) 64
                    
            - also select in the "WITH" group: 
                boost-thread, boost-graph, openexr, vigranumpy, valgrind
    
            - in the GUI, press configure until all options are satisfied (i.e.,
            i.e. they are NOT highlighted anymore) - check the environment variables 
            mentioned above - remember to press "configure" again
            
            - finally press "Generate" and quit cmake-gui
                
    5.3.3. Build vigra and install
    make
    make doc
    make install (--> installs in scipyenv/doc/vigra and scipyenv/doc/vigranumpy)
    
    cd ..
    
    6. Install (download/clone, make and install) NEURON
    ---------------------------------------------------------------
    6.1 prerequisites: 
        python3-cython (installed system-wide; on OpenSUSE this is 'python3-Cython')
        mpich
        
    6.2 clone git repository (in src)
    
    cd ~/scipyenv-src
    mkdir ~/scipyenv/src/nrn-build (if not present, see NOTE: 2021-01-14 09:02:07)
    
    git clone https://github.com/neuronsimulator/nrn 
    (=> creates ~/scipeynv-src/nrn)
    
    6.3 Configure the neuron build
    
    cd ~/scipyen/src/nrn-build
     NOTE: requires libXcomposite development packages
    cmake-gui ..~/scipyenv-src/nrn
        "Configure" will also pull iv, coreneuron
        CMAKE_INSTALL_PREFIX (-DCMAKE_INSTALL_PREFIX=) ~/scipyenv
        NRN_ENABLE_CORENEURON=true
        NRN_ENABLE_INTERVIEWS=true
        NRN_ENABLE_MECH_DLL_STYLE=true
        NRN_ENABLE_MODULE_INSTALL=true
        NRN_ENABLE_INTERNAL_READLINE=false
        NRN_MODULE_INSTALL --prefix= --home=/home/cezar/scipyenv
        NRN_ENABLE_MPI=true
        NRN_ENABLE_MPI_DYNAMIC=false
        NRN_ENABLE_PYTHON=true (default python3 fallback to python2)
        NRN_ENABLE_PYTHON_DYNAMIC=false
        NRN_ENABLE_RX3D=true
        NRN_ENABLE_SHARED=true
        NRN_ENABLE_TESTS=false
        NRN_ENABLE_THREADS=true
        
    6.4 Build neuron, then install
    make
    make install
    
    properly install neuron python modules inside the site-packages corresponding
    to the environment's python version
    
    cd ~/scipyenv/src/nrn-build/src/nrnpython
    
    python setup.py install 
    (to install nrnpython in site-packages)
    
    Build neuron documentation locally and install locally (see ~/scipyenv-src/nrn/docs/README.md)
    
    cd ~/scipyenv-src/nrn
    pip3 install -r docs/docs_requirements.txt
        --> installs required python packages (e.g.commonmark, sphinx-rtd-theme, 
        recommonmark, plotly, etc) inside the virtual environment
    
    cd ~/scipyenv/src/nrn-build
    make docs
    
    Optionally, copy/move (or, better make a symbolic link) 
    ~/scipyenv/src/nrn/docs/_build to ~/scipyenv/doc/neuron
    
    
    7. Clone scipyenv (for now use the dev branch)
    ----------------------------------------------
    REQUIRES git software (system-wide installation) including gitk and git-gui
    
    7.1 install github cli (for Linux; other platforms may use github desktop app)
    (for various distributions see 
     https://github.com/cli/cli/blob/trunk/docs/install_linux.md)
    
        openSUSE/SUSE Linux (zypper)
            Install:

            sudo zypper addrepo https://cli.github.com/packages/rpm/gh-cli.repo
            sudo zypper ref
            sudo zypper install gh
            
    7.2 (in ~scipyenv, with environment activated)
    
    7.2.1 authenticate with github (if not already done)
        gh auth login ==> select GitHub.com, then when prompted enter username
            and password
            
    7.2.2 Clone scipyen
        gh repo clone ctigaret/scipyen
        
        Then cd into scipyen and verify local repo is uptodate with the relevant
        branches:
            git checkout master
            git pull
            git checkout dev
            git pull
            git checkout work
            git pull
            
        Finally, for development work:
            git checkout dev; make sure to git pull every time
            
    8. Link the nrnipython script (in scipyen/nrnipython):
        cd ~/scipyenv/bin
        ln -s ../scipyen/scipyen
        ln -s ../scipyen/nrnipython/nrnipython nrnipython
        ln -s ../scipyen/nrnipython/nrnipython nrnpython
        ln -s ../scipyen/nrnipython/nrnipython nrnpy
        
        (the last two are just aliases of the first)
        
    9 link the scypien bash script (executable)
        cd ~/scipyenv/bin
        ln -s ../scipyen/scipyen scipyen
        ln -s ../scipyen/noteboook.sh notebook
        ln -s ../scipyen/jupyterlab.sh jopyterlab
    
    10. Other software (optional)
    ----------------------------
    10.1 pygrace -  not installed
    
    10.2 pykde5 - not built, not installed 
        requires sipconfig module which doesn't exist anymore
    
    10.3 cvapp -- not installed, not used - import 3D data from NEURON directly
    
    
    =======================================
    NOTE: 2021-09-15 09:02:26 On Windows 10
    =======================================
    
    python 3.9 (windows installer): choose to place executable on PATH
    virtualenv:
        C:\Users\xxx>pip install virtualenv
        C:\Users\xxx>virtualenv scipyenv
        C:\Users\xxx>cd scipyenv
        C:\Users\xxx>scipyenv\Scripts\activate -->
        (scipyenv) C:\Users\xxx\scipyenv>
        (scipyenv) C:\Users\xxx\scipyenv>pip install PyQt5 --> installs PyQt5-5.5.4, PyQt5-Qt5-5.15.2,PyQt5-sip-12.9.0
        
    
    create C:\Users\xxx\Scripts directory, add it to the registered %PATH%
    environment variable
    
    setx path "%path%;%userprofile%\Scripts;"
    
    then restart the command prompt
    
    Inside the Scripts directory place the following as scipyact.bat
    @echo off
    %userprofile%\scipyenv\Scripts\activate
    echo on
    
    to activate scipyenv inside the command prompt just type 'scipyact'

    
    
    ... proceed with python modules installation as above WHILE in: 
    (scipyenv) C:\Users\xxx\scipyenv (i.e. with environment activated)
        
    Qt (Open source edition) - 
    visual studio community 2019 -  C++ environment only (use python from above, 
                                don't use visual studio's own python)
    
    
    Download vigra binary with sources and documentation for Visual Studio including dependencies
    https://github.com/ukoethe/vigra/releases/download/Version-1-11-1/vigra-1.11.1-win64-vc14.zip
    Extract in C:\Users\xxx\vigra-1.11.1-win64-vc14 => will create vigra-1.11.1 directory in there
